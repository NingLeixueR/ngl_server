syntax = "proto3";


import "db.proto";

package pbnet;
//namespace
//支持 SPEED(速度快，占用最大空间) CODE_SIZE LITE_RUNTIME(效率最高，且占用空间少，不支持反射)
//option optimize_for = LITE_RUNTIME;	//不支持反射，代码和性能会提高不少
option optimize_for = SPEED;

// [请求]心跳协议
message PROBUFF_NET_HEARTBEAT
{
};

// [请求]充值
message PROBUFF_NET_RECHARGE
{
	optional int32 m_rechargeid			= 1;
};

// [回复]充值
message PROBUFF_NET_RECHARGE_RESPONSE
{
	optional int32 m_rechargeid			= 1;
	enum Estat
	{
		Estat_Success		= 0;	// 成功
		Estat_NotRechargeId	= 1;	// 没有找到指定充值id
		Estat_MaxCount		= 2;	// 超过充值最大限制次数
	}
	optional Estat m_stat				= 2;
	optional string m_orderid			= 3;
};

// 通知客户端充值发货
message PROBUFF_NET_DELIVER_GOODS_RECHARGE
{
	optional int32 m_rechargeid			= 1;
	optional string m_orderid			= 2;
	optional int32 m_gold				= 3;
	map<int32,int32> m_items			= 4;
};


// [发送]错误码
message PROBUFF_NET_ERROR
{
	optional string m_errmessage	= 2; // 错误描述
};


// [请求]服务器时间
message PROBUFF_NET_GET_TIME
{
};

// [回复]服务器时间
message PROBUFF_NET_GET_TIME_RESPONSE
{
	optional int32 m_utc			= 1; // 错误码
};

// [请求]获取公告列表
message PROBUFF_NET_NOTICE
{
};

// [回复]获取公告列表
message PROBUFF_NET_NOTICE_RESPONSE
{
	repeated pbdb.db_notice m_notices		= 1;
};

// [请求]登录账号
message PROBUFF_NET_ACOUNT_LOGIN
{
	optional int32 m_area			= 1;	// 区服id
	optional string m_account		= 2;	// 帐号
	optional string m_password		= 3;	// 密码
};

// [回复]登录账号
message PROBUFF_NET_ACOUNT_LOGIN_RESPONSE
{
	optional int32 m_area			= 1;				// 区服id
	optional int64 m_roleid			= 2;				// 玩家id
	optional string m_session		= 3;
	optional string m_account		= 4;				// 帐号
	optional int32 m_gatewayid		= 5;				// 网关id
};

// [请求]玩家登录
message PROBUFF_NET_ROLE_LOGIN
{
	optional int64 m_roleid			= 1;	// 玩家id
	optional string m_session		= 2;
	optional bool m_iscreate		= 3;
	optional int32 m_area			= 4;	// 区服id
	optional int32 m_gatewayid	    = 5;
};

// [请求]获取角色信息
message PROBUFF_NET_ROLE_SYNC
{
};

// [回复]获取角色信息
message PROBUFF_NET_ROLE_SYNC_RESPONSE
{
	optional pbdb.db_role m_role	= 1;
	optional pbdb.db_bag m_bag		= 2;
	optional pbdb.db_task m_task	= 3;
};

// [请求]获取背包信息
message PROBUFF_NET_BAG_SYNC
{
};

// [回复]获取背包信息
message PROBUFF_NET_BAG_SYNC_RESPONSE
{
	optional pbdb.db_bag m_bag			= 1;
};

// [请求]更新背包信息
message PROBUFF_NET_BAG_UPDATE
{
};

// [回复]更新背包信息
message PROBUFF_NET_BAG_UPDATE_RESPONSE
{
	message delitem
	{
		optional int32 m_id				= 1; 
		optional int32 m_count			= 2; 
	};
	message additem
	{
		optional int32 m_id				= 1; 
		optional int32 m_count			= 2; 
	};
	repeated delitem m_delitems					= 1;// 删除(可叠加物品)
	repeated int32 m_delnostackitems			= 2;// 删除(不可叠加物品)
	repeated additem m_additems					= 3;// 增加(可叠加物品)
	repeated int32 m_addnostackitems			= 4;// 增加(不可叠加物品)
	//repeated pbdb.item m_changeitems			= 5;// 改变的物品
};

// [请求]cmd协议
message PROBUFF_NET_CMD
{
	// ## 命令							注释
	// ## /time						获取服务器时间
	// ## /set_rolename				设置角色名称
	// ## /set_rolelv				增加角色等级(负数就是减少)
	// ## /chat						聊天
	// ## /switch					切换game服务器
	// [命令|参数]   参数[parm1*parm2]
	// /set_rolename|libo
	optional string m_cmd						= 1;
};

// [请求]聊天
enum enum_logic_chat 
{
	get_chat_list		= 0;
	chat_speak			= 1;
	updata_speck		= 2;
};

enum enum_chat_channel
{
	enum_chat_zero			= 0;
	enum_chat_ordinary		= 1;	// 本服
	enum_chat_cross_ordinary= 2;	// 跨服
	enum_chat_none			= 3;	// 错误
};

message PROBUFF_NET_CHAT
{
	optional int32 m_type				= 1; // enum_logic_chat
	optional int32 m_channelid			= 2; // enum_chat_channel
	optional string m_content			= 3; // m_type == chat_speak
};

// [回复]聊天
message chatitem
{
	optional int64 m_roleid	= 1;
	optional string m_rolename	= 2;
	optional string m_content	= 3;
	optional int32 m_utc		= 4;
};
	
message PROBUFF_NET_CHAT_RESPONSE
{
	optional int32 m_type				= 1; // enum_logic_chat
	optional int32 m_channelid			= 2; // tab_chat.m_id
	repeated chatitem m_chatlist		= 3; // m_type == get_chat_list || m_type == updata_speck
	optional bool m_stat				= 4; // m_type == chat_speak
};

// [请求]切换线路
message PROBUFF_NET_SWITCH_LINE
{
	optional int32 m_line				= 1;
};

// [回复]切换线路
message PROBUFF_NET_SWITCH_LINE_RESPONSE
{
	optional int32 m_line				= 1;
	optional bool m_stat				= 2;
};

// [请求]获取邮件列表
message PROBUFF_NET_MAIL_LIST
{
};

// [回复]获取邮件列表
message PROBUFF_NET_MAIL_LIST_RESPONSE
{
	map<int32, pbdb.mail> m_mail			= 1; // key mail id
};

// [请求]读取邮件
message PROBUFF_NET_MAIL_READ
{
	optional int64 m_mailid				= 1;
};

// [回复]读取邮件
message PROBUFF_NET_MAIL_READ_RESPONSE
{
	optional int64 m_mailid				= 1;
	optional bool m_stat				= 2;
};

// [请求]领取邮件附件
message PROBUFF_NET_MAIL_DRAW
{
	optional int64 m_mailid				= 1;
};

// [回复]领取邮件附件
message PROBUFF_NET_MAIL_DRAW_RESPONSE
{
	optional int64 m_mailid				= 1;
	optional bool m_stat				= 2;
};

// [请求]领取邮件附件
message PROBUFF_NET_MAIL_DEL
{
	optional int64 m_mailid				= 1;
};

// [回复]领取邮件附件
message PROBUFF_NET_MAIL_DEL_RESPONSE
{
	optional int64 m_mailid				= 1;
	optional bool m_stat				= 2;
};

///////////////////////////////////////////////////////////////
//// ################ [aoi地图相关 Start] ################ ////
//// ##################################################### ////

enum eunit
{
	eunit_role		= 0;		// 玩家单位
	eunit_monster	= 1;		// 怪物单位
	eunit_region	= 2;		// 区域单位
};

message VECTOR2
{
	optional int32 m_x = 1;
	optional int32 m_y = 2;
};

message VECTOR3
{
	optional int32 m_x = 1;
	optional int32 m_y = 2;
	optional int32 m_z = 3;
};

message UNIT_POSITION
{
	optional int64 m_id			= 2;
	optional VECTOR2 m_position = 3;
	optional int32 m_angle		= 4;			// 方向角度[0-360]
	optional int32 m_speed		= 5;			// 速度[米/秒]
};

message UnitAttribute
{
	 optional int32 m_type				= 1;	// EnumAttribute
	 optional int64 m_value				= 2;	// 属性值
};

enum eunitstat
{
	eunitstat_normal			= 0;			// (0)正常状态
	eunitstat_nomove			= 1;			// (1 << 0)无法移动
	eunitstat_nonormalattack	= 2;			// (1 << 1)无法进行普通攻击
	eunitstat_noreleaseskill	= 4;			// (1 << 2)无法释放技能
};

message UnitModule
{
	optional int32 m_mtype				= 1;		// EnumModule
	repeated UnitAttribute m_modules	= 2;
};

message UNIT
{
	optional eunit m_type				= 1;
	optional int64 m_id					= 2;
	optional UNIT_POSITION m_position	= 3;
	repeated UnitModule m_modules		= 4;
	optional eunitstat m_stat			= 5;
};

// 同步属性值
message PROBUFF_NET_SYNC_ATTRIBUTE
{
	repeated UnitModule m_modules		= 1;
};

// 同步玩家信息
message PROBUFF_NET_SYNC_UNIT
{
	repeated UNIT m_units				= 1;
};

// 进入视野
message PROBUFF_NET_ENTER_LEAVE_VIEW
{
	optional bool m_isenter				= 1;
	repeated int64 m_units				= 2;
};

// 同步位置方向信息
message PROBUFF_NET_SYNC_POSITION
{
	map<int64,UNIT_POSITION> m_position = 1;
};

// 修改方向,速度
message PROBUFF_NET_CHANGE_ANGLE
{
	optional UNIT_POSITION m_position		= 1;
};

//// ###################################################### ///
//// ################ [aoi地图相关 Finish] ################ ///
///////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////
//// ################### [匹配玩法 Start] ################# ////
//// ##################################################### /////

enum eplays
{
	eplays_go_undergroundpalace = 0;	// 勇闯地宫
	eplays_count = 1;					// 玩法数量
};

// 发起匹配
message PROBUFF_NET_MATCHING
{
	optional eplays m_type				= 1;
	optional int32 m_tid				= 2; // 玩法tid
};

// 匹配玩家的展示数据
message MATCHING_MEMBER
{
	optional int64 m_id			= 1;			// 玩家id
	optional string m_name		= 2;			// 玩家名称
	optional int32 m_lv			= 3;			// 玩家id
	optional int32 m_begmatch	= 4;			// 开始匹配的时间
	optional bool m_isconfirm	= 5;			// 是否确认
};

// 加入匹配
message PROBUFF_NET_MATCHING_RESPONSE
{
	optional int64 m_id						= 1;			// 加入的玩家
}

//取消匹配
message PROBUFF_NET_MATCHING_CANCEL
{
	optional eplays m_type				= 1;
	optional int64 m_roomid				= 2;	// 房间id
};

enum ematching_cancel_stat
{
	ematching_cancel_success			= 0;
	ematching_cancel_stage				= 1;			// 不是匹配阶段,不能取消匹配
	ematching_cancel_roomnotfind		= 2;			// 指定房间未发现
	ematching_cancel_roommembernotfind  = 3;			// 指定房间中未发现玩家
};

message PROBUFF_NET_MATCHING_CANCEL_RESPONSE
{
	optional eplays m_type						= 1;
	optional ematching_cancel_stat m_stat		= 2;// 取消匹配失败原因
};

enum etype_matching_cancel
{
	etype_matching_cancel_active = 0;		// 主动取消
	etype_matching_cancel_timeout = 1;		// 超时取消
	etype_matching_waitconfirm_timeout = 2; // 等待确认超时取消
	etype_matching_waitcreate_timeout = 3;  // 等待创建玩法超时取消
};

message PROBUFF_NET_MEMBER_MATCHING_CANCEL
{
	optional eplays m_type							= 1;
	optional etype_matching_cancel m_canceltype		= 2;	// 取消的原因
	repeated int64 m_cancelmember					= 3;	// 取消匹配的玩家
};

// 等待确认
message PROBUFF_NET_MATCHING_WAITCONFIRM
{
	optional eplays m_type				= 1;
	optional int32 m_roomid				= 2;	// 房间id
};


// 发起确认
message PROBUFF_NET_MATCHING_CONFIRM
{
	optional eplays m_type				= 1;
	optional int32 m_roomid				= 2;	// 房间id
};

enum ematching_confirm_stat
{
	ematching_confirm_success			= 0;
	ematching_confirm_stage				= 1;			// 不是匹配阶段,不能取消匹配
	ematching_confirm_roomnotfind		= 2;			// 指定房间未发现
	ematching_confirm_roommembernotfind  = 3;			// 指定房间中未发现玩家
};

message PROBUFF_NET_MATCHING_CONFIRM_RESPONSE
{
	optional eplays m_type				= 1;
	optional int32 m_roomid				= 2;	// 房间id
	optional ematching_confirm_stat m_stat = 3;	// 确认状态
};

// 同步玩家匹配确认信息
message PROBUFF_NET_SYNC_MATCHING_CONFIRM
{
	optional eplays m_type				= 1;
	optional int32 m_roomid				= 2;	// 房间id
	repeated int64 m_roleid				= 3;
};

// 同步匹配信息
message PROBUFF_NET_MATCHING_SYNC
{
	optional eplays m_type				= 1;
	optional int32 m_roomid				= 2;	// 房间id
	repeated MATCHING_MEMBER m_member	= 3;
};

// room内的玩家都确认了,准备进入玩法
message PROBUFF_NET_MATCHING_SUCCESS_RESPONSE
{
	optional eplays m_type				= 1;
	optional int32 m_roomid				= 2;	// 房间id
	optional int64 m_playsactorid		= 3;	// 玩法id
};

message PROBUFF_NET_MATCHING_SUCCESS
{
	optional eplays m_type				= 1;
	optional int32 m_roomid				= 2;	// 房间id
	repeated MATCHING_MEMBER m_member	= 3;
	optional int32 m_dataid				= 4;	// 匹配成功后生成的actor的data id
};

// 确认进入玩法
message PROBUFF_NET_ENTER_PLAYS
{
	optional eplays m_type				= 1;
	optional int32 m_roomid				= 2;	// 房间id
};

//// ################### [匹配玩法 Finish] ################# ////
//// ####################################################### ////
/////////////////////////////////////////////////////////////////


// 获取连接kcp-session
message PROBUFF_NET_KCPSESSION
{
	optional int64	m_serverid	= 1;		// 玩家要进行kcp连接的服务器
	optional string m_uip		= 2;
	optional int32	m_uport		= 3;
	optional int32	m_conv		= 4;
};

message PROBUFF_NET_KCPSESSION_RESPONSE
{
	optional string m_kcpsession	= 1;
};


// 领取任务奖励
message PROBUFF_NET_TASK_RECEIVE_AWARD
{
	optional int32	m_taskid	= 1;		// 任务id
};

message drop_item
{
	optional int32	m_item	= 1;
	optional int32	m_count	= 2;
};

message PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE
{
	optional int32	m_taskid			= 1;		// 任务id
	optional bool   m_stat				= 2;		// 是否领取成功
	map<int32,int32> m_drop				= 3;		// 奖励 key:itemid value:itemcount
};

// [请求]创建军团
message PROBUFF_NET_CREATE_FAMIL
{
	optional string m_name = 1;	// 创建军团的名称
}

// [回复]创建军团
message PROBUFF_NET_CREATE_FAMIL_RESPONSE
{
	optional int32  m_stat				= 1;		// 状态
}

// [请求]申请/取消加入军团
message PROBUFF_NET_JOIN_FAMIL
{
	optional int64 m_familid = 1;
	optional bool m_apply = 2;
}

// [回复]加入军团
message PROBUFF_NET_JOIN_FAMIL_RESPONSE
{
	optional int32  m_stat				= 1;		// 状态
}

// [请求]军团长同意/不同意玩家加入军团
message PROBUFF_NET_RATIFY_JOIN_FAMIL
{
	optional int64 m_roleid = 1;	
	optional bool m_ratify = 2;
}

// [回复]军团长同意/不同意玩家加入军团
message PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE
{
	optional int32  m_stat				= 1;		// 状态
}

// [请求]军团长转让军团
message PROBUFF_NET_CEDE_FAMIL
{
	optional int64 m_roleid = 1;
}

// [回复]军团长转让军团
message PROBUFF_NET_CEDE_FAMIL_RESPONSE
{
	optional int32  m_stat				= 1;		// 状态
}


// [请求]离开军团
message PROBUFF_NET_LEAVE_FAMIL
{
	optional int64 m_familid = 1;	
}

// [回复]离开军团
message PROBUFF_NET_LEAVE_FAMIL_RESPONSE
{
	optional int32  m_stat				= 1;		// 状态
}

// [请求]获取军团列表
message PROBUFF_NET_FAMIL_LIST
{	
	optional int64 m_familid = 1;	
}

// [回复]获取军团列表
message PROBUFF_NET_FAMIL_LIST_RESPONSE
{
	optional int64 m_familid			= 1;	
	repeated pbdb.db_family  m_family	= 2;
}

// [请求]修改军团名称
message PROBUFF_NET_CHANGE_FAMILNAME
{
	optional int64 m_familid = 1;	
	optional string m_name = 2;	// 修改军团名称
}

// [回复]修改军团名称
message PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE
{
	optional int32  m_stat				= 1;		// 状态
}

// [请求]军团签到
message PROBUFF_NET_FAMILSIGN
{
	optional int64 m_familid = 1;
}

// [回复]军团签到
message PROBUFF_NET_FAMILSIGN_RESPONSE
{
	optional int32  m_stat				= 1;		// 状态
}

// [回复]恭喜获得x物品
message PROBUFF_NET_REWARD_ITEM_RESPONSE
{
	map<int32,int32>	m_items	= 1;		// 获取的物品 key:物品tid value:物品数量
}

// [请求]获取排行榜
message PROBUFF_NET_RANKLIST
{
	optional pbdb.eranklist m_type				= 1;
};

// [回复]获取排行榜
message PROBUFF_NET_RANKLIST_RESPONSE
{
	optional pbdb.eranklist m_type				= 1;
	repeated pbdb.db_brief m_items			= 2;
};

// [请求]好友信息
message PROBUFF_NET_FRIEND
{
};

// [回复]添加好友
message PROBUFF_NET_FRIEND_RESPONSE
{
	repeated pbdb.db_brief m_friends			= 1;
	repeated pbdb.db_brief m_applyfriends		= 2;
};

// [请求]添加好友
message PROBUFF_NET_ADDFRIEND
{
	optional int64 m_friedid = 1;
};

// [回复]添加好友
message PROBUFF_NET_ADDFRIEND_RESPONSE
{
	optional int64	m_friedid	= 1;
	optional int32  m_stat		= 2;		// 状态
};

// [请求]同意/拒绝添加好友
message PROBUFF_NET_RATIFY_ADDFRIEND
{
	optional int64	m_friedid		= 1;
	optional bool	m_ratify		= 2;
};

// [回复]同意添加好友
message PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE
{
	optional int64	m_friedid		= 1;
	optional bool	m_ratify		= 2;
	optional int32  m_stat			= 3;		// 状态
};

// [请求]删除好友
message PROBUFF_NET_ERASEFRIEND
{
	optional int64 m_friedid = 1;
};

// [回复]删除好友
message PROBUFF_NET_ERASEFRIEND_RESPONSE
{
	optional int64 m_friedid = 1;
	optional int32  m_stat  = 2;		// 状态
};

// [回复]好友上线
message PROBUFF_NET_FRIEND_ROLELOGIN
{
	optional int64 m_friedid = 1;
};
