syntax = "proto3";


import "db.proto";
import "net.proto";

package pbexample;
//namespace
//支持 SPEED(速度快，占用最大空间) CODE_SIZE LITE_RUNTIME(效率最高，且占用空间少，不支持反射)
//option optimize_for = LITE_RUNTIME;	//不支持反射，代码和性能会提高不少
option optimize_for = SPEED;

enum EPLAY_TYPE
{
	EPLAY_GUESS_NUMBER = 0;
}

// 加入玩法
message PROBUFF_NET_EXAMPLE_PLAY_JOIN
{
	optional EPLAY_TYPE m_type		= 1;
};

message PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE
{
	optional int32 m_roomid					= 2; // 房间号
};

message PLAYER
{
	optional pbdb.db_brief m_players		= 1; // 玩家基本信息
	optional bool m_isconfirm				= 2; // 是否确认
};

// 同步匹配信息
message PROBUFF_NET_EXAMPLE_PLAY_MATCHING
{
	optional int32 m_roomid					= 1; // 房间号
	optional int32 m_totalnumber			= 2; // 需要的总人数
	optional int64 m_roomcreate				= 3; // 房间创建时间
	optional int64 m_roomready				= 4; // 房间就绪时间
	repeated PLAYER m_players				= 5; // 匹配到的玩家
};


	enum PLAY_EERROR_CODE
	{
		EERROR_CODE_SUCCESS = 0;
		EERROR_CODE_TIMEOUT = 1;			// 超时
		EERROR_CODE_CANCEL  = 2;			// 有玩家取消匹配
		EERROR_CODE_CURRENT_CANCEL  = 3;	// 当前不允许取消匹配
		EERROR_CODE_NOTFINDROOM = 4;		// 未找到指定room
		EERROR_CODE_ROOM_DESTORY = 5;		// 房间被销毁
		EERROR_CODE_FINISH = 6;				// 匹配完成销毁房间
	}

// 匹配结果
message PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT
{
	optional PLAY_EERROR_CODE m_errorcode		= 1;
	optional int32 m_roomid					= 2; // 房间号
};

// 是否需要确认加入
message PROBUFF_NET_EXAMPLE_PLAY_CONFIRM
{
	optional bool m_isconfirm				= 1; // 是否需要确认加入
	optional int32 m_roomid					= 2; // 房间号
};

// 玩家确认加入
message PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM
{
	optional bool m_isconfirm				= 1; // 是否需要确认加入
	optional int32 m_roomid					= 2; // 房间号
};

// 取消匹配
message PROBUFF_NET_EXAMPLE_PLAY_CANCEL
{
	optional EPLAY_TYPE m_type				= 1;
	optional int32 m_roomid					= 2; // 房间号
};

///<<<<<<<<<<<<< 猜数字 





///>>>>>>>>>>>>> 猜数字 