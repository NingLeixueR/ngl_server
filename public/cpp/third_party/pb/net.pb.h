// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_net_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_net_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "db.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_net_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_net_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[87]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_net_2eproto;
namespace pbnet {
class PROBUFF_NET_ACOUNT_LOGIN;
class PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal;
extern PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal _PROBUFF_NET_ACOUNT_LOGIN_default_instance_;
class PROBUFF_NET_ACOUNT_LOGIN_RESPONSE;
class PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal _PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_;
class PROBUFF_NET_BAG_SYNC;
class PROBUFF_NET_BAG_SYNCDefaultTypeInternal;
extern PROBUFF_NET_BAG_SYNCDefaultTypeInternal _PROBUFF_NET_BAG_SYNC_default_instance_;
class PROBUFF_NET_BAG_SYNC_RESPONSE;
class PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal _PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_;
class PROBUFF_NET_BAG_UPDATE;
class PROBUFF_NET_BAG_UPDATEDefaultTypeInternal;
extern PROBUFF_NET_BAG_UPDATEDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_default_instance_;
class PROBUFF_NET_BAG_UPDATE_additem;
class PROBUFF_NET_BAG_UPDATE_additemDefaultTypeInternal;
extern PROBUFF_NET_BAG_UPDATE_additemDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_additem_default_instance_;
class PROBUFF_NET_BAG_UPDATE_delitem;
class PROBUFF_NET_BAG_UPDATE_delitemDefaultTypeInternal;
extern PROBUFF_NET_BAG_UPDATE_delitemDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_delitem_default_instance_;
class PROBUFF_NET_CHANGE_ANGLE;
class PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal;
extern PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal _PROBUFF_NET_CHANGE_ANGLE_default_instance_;
class PROBUFF_NET_CHAT;
class PROBUFF_NET_CHATDefaultTypeInternal;
extern PROBUFF_NET_CHATDefaultTypeInternal _PROBUFF_NET_CHAT_default_instance_;
class PROBUFF_NET_CHAT_RESPONSE;
class PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal _PROBUFF_NET_CHAT_RESPONSE_default_instance_;
class PROBUFF_NET_CMD;
class PROBUFF_NET_CMDDefaultTypeInternal;
extern PROBUFF_NET_CMDDefaultTypeInternal _PROBUFF_NET_CMD_default_instance_;
class PROBUFF_NET_DELIVER_GOODS_RECHARGE;
class PROBUFF_NET_DELIVER_GOODS_RECHARGEDefaultTypeInternal;
extern PROBUFF_NET_DELIVER_GOODS_RECHARGEDefaultTypeInternal _PROBUFF_NET_DELIVER_GOODS_RECHARGE_default_instance_;
class PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse;
class PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUseDefaultTypeInternal;
extern PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse_default_instance_;
class PROBUFF_NET_ENTER_LEAVE_VIEW;
class PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal;
extern PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal _PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_;
class PROBUFF_NET_ERROR;
class PROBUFF_NET_ERRORDefaultTypeInternal;
extern PROBUFF_NET_ERRORDefaultTypeInternal _PROBUFF_NET_ERROR_default_instance_;
class PROBUFF_NET_FAMIL_CEDE;
class PROBUFF_NET_FAMIL_CEDEDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_CEDEDefaultTypeInternal _PROBUFF_NET_FAMIL_CEDE_default_instance_;
class PROBUFF_NET_FAMIL_CEDE_RESPONSE;
class PROBUFF_NET_FAMIL_CEDE_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_CEDE_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_CEDE_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_CHANGENAME;
class PROBUFF_NET_FAMIL_CHANGENAMEDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_CHANGENAMEDefaultTypeInternal _PROBUFF_NET_FAMIL_CHANGENAME_default_instance_;
class PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE;
class PROBUFF_NET_FAMIL_CHANGENAME_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_CHANGENAME_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_CREATE;
class PROBUFF_NET_FAMIL_CREATEDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_CREATEDefaultTypeInternal _PROBUFF_NET_FAMIL_CREATE_default_instance_;
class PROBUFF_NET_FAMIL_CREATE_RESPONSE;
class PROBUFF_NET_FAMIL_CREATE_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_CREATE_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_CREATE_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_INFO;
class PROBUFF_NET_FAMIL_INFODefaultTypeInternal;
extern PROBUFF_NET_FAMIL_INFODefaultTypeInternal _PROBUFF_NET_FAMIL_INFO_default_instance_;
class PROBUFF_NET_FAMIL_INFO_RESPONSE;
class PROBUFF_NET_FAMIL_INFO_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_INFO_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_INFO_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_JOIN;
class PROBUFF_NET_FAMIL_JOINDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_JOINDefaultTypeInternal _PROBUFF_NET_FAMIL_JOIN_default_instance_;
class PROBUFF_NET_FAMIL_JOIN_RESPONSE;
class PROBUFF_NET_FAMIL_JOIN_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_JOIN_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_JOIN_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_LEAVE;
class PROBUFF_NET_FAMIL_LEAVEDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_LEAVEDefaultTypeInternal _PROBUFF_NET_FAMIL_LEAVE_default_instance_;
class PROBUFF_NET_FAMIL_LEAVE_RESPONSE;
class PROBUFF_NET_FAMIL_LEAVE_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_LEAVE_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_LEAVE_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_LIST;
class PROBUFF_NET_FAMIL_LISTDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_LISTDefaultTypeInternal _PROBUFF_NET_FAMIL_LIST_default_instance_;
class PROBUFF_NET_FAMIL_LIST_RESPONSE;
class PROBUFF_NET_FAMIL_LIST_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_LIST_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_LIST_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_RATIFY_JOIN;
class PROBUFF_NET_FAMIL_RATIFY_JOINDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_RATIFY_JOINDefaultTypeInternal _PROBUFF_NET_FAMIL_RATIFY_JOIN_default_instance_;
class PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE;
class PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_SIGN;
class PROBUFF_NET_FAMIL_SIGNDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_SIGNDefaultTypeInternal _PROBUFF_NET_FAMIL_SIGN_default_instance_;
class PROBUFF_NET_FAMIL_SIGN_RESPONSE;
class PROBUFF_NET_FAMIL_SIGN_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_SIGN_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_SIGN_RESPONSE_default_instance_;
class PROBUFF_NET_FRIEND;
class PROBUFF_NET_FRIENDDefaultTypeInternal;
extern PROBUFF_NET_FRIENDDefaultTypeInternal _PROBUFF_NET_FRIEND_default_instance_;
class PROBUFF_NET_FRIEND_ADD;
class PROBUFF_NET_FRIEND_ADDDefaultTypeInternal;
extern PROBUFF_NET_FRIEND_ADDDefaultTypeInternal _PROBUFF_NET_FRIEND_ADD_default_instance_;
class PROBUFF_NET_FRIEND_ADD_RESPONSE;
class PROBUFF_NET_FRIEND_ADD_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FRIEND_ADD_RESPONSEDefaultTypeInternal _PROBUFF_NET_FRIEND_ADD_RESPONSE_default_instance_;
class PROBUFF_NET_FRIEND_ERASE;
class PROBUFF_NET_FRIEND_ERASEDefaultTypeInternal;
extern PROBUFF_NET_FRIEND_ERASEDefaultTypeInternal _PROBUFF_NET_FRIEND_ERASE_default_instance_;
class PROBUFF_NET_FRIEND_ERASE_RESPONSE;
class PROBUFF_NET_FRIEND_ERASE_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FRIEND_ERASE_RESPONSEDefaultTypeInternal _PROBUFF_NET_FRIEND_ERASE_RESPONSE_default_instance_;
class PROBUFF_NET_FRIEND_RATIFY_ADD;
class PROBUFF_NET_FRIEND_RATIFY_ADDDefaultTypeInternal;
extern PROBUFF_NET_FRIEND_RATIFY_ADDDefaultTypeInternal _PROBUFF_NET_FRIEND_RATIFY_ADD_default_instance_;
class PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE;
class PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSEDefaultTypeInternal _PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE_default_instance_;
class PROBUFF_NET_FRIEND_RESPONSE;
class PROBUFF_NET_FRIEND_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FRIEND_RESPONSEDefaultTypeInternal _PROBUFF_NET_FRIEND_RESPONSE_default_instance_;
class PROBUFF_NET_GET_TIME;
class PROBUFF_NET_GET_TIMEDefaultTypeInternal;
extern PROBUFF_NET_GET_TIMEDefaultTypeInternal _PROBUFF_NET_GET_TIME_default_instance_;
class PROBUFF_NET_GET_TIME_RESPONSE;
class PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal _PROBUFF_NET_GET_TIME_RESPONSE_default_instance_;
class PROBUFF_NET_HEARTBEAT;
class PROBUFF_NET_HEARTBEATDefaultTypeInternal;
extern PROBUFF_NET_HEARTBEATDefaultTypeInternal _PROBUFF_NET_HEARTBEAT_default_instance_;
class PROBUFF_NET_KCPSESSION;
class PROBUFF_NET_KCPSESSIONDefaultTypeInternal;
extern PROBUFF_NET_KCPSESSIONDefaultTypeInternal _PROBUFF_NET_KCPSESSION_default_instance_;
class PROBUFF_NET_KCPSESSION_RESPONSE;
class PROBUFF_NET_KCPSESSION_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_KCPSESSION_RESPONSEDefaultTypeInternal _PROBUFF_NET_KCPSESSION_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_DEL;
class PROBUFF_NET_MAIL_DELDefaultTypeInternal;
extern PROBUFF_NET_MAIL_DELDefaultTypeInternal _PROBUFF_NET_MAIL_DEL_default_instance_;
class PROBUFF_NET_MAIL_DEL_RESPONSE;
class PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_DRAW;
class PROBUFF_NET_MAIL_DRAWDefaultTypeInternal;
extern PROBUFF_NET_MAIL_DRAWDefaultTypeInternal _PROBUFF_NET_MAIL_DRAW_default_instance_;
class PROBUFF_NET_MAIL_DRAW_RESPONSE;
class PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_LIST;
class PROBUFF_NET_MAIL_LISTDefaultTypeInternal;
extern PROBUFF_NET_MAIL_LISTDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_default_instance_;
class PROBUFF_NET_MAIL_LIST_RESPONSE;
class PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse;
class PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUseDefaultTypeInternal;
extern PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse_default_instance_;
class PROBUFF_NET_MAIL_READ;
class PROBUFF_NET_MAIL_READDefaultTypeInternal;
extern PROBUFF_NET_MAIL_READDefaultTypeInternal _PROBUFF_NET_MAIL_READ_default_instance_;
class PROBUFF_NET_MAIL_READ_RESPONSE;
class PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_;
class PROBUFF_NET_MSG_RESPONSE;
class PROBUFF_NET_MSG_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MSG_RESPONSEDefaultTypeInternal _PROBUFF_NET_MSG_RESPONSE_default_instance_;
class PROBUFF_NET_NOTICE;
class PROBUFF_NET_NOTICEDefaultTypeInternal;
extern PROBUFF_NET_NOTICEDefaultTypeInternal _PROBUFF_NET_NOTICE_default_instance_;
class PROBUFF_NET_NOTICE_RESPONSE;
class PROBUFF_NET_NOTICE_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_NOTICE_RESPONSEDefaultTypeInternal _PROBUFF_NET_NOTICE_RESPONSE_default_instance_;
class PROBUFF_NET_RANKLIST;
class PROBUFF_NET_RANKLISTDefaultTypeInternal;
extern PROBUFF_NET_RANKLISTDefaultTypeInternal _PROBUFF_NET_RANKLIST_default_instance_;
class PROBUFF_NET_RANKLIST_RESPONSE;
class PROBUFF_NET_RANKLIST_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_RANKLIST_RESPONSEDefaultTypeInternal _PROBUFF_NET_RANKLIST_RESPONSE_default_instance_;
class PROBUFF_NET_RECHARGE;
class PROBUFF_NET_RECHARGEDefaultTypeInternal;
extern PROBUFF_NET_RECHARGEDefaultTypeInternal _PROBUFF_NET_RECHARGE_default_instance_;
class PROBUFF_NET_RECHARGE_RESPONSE;
class PROBUFF_NET_RECHARGE_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_RECHARGE_RESPONSEDefaultTypeInternal _PROBUFF_NET_RECHARGE_RESPONSE_default_instance_;
class PROBUFF_NET_REWARD_ITEM_RESPONSE;
class PROBUFF_NET_REWARD_ITEM_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_REWARD_ITEM_RESPONSEDefaultTypeInternal _PROBUFF_NET_REWARD_ITEM_RESPONSE_default_instance_;
class PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse;
class PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUseDefaultTypeInternal;
extern PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse_default_instance_;
class PROBUFF_NET_ROLESTAT;
class PROBUFF_NET_ROLESTATDefaultTypeInternal;
extern PROBUFF_NET_ROLESTATDefaultTypeInternal _PROBUFF_NET_ROLESTAT_default_instance_;
class PROBUFF_NET_ROLE_LOGIN;
class PROBUFF_NET_ROLE_LOGINDefaultTypeInternal;
extern PROBUFF_NET_ROLE_LOGINDefaultTypeInternal _PROBUFF_NET_ROLE_LOGIN_default_instance_;
class PROBUFF_NET_ROLE_SYNC;
class PROBUFF_NET_ROLE_SYNCDefaultTypeInternal;
extern PROBUFF_NET_ROLE_SYNCDefaultTypeInternal _PROBUFF_NET_ROLE_SYNC_default_instance_;
class PROBUFF_NET_ROLE_SYNC_RESPONSE;
class PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal _PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_;
class PROBUFF_NET_SWITCH_LINE;
class PROBUFF_NET_SWITCH_LINEDefaultTypeInternal;
extern PROBUFF_NET_SWITCH_LINEDefaultTypeInternal _PROBUFF_NET_SWITCH_LINE_default_instance_;
class PROBUFF_NET_SWITCH_LINE_RESPONSE;
class PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal _PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_;
class PROBUFF_NET_SYNC_ATTRIBUTE;
class PROBUFF_NET_SYNC_ATTRIBUTEDefaultTypeInternal;
extern PROBUFF_NET_SYNC_ATTRIBUTEDefaultTypeInternal _PROBUFF_NET_SYNC_ATTRIBUTE_default_instance_;
class PROBUFF_NET_SYNC_POSITION;
class PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal;
extern PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal _PROBUFF_NET_SYNC_POSITION_default_instance_;
class PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse;
class PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUseDefaultTypeInternal;
extern PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse_default_instance_;
class PROBUFF_NET_SYNC_UNIT;
class PROBUFF_NET_SYNC_UNITDefaultTypeInternal;
extern PROBUFF_NET_SYNC_UNITDefaultTypeInternal _PROBUFF_NET_SYNC_UNIT_default_instance_;
class PROBUFF_NET_TASK_RECEIVE_AWARD;
class PROBUFF_NET_TASK_RECEIVE_AWARDDefaultTypeInternal;
extern PROBUFF_NET_TASK_RECEIVE_AWARDDefaultTypeInternal _PROBUFF_NET_TASK_RECEIVE_AWARD_default_instance_;
class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE;
class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSEDefaultTypeInternal _PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_default_instance_;
class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse;
class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUseDefaultTypeInternal;
extern PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse_default_instance_;
class PROBUFF_NET_TESTLUA;
class PROBUFF_NET_TESTLUADefaultTypeInternal;
extern PROBUFF_NET_TESTLUADefaultTypeInternal _PROBUFF_NET_TESTLUA_default_instance_;
class PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse;
class PROBUFF_NET_TESTLUA_MdataEntry_DoNotUseDefaultTypeInternal;
extern PROBUFF_NET_TESTLUA_MdataEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse_default_instance_;
class UNIT;
class UNITDefaultTypeInternal;
extern UNITDefaultTypeInternal _UNIT_default_instance_;
class UNIT_POSITION;
class UNIT_POSITIONDefaultTypeInternal;
extern UNIT_POSITIONDefaultTypeInternal _UNIT_POSITION_default_instance_;
class UnitAttribute;
class UnitAttributeDefaultTypeInternal;
extern UnitAttributeDefaultTypeInternal _UnitAttribute_default_instance_;
class UnitModule;
class UnitModuleDefaultTypeInternal;
extern UnitModuleDefaultTypeInternal _UnitModule_default_instance_;
class VECTOR2;
class VECTOR2DefaultTypeInternal;
extern VECTOR2DefaultTypeInternal _VECTOR2_default_instance_;
class VECTOR3;
class VECTOR3DefaultTypeInternal;
extern VECTOR3DefaultTypeInternal _VECTOR3_default_instance_;
class chatitem;
class chatitemDefaultTypeInternal;
extern chatitemDefaultTypeInternal _chatitem_default_instance_;
class drop_item;
class drop_itemDefaultTypeInternal;
extern drop_itemDefaultTypeInternal _drop_item_default_instance_;
}  // namespace pbnet
PROTOBUF_NAMESPACE_OPEN
template<> ::pbnet::PROBUFF_NET_ACOUNT_LOGIN* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ACOUNT_LOGIN>(Arena*);
template<> ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_BAG_SYNC* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_SYNC>(Arena*);
template<> ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_BAG_UPDATE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_UPDATE>(Arena*);
template<> ::pbnet::PROBUFF_NET_BAG_UPDATE_additem* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_UPDATE_additem>(Arena*);
template<> ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_UPDATE_delitem>(Arena*);
template<> ::pbnet::PROBUFF_NET_CHANGE_ANGLE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CHANGE_ANGLE>(Arena*);
template<> ::pbnet::PROBUFF_NET_CHAT* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CHAT>(Arena*);
template<> ::pbnet::PROBUFF_NET_CHAT_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CHAT_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_CMD* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CMD>(Arena*);
template<> ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE>(Arena*);
template<> ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse>(Arena*);
template<> ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW>(Arena*);
template<> ::pbnet::PROBUFF_NET_ERROR* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ERROR>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_CEDE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_CEDE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_CHANGENAME>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_CREATE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_CREATE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_INFO* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_INFO>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_JOIN* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_JOIN>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_LEAVE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_LEAVE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_LIST* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_LIST>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_SIGN* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_SIGN>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FRIEND* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FRIEND>(Arena*);
template<> ::pbnet::PROBUFF_NET_FRIEND_ADD* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FRIEND_ADD>(Arena*);
template<> ::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FRIEND_ERASE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FRIEND_ERASE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD>(Arena*);
template<> ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FRIEND_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FRIEND_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_GET_TIME* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_GET_TIME>(Arena*);
template<> ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_GET_TIME_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_HEARTBEAT* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_HEARTBEAT>(Arena*);
template<> ::pbnet::PROBUFF_NET_KCPSESSION* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_KCPSESSION>(Arena*);
template<> ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_DEL* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_DEL>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_DRAW* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_DRAW>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_LIST* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_LIST>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_READ* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_READ>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_MSG_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MSG_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_NOTICE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_NOTICE>(Arena*);
template<> ::pbnet::PROBUFF_NET_NOTICE_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_NOTICE_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_RANKLIST* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_RANKLIST>(Arena*);
template<> ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_RANKLIST_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_RECHARGE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_RECHARGE>(Arena*);
template<> ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_RECHARGE_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse>(Arena*);
template<> ::pbnet::PROBUFF_NET_ROLESTAT* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ROLESTAT>(Arena*);
template<> ::pbnet::PROBUFF_NET_ROLE_LOGIN* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ROLE_LOGIN>(Arena*);
template<> ::pbnet::PROBUFF_NET_ROLE_SYNC* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ROLE_SYNC>(Arena*);
template<> ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_SWITCH_LINE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SWITCH_LINE>(Arena*);
template<> ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE>(Arena*);
template<> ::pbnet::PROBUFF_NET_SYNC_POSITION* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SYNC_POSITION>(Arena*);
template<> ::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse>(Arena*);
template<> ::pbnet::PROBUFF_NET_SYNC_UNIT* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SYNC_UNIT>(Arena*);
template<> ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD>(Arena*);
template<> ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse>(Arena*);
template<> ::pbnet::PROBUFF_NET_TESTLUA* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_TESTLUA>(Arena*);
template<> ::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse>(Arena*);
template<> ::pbnet::UNIT* Arena::CreateMaybeMessage<::pbnet::UNIT>(Arena*);
template<> ::pbnet::UNIT_POSITION* Arena::CreateMaybeMessage<::pbnet::UNIT_POSITION>(Arena*);
template<> ::pbnet::UnitAttribute* Arena::CreateMaybeMessage<::pbnet::UnitAttribute>(Arena*);
template<> ::pbnet::UnitModule* Arena::CreateMaybeMessage<::pbnet::UnitModule>(Arena*);
template<> ::pbnet::VECTOR2* Arena::CreateMaybeMessage<::pbnet::VECTOR2>(Arena*);
template<> ::pbnet::VECTOR3* Arena::CreateMaybeMessage<::pbnet::VECTOR3>(Arena*);
template<> ::pbnet::chatitem* Arena::CreateMaybeMessage<::pbnet::chatitem>(Arena*);
template<> ::pbnet::drop_item* Arena::CreateMaybeMessage<::pbnet::drop_item>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pbnet {

enum PROBUFF_NET_RECHARGE_RESPONSE_Estat : int {
  PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_Success = 0,
  PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_NotRechargeId = 1,
  PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MaxCount = 2,
  PROBUFF_NET_RECHARGE_RESPONSE_Estat_PROBUFF_NET_RECHARGE_RESPONSE_Estat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PROBUFF_NET_RECHARGE_RESPONSE_Estat_PROBUFF_NET_RECHARGE_RESPONSE_Estat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PROBUFF_NET_RECHARGE_RESPONSE_Estat_IsValid(int value);
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MIN = PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_Success;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MAX = PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MaxCount;
constexpr int PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_ARRAYSIZE = PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_RECHARGE_RESPONSE_Estat_descriptor();
template<typename T>
inline const std::string& PROBUFF_NET_RECHARGE_RESPONSE_Estat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PROBUFF_NET_RECHARGE_RESPONSE_Estat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PROBUFF_NET_RECHARGE_RESPONSE_Estat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_descriptor(), enum_t_value);
}
inline bool PROBUFF_NET_RECHARGE_RESPONSE_Estat_Parse(
    const std::string& name, PROBUFF_NET_RECHARGE_RESPONSE_Estat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PROBUFF_NET_RECHARGE_RESPONSE_Estat>(
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_descriptor(), name, value);
}
enum PROBUFF_NET_ROLESTAT_stat : int {
  PROBUFF_NET_ROLESTAT_stat_online = 0,
  PROBUFF_NET_ROLESTAT_stat_offline = 1,
  PROBUFF_NET_ROLESTAT_stat_PROBUFF_NET_ROLESTAT_stat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PROBUFF_NET_ROLESTAT_stat_PROBUFF_NET_ROLESTAT_stat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PROBUFF_NET_ROLESTAT_stat_IsValid(int value);
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT_stat_stat_MIN = PROBUFF_NET_ROLESTAT_stat_online;
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT_stat_stat_MAX = PROBUFF_NET_ROLESTAT_stat_offline;
constexpr int PROBUFF_NET_ROLESTAT_stat_stat_ARRAYSIZE = PROBUFF_NET_ROLESTAT_stat_stat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_ROLESTAT_stat_descriptor();
template<typename T>
inline const std::string& PROBUFF_NET_ROLESTAT_stat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PROBUFF_NET_ROLESTAT_stat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PROBUFF_NET_ROLESTAT_stat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PROBUFF_NET_ROLESTAT_stat_descriptor(), enum_t_value);
}
inline bool PROBUFF_NET_ROLESTAT_stat_Parse(
    const std::string& name, PROBUFF_NET_ROLESTAT_stat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PROBUFF_NET_ROLESTAT_stat>(
    PROBUFF_NET_ROLESTAT_stat_descriptor(), name, value);
}
enum PROBUFF_NET_ROLESTAT_logic_stat : int {
  PROBUFF_NET_ROLESTAT_logic_stat_friends = 0,
  PROBUFF_NET_ROLESTAT_logic_stat_familyer = 1,
  PROBUFF_NET_ROLESTAT_logic_stat_PROBUFF_NET_ROLESTAT_logic_stat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PROBUFF_NET_ROLESTAT_logic_stat_PROBUFF_NET_ROLESTAT_logic_stat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PROBUFF_NET_ROLESTAT_logic_stat_IsValid(int value);
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT_logic_stat_logic_stat_MIN = PROBUFF_NET_ROLESTAT_logic_stat_friends;
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT_logic_stat_logic_stat_MAX = PROBUFF_NET_ROLESTAT_logic_stat_familyer;
constexpr int PROBUFF_NET_ROLESTAT_logic_stat_logic_stat_ARRAYSIZE = PROBUFF_NET_ROLESTAT_logic_stat_logic_stat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_ROLESTAT_logic_stat_descriptor();
template<typename T>
inline const std::string& PROBUFF_NET_ROLESTAT_logic_stat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PROBUFF_NET_ROLESTAT_logic_stat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PROBUFF_NET_ROLESTAT_logic_stat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PROBUFF_NET_ROLESTAT_logic_stat_descriptor(), enum_t_value);
}
inline bool PROBUFF_NET_ROLESTAT_logic_stat_Parse(
    const std::string& name, PROBUFF_NET_ROLESTAT_logic_stat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PROBUFF_NET_ROLESTAT_logic_stat>(
    PROBUFF_NET_ROLESTAT_logic_stat_descriptor(), name, value);
}
enum ENUM_LOGIC_CHAT : int {
  ENUM_GET_CHAT_LIST = 0,
  ENUM_CHAT_SPEAK = 1,
  ENUM_UPDATA_SPEAK = 2,
  ENUM_LOGIC_CHAT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENUM_LOGIC_CHAT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENUM_LOGIC_CHAT_IsValid(int value);
constexpr ENUM_LOGIC_CHAT ENUM_LOGIC_CHAT_MIN = ENUM_GET_CHAT_LIST;
constexpr ENUM_LOGIC_CHAT ENUM_LOGIC_CHAT_MAX = ENUM_UPDATA_SPEAK;
constexpr int ENUM_LOGIC_CHAT_ARRAYSIZE = ENUM_LOGIC_CHAT_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_LOGIC_CHAT_descriptor();
template<typename T>
inline const std::string& ENUM_LOGIC_CHAT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENUM_LOGIC_CHAT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENUM_LOGIC_CHAT_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENUM_LOGIC_CHAT_descriptor(), enum_t_value);
}
inline bool ENUM_LOGIC_CHAT_Parse(
    const std::string& name, ENUM_LOGIC_CHAT* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENUM_LOGIC_CHAT>(
    ENUM_LOGIC_CHAT_descriptor(), name, value);
}
enum ENUM_CHAT_CHANNEL : int {
  ENUM_CHAT_CHANNEL_NULL = 0,
  ENUM_CHAT_CHANNEL_ORDINARY = 1,
  ENUM_CHAT_CHANNEL_CROSS_ORDINARY = 2,
  ENUM_CHAT_CHANNEL_NONE = 3,
  ENUM_CHAT_CHANNEL_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENUM_CHAT_CHANNEL_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENUM_CHAT_CHANNEL_IsValid(int value);
constexpr ENUM_CHAT_CHANNEL ENUM_CHAT_CHANNEL_MIN = ENUM_CHAT_CHANNEL_NULL;
constexpr ENUM_CHAT_CHANNEL ENUM_CHAT_CHANNEL_MAX = ENUM_CHAT_CHANNEL_NONE;
constexpr int ENUM_CHAT_CHANNEL_ARRAYSIZE = ENUM_CHAT_CHANNEL_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_CHAT_CHANNEL_descriptor();
template<typename T>
inline const std::string& ENUM_CHAT_CHANNEL_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENUM_CHAT_CHANNEL>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENUM_CHAT_CHANNEL_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENUM_CHAT_CHANNEL_descriptor(), enum_t_value);
}
inline bool ENUM_CHAT_CHANNEL_Parse(
    const std::string& name, ENUM_CHAT_CHANNEL* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENUM_CHAT_CHANNEL>(
    ENUM_CHAT_CHANNEL_descriptor(), name, value);
}
enum eunit : int {
  eunit_role = 0,
  eunit_monster = 1,
  eunit_region = 2,
  eunit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eunit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eunit_IsValid(int value);
constexpr eunit eunit_MIN = eunit_role;
constexpr eunit eunit_MAX = eunit_region;
constexpr int eunit_ARRAYSIZE = eunit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eunit_descriptor();
template<typename T>
inline const std::string& eunit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eunit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eunit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eunit_descriptor(), enum_t_value);
}
inline bool eunit_Parse(
    const std::string& name, eunit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eunit>(
    eunit_descriptor(), name, value);
}
enum eunitstat : int {
  eunitstat_normal = 0,
  eunitstat_nomove = 1,
  eunitstat_nonormalattack = 2,
  eunitstat_noreleaseskill = 4,
  eunitstat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eunitstat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eunitstat_IsValid(int value);
constexpr eunitstat eunitstat_MIN = eunitstat_normal;
constexpr eunitstat eunitstat_MAX = eunitstat_noreleaseskill;
constexpr int eunitstat_ARRAYSIZE = eunitstat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eunitstat_descriptor();
template<typename T>
inline const std::string& eunitstat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eunitstat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eunitstat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eunitstat_descriptor(), enum_t_value);
}
inline bool eunitstat_Parse(
    const std::string& name, eunitstat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eunitstat>(
    eunitstat_descriptor(), name, value);
}
// ===================================================================

class PROBUFF_NET_MSG_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MSG_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MSG_RESPONSE() : PROBUFF_NET_MSG_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_MSG_RESPONSE();

  PROBUFF_NET_MSG_RESPONSE(const PROBUFF_NET_MSG_RESPONSE& from);
  PROBUFF_NET_MSG_RESPONSE(PROBUFF_NET_MSG_RESPONSE&& from) noexcept
    : PROBUFF_NET_MSG_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MSG_RESPONSE& operator=(const PROBUFF_NET_MSG_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MSG_RESPONSE& operator=(PROBUFF_NET_MSG_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MSG_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MSG_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MSG_RESPONSE*>(
               &_PROBUFF_NET_MSG_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PROBUFF_NET_MSG_RESPONSE& a, PROBUFF_NET_MSG_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MSG_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MSG_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MSG_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MSG_RESPONSE>(nullptr);
  }

  PROBUFF_NET_MSG_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MSG_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MSG_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_MSG_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MSG_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MSG_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MSG_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmsgFieldNumber = 1,
  };
  // string mmsg = 1;
  bool has_mmsg() const;
  private:
  bool _internal_has_mmsg() const;
  public:
  void clear_mmsg();
  const std::string& mmsg() const;
  void set_mmsg(const std::string& value);
  void set_mmsg(std::string&& value);
  void set_mmsg(const char* value);
  void set_mmsg(const char* value, size_t size);
  std::string* mutable_mmsg();
  std::string* release_mmsg();
  void set_allocated_mmsg(std::string* mmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mmsg(
      std::string* mmsg);
  private:
  const std::string& _internal_mmsg() const;
  void _internal_set_mmsg(const std::string& value);
  std::string* _internal_mutable_mmsg();
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MSG_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mmsg_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_HEARTBEAT PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_HEARTBEAT) */ {
 public:
  inline PROBUFF_NET_HEARTBEAT() : PROBUFF_NET_HEARTBEAT(nullptr) {};
  virtual ~PROBUFF_NET_HEARTBEAT();

  PROBUFF_NET_HEARTBEAT(const PROBUFF_NET_HEARTBEAT& from);
  PROBUFF_NET_HEARTBEAT(PROBUFF_NET_HEARTBEAT&& from) noexcept
    : PROBUFF_NET_HEARTBEAT() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_HEARTBEAT& operator=(const PROBUFF_NET_HEARTBEAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_HEARTBEAT& operator=(PROBUFF_NET_HEARTBEAT&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_HEARTBEAT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_HEARTBEAT* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_HEARTBEAT*>(
               &_PROBUFF_NET_HEARTBEAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PROBUFF_NET_HEARTBEAT& a, PROBUFF_NET_HEARTBEAT& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_HEARTBEAT* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_HEARTBEAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_HEARTBEAT* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_HEARTBEAT>(nullptr);
  }

  PROBUFF_NET_HEARTBEAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_HEARTBEAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_HEARTBEAT& from);
  void MergeFrom(const PROBUFF_NET_HEARTBEAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_HEARTBEAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_HEARTBEAT";
  }
  protected:
  explicit PROBUFF_NET_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_HEARTBEAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_RECHARGE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_RECHARGE) */ {
 public:
  inline PROBUFF_NET_RECHARGE() : PROBUFF_NET_RECHARGE(nullptr) {};
  virtual ~PROBUFF_NET_RECHARGE();

  PROBUFF_NET_RECHARGE(const PROBUFF_NET_RECHARGE& from);
  PROBUFF_NET_RECHARGE(PROBUFF_NET_RECHARGE&& from) noexcept
    : PROBUFF_NET_RECHARGE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_RECHARGE& operator=(const PROBUFF_NET_RECHARGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_RECHARGE& operator=(PROBUFF_NET_RECHARGE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_RECHARGE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_RECHARGE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_RECHARGE*>(
               &_PROBUFF_NET_RECHARGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PROBUFF_NET_RECHARGE& a, PROBUFF_NET_RECHARGE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_RECHARGE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_RECHARGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_RECHARGE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_RECHARGE>(nullptr);
  }

  PROBUFF_NET_RECHARGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_RECHARGE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_RECHARGE& from);
  void MergeFrom(const PROBUFF_NET_RECHARGE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_RECHARGE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_RECHARGE";
  }
  protected:
  explicit PROBUFF_NET_RECHARGE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMrechargeidFieldNumber = 1,
  };
  // int32 mrechargeid = 1;
  bool has_mrechargeid() const;
  private:
  bool _internal_has_mrechargeid() const;
  public:
  void clear_mrechargeid();
  ::PROTOBUF_NAMESPACE_ID::int32 mrechargeid() const;
  void set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mrechargeid() const;
  void _internal_set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_RECHARGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mrechargeid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_RECHARGE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_RECHARGE_RESPONSE) */ {
 public:
  inline PROBUFF_NET_RECHARGE_RESPONSE() : PROBUFF_NET_RECHARGE_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_RECHARGE_RESPONSE();

  PROBUFF_NET_RECHARGE_RESPONSE(const PROBUFF_NET_RECHARGE_RESPONSE& from);
  PROBUFF_NET_RECHARGE_RESPONSE(PROBUFF_NET_RECHARGE_RESPONSE&& from) noexcept
    : PROBUFF_NET_RECHARGE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_RECHARGE_RESPONSE& operator=(const PROBUFF_NET_RECHARGE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_RECHARGE_RESPONSE& operator=(PROBUFF_NET_RECHARGE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_RECHARGE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_RECHARGE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_RECHARGE_RESPONSE*>(
               &_PROBUFF_NET_RECHARGE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PROBUFF_NET_RECHARGE_RESPONSE& a, PROBUFF_NET_RECHARGE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_RECHARGE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_RECHARGE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_RECHARGE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_RECHARGE_RESPONSE>(nullptr);
  }

  PROBUFF_NET_RECHARGE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_RECHARGE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_RECHARGE_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_RECHARGE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_RECHARGE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_RECHARGE_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_RECHARGE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PROBUFF_NET_RECHARGE_RESPONSE_Estat Estat;
  static constexpr Estat Estat_Success =
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_Success;
  static constexpr Estat Estat_NotRechargeId =
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_NotRechargeId;
  static constexpr Estat Estat_MaxCount =
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MaxCount;
  static inline bool Estat_IsValid(int value) {
    return PROBUFF_NET_RECHARGE_RESPONSE_Estat_IsValid(value);
  }
  static constexpr Estat Estat_MIN =
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MIN;
  static constexpr Estat Estat_MAX =
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MAX;
  static constexpr int Estat_ARRAYSIZE =
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Estat_descriptor() {
    return PROBUFF_NET_RECHARGE_RESPONSE_Estat_descriptor();
  }
  template<typename T>
  static inline const std::string& Estat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Estat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Estat_Name.");
    return PROBUFF_NET_RECHARGE_RESPONSE_Estat_Name(enum_t_value);
  }
  static inline bool Estat_Parse(const std::string& name,
      Estat* value) {
    return PROBUFF_NET_RECHARGE_RESPONSE_Estat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMorderidFieldNumber = 3,
    kMrechargeidFieldNumber = 1,
    kMstatFieldNumber = 2,
  };
  // string morderid = 3;
  bool has_morderid() const;
  private:
  bool _internal_has_morderid() const;
  public:
  void clear_morderid();
  const std::string& morderid() const;
  void set_morderid(const std::string& value);
  void set_morderid(std::string&& value);
  void set_morderid(const char* value);
  void set_morderid(const char* value, size_t size);
  std::string* mutable_morderid();
  std::string* release_morderid();
  void set_allocated_morderid(std::string* morderid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_morderid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_morderid(
      std::string* morderid);
  private:
  const std::string& _internal_morderid() const;
  void _internal_set_morderid(const std::string& value);
  std::string* _internal_mutable_morderid();
  public:

  // int32 mrechargeid = 1;
  bool has_mrechargeid() const;
  private:
  bool _internal_has_mrechargeid() const;
  public:
  void clear_mrechargeid();
  ::PROTOBUF_NAMESPACE_ID::int32 mrechargeid() const;
  void set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mrechargeid() const;
  void _internal_set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat mstat = 2;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat mstat() const;
  void set_mstat(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat value);
  private:
  ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat _internal_mstat() const;
  void _internal_set_mstat(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr morderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mrechargeid_;
  int mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse();
  PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse& other);
  static const PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse*>(&_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class PROBUFF_NET_DELIVER_GOODS_RECHARGE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE) */ {
 public:
  inline PROBUFF_NET_DELIVER_GOODS_RECHARGE() : PROBUFF_NET_DELIVER_GOODS_RECHARGE(nullptr) {};
  virtual ~PROBUFF_NET_DELIVER_GOODS_RECHARGE();

  PROBUFF_NET_DELIVER_GOODS_RECHARGE(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from);
  PROBUFF_NET_DELIVER_GOODS_RECHARGE(PROBUFF_NET_DELIVER_GOODS_RECHARGE&& from) noexcept
    : PROBUFF_NET_DELIVER_GOODS_RECHARGE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_DELIVER_GOODS_RECHARGE& operator=(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_DELIVER_GOODS_RECHARGE& operator=(PROBUFF_NET_DELIVER_GOODS_RECHARGE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_DELIVER_GOODS_RECHARGE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_DELIVER_GOODS_RECHARGE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_DELIVER_GOODS_RECHARGE*>(
               &_PROBUFF_NET_DELIVER_GOODS_RECHARGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PROBUFF_NET_DELIVER_GOODS_RECHARGE& a, PROBUFF_NET_DELIVER_GOODS_RECHARGE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_DELIVER_GOODS_RECHARGE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_DELIVER_GOODS_RECHARGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_DELIVER_GOODS_RECHARGE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_DELIVER_GOODS_RECHARGE>(nullptr);
  }

  PROBUFF_NET_DELIVER_GOODS_RECHARGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_DELIVER_GOODS_RECHARGE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from);
  void MergeFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_DELIVER_GOODS_RECHARGE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE";
  }
  protected:
  explicit PROBUFF_NET_DELIVER_GOODS_RECHARGE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMitemsFieldNumber = 4,
    kMorderidFieldNumber = 2,
    kMrechargeidFieldNumber = 1,
    kMgoldFieldNumber = 3,
  };
  // map<int32, int32> mitems = 4;
  int mitems_size() const;
  private:
  int _internal_mitems_size() const;
  public:
  void clear_mitems();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_mitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_mitems();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      mitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_mitems();

  // string morderid = 2;
  bool has_morderid() const;
  private:
  bool _internal_has_morderid() const;
  public:
  void clear_morderid();
  const std::string& morderid() const;
  void set_morderid(const std::string& value);
  void set_morderid(std::string&& value);
  void set_morderid(const char* value);
  void set_morderid(const char* value, size_t size);
  std::string* mutable_morderid();
  std::string* release_morderid();
  void set_allocated_morderid(std::string* morderid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_morderid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_morderid(
      std::string* morderid);
  private:
  const std::string& _internal_morderid() const;
  void _internal_set_morderid(const std::string& value);
  std::string* _internal_mutable_morderid();
  public:

  // int32 mrechargeid = 1;
  bool has_mrechargeid() const;
  private:
  bool _internal_has_mrechargeid() const;
  public:
  void clear_mrechargeid();
  ::PROTOBUF_NAMESPACE_ID::int32 mrechargeid() const;
  void set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mrechargeid() const;
  void _internal_set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mgold = 3;
  bool has_mgold() const;
  private:
  bool _internal_has_mgold() const;
  public:
  void clear_mgold();
  ::PROTOBUF_NAMESPACE_ID::int32 mgold() const;
  void set_mgold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mgold() const;
  void _internal_set_mgold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > mitems_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr morderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mrechargeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mgold_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ERROR PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ERROR) */ {
 public:
  inline PROBUFF_NET_ERROR() : PROBUFF_NET_ERROR(nullptr) {};
  virtual ~PROBUFF_NET_ERROR();

  PROBUFF_NET_ERROR(const PROBUFF_NET_ERROR& from);
  PROBUFF_NET_ERROR(PROBUFF_NET_ERROR&& from) noexcept
    : PROBUFF_NET_ERROR() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ERROR& operator=(const PROBUFF_NET_ERROR& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ERROR& operator=(PROBUFF_NET_ERROR&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ERROR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ERROR* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ERROR*>(
               &_PROBUFF_NET_ERROR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PROBUFF_NET_ERROR& a, PROBUFF_NET_ERROR& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ERROR* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ERROR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ERROR* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ERROR>(nullptr);
  }

  PROBUFF_NET_ERROR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ERROR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ERROR& from);
  void MergeFrom(const PROBUFF_NET_ERROR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ERROR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ERROR";
  }
  protected:
  explicit PROBUFF_NET_ERROR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMerrmessageFieldNumber = 2,
  };
  // string merrmessage = 2;
  bool has_merrmessage() const;
  private:
  bool _internal_has_merrmessage() const;
  public:
  void clear_merrmessage();
  const std::string& merrmessage() const;
  void set_merrmessage(const std::string& value);
  void set_merrmessage(std::string&& value);
  void set_merrmessage(const char* value);
  void set_merrmessage(const char* value, size_t size);
  std::string* mutable_merrmessage();
  std::string* release_merrmessage();
  void set_allocated_merrmessage(std::string* merrmessage);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_merrmessage();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_merrmessage(
      std::string* merrmessage);
  private:
  const std::string& _internal_merrmessage() const;
  void _internal_set_merrmessage(const std::string& value);
  std::string* _internal_mutable_merrmessage();
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ERROR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merrmessage_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_GET_TIME PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_GET_TIME) */ {
 public:
  inline PROBUFF_NET_GET_TIME() : PROBUFF_NET_GET_TIME(nullptr) {};
  virtual ~PROBUFF_NET_GET_TIME();

  PROBUFF_NET_GET_TIME(const PROBUFF_NET_GET_TIME& from);
  PROBUFF_NET_GET_TIME(PROBUFF_NET_GET_TIME&& from) noexcept
    : PROBUFF_NET_GET_TIME() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_GET_TIME& operator=(const PROBUFF_NET_GET_TIME& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_GET_TIME& operator=(PROBUFF_NET_GET_TIME&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_GET_TIME& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_GET_TIME* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_GET_TIME*>(
               &_PROBUFF_NET_GET_TIME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PROBUFF_NET_GET_TIME& a, PROBUFF_NET_GET_TIME& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_GET_TIME* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_GET_TIME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_GET_TIME* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_GET_TIME>(nullptr);
  }

  PROBUFF_NET_GET_TIME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_GET_TIME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_GET_TIME& from);
  void MergeFrom(const PROBUFF_NET_GET_TIME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_GET_TIME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_GET_TIME";
  }
  protected:
  explicit PROBUFF_NET_GET_TIME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_GET_TIME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_GET_TIME_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_GET_TIME_RESPONSE) */ {
 public:
  inline PROBUFF_NET_GET_TIME_RESPONSE() : PROBUFF_NET_GET_TIME_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_GET_TIME_RESPONSE();

  PROBUFF_NET_GET_TIME_RESPONSE(const PROBUFF_NET_GET_TIME_RESPONSE& from);
  PROBUFF_NET_GET_TIME_RESPONSE(PROBUFF_NET_GET_TIME_RESPONSE&& from) noexcept
    : PROBUFF_NET_GET_TIME_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_GET_TIME_RESPONSE& operator=(const PROBUFF_NET_GET_TIME_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_GET_TIME_RESPONSE& operator=(PROBUFF_NET_GET_TIME_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_GET_TIME_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_GET_TIME_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_GET_TIME_RESPONSE*>(
               &_PROBUFF_NET_GET_TIME_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PROBUFF_NET_GET_TIME_RESPONSE& a, PROBUFF_NET_GET_TIME_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_GET_TIME_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_GET_TIME_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_GET_TIME_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_GET_TIME_RESPONSE>(nullptr);
  }

  PROBUFF_NET_GET_TIME_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_GET_TIME_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_GET_TIME_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_GET_TIME_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_GET_TIME_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_GET_TIME_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_GET_TIME_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutcFieldNumber = 1,
  };
  // int32 mutc = 1;
  bool has_mutc() const;
  private:
  bool _internal_has_mutc() const;
  public:
  void clear_mutc();
  ::PROTOBUF_NAMESPACE_ID::int32 mutc() const;
  void set_mutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mutc() const;
  void _internal_set_mutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mutc_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_NOTICE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_NOTICE) */ {
 public:
  inline PROBUFF_NET_NOTICE() : PROBUFF_NET_NOTICE(nullptr) {};
  virtual ~PROBUFF_NET_NOTICE();

  PROBUFF_NET_NOTICE(const PROBUFF_NET_NOTICE& from);
  PROBUFF_NET_NOTICE(PROBUFF_NET_NOTICE&& from) noexcept
    : PROBUFF_NET_NOTICE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_NOTICE& operator=(const PROBUFF_NET_NOTICE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_NOTICE& operator=(PROBUFF_NET_NOTICE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_NOTICE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_NOTICE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_NOTICE*>(
               &_PROBUFF_NET_NOTICE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PROBUFF_NET_NOTICE& a, PROBUFF_NET_NOTICE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_NOTICE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_NOTICE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_NOTICE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_NOTICE>(nullptr);
  }

  PROBUFF_NET_NOTICE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_NOTICE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_NOTICE& from);
  void MergeFrom(const PROBUFF_NET_NOTICE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_NOTICE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_NOTICE";
  }
  protected:
  explicit PROBUFF_NET_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_NOTICE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_NOTICE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_NOTICE_RESPONSE) */ {
 public:
  inline PROBUFF_NET_NOTICE_RESPONSE() : PROBUFF_NET_NOTICE_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_NOTICE_RESPONSE();

  PROBUFF_NET_NOTICE_RESPONSE(const PROBUFF_NET_NOTICE_RESPONSE& from);
  PROBUFF_NET_NOTICE_RESPONSE(PROBUFF_NET_NOTICE_RESPONSE&& from) noexcept
    : PROBUFF_NET_NOTICE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_NOTICE_RESPONSE& operator=(const PROBUFF_NET_NOTICE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_NOTICE_RESPONSE& operator=(PROBUFF_NET_NOTICE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_NOTICE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_NOTICE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_NOTICE_RESPONSE*>(
               &_PROBUFF_NET_NOTICE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PROBUFF_NET_NOTICE_RESPONSE& a, PROBUFF_NET_NOTICE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_NOTICE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_NOTICE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_NOTICE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_NOTICE_RESPONSE>(nullptr);
  }

  PROBUFF_NET_NOTICE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_NOTICE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_NOTICE_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_NOTICE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_NOTICE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_NOTICE_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_NOTICE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMnoticesFieldNumber = 1,
  };
  // repeated .pbdb.db_notice mnotices = 1;
  int mnotices_size() const;
  private:
  int _internal_mnotices_size() const;
  public:
  void clear_mnotices();
  ::pbdb::db_notice* mutable_mnotices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice >*
      mutable_mnotices();
  private:
  const ::pbdb::db_notice& _internal_mnotices(int index) const;
  ::pbdb::db_notice* _internal_add_mnotices();
  public:
  const ::pbdb::db_notice& mnotices(int index) const;
  ::pbdb::db_notice* add_mnotices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice >&
      mnotices() const;

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice > mnotices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ACOUNT_LOGIN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ACOUNT_LOGIN) */ {
 public:
  inline PROBUFF_NET_ACOUNT_LOGIN() : PROBUFF_NET_ACOUNT_LOGIN(nullptr) {};
  virtual ~PROBUFF_NET_ACOUNT_LOGIN();

  PROBUFF_NET_ACOUNT_LOGIN(const PROBUFF_NET_ACOUNT_LOGIN& from);
  PROBUFF_NET_ACOUNT_LOGIN(PROBUFF_NET_ACOUNT_LOGIN&& from) noexcept
    : PROBUFF_NET_ACOUNT_LOGIN() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ACOUNT_LOGIN& operator=(const PROBUFF_NET_ACOUNT_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ACOUNT_LOGIN& operator=(PROBUFF_NET_ACOUNT_LOGIN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ACOUNT_LOGIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ACOUNT_LOGIN* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ACOUNT_LOGIN*>(
               &_PROBUFF_NET_ACOUNT_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PROBUFF_NET_ACOUNT_LOGIN& a, PROBUFF_NET_ACOUNT_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ACOUNT_LOGIN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ACOUNT_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ACOUNT_LOGIN* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ACOUNT_LOGIN>(nullptr);
  }

  PROBUFF_NET_ACOUNT_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ACOUNT_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN& from);
  void MergeFrom(const PROBUFF_NET_ACOUNT_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ACOUNT_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ACOUNT_LOGIN";
  }
  protected:
  explicit PROBUFF_NET_ACOUNT_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaccountFieldNumber = 2,
    kMpasswordFieldNumber = 3,
    kMareaFieldNumber = 1,
  };
  // string maccount = 2;
  bool has_maccount() const;
  private:
  bool _internal_has_maccount() const;
  public:
  void clear_maccount();
  const std::string& maccount() const;
  void set_maccount(const std::string& value);
  void set_maccount(std::string&& value);
  void set_maccount(const char* value);
  void set_maccount(const char* value, size_t size);
  std::string* mutable_maccount();
  std::string* release_maccount();
  void set_allocated_maccount(std::string* maccount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_maccount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_maccount(
      std::string* maccount);
  private:
  const std::string& _internal_maccount() const;
  void _internal_set_maccount(const std::string& value);
  std::string* _internal_mutable_maccount();
  public:

  // string mpassword = 3;
  bool has_mpassword() const;
  private:
  bool _internal_has_mpassword() const;
  public:
  void clear_mpassword();
  const std::string& mpassword() const;
  void set_mpassword(const std::string& value);
  void set_mpassword(std::string&& value);
  void set_mpassword(const char* value);
  void set_mpassword(const char* value, size_t size);
  std::string* mutable_mpassword();
  std::string* release_mpassword();
  void set_allocated_mpassword(std::string* mpassword);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mpassword();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mpassword(
      std::string* mpassword);
  private:
  const std::string& _internal_mpassword() const;
  void _internal_set_mpassword(const std::string& value);
  std::string* _internal_mutable_mpassword();
  public:

  // int32 marea = 1;
  bool has_marea() const;
  private:
  bool _internal_has_marea() const;
  public:
  void clear_marea();
  ::PROTOBUF_NAMESPACE_ID::int32 marea() const;
  void set_marea(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_marea() const;
  void _internal_set_marea(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maccount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mpassword_;
  ::PROTOBUF_NAMESPACE_ID::int32 marea_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ACOUNT_LOGIN_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE) */ {
 public:
  inline PROBUFF_NET_ACOUNT_LOGIN_RESPONSE() : PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_ACOUNT_LOGIN_RESPONSE();

  PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from);
  PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE&& from) noexcept
    : PROBUFF_NET_ACOUNT_LOGIN_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& operator=(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& operator=(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE*>(
               &_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& a, PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>(nullptr);
  }

  PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsessionFieldNumber = 3,
    kMaccountFieldNumber = 4,
    kMroleidFieldNumber = 2,
    kMareaFieldNumber = 1,
    kMgatewayidFieldNumber = 5,
  };
  // string msession = 3;
  bool has_msession() const;
  private:
  bool _internal_has_msession() const;
  public:
  void clear_msession();
  const std::string& msession() const;
  void set_msession(const std::string& value);
  void set_msession(std::string&& value);
  void set_msession(const char* value);
  void set_msession(const char* value, size_t size);
  std::string* mutable_msession();
  std::string* release_msession();
  void set_allocated_msession(std::string* msession);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msession();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msession(
      std::string* msession);
  private:
  const std::string& _internal_msession() const;
  void _internal_set_msession(const std::string& value);
  std::string* _internal_mutable_msession();
  public:

  // string maccount = 4;
  bool has_maccount() const;
  private:
  bool _internal_has_maccount() const;
  public:
  void clear_maccount();
  const std::string& maccount() const;
  void set_maccount(const std::string& value);
  void set_maccount(std::string&& value);
  void set_maccount(const char* value);
  void set_maccount(const char* value, size_t size);
  std::string* mutable_maccount();
  std::string* release_maccount();
  void set_allocated_maccount(std::string* maccount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_maccount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_maccount(
      std::string* maccount);
  private:
  const std::string& _internal_maccount() const;
  void _internal_set_maccount(const std::string& value);
  std::string* _internal_mutable_maccount();
  public:

  // int64 mroleid = 2;
  bool has_mroleid() const;
  private:
  bool _internal_has_mroleid() const;
  public:
  void clear_mroleid();
  ::PROTOBUF_NAMESPACE_ID::int64 mroleid() const;
  void set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mroleid() const;
  void _internal_set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 marea = 1;
  bool has_marea() const;
  private:
  bool _internal_has_marea() const;
  public:
  void clear_marea();
  ::PROTOBUF_NAMESPACE_ID::int32 marea() const;
  void set_marea(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_marea() const;
  void _internal_set_marea(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mgatewayid = 5;
  bool has_mgatewayid() const;
  private:
  bool _internal_has_mgatewayid() const;
  public:
  void clear_mgatewayid();
  ::PROTOBUF_NAMESPACE_ID::int32 mgatewayid() const;
  void set_mgatewayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mgatewayid() const;
  void _internal_set_mgatewayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msession_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maccount_;
  ::PROTOBUF_NAMESPACE_ID::int64 mroleid_;
  ::PROTOBUF_NAMESPACE_ID::int32 marea_;
  ::PROTOBUF_NAMESPACE_ID::int32 mgatewayid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ROLE_LOGIN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ROLE_LOGIN) */ {
 public:
  inline PROBUFF_NET_ROLE_LOGIN() : PROBUFF_NET_ROLE_LOGIN(nullptr) {};
  virtual ~PROBUFF_NET_ROLE_LOGIN();

  PROBUFF_NET_ROLE_LOGIN(const PROBUFF_NET_ROLE_LOGIN& from);
  PROBUFF_NET_ROLE_LOGIN(PROBUFF_NET_ROLE_LOGIN&& from) noexcept
    : PROBUFF_NET_ROLE_LOGIN() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ROLE_LOGIN& operator=(const PROBUFF_NET_ROLE_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ROLE_LOGIN& operator=(PROBUFF_NET_ROLE_LOGIN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ROLE_LOGIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ROLE_LOGIN* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ROLE_LOGIN*>(
               &_PROBUFF_NET_ROLE_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PROBUFF_NET_ROLE_LOGIN& a, PROBUFF_NET_ROLE_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ROLE_LOGIN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ROLE_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ROLE_LOGIN* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_LOGIN>(nullptr);
  }

  PROBUFF_NET_ROLE_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ROLE_LOGIN& from);
  void MergeFrom(const PROBUFF_NET_ROLE_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ROLE_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ROLE_LOGIN";
  }
  protected:
  explicit PROBUFF_NET_ROLE_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsessionFieldNumber = 2,
    kMroleidFieldNumber = 1,
    kMiscreateFieldNumber = 3,
    kMareaFieldNumber = 4,
    kMgatewayidFieldNumber = 5,
  };
  // string msession = 2;
  bool has_msession() const;
  private:
  bool _internal_has_msession() const;
  public:
  void clear_msession();
  const std::string& msession() const;
  void set_msession(const std::string& value);
  void set_msession(std::string&& value);
  void set_msession(const char* value);
  void set_msession(const char* value, size_t size);
  std::string* mutable_msession();
  std::string* release_msession();
  void set_allocated_msession(std::string* msession);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msession();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msession(
      std::string* msession);
  private:
  const std::string& _internal_msession() const;
  void _internal_set_msession(const std::string& value);
  std::string* _internal_mutable_msession();
  public:

  // int64 mroleid = 1;
  bool has_mroleid() const;
  private:
  bool _internal_has_mroleid() const;
  public:
  void clear_mroleid();
  ::PROTOBUF_NAMESPACE_ID::int64 mroleid() const;
  void set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mroleid() const;
  void _internal_set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool miscreate = 3;
  bool has_miscreate() const;
  private:
  bool _internal_has_miscreate() const;
  public:
  void clear_miscreate();
  bool miscreate() const;
  void set_miscreate(bool value);
  private:
  bool _internal_miscreate() const;
  void _internal_set_miscreate(bool value);
  public:

  // int32 marea = 4;
  bool has_marea() const;
  private:
  bool _internal_has_marea() const;
  public:
  void clear_marea();
  ::PROTOBUF_NAMESPACE_ID::int32 marea() const;
  void set_marea(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_marea() const;
  void _internal_set_marea(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mgatewayid = 5;
  bool has_mgatewayid() const;
  private:
  bool _internal_has_mgatewayid() const;
  public:
  void clear_mgatewayid();
  ::PROTOBUF_NAMESPACE_ID::int32 mgatewayid() const;
  void set_mgatewayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mgatewayid() const;
  void _internal_set_mgatewayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ROLE_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msession_;
  ::PROTOBUF_NAMESPACE_ID::int64 mroleid_;
  bool miscreate_;
  ::PROTOBUF_NAMESPACE_ID::int32 marea_;
  ::PROTOBUF_NAMESPACE_ID::int32 mgatewayid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ROLE_SYNC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ROLE_SYNC) */ {
 public:
  inline PROBUFF_NET_ROLE_SYNC() : PROBUFF_NET_ROLE_SYNC(nullptr) {};
  virtual ~PROBUFF_NET_ROLE_SYNC();

  PROBUFF_NET_ROLE_SYNC(const PROBUFF_NET_ROLE_SYNC& from);
  PROBUFF_NET_ROLE_SYNC(PROBUFF_NET_ROLE_SYNC&& from) noexcept
    : PROBUFF_NET_ROLE_SYNC() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ROLE_SYNC& operator=(const PROBUFF_NET_ROLE_SYNC& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ROLE_SYNC& operator=(PROBUFF_NET_ROLE_SYNC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ROLE_SYNC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ROLE_SYNC* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ROLE_SYNC*>(
               &_PROBUFF_NET_ROLE_SYNC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PROBUFF_NET_ROLE_SYNC& a, PROBUFF_NET_ROLE_SYNC& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ROLE_SYNC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ROLE_SYNC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ROLE_SYNC* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_SYNC>(nullptr);
  }

  PROBUFF_NET_ROLE_SYNC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_SYNC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ROLE_SYNC& from);
  void MergeFrom(const PROBUFF_NET_ROLE_SYNC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ROLE_SYNC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ROLE_SYNC";
  }
  protected:
  explicit PROBUFF_NET_ROLE_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ROLE_SYNC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ROLE_SYNC_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE) */ {
 public:
  inline PROBUFF_NET_ROLE_SYNC_RESPONSE() : PROBUFF_NET_ROLE_SYNC_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_ROLE_SYNC_RESPONSE();

  PROBUFF_NET_ROLE_SYNC_RESPONSE(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from);
  PROBUFF_NET_ROLE_SYNC_RESPONSE(PROBUFF_NET_ROLE_SYNC_RESPONSE&& from) noexcept
    : PROBUFF_NET_ROLE_SYNC_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ROLE_SYNC_RESPONSE& operator=(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ROLE_SYNC_RESPONSE& operator=(PROBUFF_NET_ROLE_SYNC_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ROLE_SYNC_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ROLE_SYNC_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ROLE_SYNC_RESPONSE*>(
               &_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PROBUFF_NET_ROLE_SYNC_RESPONSE& a, PROBUFF_NET_ROLE_SYNC_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ROLE_SYNC_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ROLE_SYNC_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ROLE_SYNC_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_SYNC_RESPONSE>(nullptr);
  }

  PROBUFF_NET_ROLE_SYNC_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_SYNC_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ROLE_SYNC_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_ROLE_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMroleFieldNumber = 1,
    kMbriefFieldNumber = 2,
    kMbagFieldNumber = 3,
    kMtaskFieldNumber = 4,
  };
  // .pbdb.db_role mrole = 1;
  bool has_mrole() const;
  private:
  bool _internal_has_mrole() const;
  public:
  void clear_mrole();
  const ::pbdb::db_role& mrole() const;
  ::pbdb::db_role* release_mrole();
  ::pbdb::db_role* mutable_mrole();
  void set_allocated_mrole(::pbdb::db_role* mrole);
  private:
  const ::pbdb::db_role& _internal_mrole() const;
  ::pbdb::db_role* _internal_mutable_mrole();
  public:
  void unsafe_arena_set_allocated_mrole(
      ::pbdb::db_role* mrole);
  ::pbdb::db_role* unsafe_arena_release_mrole();

  // .pbdb.db_brief mbrief = 2;
  bool has_mbrief() const;
  private:
  bool _internal_has_mbrief() const;
  public:
  void clear_mbrief();
  const ::pbdb::db_brief& mbrief() const;
  ::pbdb::db_brief* release_mbrief();
  ::pbdb::db_brief* mutable_mbrief();
  void set_allocated_mbrief(::pbdb::db_brief* mbrief);
  private:
  const ::pbdb::db_brief& _internal_mbrief() const;
  ::pbdb::db_brief* _internal_mutable_mbrief();
  public:
  void unsafe_arena_set_allocated_mbrief(
      ::pbdb::db_brief* mbrief);
  ::pbdb::db_brief* unsafe_arena_release_mbrief();

  // .pbdb.db_bag mbag = 3;
  bool has_mbag() const;
  private:
  bool _internal_has_mbag() const;
  public:
  void clear_mbag();
  const ::pbdb::db_bag& mbag() const;
  ::pbdb::db_bag* release_mbag();
  ::pbdb::db_bag* mutable_mbag();
  void set_allocated_mbag(::pbdb::db_bag* mbag);
  private:
  const ::pbdb::db_bag& _internal_mbag() const;
  ::pbdb::db_bag* _internal_mutable_mbag();
  public:
  void unsafe_arena_set_allocated_mbag(
      ::pbdb::db_bag* mbag);
  ::pbdb::db_bag* unsafe_arena_release_mbag();

  // .pbdb.db_task mtask = 4;
  bool has_mtask() const;
  private:
  bool _internal_has_mtask() const;
  public:
  void clear_mtask();
  const ::pbdb::db_task& mtask() const;
  ::pbdb::db_task* release_mtask();
  ::pbdb::db_task* mutable_mtask();
  void set_allocated_mtask(::pbdb::db_task* mtask);
  private:
  const ::pbdb::db_task& _internal_mtask() const;
  ::pbdb::db_task* _internal_mutable_mtask();
  public:
  void unsafe_arena_set_allocated_mtask(
      ::pbdb::db_task* mtask);
  ::pbdb::db_task* unsafe_arena_release_mtask();

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pbdb::db_role* mrole_;
  ::pbdb::db_brief* mbrief_;
  ::pbdb::db_bag* mbag_;
  ::pbdb::db_task* mtask_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_BAG_SYNC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_SYNC) */ {
 public:
  inline PROBUFF_NET_BAG_SYNC() : PROBUFF_NET_BAG_SYNC(nullptr) {};
  virtual ~PROBUFF_NET_BAG_SYNC();

  PROBUFF_NET_BAG_SYNC(const PROBUFF_NET_BAG_SYNC& from);
  PROBUFF_NET_BAG_SYNC(PROBUFF_NET_BAG_SYNC&& from) noexcept
    : PROBUFF_NET_BAG_SYNC() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_SYNC& operator=(const PROBUFF_NET_BAG_SYNC& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_SYNC& operator=(PROBUFF_NET_BAG_SYNC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_BAG_SYNC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_BAG_SYNC* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_SYNC*>(
               &_PROBUFF_NET_BAG_SYNC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PROBUFF_NET_BAG_SYNC& a, PROBUFF_NET_BAG_SYNC& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_SYNC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_SYNC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_BAG_SYNC* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_SYNC>(nullptr);
  }

  PROBUFF_NET_BAG_SYNC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_SYNC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_BAG_SYNC& from);
  void MergeFrom(const PROBUFF_NET_BAG_SYNC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_SYNC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_SYNC";
  }
  protected:
  explicit PROBUFF_NET_BAG_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_SYNC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_BAG_SYNC_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE) */ {
 public:
  inline PROBUFF_NET_BAG_SYNC_RESPONSE() : PROBUFF_NET_BAG_SYNC_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_BAG_SYNC_RESPONSE();

  PROBUFF_NET_BAG_SYNC_RESPONSE(const PROBUFF_NET_BAG_SYNC_RESPONSE& from);
  PROBUFF_NET_BAG_SYNC_RESPONSE(PROBUFF_NET_BAG_SYNC_RESPONSE&& from) noexcept
    : PROBUFF_NET_BAG_SYNC_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_SYNC_RESPONSE& operator=(const PROBUFF_NET_BAG_SYNC_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_SYNC_RESPONSE& operator=(PROBUFF_NET_BAG_SYNC_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_BAG_SYNC_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_BAG_SYNC_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_SYNC_RESPONSE*>(
               &_PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PROBUFF_NET_BAG_SYNC_RESPONSE& a, PROBUFF_NET_BAG_SYNC_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_SYNC_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_SYNC_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_BAG_SYNC_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_SYNC_RESPONSE>(nullptr);
  }

  PROBUFF_NET_BAG_SYNC_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_SYNC_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_BAG_SYNC_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_BAG_SYNC_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_SYNC_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_BAG_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMbagFieldNumber = 1,
  };
  // .pbdb.db_bag mbag = 1;
  bool has_mbag() const;
  private:
  bool _internal_has_mbag() const;
  public:
  void clear_mbag();
  const ::pbdb::db_bag& mbag() const;
  ::pbdb::db_bag* release_mbag();
  ::pbdb::db_bag* mutable_mbag();
  void set_allocated_mbag(::pbdb::db_bag* mbag);
  private:
  const ::pbdb::db_bag& _internal_mbag() const;
  ::pbdb::db_bag* _internal_mutable_mbag();
  public:
  void unsafe_arena_set_allocated_mbag(
      ::pbdb::db_bag* mbag);
  ::pbdb::db_bag* unsafe_arena_release_mbag();

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pbdb::db_bag* mbag_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_BAG_UPDATE_delitem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_UPDATE.delitem) */ {
 public:
  inline PROBUFF_NET_BAG_UPDATE_delitem() : PROBUFF_NET_BAG_UPDATE_delitem(nullptr) {};
  virtual ~PROBUFF_NET_BAG_UPDATE_delitem();

  PROBUFF_NET_BAG_UPDATE_delitem(const PROBUFF_NET_BAG_UPDATE_delitem& from);
  PROBUFF_NET_BAG_UPDATE_delitem(PROBUFF_NET_BAG_UPDATE_delitem&& from) noexcept
    : PROBUFF_NET_BAG_UPDATE_delitem() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_UPDATE_delitem& operator=(const PROBUFF_NET_BAG_UPDATE_delitem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_UPDATE_delitem& operator=(PROBUFF_NET_BAG_UPDATE_delitem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_BAG_UPDATE_delitem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_BAG_UPDATE_delitem* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_UPDATE_delitem*>(
               &_PROBUFF_NET_BAG_UPDATE_delitem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PROBUFF_NET_BAG_UPDATE_delitem& a, PROBUFF_NET_BAG_UPDATE_delitem& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_UPDATE_delitem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_UPDATE_delitem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_BAG_UPDATE_delitem* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE_delitem>(nullptr);
  }

  PROBUFF_NET_BAG_UPDATE_delitem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE_delitem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_BAG_UPDATE_delitem& from);
  void MergeFrom(const PROBUFF_NET_BAG_UPDATE_delitem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_UPDATE_delitem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_UPDATE.delitem";
  }
  protected:
  explicit PROBUFF_NET_BAG_UPDATE_delitem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMidFieldNumber = 1,
    kMcountFieldNumber = 2,
  };
  // int32 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mcount = 2;
  bool has_mcount() const;
  private:
  bool _internal_has_mcount() const;
  public:
  void clear_mcount();
  ::PROTOBUF_NAMESPACE_ID::int32 mcount() const;
  void set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mcount() const;
  void _internal_set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mcount_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_BAG_UPDATE_additem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_UPDATE.additem) */ {
 public:
  inline PROBUFF_NET_BAG_UPDATE_additem() : PROBUFF_NET_BAG_UPDATE_additem(nullptr) {};
  virtual ~PROBUFF_NET_BAG_UPDATE_additem();

  PROBUFF_NET_BAG_UPDATE_additem(const PROBUFF_NET_BAG_UPDATE_additem& from);
  PROBUFF_NET_BAG_UPDATE_additem(PROBUFF_NET_BAG_UPDATE_additem&& from) noexcept
    : PROBUFF_NET_BAG_UPDATE_additem() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_UPDATE_additem& operator=(const PROBUFF_NET_BAG_UPDATE_additem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_UPDATE_additem& operator=(PROBUFF_NET_BAG_UPDATE_additem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_BAG_UPDATE_additem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_BAG_UPDATE_additem* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_UPDATE_additem*>(
               &_PROBUFF_NET_BAG_UPDATE_additem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PROBUFF_NET_BAG_UPDATE_additem& a, PROBUFF_NET_BAG_UPDATE_additem& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_UPDATE_additem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_UPDATE_additem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_BAG_UPDATE_additem* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE_additem>(nullptr);
  }

  PROBUFF_NET_BAG_UPDATE_additem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE_additem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_BAG_UPDATE_additem& from);
  void MergeFrom(const PROBUFF_NET_BAG_UPDATE_additem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_UPDATE_additem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_UPDATE.additem";
  }
  protected:
  explicit PROBUFF_NET_BAG_UPDATE_additem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMidFieldNumber = 1,
    kMcountFieldNumber = 2,
  };
  // int32 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mcount = 2;
  bool has_mcount() const;
  private:
  bool _internal_has_mcount() const;
  public:
  void clear_mcount();
  ::PROTOBUF_NAMESPACE_ID::int32 mcount() const;
  void set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mcount() const;
  void _internal_set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mcount_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_BAG_UPDATE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_UPDATE) */ {
 public:
  inline PROBUFF_NET_BAG_UPDATE() : PROBUFF_NET_BAG_UPDATE(nullptr) {};
  virtual ~PROBUFF_NET_BAG_UPDATE();

  PROBUFF_NET_BAG_UPDATE(const PROBUFF_NET_BAG_UPDATE& from);
  PROBUFF_NET_BAG_UPDATE(PROBUFF_NET_BAG_UPDATE&& from) noexcept
    : PROBUFF_NET_BAG_UPDATE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_UPDATE& operator=(const PROBUFF_NET_BAG_UPDATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_UPDATE& operator=(PROBUFF_NET_BAG_UPDATE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_BAG_UPDATE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_BAG_UPDATE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_UPDATE*>(
               &_PROBUFF_NET_BAG_UPDATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PROBUFF_NET_BAG_UPDATE& a, PROBUFF_NET_BAG_UPDATE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_UPDATE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_UPDATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_BAG_UPDATE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE>(nullptr);
  }

  PROBUFF_NET_BAG_UPDATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_BAG_UPDATE& from);
  void MergeFrom(const PROBUFF_NET_BAG_UPDATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_UPDATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_UPDATE";
  }
  protected:
  explicit PROBUFF_NET_BAG_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PROBUFF_NET_BAG_UPDATE_delitem delitem;
  typedef PROBUFF_NET_BAG_UPDATE_additem additem;

  // accessors -------------------------------------------------------

  enum : int {
    kMdelitemsFieldNumber = 1,
    kMdelnostackitemsFieldNumber = 2,
    kMadditemsFieldNumber = 3,
    kMaddnostackitemsFieldNumber = 4,
  };
  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE.delitem mdelitems = 1;
  int mdelitems_size() const;
  private:
  int _internal_mdelitems_size() const;
  public:
  void clear_mdelitems();
  ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem* mutable_mdelitems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem >*
      mutable_mdelitems();
  private:
  const ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem& _internal_mdelitems(int index) const;
  ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem* _internal_add_mdelitems();
  public:
  const ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem& mdelitems(int index) const;
  ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem* add_mdelitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem >&
      mdelitems() const;

  // repeated int32 mdelnostackitems = 2;
  int mdelnostackitems_size() const;
  private:
  int _internal_mdelnostackitems_size() const;
  public:
  void clear_mdelnostackitems();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mdelnostackitems(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_mdelnostackitems() const;
  void _internal_add_mdelnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_mdelnostackitems();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 mdelnostackitems(int index) const;
  void set_mdelnostackitems(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_mdelnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      mdelnostackitems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_mdelnostackitems();

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE.additem madditems = 3;
  int madditems_size() const;
  private:
  int _internal_madditems_size() const;
  public:
  void clear_madditems();
  ::pbnet::PROBUFF_NET_BAG_UPDATE_additem* mutable_madditems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_additem >*
      mutable_madditems();
  private:
  const ::pbnet::PROBUFF_NET_BAG_UPDATE_additem& _internal_madditems(int index) const;
  ::pbnet::PROBUFF_NET_BAG_UPDATE_additem* _internal_add_madditems();
  public:
  const ::pbnet::PROBUFF_NET_BAG_UPDATE_additem& madditems(int index) const;
  ::pbnet::PROBUFF_NET_BAG_UPDATE_additem* add_madditems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_additem >&
      madditems() const;

  // repeated int32 maddnostackitems = 4;
  int maddnostackitems_size() const;
  private:
  int _internal_maddnostackitems_size() const;
  public:
  void clear_maddnostackitems();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maddnostackitems(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_maddnostackitems() const;
  void _internal_add_maddnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_maddnostackitems();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 maddnostackitems(int index) const;
  void set_maddnostackitems(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_maddnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      maddnostackitems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_maddnostackitems();

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_UPDATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem > mdelitems_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > mdelnostackitems_;
  mutable std::atomic<int> _mdelnostackitems_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_additem > madditems_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > maddnostackitems_;
  mutable std::atomic<int> _maddnostackitems_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_CMD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CMD) */ {
 public:
  inline PROBUFF_NET_CMD() : PROBUFF_NET_CMD(nullptr) {};
  virtual ~PROBUFF_NET_CMD();

  PROBUFF_NET_CMD(const PROBUFF_NET_CMD& from);
  PROBUFF_NET_CMD(PROBUFF_NET_CMD&& from) noexcept
    : PROBUFF_NET_CMD() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CMD& operator=(const PROBUFF_NET_CMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CMD& operator=(PROBUFF_NET_CMD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_CMD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_CMD* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CMD*>(
               &_PROBUFF_NET_CMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PROBUFF_NET_CMD& a, PROBUFF_NET_CMD& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CMD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CMD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_CMD* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_CMD>(nullptr);
  }

  PROBUFF_NET_CMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_CMD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_CMD& from);
  void MergeFrom(const PROBUFF_NET_CMD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CMD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_CMD";
  }
  protected:
  explicit PROBUFF_NET_CMD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMcmdFieldNumber = 1,
  };
  // string mcmd = 1;
  bool has_mcmd() const;
  private:
  bool _internal_has_mcmd() const;
  public:
  void clear_mcmd();
  const std::string& mcmd() const;
  void set_mcmd(const std::string& value);
  void set_mcmd(std::string&& value);
  void set_mcmd(const char* value);
  void set_mcmd(const char* value, size_t size);
  std::string* mutable_mcmd();
  std::string* release_mcmd();
  void set_allocated_mcmd(std::string* mcmd);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mcmd();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mcmd(
      std::string* mcmd);
  private:
  const std::string& _internal_mcmd() const;
  void _internal_set_mcmd(const std::string& value);
  std::string* _internal_mutable_mcmd();
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CMD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mcmd_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_CHAT PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CHAT) */ {
 public:
  inline PROBUFF_NET_CHAT() : PROBUFF_NET_CHAT(nullptr) {};
  virtual ~PROBUFF_NET_CHAT();

  PROBUFF_NET_CHAT(const PROBUFF_NET_CHAT& from);
  PROBUFF_NET_CHAT(PROBUFF_NET_CHAT&& from) noexcept
    : PROBUFF_NET_CHAT() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CHAT& operator=(const PROBUFF_NET_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CHAT& operator=(PROBUFF_NET_CHAT&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_CHAT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_CHAT* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CHAT*>(
               &_PROBUFF_NET_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PROBUFF_NET_CHAT& a, PROBUFF_NET_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CHAT* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_CHAT* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_CHAT>(nullptr);
  }

  PROBUFF_NET_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_CHAT& from);
  void MergeFrom(const PROBUFF_NET_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_CHAT";
  }
  protected:
  explicit PROBUFF_NET_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMcontentFieldNumber = 3,
    kMtypeFieldNumber = 1,
    kMchannelidFieldNumber = 2,
  };
  // string mcontent = 3;
  bool has_mcontent() const;
  private:
  bool _internal_has_mcontent() const;
  public:
  void clear_mcontent();
  const std::string& mcontent() const;
  void set_mcontent(const std::string& value);
  void set_mcontent(std::string&& value);
  void set_mcontent(const char* value);
  void set_mcontent(const char* value, size_t size);
  std::string* mutable_mcontent();
  std::string* release_mcontent();
  void set_allocated_mcontent(std::string* mcontent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mcontent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mcontent(
      std::string* mcontent);
  private:
  const std::string& _internal_mcontent() const;
  void _internal_set_mcontent(const std::string& value);
  std::string* _internal_mutable_mcontent();
  public:

  // int32 mtype = 1;
  bool has_mtype() const;
  private:
  bool _internal_has_mtype() const;
  public:
  void clear_mtype();
  ::PROTOBUF_NAMESPACE_ID::int32 mtype() const;
  void set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtype() const;
  void _internal_set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mchannelid = 2;
  bool has_mchannelid() const;
  private:
  bool _internal_has_mchannelid() const;
  public:
  void clear_mchannelid();
  ::PROTOBUF_NAMESPACE_ID::int32 mchannelid() const;
  void set_mchannelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mchannelid() const;
  void _internal_set_mchannelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mcontent_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 mchannelid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class chatitem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.chatitem) */ {
 public:
  inline chatitem() : chatitem(nullptr) {};
  virtual ~chatitem();

  chatitem(const chatitem& from);
  chatitem(chatitem&& from) noexcept
    : chatitem() {
    *this = ::std::move(from);
  }

  inline chatitem& operator=(const chatitem& from) {
    CopyFrom(from);
    return *this;
  }
  inline chatitem& operator=(chatitem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chatitem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chatitem* internal_default_instance() {
    return reinterpret_cast<const chatitem*>(
               &_chatitem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(chatitem& a, chatitem& b) {
    a.Swap(&b);
  }
  inline void Swap(chatitem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(chatitem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chatitem* New() const final {
    return CreateMaybeMessage<chatitem>(nullptr);
  }

  chatitem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chatitem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chatitem& from);
  void MergeFrom(const chatitem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chatitem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.chatitem";
  }
  protected:
  explicit chatitem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMrolenameFieldNumber = 2,
    kMcontentFieldNumber = 3,
    kMroleidFieldNumber = 1,
    kMutcFieldNumber = 4,
  };
  // string mrolename = 2;
  bool has_mrolename() const;
  private:
  bool _internal_has_mrolename() const;
  public:
  void clear_mrolename();
  const std::string& mrolename() const;
  void set_mrolename(const std::string& value);
  void set_mrolename(std::string&& value);
  void set_mrolename(const char* value);
  void set_mrolename(const char* value, size_t size);
  std::string* mutable_mrolename();
  std::string* release_mrolename();
  void set_allocated_mrolename(std::string* mrolename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mrolename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mrolename(
      std::string* mrolename);
  private:
  const std::string& _internal_mrolename() const;
  void _internal_set_mrolename(const std::string& value);
  std::string* _internal_mutable_mrolename();
  public:

  // string mcontent = 3;
  bool has_mcontent() const;
  private:
  bool _internal_has_mcontent() const;
  public:
  void clear_mcontent();
  const std::string& mcontent() const;
  void set_mcontent(const std::string& value);
  void set_mcontent(std::string&& value);
  void set_mcontent(const char* value);
  void set_mcontent(const char* value, size_t size);
  std::string* mutable_mcontent();
  std::string* release_mcontent();
  void set_allocated_mcontent(std::string* mcontent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mcontent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mcontent(
      std::string* mcontent);
  private:
  const std::string& _internal_mcontent() const;
  void _internal_set_mcontent(const std::string& value);
  std::string* _internal_mutable_mcontent();
  public:

  // int64 mroleid = 1;
  bool has_mroleid() const;
  private:
  bool _internal_has_mroleid() const;
  public:
  void clear_mroleid();
  ::PROTOBUF_NAMESPACE_ID::int64 mroleid() const;
  void set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mroleid() const;
  void _internal_set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 mutc = 4;
  bool has_mutc() const;
  private:
  bool _internal_has_mutc() const;
  public:
  void clear_mutc();
  ::PROTOBUF_NAMESPACE_ID::int32 mutc() const;
  void set_mutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mutc() const;
  void _internal_set_mutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.chatitem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mrolename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mcontent_;
  ::PROTOBUF_NAMESPACE_ID::int64 mroleid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mutc_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_CHAT_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CHAT_RESPONSE) */ {
 public:
  inline PROBUFF_NET_CHAT_RESPONSE() : PROBUFF_NET_CHAT_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_CHAT_RESPONSE();

  PROBUFF_NET_CHAT_RESPONSE(const PROBUFF_NET_CHAT_RESPONSE& from);
  PROBUFF_NET_CHAT_RESPONSE(PROBUFF_NET_CHAT_RESPONSE&& from) noexcept
    : PROBUFF_NET_CHAT_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CHAT_RESPONSE& operator=(const PROBUFF_NET_CHAT_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CHAT_RESPONSE& operator=(PROBUFF_NET_CHAT_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_CHAT_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_CHAT_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CHAT_RESPONSE*>(
               &_PROBUFF_NET_CHAT_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PROBUFF_NET_CHAT_RESPONSE& a, PROBUFF_NET_CHAT_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CHAT_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CHAT_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_CHAT_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_CHAT_RESPONSE>(nullptr);
  }

  PROBUFF_NET_CHAT_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_CHAT_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_CHAT_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_CHAT_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CHAT_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_CHAT_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_CHAT_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMchatlistFieldNumber = 3,
    kMtypeFieldNumber = 1,
    kMchannelidFieldNumber = 2,
    kMstatFieldNumber = 4,
  };
  // repeated .pbnet.chatitem mchatlist = 3;
  int mchatlist_size() const;
  private:
  int _internal_mchatlist_size() const;
  public:
  void clear_mchatlist();
  ::pbnet::chatitem* mutable_mchatlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem >*
      mutable_mchatlist();
  private:
  const ::pbnet::chatitem& _internal_mchatlist(int index) const;
  ::pbnet::chatitem* _internal_add_mchatlist();
  public:
  const ::pbnet::chatitem& mchatlist(int index) const;
  ::pbnet::chatitem* add_mchatlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem >&
      mchatlist() const;

  // int32 mtype = 1;
  bool has_mtype() const;
  private:
  bool _internal_has_mtype() const;
  public:
  void clear_mtype();
  ::PROTOBUF_NAMESPACE_ID::int32 mtype() const;
  void set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtype() const;
  void _internal_set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mchannelid = 2;
  bool has_mchannelid() const;
  private:
  bool _internal_has_mchannelid() const;
  public:
  void clear_mchannelid();
  ::PROTOBUF_NAMESPACE_ID::int32 mchannelid() const;
  void set_mchannelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mchannelid() const;
  void _internal_set_mchannelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool mstat = 4;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  bool mstat() const;
  void set_mstat(bool value);
  private:
  bool _internal_mstat() const;
  void _internal_set_mstat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CHAT_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem > mchatlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 mchannelid_;
  bool mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_SWITCH_LINE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SWITCH_LINE) */ {
 public:
  inline PROBUFF_NET_SWITCH_LINE() : PROBUFF_NET_SWITCH_LINE(nullptr) {};
  virtual ~PROBUFF_NET_SWITCH_LINE();

  PROBUFF_NET_SWITCH_LINE(const PROBUFF_NET_SWITCH_LINE& from);
  PROBUFF_NET_SWITCH_LINE(PROBUFF_NET_SWITCH_LINE&& from) noexcept
    : PROBUFF_NET_SWITCH_LINE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SWITCH_LINE& operator=(const PROBUFF_NET_SWITCH_LINE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SWITCH_LINE& operator=(PROBUFF_NET_SWITCH_LINE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_SWITCH_LINE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_SWITCH_LINE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SWITCH_LINE*>(
               &_PROBUFF_NET_SWITCH_LINE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PROBUFF_NET_SWITCH_LINE& a, PROBUFF_NET_SWITCH_LINE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SWITCH_LINE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SWITCH_LINE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_SWITCH_LINE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_SWITCH_LINE>(nullptr);
  }

  PROBUFF_NET_SWITCH_LINE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_SWITCH_LINE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_SWITCH_LINE& from);
  void MergeFrom(const PROBUFF_NET_SWITCH_LINE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SWITCH_LINE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_SWITCH_LINE";
  }
  protected:
  explicit PROBUFF_NET_SWITCH_LINE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMlineFieldNumber = 1,
  };
  // int32 mline = 1;
  bool has_mline() const;
  private:
  bool _internal_has_mline() const;
  public:
  void clear_mline();
  ::PROTOBUF_NAMESPACE_ID::int32 mline() const;
  void set_mline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mline() const;
  void _internal_set_mline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SWITCH_LINE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mline_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_SWITCH_LINE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE) */ {
 public:
  inline PROBUFF_NET_SWITCH_LINE_RESPONSE() : PROBUFF_NET_SWITCH_LINE_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_SWITCH_LINE_RESPONSE();

  PROBUFF_NET_SWITCH_LINE_RESPONSE(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from);
  PROBUFF_NET_SWITCH_LINE_RESPONSE(PROBUFF_NET_SWITCH_LINE_RESPONSE&& from) noexcept
    : PROBUFF_NET_SWITCH_LINE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SWITCH_LINE_RESPONSE& operator=(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SWITCH_LINE_RESPONSE& operator=(PROBUFF_NET_SWITCH_LINE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_SWITCH_LINE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_SWITCH_LINE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SWITCH_LINE_RESPONSE*>(
               &_PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PROBUFF_NET_SWITCH_LINE_RESPONSE& a, PROBUFF_NET_SWITCH_LINE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SWITCH_LINE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SWITCH_LINE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_SWITCH_LINE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_SWITCH_LINE_RESPONSE>(nullptr);
  }

  PROBUFF_NET_SWITCH_LINE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_SWITCH_LINE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SWITCH_LINE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_SWITCH_LINE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMlineFieldNumber = 1,
    kMstatFieldNumber = 2,
  };
  // int32 mline = 1;
  bool has_mline() const;
  private:
  bool _internal_has_mline() const;
  public:
  void clear_mline();
  ::PROTOBUF_NAMESPACE_ID::int32 mline() const;
  void set_mline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mline() const;
  void _internal_set_mline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool mstat = 2;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  bool mstat() const;
  void set_mstat(bool value);
  private:
  bool _internal_mstat() const;
  void _internal_set_mstat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mline_;
  bool mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_LIST PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_LIST) */ {
 public:
  inline PROBUFF_NET_MAIL_LIST() : PROBUFF_NET_MAIL_LIST(nullptr) {};
  virtual ~PROBUFF_NET_MAIL_LIST();

  PROBUFF_NET_MAIL_LIST(const PROBUFF_NET_MAIL_LIST& from);
  PROBUFF_NET_MAIL_LIST(PROBUFF_NET_MAIL_LIST&& from) noexcept
    : PROBUFF_NET_MAIL_LIST() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_LIST& operator=(const PROBUFF_NET_MAIL_LIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_LIST& operator=(PROBUFF_NET_MAIL_LIST&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_LIST& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_LIST* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_LIST*>(
               &_PROBUFF_NET_MAIL_LIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PROBUFF_NET_MAIL_LIST& a, PROBUFF_NET_MAIL_LIST& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_LIST* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_LIST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_LIST* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_LIST>(nullptr);
  }

  PROBUFF_NET_MAIL_LIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_LIST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_LIST& from);
  void MergeFrom(const PROBUFF_NET_MAIL_LIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_LIST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_LIST";
  }
  protected:
  explicit PROBUFF_NET_MAIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_LIST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse();
  PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse& other);
  static const PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse*>(&_PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[28];
  }

  public:
};

// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_LIST_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MAIL_LIST_RESPONSE() : PROBUFF_NET_MAIL_LIST_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_MAIL_LIST_RESPONSE();

  PROBUFF_NET_MAIL_LIST_RESPONSE(const PROBUFF_NET_MAIL_LIST_RESPONSE& from);
  PROBUFF_NET_MAIL_LIST_RESPONSE(PROBUFF_NET_MAIL_LIST_RESPONSE&& from) noexcept
    : PROBUFF_NET_MAIL_LIST_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_LIST_RESPONSE& operator=(const PROBUFF_NET_MAIL_LIST_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_LIST_RESPONSE& operator=(PROBUFF_NET_MAIL_LIST_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_LIST_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_LIST_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_LIST_RESPONSE*>(
               &_PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PROBUFF_NET_MAIL_LIST_RESPONSE& a, PROBUFF_NET_MAIL_LIST_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_LIST_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_LIST_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_LIST_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_LIST_RESPONSE>(nullptr);
  }

  PROBUFF_NET_MAIL_LIST_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_LIST_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_LIST_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MAIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMmailFieldNumber = 1,
  };
  // map<int32, .pbdb.mail> mmail = 1;
  int mmail_size() const;
  private:
  int _internal_mmail_size() const;
  public:
  void clear_mmail();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
      _internal_mmail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
      _internal_mutable_mmail();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
      mmail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
      mutable_mmail();

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mmail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_READ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_READ) */ {
 public:
  inline PROBUFF_NET_MAIL_READ() : PROBUFF_NET_MAIL_READ(nullptr) {};
  virtual ~PROBUFF_NET_MAIL_READ();

  PROBUFF_NET_MAIL_READ(const PROBUFF_NET_MAIL_READ& from);
  PROBUFF_NET_MAIL_READ(PROBUFF_NET_MAIL_READ&& from) noexcept
    : PROBUFF_NET_MAIL_READ() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_READ& operator=(const PROBUFF_NET_MAIL_READ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_READ& operator=(PROBUFF_NET_MAIL_READ&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_READ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_READ* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_READ*>(
               &_PROBUFF_NET_MAIL_READ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PROBUFF_NET_MAIL_READ& a, PROBUFF_NET_MAIL_READ& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_READ* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_READ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_READ* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_READ>(nullptr);
  }

  PROBUFF_NET_MAIL_READ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_READ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_READ& from);
  void MergeFrom(const PROBUFF_NET_MAIL_READ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_READ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_READ";
  }
  protected:
  explicit PROBUFF_NET_MAIL_READ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmailidFieldNumber = 1,
  };
  // int64 mmailid = 1;
  bool has_mmailid() const;
  private:
  bool _internal_has_mmailid() const;
  public:
  void clear_mmailid();
  ::PROTOBUF_NAMESPACE_ID::int64 mmailid() const;
  void set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mmailid() const;
  void _internal_set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_READ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mmailid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_READ_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MAIL_READ_RESPONSE() : PROBUFF_NET_MAIL_READ_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_MAIL_READ_RESPONSE();

  PROBUFF_NET_MAIL_READ_RESPONSE(const PROBUFF_NET_MAIL_READ_RESPONSE& from);
  PROBUFF_NET_MAIL_READ_RESPONSE(PROBUFF_NET_MAIL_READ_RESPONSE&& from) noexcept
    : PROBUFF_NET_MAIL_READ_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_READ_RESPONSE& operator=(const PROBUFF_NET_MAIL_READ_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_READ_RESPONSE& operator=(PROBUFF_NET_MAIL_READ_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_READ_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_READ_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_READ_RESPONSE*>(
               &_PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PROBUFF_NET_MAIL_READ_RESPONSE& a, PROBUFF_NET_MAIL_READ_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_READ_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_READ_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_READ_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_READ_RESPONSE>(nullptr);
  }

  PROBUFF_NET_MAIL_READ_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_READ_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_READ_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_MAIL_READ_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_READ_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_READ_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MAIL_READ_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmailidFieldNumber = 1,
    kMstatFieldNumber = 2,
  };
  // int64 mmailid = 1;
  bool has_mmailid() const;
  private:
  bool _internal_has_mmailid() const;
  public:
  void clear_mmailid();
  ::PROTOBUF_NAMESPACE_ID::int64 mmailid() const;
  void set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mmailid() const;
  void _internal_set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool mstat = 2;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  bool mstat() const;
  void set_mstat(bool value);
  private:
  bool _internal_mstat() const;
  void _internal_set_mstat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mmailid_;
  bool mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_DRAW PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_DRAW) */ {
 public:
  inline PROBUFF_NET_MAIL_DRAW() : PROBUFF_NET_MAIL_DRAW(nullptr) {};
  virtual ~PROBUFF_NET_MAIL_DRAW();

  PROBUFF_NET_MAIL_DRAW(const PROBUFF_NET_MAIL_DRAW& from);
  PROBUFF_NET_MAIL_DRAW(PROBUFF_NET_MAIL_DRAW&& from) noexcept
    : PROBUFF_NET_MAIL_DRAW() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_DRAW& operator=(const PROBUFF_NET_MAIL_DRAW& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_DRAW& operator=(PROBUFF_NET_MAIL_DRAW&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_DRAW& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_DRAW* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_DRAW*>(
               &_PROBUFF_NET_MAIL_DRAW_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(PROBUFF_NET_MAIL_DRAW& a, PROBUFF_NET_MAIL_DRAW& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_DRAW* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_DRAW* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_DRAW* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DRAW>(nullptr);
  }

  PROBUFF_NET_MAIL_DRAW* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DRAW>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_DRAW& from);
  void MergeFrom(const PROBUFF_NET_MAIL_DRAW& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_DRAW* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_DRAW";
  }
  protected:
  explicit PROBUFF_NET_MAIL_DRAW(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmailidFieldNumber = 1,
  };
  // int64 mmailid = 1;
  bool has_mmailid() const;
  private:
  bool _internal_has_mmailid() const;
  public:
  void clear_mmailid();
  ::PROTOBUF_NAMESPACE_ID::int64 mmailid() const;
  void set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mmailid() const;
  void _internal_set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_DRAW)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mmailid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_DRAW_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MAIL_DRAW_RESPONSE() : PROBUFF_NET_MAIL_DRAW_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_MAIL_DRAW_RESPONSE();

  PROBUFF_NET_MAIL_DRAW_RESPONSE(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from);
  PROBUFF_NET_MAIL_DRAW_RESPONSE(PROBUFF_NET_MAIL_DRAW_RESPONSE&& from) noexcept
    : PROBUFF_NET_MAIL_DRAW_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_DRAW_RESPONSE& operator=(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_DRAW_RESPONSE& operator=(PROBUFF_NET_MAIL_DRAW_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_DRAW_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_DRAW_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_DRAW_RESPONSE*>(
               &_PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PROBUFF_NET_MAIL_DRAW_RESPONSE& a, PROBUFF_NET_MAIL_DRAW_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_DRAW_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_DRAW_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_DRAW_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DRAW_RESPONSE>(nullptr);
  }

  PROBUFF_NET_MAIL_DRAW_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DRAW_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_DRAW_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MAIL_DRAW_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmailidFieldNumber = 1,
    kMstatFieldNumber = 2,
  };
  // int64 mmailid = 1;
  bool has_mmailid() const;
  private:
  bool _internal_has_mmailid() const;
  public:
  void clear_mmailid();
  ::PROTOBUF_NAMESPACE_ID::int64 mmailid() const;
  void set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mmailid() const;
  void _internal_set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool mstat = 2;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  bool mstat() const;
  void set_mstat(bool value);
  private:
  bool _internal_mstat() const;
  void _internal_set_mstat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mmailid_;
  bool mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_DEL PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_DEL) */ {
 public:
  inline PROBUFF_NET_MAIL_DEL() : PROBUFF_NET_MAIL_DEL(nullptr) {};
  virtual ~PROBUFF_NET_MAIL_DEL();

  PROBUFF_NET_MAIL_DEL(const PROBUFF_NET_MAIL_DEL& from);
  PROBUFF_NET_MAIL_DEL(PROBUFF_NET_MAIL_DEL&& from) noexcept
    : PROBUFF_NET_MAIL_DEL() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_DEL& operator=(const PROBUFF_NET_MAIL_DEL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_DEL& operator=(PROBUFF_NET_MAIL_DEL&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_DEL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_DEL* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_DEL*>(
               &_PROBUFF_NET_MAIL_DEL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(PROBUFF_NET_MAIL_DEL& a, PROBUFF_NET_MAIL_DEL& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_DEL* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_DEL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_DEL* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DEL>(nullptr);
  }

  PROBUFF_NET_MAIL_DEL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DEL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_DEL& from);
  void MergeFrom(const PROBUFF_NET_MAIL_DEL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_DEL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_DEL";
  }
  protected:
  explicit PROBUFF_NET_MAIL_DEL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmailidFieldNumber = 1,
  };
  // int64 mmailid = 1;
  bool has_mmailid() const;
  private:
  bool _internal_has_mmailid() const;
  public:
  void clear_mmailid();
  ::PROTOBUF_NAMESPACE_ID::int64 mmailid() const;
  void set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mmailid() const;
  void _internal_set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_DEL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mmailid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_DEL_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MAIL_DEL_RESPONSE() : PROBUFF_NET_MAIL_DEL_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_MAIL_DEL_RESPONSE();

  PROBUFF_NET_MAIL_DEL_RESPONSE(const PROBUFF_NET_MAIL_DEL_RESPONSE& from);
  PROBUFF_NET_MAIL_DEL_RESPONSE(PROBUFF_NET_MAIL_DEL_RESPONSE&& from) noexcept
    : PROBUFF_NET_MAIL_DEL_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_DEL_RESPONSE& operator=(const PROBUFF_NET_MAIL_DEL_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_DEL_RESPONSE& operator=(PROBUFF_NET_MAIL_DEL_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_DEL_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_DEL_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_DEL_RESPONSE*>(
               &_PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(PROBUFF_NET_MAIL_DEL_RESPONSE& a, PROBUFF_NET_MAIL_DEL_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_DEL_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_DEL_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_DEL_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DEL_RESPONSE>(nullptr);
  }

  PROBUFF_NET_MAIL_DEL_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DEL_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_DEL_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_MAIL_DEL_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_DEL_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MAIL_DEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmailidFieldNumber = 1,
    kMstatFieldNumber = 2,
  };
  // int64 mmailid = 1;
  bool has_mmailid() const;
  private:
  bool _internal_has_mmailid() const;
  public:
  void clear_mmailid();
  ::PROTOBUF_NAMESPACE_ID::int64 mmailid() const;
  void set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mmailid() const;
  void _internal_set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool mstat = 2;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  bool mstat() const;
  void set_mstat(bool value);
  private:
  bool _internal_mstat() const;
  void _internal_set_mstat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mmailid_;
  bool mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_KCPSESSION PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_KCPSESSION) */ {
 public:
  inline PROBUFF_NET_KCPSESSION() : PROBUFF_NET_KCPSESSION(nullptr) {};
  virtual ~PROBUFF_NET_KCPSESSION();

  PROBUFF_NET_KCPSESSION(const PROBUFF_NET_KCPSESSION& from);
  PROBUFF_NET_KCPSESSION(PROBUFF_NET_KCPSESSION&& from) noexcept
    : PROBUFF_NET_KCPSESSION() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_KCPSESSION& operator=(const PROBUFF_NET_KCPSESSION& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_KCPSESSION& operator=(PROBUFF_NET_KCPSESSION&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_KCPSESSION& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_KCPSESSION* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_KCPSESSION*>(
               &_PROBUFF_NET_KCPSESSION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(PROBUFF_NET_KCPSESSION& a, PROBUFF_NET_KCPSESSION& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_KCPSESSION* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_KCPSESSION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_KCPSESSION* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_KCPSESSION>(nullptr);
  }

  PROBUFF_NET_KCPSESSION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_KCPSESSION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_KCPSESSION& from);
  void MergeFrom(const PROBUFF_NET_KCPSESSION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_KCPSESSION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_KCPSESSION";
  }
  protected:
  explicit PROBUFF_NET_KCPSESSION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMuipFieldNumber = 2,
    kMserveridFieldNumber = 1,
    kMuportFieldNumber = 3,
    kMconvFieldNumber = 4,
  };
  // string muip = 2;
  bool has_muip() const;
  private:
  bool _internal_has_muip() const;
  public:
  void clear_muip();
  const std::string& muip() const;
  void set_muip(const std::string& value);
  void set_muip(std::string&& value);
  void set_muip(const char* value);
  void set_muip(const char* value, size_t size);
  std::string* mutable_muip();
  std::string* release_muip();
  void set_allocated_muip(std::string* muip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_muip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_muip(
      std::string* muip);
  private:
  const std::string& _internal_muip() const;
  void _internal_set_muip(const std::string& value);
  std::string* _internal_mutable_muip();
  public:

  // int64 mserverid = 1;
  bool has_mserverid() const;
  private:
  bool _internal_has_mserverid() const;
  public:
  void clear_mserverid();
  ::PROTOBUF_NAMESPACE_ID::int64 mserverid() const;
  void set_mserverid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mserverid() const;
  void _internal_set_mserverid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 muport = 3;
  bool has_muport() const;
  private:
  bool _internal_has_muport() const;
  public:
  void clear_muport();
  ::PROTOBUF_NAMESPACE_ID::int32 muport() const;
  void set_muport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_muport() const;
  void _internal_set_muport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mconv = 4;
  bool has_mconv() const;
  private:
  bool _internal_has_mconv() const;
  public:
  void clear_mconv();
  ::PROTOBUF_NAMESPACE_ID::int32 mconv() const;
  void set_mconv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mconv() const;
  void _internal_set_mconv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_KCPSESSION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr muip_;
  ::PROTOBUF_NAMESPACE_ID::int64 mserverid_;
  ::PROTOBUF_NAMESPACE_ID::int32 muport_;
  ::PROTOBUF_NAMESPACE_ID::int32 mconv_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_KCPSESSION_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE) */ {
 public:
  inline PROBUFF_NET_KCPSESSION_RESPONSE() : PROBUFF_NET_KCPSESSION_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_KCPSESSION_RESPONSE();

  PROBUFF_NET_KCPSESSION_RESPONSE(const PROBUFF_NET_KCPSESSION_RESPONSE& from);
  PROBUFF_NET_KCPSESSION_RESPONSE(PROBUFF_NET_KCPSESSION_RESPONSE&& from) noexcept
    : PROBUFF_NET_KCPSESSION_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_KCPSESSION_RESPONSE& operator=(const PROBUFF_NET_KCPSESSION_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_KCPSESSION_RESPONSE& operator=(PROBUFF_NET_KCPSESSION_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_KCPSESSION_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_KCPSESSION_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_KCPSESSION_RESPONSE*>(
               &_PROBUFF_NET_KCPSESSION_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(PROBUFF_NET_KCPSESSION_RESPONSE& a, PROBUFF_NET_KCPSESSION_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_KCPSESSION_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_KCPSESSION_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_KCPSESSION_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_KCPSESSION_RESPONSE>(nullptr);
  }

  PROBUFF_NET_KCPSESSION_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_KCPSESSION_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_KCPSESSION_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_KCPSESSION_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_KCPSESSION_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_KCPSESSION_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_KCPSESSION_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMkcpsessionFieldNumber = 1,
  };
  // string mkcpsession = 1;
  bool has_mkcpsession() const;
  private:
  bool _internal_has_mkcpsession() const;
  public:
  void clear_mkcpsession();
  const std::string& mkcpsession() const;
  void set_mkcpsession(const std::string& value);
  void set_mkcpsession(std::string&& value);
  void set_mkcpsession(const char* value);
  void set_mkcpsession(const char* value, size_t size);
  std::string* mutable_mkcpsession();
  std::string* release_mkcpsession();
  void set_allocated_mkcpsession(std::string* mkcpsession);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mkcpsession();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mkcpsession(
      std::string* mkcpsession);
  private:
  const std::string& _internal_mkcpsession() const;
  void _internal_set_mkcpsession(const std::string& value);
  std::string* _internal_mutable_mkcpsession();
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mkcpsession_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_TASK_RECEIVE_AWARD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD) */ {
 public:
  inline PROBUFF_NET_TASK_RECEIVE_AWARD() : PROBUFF_NET_TASK_RECEIVE_AWARD(nullptr) {};
  virtual ~PROBUFF_NET_TASK_RECEIVE_AWARD();

  PROBUFF_NET_TASK_RECEIVE_AWARD(const PROBUFF_NET_TASK_RECEIVE_AWARD& from);
  PROBUFF_NET_TASK_RECEIVE_AWARD(PROBUFF_NET_TASK_RECEIVE_AWARD&& from) noexcept
    : PROBUFF_NET_TASK_RECEIVE_AWARD() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_TASK_RECEIVE_AWARD& operator=(const PROBUFF_NET_TASK_RECEIVE_AWARD& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_TASK_RECEIVE_AWARD& operator=(PROBUFF_NET_TASK_RECEIVE_AWARD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_TASK_RECEIVE_AWARD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_TASK_RECEIVE_AWARD* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_TASK_RECEIVE_AWARD*>(
               &_PROBUFF_NET_TASK_RECEIVE_AWARD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(PROBUFF_NET_TASK_RECEIVE_AWARD& a, PROBUFF_NET_TASK_RECEIVE_AWARD& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_TASK_RECEIVE_AWARD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_TASK_RECEIVE_AWARD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_TASK_RECEIVE_AWARD* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_TASK_RECEIVE_AWARD>(nullptr);
  }

  PROBUFF_NET_TASK_RECEIVE_AWARD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_TASK_RECEIVE_AWARD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD& from);
  void MergeFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_TASK_RECEIVE_AWARD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD";
  }
  protected:
  explicit PROBUFF_NET_TASK_RECEIVE_AWARD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMtaskidFieldNumber = 1,
  };
  // int32 mtaskid = 1;
  bool has_mtaskid() const;
  private:
  bool _internal_has_mtaskid() const;
  public:
  void clear_mtaskid();
  ::PROTOBUF_NAMESPACE_ID::int32 mtaskid() const;
  void set_mtaskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtaskid() const;
  void _internal_set_mtaskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtaskid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class drop_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.drop_item) */ {
 public:
  inline drop_item() : drop_item(nullptr) {};
  virtual ~drop_item();

  drop_item(const drop_item& from);
  drop_item(drop_item&& from) noexcept
    : drop_item() {
    *this = ::std::move(from);
  }

  inline drop_item& operator=(const drop_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline drop_item& operator=(drop_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const drop_item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const drop_item* internal_default_instance() {
    return reinterpret_cast<const drop_item*>(
               &_drop_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(drop_item& a, drop_item& b) {
    a.Swap(&b);
  }
  inline void Swap(drop_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(drop_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline drop_item* New() const final {
    return CreateMaybeMessage<drop_item>(nullptr);
  }

  drop_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<drop_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const drop_item& from);
  void MergeFrom(const drop_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(drop_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.drop_item";
  }
  protected:
  explicit drop_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMitemFieldNumber = 1,
    kMcountFieldNumber = 2,
  };
  // int32 mitem = 1;
  bool has_mitem() const;
  private:
  bool _internal_has_mitem() const;
  public:
  void clear_mitem();
  ::PROTOBUF_NAMESPACE_ID::int32 mitem() const;
  void set_mitem(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mitem() const;
  void _internal_set_mitem(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mcount = 2;
  bool has_mcount() const;
  private:
  bool _internal_has_mcount() const;
  public:
  void clear_mcount();
  ::PROTOBUF_NAMESPACE_ID::int32 mcount() const;
  void set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mcount() const;
  void _internal_set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.drop_item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mitem_;
  ::PROTOBUF_NAMESPACE_ID::int32 mcount_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse();
  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse& other);
  static const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse*>(&_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[40];
  }

  public:
};

// -------------------------------------------------------------------

class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE) */ {
 public:
  inline PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE() : PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE();

  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from);
  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE&& from) noexcept
    : PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& operator=(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& operator=(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE*>(
               &_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& a, PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE>(nullptr);
  }

  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMdropFieldNumber = 3,
    kMtaskidFieldNumber = 1,
    kMstatFieldNumber = 2,
  };
  // map<int32, int32> mdrop = 3;
  int mdrop_size() const;
  private:
  int _internal_mdrop_size() const;
  public:
  void clear_mdrop();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_mdrop() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_mdrop();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      mdrop() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_mdrop();

  // int32 mtaskid = 1;
  bool has_mtaskid() const;
  private:
  bool _internal_has_mtaskid() const;
  public:
  void clear_mtaskid();
  ::PROTOBUF_NAMESPACE_ID::int32 mtaskid() const;
  void set_mtaskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtaskid() const;
  void _internal_set_mtaskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool mstat = 2;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  bool mstat() const;
  void set_mstat(bool value);
  private:
  bool _internal_mstat() const;
  void _internal_set_mstat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > mdrop_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtaskid_;
  bool mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_CREATE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_CREATE) */ {
 public:
  inline PROBUFF_NET_FAMIL_CREATE() : PROBUFF_NET_FAMIL_CREATE(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_CREATE();

  PROBUFF_NET_FAMIL_CREATE(const PROBUFF_NET_FAMIL_CREATE& from);
  PROBUFF_NET_FAMIL_CREATE(PROBUFF_NET_FAMIL_CREATE&& from) noexcept
    : PROBUFF_NET_FAMIL_CREATE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_CREATE& operator=(const PROBUFF_NET_FAMIL_CREATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_CREATE& operator=(PROBUFF_NET_FAMIL_CREATE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_CREATE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_CREATE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_CREATE*>(
               &_PROBUFF_NET_FAMIL_CREATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(PROBUFF_NET_FAMIL_CREATE& a, PROBUFF_NET_FAMIL_CREATE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_CREATE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_CREATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_CREATE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_CREATE>(nullptr);
  }

  PROBUFF_NET_FAMIL_CREATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_CREATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_CREATE& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_CREATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_CREATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_CREATE";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_CREATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMnameFieldNumber = 1,
  };
  // string mname = 1;
  bool has_mname() const;
  private:
  bool _internal_has_mname() const;
  public:
  void clear_mname();
  const std::string& mname() const;
  void set_mname(const std::string& value);
  void set_mname(std::string&& value);
  void set_mname(const char* value);
  void set_mname(const char* value, size_t size);
  std::string* mutable_mname();
  std::string* release_mname();
  void set_allocated_mname(std::string* mname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mname(
      std::string* mname);
  private:
  const std::string& _internal_mname() const;
  void _internal_set_mname(const std::string& value);
  std::string* _internal_mutable_mname();
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_CREATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mname_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_CREATE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FAMIL_CREATE_RESPONSE() : PROBUFF_NET_FAMIL_CREATE_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_CREATE_RESPONSE();

  PROBUFF_NET_FAMIL_CREATE_RESPONSE(const PROBUFF_NET_FAMIL_CREATE_RESPONSE& from);
  PROBUFF_NET_FAMIL_CREATE_RESPONSE(PROBUFF_NET_FAMIL_CREATE_RESPONSE&& from) noexcept
    : PROBUFF_NET_FAMIL_CREATE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_CREATE_RESPONSE& operator=(const PROBUFF_NET_FAMIL_CREATE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_CREATE_RESPONSE& operator=(PROBUFF_NET_FAMIL_CREATE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_CREATE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_CREATE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_CREATE_RESPONSE*>(
               &_PROBUFF_NET_FAMIL_CREATE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(PROBUFF_NET_FAMIL_CREATE_RESPONSE& a, PROBUFF_NET_FAMIL_CREATE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_CREATE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_CREATE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_CREATE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_CREATE_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FAMIL_CREATE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_CREATE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_CREATE_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_CREATE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_CREATE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_CREATE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMstatFieldNumber = 1,
  };
  // int32 mstat = 1;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  ::PROTOBUF_NAMESPACE_ID::int32 mstat() const;
  void set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mstat() const;
  void _internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_INFO PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_INFO) */ {
 public:
  inline PROBUFF_NET_FAMIL_INFO() : PROBUFF_NET_FAMIL_INFO(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_INFO();

  PROBUFF_NET_FAMIL_INFO(const PROBUFF_NET_FAMIL_INFO& from);
  PROBUFF_NET_FAMIL_INFO(PROBUFF_NET_FAMIL_INFO&& from) noexcept
    : PROBUFF_NET_FAMIL_INFO() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_INFO& operator=(const PROBUFF_NET_FAMIL_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_INFO& operator=(PROBUFF_NET_FAMIL_INFO&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_INFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_INFO* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_INFO*>(
               &_PROBUFF_NET_FAMIL_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(PROBUFF_NET_FAMIL_INFO& a, PROBUFF_NET_FAMIL_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_INFO* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_INFO* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_INFO>(nullptr);
  }

  PROBUFF_NET_FAMIL_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_INFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_INFO& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_INFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_INFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_INFO";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_INFO_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FAMIL_INFO_RESPONSE() : PROBUFF_NET_FAMIL_INFO_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_INFO_RESPONSE();

  PROBUFF_NET_FAMIL_INFO_RESPONSE(const PROBUFF_NET_FAMIL_INFO_RESPONSE& from);
  PROBUFF_NET_FAMIL_INFO_RESPONSE(PROBUFF_NET_FAMIL_INFO_RESPONSE&& from) noexcept
    : PROBUFF_NET_FAMIL_INFO_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_INFO_RESPONSE& operator=(const PROBUFF_NET_FAMIL_INFO_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_INFO_RESPONSE& operator=(PROBUFF_NET_FAMIL_INFO_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_INFO_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_INFO_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_INFO_RESPONSE*>(
               &_PROBUFF_NET_FAMIL_INFO_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(PROBUFF_NET_FAMIL_INFO_RESPONSE& a, PROBUFF_NET_FAMIL_INFO_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_INFO_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_INFO_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_INFO_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_INFO_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FAMIL_INFO_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_INFO_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_INFO_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_INFO_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_INFO_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_INFO_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmemberFieldNumber = 3,
    kMinfoFieldNumber = 2,
    kMstatFieldNumber = 1,
  };
  // repeated .pbdb.db_brief mmember = 3;
  int mmember_size() const;
  private:
  int _internal_mmember_size() const;
  public:
  void clear_mmember();
  ::pbdb::db_brief* mutable_mmember(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >*
      mutable_mmember();
  private:
  const ::pbdb::db_brief& _internal_mmember(int index) const;
  ::pbdb::db_brief* _internal_add_mmember();
  public:
  const ::pbdb::db_brief& mmember(int index) const;
  ::pbdb::db_brief* add_mmember();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >&
      mmember() const;

  // .pbdb.db_family minfo = 2;
  bool has_minfo() const;
  private:
  bool _internal_has_minfo() const;
  public:
  void clear_minfo();
  const ::pbdb::db_family& minfo() const;
  ::pbdb::db_family* release_minfo();
  ::pbdb::db_family* mutable_minfo();
  void set_allocated_minfo(::pbdb::db_family* minfo);
  private:
  const ::pbdb::db_family& _internal_minfo() const;
  ::pbdb::db_family* _internal_mutable_minfo();
  public:
  void unsafe_arena_set_allocated_minfo(
      ::pbdb::db_family* minfo);
  ::pbdb::db_family* unsafe_arena_release_minfo();

  // int32 mstat = 1;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  ::PROTOBUF_NAMESPACE_ID::int32 mstat() const;
  void set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mstat() const;
  void _internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief > mmember_;
  ::pbdb::db_family* minfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_JOIN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_JOIN) */ {
 public:
  inline PROBUFF_NET_FAMIL_JOIN() : PROBUFF_NET_FAMIL_JOIN(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_JOIN();

  PROBUFF_NET_FAMIL_JOIN(const PROBUFF_NET_FAMIL_JOIN& from);
  PROBUFF_NET_FAMIL_JOIN(PROBUFF_NET_FAMIL_JOIN&& from) noexcept
    : PROBUFF_NET_FAMIL_JOIN() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_JOIN& operator=(const PROBUFF_NET_FAMIL_JOIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_JOIN& operator=(PROBUFF_NET_FAMIL_JOIN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_JOIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_JOIN* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_JOIN*>(
               &_PROBUFF_NET_FAMIL_JOIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(PROBUFF_NET_FAMIL_JOIN& a, PROBUFF_NET_FAMIL_JOIN& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_JOIN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_JOIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_JOIN* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_JOIN>(nullptr);
  }

  PROBUFF_NET_FAMIL_JOIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_JOIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_JOIN& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_JOIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_JOIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_JOIN";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_JOIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfamilidFieldNumber = 1,
    kMapplyFieldNumber = 2,
  };
  // int64 mfamilid = 1;
  bool has_mfamilid() const;
  private:
  bool _internal_has_mfamilid() const;
  public:
  void clear_mfamilid();
  ::PROTOBUF_NAMESPACE_ID::int64 mfamilid() const;
  void set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mfamilid() const;
  void _internal_set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool mapply = 2;
  bool has_mapply() const;
  private:
  bool _internal_has_mapply() const;
  public:
  void clear_mapply();
  bool mapply() const;
  void set_mapply(bool value);
  private:
  bool _internal_mapply() const;
  void _internal_set_mapply(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_JOIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mfamilid_;
  bool mapply_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_JOIN_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FAMIL_JOIN_RESPONSE() : PROBUFF_NET_FAMIL_JOIN_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_JOIN_RESPONSE();

  PROBUFF_NET_FAMIL_JOIN_RESPONSE(const PROBUFF_NET_FAMIL_JOIN_RESPONSE& from);
  PROBUFF_NET_FAMIL_JOIN_RESPONSE(PROBUFF_NET_FAMIL_JOIN_RESPONSE&& from) noexcept
    : PROBUFF_NET_FAMIL_JOIN_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_JOIN_RESPONSE& operator=(const PROBUFF_NET_FAMIL_JOIN_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_JOIN_RESPONSE& operator=(PROBUFF_NET_FAMIL_JOIN_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_JOIN_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_JOIN_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_JOIN_RESPONSE*>(
               &_PROBUFF_NET_FAMIL_JOIN_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(PROBUFF_NET_FAMIL_JOIN_RESPONSE& a, PROBUFF_NET_FAMIL_JOIN_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_JOIN_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_JOIN_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_JOIN_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_JOIN_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FAMIL_JOIN_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_JOIN_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_JOIN_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_JOIN_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_JOIN_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_JOIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMstatFieldNumber = 1,
  };
  // int32 mstat = 1;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  ::PROTOBUF_NAMESPACE_ID::int32 mstat() const;
  void set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mstat() const;
  void _internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_RATIFY_JOIN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN) */ {
 public:
  inline PROBUFF_NET_FAMIL_RATIFY_JOIN() : PROBUFF_NET_FAMIL_RATIFY_JOIN(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_RATIFY_JOIN();

  PROBUFF_NET_FAMIL_RATIFY_JOIN(const PROBUFF_NET_FAMIL_RATIFY_JOIN& from);
  PROBUFF_NET_FAMIL_RATIFY_JOIN(PROBUFF_NET_FAMIL_RATIFY_JOIN&& from) noexcept
    : PROBUFF_NET_FAMIL_RATIFY_JOIN() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_RATIFY_JOIN& operator=(const PROBUFF_NET_FAMIL_RATIFY_JOIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_RATIFY_JOIN& operator=(PROBUFF_NET_FAMIL_RATIFY_JOIN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_RATIFY_JOIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_RATIFY_JOIN* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_RATIFY_JOIN*>(
               &_PROBUFF_NET_FAMIL_RATIFY_JOIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(PROBUFF_NET_FAMIL_RATIFY_JOIN& a, PROBUFF_NET_FAMIL_RATIFY_JOIN& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_RATIFY_JOIN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_RATIFY_JOIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_RATIFY_JOIN* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_RATIFY_JOIN>(nullptr);
  }

  PROBUFF_NET_FAMIL_RATIFY_JOIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_RATIFY_JOIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_RATIFY_JOIN& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_RATIFY_JOIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_RATIFY_JOIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_RATIFY_JOIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMroleidFieldNumber = 1,
    kMratifyFieldNumber = 2,
  };
  // int64 mroleid = 1;
  bool has_mroleid() const;
  private:
  bool _internal_has_mroleid() const;
  public:
  void clear_mroleid();
  ::PROTOBUF_NAMESPACE_ID::int64 mroleid() const;
  void set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mroleid() const;
  void _internal_set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool mratify = 2;
  bool has_mratify() const;
  private:
  bool _internal_has_mratify() const;
  public:
  void clear_mratify();
  bool mratify() const;
  void set_mratify(bool value);
  private:
  bool _internal_mratify() const;
  void _internal_set_mratify(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mroleid_;
  bool mratify_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE() : PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE();

  PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE(const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& from);
  PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE(PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE&& from) noexcept
    : PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& operator=(const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& operator=(PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE*>(
               &_PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& a, PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMstatFieldNumber = 1,
  };
  // int32 mstat = 1;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  ::PROTOBUF_NAMESPACE_ID::int32 mstat() const;
  void set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mstat() const;
  void _internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_CEDE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_CEDE) */ {
 public:
  inline PROBUFF_NET_FAMIL_CEDE() : PROBUFF_NET_FAMIL_CEDE(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_CEDE();

  PROBUFF_NET_FAMIL_CEDE(const PROBUFF_NET_FAMIL_CEDE& from);
  PROBUFF_NET_FAMIL_CEDE(PROBUFF_NET_FAMIL_CEDE&& from) noexcept
    : PROBUFF_NET_FAMIL_CEDE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_CEDE& operator=(const PROBUFF_NET_FAMIL_CEDE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_CEDE& operator=(PROBUFF_NET_FAMIL_CEDE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_CEDE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_CEDE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_CEDE*>(
               &_PROBUFF_NET_FAMIL_CEDE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(PROBUFF_NET_FAMIL_CEDE& a, PROBUFF_NET_FAMIL_CEDE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_CEDE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_CEDE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_CEDE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_CEDE>(nullptr);
  }

  PROBUFF_NET_FAMIL_CEDE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_CEDE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_CEDE& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_CEDE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_CEDE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_CEDE";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_CEDE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMroleidFieldNumber = 1,
  };
  // int64 mroleid = 1;
  bool has_mroleid() const;
  private:
  bool _internal_has_mroleid() const;
  public:
  void clear_mroleid();
  ::PROTOBUF_NAMESPACE_ID::int64 mroleid() const;
  void set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mroleid() const;
  void _internal_set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_CEDE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mroleid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_CEDE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FAMIL_CEDE_RESPONSE() : PROBUFF_NET_FAMIL_CEDE_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_CEDE_RESPONSE();

  PROBUFF_NET_FAMIL_CEDE_RESPONSE(const PROBUFF_NET_FAMIL_CEDE_RESPONSE& from);
  PROBUFF_NET_FAMIL_CEDE_RESPONSE(PROBUFF_NET_FAMIL_CEDE_RESPONSE&& from) noexcept
    : PROBUFF_NET_FAMIL_CEDE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_CEDE_RESPONSE& operator=(const PROBUFF_NET_FAMIL_CEDE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_CEDE_RESPONSE& operator=(PROBUFF_NET_FAMIL_CEDE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_CEDE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_CEDE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_CEDE_RESPONSE*>(
               &_PROBUFF_NET_FAMIL_CEDE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(PROBUFF_NET_FAMIL_CEDE_RESPONSE& a, PROBUFF_NET_FAMIL_CEDE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_CEDE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_CEDE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_CEDE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_CEDE_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FAMIL_CEDE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_CEDE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_CEDE_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_CEDE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_CEDE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_CEDE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMstatFieldNumber = 1,
  };
  // int32 mstat = 1;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  ::PROTOBUF_NAMESPACE_ID::int32 mstat() const;
  void set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mstat() const;
  void _internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_LEAVE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_LEAVE) */ {
 public:
  inline PROBUFF_NET_FAMIL_LEAVE() : PROBUFF_NET_FAMIL_LEAVE(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_LEAVE();

  PROBUFF_NET_FAMIL_LEAVE(const PROBUFF_NET_FAMIL_LEAVE& from);
  PROBUFF_NET_FAMIL_LEAVE(PROBUFF_NET_FAMIL_LEAVE&& from) noexcept
    : PROBUFF_NET_FAMIL_LEAVE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_LEAVE& operator=(const PROBUFF_NET_FAMIL_LEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_LEAVE& operator=(PROBUFF_NET_FAMIL_LEAVE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_LEAVE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_LEAVE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_LEAVE*>(
               &_PROBUFF_NET_FAMIL_LEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(PROBUFF_NET_FAMIL_LEAVE& a, PROBUFF_NET_FAMIL_LEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_LEAVE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_LEAVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_LEAVE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_LEAVE>(nullptr);
  }

  PROBUFF_NET_FAMIL_LEAVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_LEAVE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_LEAVE& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_LEAVE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_LEAVE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_LEAVE";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfamilidFieldNumber = 1,
  };
  // int64 mfamilid = 1;
  bool has_mfamilid() const;
  private:
  bool _internal_has_mfamilid() const;
  public:
  void clear_mfamilid();
  ::PROTOBUF_NAMESPACE_ID::int64 mfamilid() const;
  void set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mfamilid() const;
  void _internal_set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_LEAVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mfamilid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_LEAVE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FAMIL_LEAVE_RESPONSE() : PROBUFF_NET_FAMIL_LEAVE_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_LEAVE_RESPONSE();

  PROBUFF_NET_FAMIL_LEAVE_RESPONSE(const PROBUFF_NET_FAMIL_LEAVE_RESPONSE& from);
  PROBUFF_NET_FAMIL_LEAVE_RESPONSE(PROBUFF_NET_FAMIL_LEAVE_RESPONSE&& from) noexcept
    : PROBUFF_NET_FAMIL_LEAVE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_LEAVE_RESPONSE& operator=(const PROBUFF_NET_FAMIL_LEAVE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_LEAVE_RESPONSE& operator=(PROBUFF_NET_FAMIL_LEAVE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_LEAVE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_LEAVE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_LEAVE_RESPONSE*>(
               &_PROBUFF_NET_FAMIL_LEAVE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(PROBUFF_NET_FAMIL_LEAVE_RESPONSE& a, PROBUFF_NET_FAMIL_LEAVE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_LEAVE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_LEAVE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_LEAVE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_LEAVE_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FAMIL_LEAVE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_LEAVE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_LEAVE_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_LEAVE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_LEAVE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_LEAVE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMstatFieldNumber = 1,
  };
  // int32 mstat = 1;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  ::PROTOBUF_NAMESPACE_ID::int32 mstat() const;
  void set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mstat() const;
  void _internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_LIST PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_LIST) */ {
 public:
  inline PROBUFF_NET_FAMIL_LIST() : PROBUFF_NET_FAMIL_LIST(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_LIST();

  PROBUFF_NET_FAMIL_LIST(const PROBUFF_NET_FAMIL_LIST& from);
  PROBUFF_NET_FAMIL_LIST(PROBUFF_NET_FAMIL_LIST&& from) noexcept
    : PROBUFF_NET_FAMIL_LIST() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_LIST& operator=(const PROBUFF_NET_FAMIL_LIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_LIST& operator=(PROBUFF_NET_FAMIL_LIST&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_LIST& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_LIST* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_LIST*>(
               &_PROBUFF_NET_FAMIL_LIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(PROBUFF_NET_FAMIL_LIST& a, PROBUFF_NET_FAMIL_LIST& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_LIST* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_LIST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_LIST* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_LIST>(nullptr);
  }

  PROBUFF_NET_FAMIL_LIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_LIST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_LIST& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_LIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_LIST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_LIST";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfamilidFieldNumber = 1,
  };
  // int64 mfamilid = 1;
  bool has_mfamilid() const;
  private:
  bool _internal_has_mfamilid() const;
  public:
  void clear_mfamilid();
  ::PROTOBUF_NAMESPACE_ID::int64 mfamilid() const;
  void set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mfamilid() const;
  void _internal_set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_LIST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mfamilid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_LIST_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FAMIL_LIST_RESPONSE() : PROBUFF_NET_FAMIL_LIST_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_LIST_RESPONSE();

  PROBUFF_NET_FAMIL_LIST_RESPONSE(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from);
  PROBUFF_NET_FAMIL_LIST_RESPONSE(PROBUFF_NET_FAMIL_LIST_RESPONSE&& from) noexcept
    : PROBUFF_NET_FAMIL_LIST_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_LIST_RESPONSE& operator=(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_LIST_RESPONSE& operator=(PROBUFF_NET_FAMIL_LIST_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_LIST_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_LIST_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_LIST_RESPONSE*>(
               &_PROBUFF_NET_FAMIL_LIST_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(PROBUFF_NET_FAMIL_LIST_RESPONSE& a, PROBUFF_NET_FAMIL_LIST_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_LIST_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_LIST_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_LIST_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_LIST_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FAMIL_LIST_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_LIST_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_LIST_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfamilyFieldNumber = 2,
    kMfamilidFieldNumber = 1,
  };
  // repeated .pbdb.db_family mfamily = 2;
  int mfamily_size() const;
  private:
  int _internal_mfamily_size() const;
  public:
  void clear_mfamily();
  ::pbdb::db_family* mutable_mfamily(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_family >*
      mutable_mfamily();
  private:
  const ::pbdb::db_family& _internal_mfamily(int index) const;
  ::pbdb::db_family* _internal_add_mfamily();
  public:
  const ::pbdb::db_family& mfamily(int index) const;
  ::pbdb::db_family* add_mfamily();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_family >&
      mfamily() const;

  // int64 mfamilid = 1;
  bool has_mfamilid() const;
  private:
  bool _internal_has_mfamilid() const;
  public:
  void clear_mfamilid();
  ::PROTOBUF_NAMESPACE_ID::int64 mfamilid() const;
  void set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mfamilid() const;
  void _internal_set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_family > mfamily_;
  ::PROTOBUF_NAMESPACE_ID::int64 mfamilid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_CHANGENAME PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_CHANGENAME) */ {
 public:
  inline PROBUFF_NET_FAMIL_CHANGENAME() : PROBUFF_NET_FAMIL_CHANGENAME(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_CHANGENAME();

  PROBUFF_NET_FAMIL_CHANGENAME(const PROBUFF_NET_FAMIL_CHANGENAME& from);
  PROBUFF_NET_FAMIL_CHANGENAME(PROBUFF_NET_FAMIL_CHANGENAME&& from) noexcept
    : PROBUFF_NET_FAMIL_CHANGENAME() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_CHANGENAME& operator=(const PROBUFF_NET_FAMIL_CHANGENAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_CHANGENAME& operator=(PROBUFF_NET_FAMIL_CHANGENAME&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_CHANGENAME& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_CHANGENAME* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_CHANGENAME*>(
               &_PROBUFF_NET_FAMIL_CHANGENAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(PROBUFF_NET_FAMIL_CHANGENAME& a, PROBUFF_NET_FAMIL_CHANGENAME& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_CHANGENAME* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_CHANGENAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_CHANGENAME* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_CHANGENAME>(nullptr);
  }

  PROBUFF_NET_FAMIL_CHANGENAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_CHANGENAME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_CHANGENAME& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_CHANGENAME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_CHANGENAME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_CHANGENAME";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_CHANGENAME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMnameFieldNumber = 2,
    kMfamilidFieldNumber = 1,
  };
  // string mname = 2;
  bool has_mname() const;
  private:
  bool _internal_has_mname() const;
  public:
  void clear_mname();
  const std::string& mname() const;
  void set_mname(const std::string& value);
  void set_mname(std::string&& value);
  void set_mname(const char* value);
  void set_mname(const char* value, size_t size);
  std::string* mutable_mname();
  std::string* release_mname();
  void set_allocated_mname(std::string* mname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mname(
      std::string* mname);
  private:
  const std::string& _internal_mname() const;
  void _internal_set_mname(const std::string& value);
  std::string* _internal_mutable_mname();
  public:

  // int64 mfamilid = 1;
  bool has_mfamilid() const;
  private:
  bool _internal_has_mfamilid() const;
  public:
  void clear_mfamilid();
  ::PROTOBUF_NAMESPACE_ID::int64 mfamilid() const;
  void set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mfamilid() const;
  void _internal_set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mname_;
  ::PROTOBUF_NAMESPACE_ID::int64 mfamilid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE() : PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE();

  PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE(const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& from);
  PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE(PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE&& from) noexcept
    : PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& operator=(const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& operator=(PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE*>(
               &_PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& a, PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMstatFieldNumber = 1,
  };
  // int32 mstat = 1;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  ::PROTOBUF_NAMESPACE_ID::int32 mstat() const;
  void set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mstat() const;
  void _internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_SIGN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_SIGN) */ {
 public:
  inline PROBUFF_NET_FAMIL_SIGN() : PROBUFF_NET_FAMIL_SIGN(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_SIGN();

  PROBUFF_NET_FAMIL_SIGN(const PROBUFF_NET_FAMIL_SIGN& from);
  PROBUFF_NET_FAMIL_SIGN(PROBUFF_NET_FAMIL_SIGN&& from) noexcept
    : PROBUFF_NET_FAMIL_SIGN() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_SIGN& operator=(const PROBUFF_NET_FAMIL_SIGN& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_SIGN& operator=(PROBUFF_NET_FAMIL_SIGN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_SIGN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_SIGN* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_SIGN*>(
               &_PROBUFF_NET_FAMIL_SIGN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(PROBUFF_NET_FAMIL_SIGN& a, PROBUFF_NET_FAMIL_SIGN& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_SIGN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_SIGN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_SIGN* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_SIGN>(nullptr);
  }

  PROBUFF_NET_FAMIL_SIGN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_SIGN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_SIGN& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_SIGN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_SIGN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_SIGN";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_SIGN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfamilidFieldNumber = 1,
  };
  // int64 mfamilid = 1;
  bool has_mfamilid() const;
  private:
  bool _internal_has_mfamilid() const;
  public:
  void clear_mfamilid();
  ::PROTOBUF_NAMESPACE_ID::int64 mfamilid() const;
  void set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mfamilid() const;
  void _internal_set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_SIGN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mfamilid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_SIGN_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FAMIL_SIGN_RESPONSE() : PROBUFF_NET_FAMIL_SIGN_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_FAMIL_SIGN_RESPONSE();

  PROBUFF_NET_FAMIL_SIGN_RESPONSE(const PROBUFF_NET_FAMIL_SIGN_RESPONSE& from);
  PROBUFF_NET_FAMIL_SIGN_RESPONSE(PROBUFF_NET_FAMIL_SIGN_RESPONSE&& from) noexcept
    : PROBUFF_NET_FAMIL_SIGN_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_SIGN_RESPONSE& operator=(const PROBUFF_NET_FAMIL_SIGN_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_SIGN_RESPONSE& operator=(PROBUFF_NET_FAMIL_SIGN_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_SIGN_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_SIGN_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_SIGN_RESPONSE*>(
               &_PROBUFF_NET_FAMIL_SIGN_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(PROBUFF_NET_FAMIL_SIGN_RESPONSE& a, PROBUFF_NET_FAMIL_SIGN_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_SIGN_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_SIGN_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_SIGN_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_SIGN_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FAMIL_SIGN_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_SIGN_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_SIGN_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_SIGN_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_SIGN_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_SIGN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMstatFieldNumber = 1,
  };
  // int32 mstat = 1;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  ::PROTOBUF_NAMESPACE_ID::int32 mstat() const;
  void set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mstat() const;
  void _internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse();
  PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse& other);
  static const PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse*>(&_PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[60];
  }

  public:
};

// -------------------------------------------------------------------

class PROBUFF_NET_REWARD_ITEM_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE) */ {
 public:
  inline PROBUFF_NET_REWARD_ITEM_RESPONSE() : PROBUFF_NET_REWARD_ITEM_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_REWARD_ITEM_RESPONSE();

  PROBUFF_NET_REWARD_ITEM_RESPONSE(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from);
  PROBUFF_NET_REWARD_ITEM_RESPONSE(PROBUFF_NET_REWARD_ITEM_RESPONSE&& from) noexcept
    : PROBUFF_NET_REWARD_ITEM_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_REWARD_ITEM_RESPONSE& operator=(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_REWARD_ITEM_RESPONSE& operator=(PROBUFF_NET_REWARD_ITEM_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_REWARD_ITEM_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_REWARD_ITEM_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_REWARD_ITEM_RESPONSE*>(
               &_PROBUFF_NET_REWARD_ITEM_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(PROBUFF_NET_REWARD_ITEM_RESPONSE& a, PROBUFF_NET_REWARD_ITEM_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_REWARD_ITEM_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_REWARD_ITEM_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_REWARD_ITEM_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_REWARD_ITEM_RESPONSE>(nullptr);
  }

  PROBUFF_NET_REWARD_ITEM_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_REWARD_ITEM_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_REWARD_ITEM_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_REWARD_ITEM_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMitemsFieldNumber = 1,
  };
  // map<int32, int32> mitems = 1;
  int mitems_size() const;
  private:
  int _internal_mitems_size() const;
  public:
  void clear_mitems();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_mitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_mitems();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      mitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_mitems();

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > mitems_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_RANKLIST PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_RANKLIST) */ {
 public:
  inline PROBUFF_NET_RANKLIST() : PROBUFF_NET_RANKLIST(nullptr) {};
  virtual ~PROBUFF_NET_RANKLIST();

  PROBUFF_NET_RANKLIST(const PROBUFF_NET_RANKLIST& from);
  PROBUFF_NET_RANKLIST(PROBUFF_NET_RANKLIST&& from) noexcept
    : PROBUFF_NET_RANKLIST() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_RANKLIST& operator=(const PROBUFF_NET_RANKLIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_RANKLIST& operator=(PROBUFF_NET_RANKLIST&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_RANKLIST& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_RANKLIST* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_RANKLIST*>(
               &_PROBUFF_NET_RANKLIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(PROBUFF_NET_RANKLIST& a, PROBUFF_NET_RANKLIST& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_RANKLIST* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_RANKLIST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_RANKLIST* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_RANKLIST>(nullptr);
  }

  PROBUFF_NET_RANKLIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_RANKLIST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_RANKLIST& from);
  void MergeFrom(const PROBUFF_NET_RANKLIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_RANKLIST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_RANKLIST";
  }
  protected:
  explicit PROBUFF_NET_RANKLIST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMiscrossFieldNumber = 1,
    kMtypeFieldNumber = 2,
    kMactivityidFieldNumber = 3,
    kMpageFieldNumber = 4,
  };
  // bool miscross = 1;
  bool has_miscross() const;
  private:
  bool _internal_has_miscross() const;
  public:
  void clear_miscross();
  bool miscross() const;
  void set_miscross(bool value);
  private:
  bool _internal_miscross() const;
  void _internal_set_miscross(bool value);
  public:

  // .pbdb.eranklist mtype = 2;
  bool has_mtype() const;
  private:
  bool _internal_has_mtype() const;
  public:
  void clear_mtype();
  ::pbdb::eranklist mtype() const;
  void set_mtype(::pbdb::eranklist value);
  private:
  ::pbdb::eranklist _internal_mtype() const;
  void _internal_set_mtype(::pbdb::eranklist value);
  public:

  // int32 mactivityid = 3;
  bool has_mactivityid() const;
  private:
  bool _internal_has_mactivityid() const;
  public:
  void clear_mactivityid();
  ::PROTOBUF_NAMESPACE_ID::int32 mactivityid() const;
  void set_mactivityid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mactivityid() const;
  void _internal_set_mactivityid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mpage = 4;
  bool has_mpage() const;
  private:
  bool _internal_has_mpage() const;
  public:
  void clear_mpage();
  ::PROTOBUF_NAMESPACE_ID::int32 mpage() const;
  void set_mpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mpage() const;
  void _internal_set_mpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_RANKLIST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool miscross_;
  int mtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 mactivityid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mpage_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_RANKLIST_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_RANKLIST_RESPONSE) */ {
 public:
  inline PROBUFF_NET_RANKLIST_RESPONSE() : PROBUFF_NET_RANKLIST_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_RANKLIST_RESPONSE();

  PROBUFF_NET_RANKLIST_RESPONSE(const PROBUFF_NET_RANKLIST_RESPONSE& from);
  PROBUFF_NET_RANKLIST_RESPONSE(PROBUFF_NET_RANKLIST_RESPONSE&& from) noexcept
    : PROBUFF_NET_RANKLIST_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_RANKLIST_RESPONSE& operator=(const PROBUFF_NET_RANKLIST_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_RANKLIST_RESPONSE& operator=(PROBUFF_NET_RANKLIST_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_RANKLIST_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_RANKLIST_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_RANKLIST_RESPONSE*>(
               &_PROBUFF_NET_RANKLIST_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(PROBUFF_NET_RANKLIST_RESPONSE& a, PROBUFF_NET_RANKLIST_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_RANKLIST_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_RANKLIST_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_RANKLIST_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_RANKLIST_RESPONSE>(nullptr);
  }

  PROBUFF_NET_RANKLIST_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_RANKLIST_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_RANKLIST_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_RANKLIST_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_RANKLIST_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_RANKLIST_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_RANKLIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMitemsFieldNumber = 2,
    kMtypeFieldNumber = 1,
    kMpageFieldNumber = 3,
    kMcountFieldNumber = 4,
    kMrolerankFieldNumber = 5,
  };
  // repeated .pbdb.db_brief mitems = 2;
  int mitems_size() const;
  private:
  int _internal_mitems_size() const;
  public:
  void clear_mitems();
  ::pbdb::db_brief* mutable_mitems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >*
      mutable_mitems();
  private:
  const ::pbdb::db_brief& _internal_mitems(int index) const;
  ::pbdb::db_brief* _internal_add_mitems();
  public:
  const ::pbdb::db_brief& mitems(int index) const;
  ::pbdb::db_brief* add_mitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >&
      mitems() const;

  // .pbdb.eranklist mtype = 1;
  bool has_mtype() const;
  private:
  bool _internal_has_mtype() const;
  public:
  void clear_mtype();
  ::pbdb::eranklist mtype() const;
  void set_mtype(::pbdb::eranklist value);
  private:
  ::pbdb::eranklist _internal_mtype() const;
  void _internal_set_mtype(::pbdb::eranklist value);
  public:

  // int32 mpage = 3;
  bool has_mpage() const;
  private:
  bool _internal_has_mpage() const;
  public:
  void clear_mpage();
  ::PROTOBUF_NAMESPACE_ID::int32 mpage() const;
  void set_mpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mpage() const;
  void _internal_set_mpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mcount = 4;
  bool has_mcount() const;
  private:
  bool _internal_has_mcount() const;
  public:
  void clear_mcount();
  ::PROTOBUF_NAMESPACE_ID::int32 mcount() const;
  void set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mcount() const;
  void _internal_set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mrolerank = 5;
  bool has_mrolerank() const;
  private:
  bool _internal_has_mrolerank() const;
  public:
  void clear_mrolerank();
  ::PROTOBUF_NAMESPACE_ID::int32 mrolerank() const;
  void set_mrolerank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mrolerank() const;
  void _internal_set_mrolerank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief > mitems_;
  int mtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 mpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 mcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 mrolerank_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FRIEND PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FRIEND) */ {
 public:
  inline PROBUFF_NET_FRIEND() : PROBUFF_NET_FRIEND(nullptr) {};
  virtual ~PROBUFF_NET_FRIEND();

  PROBUFF_NET_FRIEND(const PROBUFF_NET_FRIEND& from);
  PROBUFF_NET_FRIEND(PROBUFF_NET_FRIEND&& from) noexcept
    : PROBUFF_NET_FRIEND() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FRIEND& operator=(const PROBUFF_NET_FRIEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FRIEND& operator=(PROBUFF_NET_FRIEND&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FRIEND& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FRIEND* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FRIEND*>(
               &_PROBUFF_NET_FRIEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(PROBUFF_NET_FRIEND& a, PROBUFF_NET_FRIEND& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FRIEND* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FRIEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FRIEND* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND>(nullptr);
  }

  PROBUFF_NET_FRIEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FRIEND& from);
  void MergeFrom(const PROBUFF_NET_FRIEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FRIEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FRIEND";
  }
  protected:
  explicit PROBUFF_NET_FRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FRIEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FRIEND_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FRIEND_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FRIEND_RESPONSE() : PROBUFF_NET_FRIEND_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_FRIEND_RESPONSE();

  PROBUFF_NET_FRIEND_RESPONSE(const PROBUFF_NET_FRIEND_RESPONSE& from);
  PROBUFF_NET_FRIEND_RESPONSE(PROBUFF_NET_FRIEND_RESPONSE&& from) noexcept
    : PROBUFF_NET_FRIEND_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FRIEND_RESPONSE& operator=(const PROBUFF_NET_FRIEND_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FRIEND_RESPONSE& operator=(PROBUFF_NET_FRIEND_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FRIEND_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FRIEND_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FRIEND_RESPONSE*>(
               &_PROBUFF_NET_FRIEND_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(PROBUFF_NET_FRIEND_RESPONSE& a, PROBUFF_NET_FRIEND_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FRIEND_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FRIEND_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FRIEND_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FRIEND_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FRIEND_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FRIEND_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FRIEND_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FRIEND_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfriendsFieldNumber = 1,
    kMapplyfriendsFieldNumber = 2,
  };
  // repeated .pbdb.db_brief mfriends = 1;
  int mfriends_size() const;
  private:
  int _internal_mfriends_size() const;
  public:
  void clear_mfriends();
  ::pbdb::db_brief* mutable_mfriends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >*
      mutable_mfriends();
  private:
  const ::pbdb::db_brief& _internal_mfriends(int index) const;
  ::pbdb::db_brief* _internal_add_mfriends();
  public:
  const ::pbdb::db_brief& mfriends(int index) const;
  ::pbdb::db_brief* add_mfriends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >&
      mfriends() const;

  // repeated .pbdb.db_brief mapplyfriends = 2;
  int mapplyfriends_size() const;
  private:
  int _internal_mapplyfriends_size() const;
  public:
  void clear_mapplyfriends();
  ::pbdb::db_brief* mutable_mapplyfriends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >*
      mutable_mapplyfriends();
  private:
  const ::pbdb::db_brief& _internal_mapplyfriends(int index) const;
  ::pbdb::db_brief* _internal_add_mapplyfriends();
  public:
  const ::pbdb::db_brief& mapplyfriends(int index) const;
  ::pbdb::db_brief* add_mapplyfriends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >&
      mapplyfriends() const;

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief > mfriends_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief > mapplyfriends_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FRIEND_ADD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FRIEND_ADD) */ {
 public:
  inline PROBUFF_NET_FRIEND_ADD() : PROBUFF_NET_FRIEND_ADD(nullptr) {};
  virtual ~PROBUFF_NET_FRIEND_ADD();

  PROBUFF_NET_FRIEND_ADD(const PROBUFF_NET_FRIEND_ADD& from);
  PROBUFF_NET_FRIEND_ADD(PROBUFF_NET_FRIEND_ADD&& from) noexcept
    : PROBUFF_NET_FRIEND_ADD() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FRIEND_ADD& operator=(const PROBUFF_NET_FRIEND_ADD& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FRIEND_ADD& operator=(PROBUFF_NET_FRIEND_ADD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FRIEND_ADD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FRIEND_ADD* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FRIEND_ADD*>(
               &_PROBUFF_NET_FRIEND_ADD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(PROBUFF_NET_FRIEND_ADD& a, PROBUFF_NET_FRIEND_ADD& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FRIEND_ADD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FRIEND_ADD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FRIEND_ADD* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_ADD>(nullptr);
  }

  PROBUFF_NET_FRIEND_ADD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_ADD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FRIEND_ADD& from);
  void MergeFrom(const PROBUFF_NET_FRIEND_ADD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FRIEND_ADD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FRIEND_ADD";
  }
  protected:
  explicit PROBUFF_NET_FRIEND_ADD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfriedidFieldNumber = 1,
  };
  // int64 mfriedid = 1;
  bool has_mfriedid() const;
  private:
  bool _internal_has_mfriedid() const;
  public:
  void clear_mfriedid();
  ::PROTOBUF_NAMESPACE_ID::int64 mfriedid() const;
  void set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mfriedid() const;
  void _internal_set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FRIEND_ADD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mfriedid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FRIEND_ADD_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FRIEND_ADD_RESPONSE() : PROBUFF_NET_FRIEND_ADD_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_FRIEND_ADD_RESPONSE();

  PROBUFF_NET_FRIEND_ADD_RESPONSE(const PROBUFF_NET_FRIEND_ADD_RESPONSE& from);
  PROBUFF_NET_FRIEND_ADD_RESPONSE(PROBUFF_NET_FRIEND_ADD_RESPONSE&& from) noexcept
    : PROBUFF_NET_FRIEND_ADD_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FRIEND_ADD_RESPONSE& operator=(const PROBUFF_NET_FRIEND_ADD_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FRIEND_ADD_RESPONSE& operator=(PROBUFF_NET_FRIEND_ADD_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FRIEND_ADD_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FRIEND_ADD_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FRIEND_ADD_RESPONSE*>(
               &_PROBUFF_NET_FRIEND_ADD_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(PROBUFF_NET_FRIEND_ADD_RESPONSE& a, PROBUFF_NET_FRIEND_ADD_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FRIEND_ADD_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FRIEND_ADD_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FRIEND_ADD_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_ADD_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FRIEND_ADD_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_ADD_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FRIEND_ADD_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FRIEND_ADD_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FRIEND_ADD_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FRIEND_ADD_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfriedidFieldNumber = 1,
    kMstatFieldNumber = 2,
  };
  // int64 mfriedid = 1;
  bool has_mfriedid() const;
  private:
  bool _internal_has_mfriedid() const;
  public:
  void clear_mfriedid();
  ::PROTOBUF_NAMESPACE_ID::int64 mfriedid() const;
  void set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mfriedid() const;
  void _internal_set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 mstat = 2;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  ::PROTOBUF_NAMESPACE_ID::int32 mstat() const;
  void set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mstat() const;
  void _internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mfriedid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FRIEND_RATIFY_ADD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD) */ {
 public:
  inline PROBUFF_NET_FRIEND_RATIFY_ADD() : PROBUFF_NET_FRIEND_RATIFY_ADD(nullptr) {};
  virtual ~PROBUFF_NET_FRIEND_RATIFY_ADD();

  PROBUFF_NET_FRIEND_RATIFY_ADD(const PROBUFF_NET_FRIEND_RATIFY_ADD& from);
  PROBUFF_NET_FRIEND_RATIFY_ADD(PROBUFF_NET_FRIEND_RATIFY_ADD&& from) noexcept
    : PROBUFF_NET_FRIEND_RATIFY_ADD() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FRIEND_RATIFY_ADD& operator=(const PROBUFF_NET_FRIEND_RATIFY_ADD& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FRIEND_RATIFY_ADD& operator=(PROBUFF_NET_FRIEND_RATIFY_ADD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FRIEND_RATIFY_ADD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FRIEND_RATIFY_ADD* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FRIEND_RATIFY_ADD*>(
               &_PROBUFF_NET_FRIEND_RATIFY_ADD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(PROBUFF_NET_FRIEND_RATIFY_ADD& a, PROBUFF_NET_FRIEND_RATIFY_ADD& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FRIEND_RATIFY_ADD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FRIEND_RATIFY_ADD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FRIEND_RATIFY_ADD* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_RATIFY_ADD>(nullptr);
  }

  PROBUFF_NET_FRIEND_RATIFY_ADD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_RATIFY_ADD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FRIEND_RATIFY_ADD& from);
  void MergeFrom(const PROBUFF_NET_FRIEND_RATIFY_ADD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FRIEND_RATIFY_ADD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD";
  }
  protected:
  explicit PROBUFF_NET_FRIEND_RATIFY_ADD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfriedidFieldNumber = 1,
    kMratifyFieldNumber = 2,
  };
  // int64 mfriedid = 1;
  bool has_mfriedid() const;
  private:
  bool _internal_has_mfriedid() const;
  public:
  void clear_mfriedid();
  ::PROTOBUF_NAMESPACE_ID::int64 mfriedid() const;
  void set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mfriedid() const;
  void _internal_set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool mratify = 2;
  bool has_mratify() const;
  private:
  bool _internal_has_mratify() const;
  public:
  void clear_mratify();
  bool mratify() const;
  void set_mratify(bool value);
  private:
  bool _internal_mratify() const;
  void _internal_set_mratify(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mfriedid_;
  bool mratify_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE() : PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE();

  PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE(const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& from);
  PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE(PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE&& from) noexcept
    : PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& operator=(const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& operator=(PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE*>(
               &_PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& a, PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfriedidFieldNumber = 1,
    kMratifyFieldNumber = 2,
    kMstatFieldNumber = 3,
  };
  // int64 mfriedid = 1;
  bool has_mfriedid() const;
  private:
  bool _internal_has_mfriedid() const;
  public:
  void clear_mfriedid();
  ::PROTOBUF_NAMESPACE_ID::int64 mfriedid() const;
  void set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mfriedid() const;
  void _internal_set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool mratify = 2;
  bool has_mratify() const;
  private:
  bool _internal_has_mratify() const;
  public:
  void clear_mratify();
  bool mratify() const;
  void set_mratify(bool value);
  private:
  bool _internal_mratify() const;
  void _internal_set_mratify(bool value);
  public:

  // int32 mstat = 3;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  ::PROTOBUF_NAMESPACE_ID::int32 mstat() const;
  void set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mstat() const;
  void _internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mfriedid_;
  bool mratify_;
  ::PROTOBUF_NAMESPACE_ID::int32 mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FRIEND_ERASE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FRIEND_ERASE) */ {
 public:
  inline PROBUFF_NET_FRIEND_ERASE() : PROBUFF_NET_FRIEND_ERASE(nullptr) {};
  virtual ~PROBUFF_NET_FRIEND_ERASE();

  PROBUFF_NET_FRIEND_ERASE(const PROBUFF_NET_FRIEND_ERASE& from);
  PROBUFF_NET_FRIEND_ERASE(PROBUFF_NET_FRIEND_ERASE&& from) noexcept
    : PROBUFF_NET_FRIEND_ERASE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FRIEND_ERASE& operator=(const PROBUFF_NET_FRIEND_ERASE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FRIEND_ERASE& operator=(PROBUFF_NET_FRIEND_ERASE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FRIEND_ERASE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FRIEND_ERASE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FRIEND_ERASE*>(
               &_PROBUFF_NET_FRIEND_ERASE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(PROBUFF_NET_FRIEND_ERASE& a, PROBUFF_NET_FRIEND_ERASE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FRIEND_ERASE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FRIEND_ERASE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FRIEND_ERASE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_ERASE>(nullptr);
  }

  PROBUFF_NET_FRIEND_ERASE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_ERASE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FRIEND_ERASE& from);
  void MergeFrom(const PROBUFF_NET_FRIEND_ERASE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FRIEND_ERASE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FRIEND_ERASE";
  }
  protected:
  explicit PROBUFF_NET_FRIEND_ERASE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfriedidFieldNumber = 1,
  };
  // int64 mfriedid = 1;
  bool has_mfriedid() const;
  private:
  bool _internal_has_mfriedid() const;
  public:
  void clear_mfriedid();
  ::PROTOBUF_NAMESPACE_ID::int64 mfriedid() const;
  void set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mfriedid() const;
  void _internal_set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FRIEND_ERASE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mfriedid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FRIEND_ERASE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FRIEND_ERASE_RESPONSE() : PROBUFF_NET_FRIEND_ERASE_RESPONSE(nullptr) {};
  virtual ~PROBUFF_NET_FRIEND_ERASE_RESPONSE();

  PROBUFF_NET_FRIEND_ERASE_RESPONSE(const PROBUFF_NET_FRIEND_ERASE_RESPONSE& from);
  PROBUFF_NET_FRIEND_ERASE_RESPONSE(PROBUFF_NET_FRIEND_ERASE_RESPONSE&& from) noexcept
    : PROBUFF_NET_FRIEND_ERASE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FRIEND_ERASE_RESPONSE& operator=(const PROBUFF_NET_FRIEND_ERASE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FRIEND_ERASE_RESPONSE& operator=(PROBUFF_NET_FRIEND_ERASE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FRIEND_ERASE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FRIEND_ERASE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FRIEND_ERASE_RESPONSE*>(
               &_PROBUFF_NET_FRIEND_ERASE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(PROBUFF_NET_FRIEND_ERASE_RESPONSE& a, PROBUFF_NET_FRIEND_ERASE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FRIEND_ERASE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FRIEND_ERASE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FRIEND_ERASE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_ERASE_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FRIEND_ERASE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_ERASE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FRIEND_ERASE_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FRIEND_ERASE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FRIEND_ERASE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FRIEND_ERASE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfriedidFieldNumber = 1,
    kMstatFieldNumber = 2,
  };
  // int64 mfriedid = 1;
  bool has_mfriedid() const;
  private:
  bool _internal_has_mfriedid() const;
  public:
  void clear_mfriedid();
  ::PROTOBUF_NAMESPACE_ID::int64 mfriedid() const;
  void set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mfriedid() const;
  void _internal_set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 mstat = 2;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  ::PROTOBUF_NAMESPACE_ID::int32 mstat() const;
  void set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mstat() const;
  void _internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mfriedid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ROLESTAT PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ROLESTAT) */ {
 public:
  inline PROBUFF_NET_ROLESTAT() : PROBUFF_NET_ROLESTAT(nullptr) {};
  virtual ~PROBUFF_NET_ROLESTAT();

  PROBUFF_NET_ROLESTAT(const PROBUFF_NET_ROLESTAT& from);
  PROBUFF_NET_ROLESTAT(PROBUFF_NET_ROLESTAT&& from) noexcept
    : PROBUFF_NET_ROLESTAT() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ROLESTAT& operator=(const PROBUFF_NET_ROLESTAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ROLESTAT& operator=(PROBUFF_NET_ROLESTAT&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ROLESTAT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ROLESTAT* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ROLESTAT*>(
               &_PROBUFF_NET_ROLESTAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(PROBUFF_NET_ROLESTAT& a, PROBUFF_NET_ROLESTAT& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ROLESTAT* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ROLESTAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ROLESTAT* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLESTAT>(nullptr);
  }

  PROBUFF_NET_ROLESTAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLESTAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ROLESTAT& from);
  void MergeFrom(const PROBUFF_NET_ROLESTAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ROLESTAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ROLESTAT";
  }
  protected:
  explicit PROBUFF_NET_ROLESTAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PROBUFF_NET_ROLESTAT_stat stat;
  static constexpr stat online =
    PROBUFF_NET_ROLESTAT_stat_online;
  static constexpr stat offline =
    PROBUFF_NET_ROLESTAT_stat_offline;
  static inline bool stat_IsValid(int value) {
    return PROBUFF_NET_ROLESTAT_stat_IsValid(value);
  }
  static constexpr stat stat_MIN =
    PROBUFF_NET_ROLESTAT_stat_stat_MIN;
  static constexpr stat stat_MAX =
    PROBUFF_NET_ROLESTAT_stat_stat_MAX;
  static constexpr int stat_ARRAYSIZE =
    PROBUFF_NET_ROLESTAT_stat_stat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  stat_descriptor() {
    return PROBUFF_NET_ROLESTAT_stat_descriptor();
  }
  template<typename T>
  static inline const std::string& stat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, stat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function stat_Name.");
    return PROBUFF_NET_ROLESTAT_stat_Name(enum_t_value);
  }
  static inline bool stat_Parse(const std::string& name,
      stat* value) {
    return PROBUFF_NET_ROLESTAT_stat_Parse(name, value);
  }

  typedef PROBUFF_NET_ROLESTAT_logic_stat logic_stat;
  static constexpr logic_stat friends =
    PROBUFF_NET_ROLESTAT_logic_stat_friends;
  static constexpr logic_stat familyer =
    PROBUFF_NET_ROLESTAT_logic_stat_familyer;
  static inline bool logic_stat_IsValid(int value) {
    return PROBUFF_NET_ROLESTAT_logic_stat_IsValid(value);
  }
  static constexpr logic_stat logic_stat_MIN =
    PROBUFF_NET_ROLESTAT_logic_stat_logic_stat_MIN;
  static constexpr logic_stat logic_stat_MAX =
    PROBUFF_NET_ROLESTAT_logic_stat_logic_stat_MAX;
  static constexpr int logic_stat_ARRAYSIZE =
    PROBUFF_NET_ROLESTAT_logic_stat_logic_stat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  logic_stat_descriptor() {
    return PROBUFF_NET_ROLESTAT_logic_stat_descriptor();
  }
  template<typename T>
  static inline const std::string& logic_stat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, logic_stat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function logic_stat_Name.");
    return PROBUFF_NET_ROLESTAT_logic_stat_Name(enum_t_value);
  }
  static inline bool logic_stat_Parse(const std::string& name,
      logic_stat* value) {
    return PROBUFF_NET_ROLESTAT_logic_stat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMstatFieldNumber = 1,
    kMlogicstatFieldNumber = 2,
    kMroleidFieldNumber = 3,
  };
  // .pbnet.PROBUFF_NET_ROLESTAT.stat mstat = 1;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  ::pbnet::PROBUFF_NET_ROLESTAT_stat mstat() const;
  void set_mstat(::pbnet::PROBUFF_NET_ROLESTAT_stat value);
  private:
  ::pbnet::PROBUFF_NET_ROLESTAT_stat _internal_mstat() const;
  void _internal_set_mstat(::pbnet::PROBUFF_NET_ROLESTAT_stat value);
  public:

  // .pbnet.PROBUFF_NET_ROLESTAT.logic_stat mlogicstat = 2;
  bool has_mlogicstat() const;
  private:
  bool _internal_has_mlogicstat() const;
  public:
  void clear_mlogicstat();
  ::pbnet::PROBUFF_NET_ROLESTAT_logic_stat mlogicstat() const;
  void set_mlogicstat(::pbnet::PROBUFF_NET_ROLESTAT_logic_stat value);
  private:
  ::pbnet::PROBUFF_NET_ROLESTAT_logic_stat _internal_mlogicstat() const;
  void _internal_set_mlogicstat(::pbnet::PROBUFF_NET_ROLESTAT_logic_stat value);
  public:

  // int64 mroleid = 3;
  bool has_mroleid() const;
  private:
  bool _internal_has_mroleid() const;
  public:
  void clear_mroleid();
  ::PROTOBUF_NAMESPACE_ID::int64 mroleid() const;
  void set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mroleid() const;
  void _internal_set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ROLESTAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int mstat_;
  int mlogicstat_;
  ::PROTOBUF_NAMESPACE_ID::int64 mroleid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class VECTOR2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.VECTOR2) */ {
 public:
  inline VECTOR2() : VECTOR2(nullptr) {};
  virtual ~VECTOR2();

  VECTOR2(const VECTOR2& from);
  VECTOR2(VECTOR2&& from) noexcept
    : VECTOR2() {
    *this = ::std::move(from);
  }

  inline VECTOR2& operator=(const VECTOR2& from) {
    CopyFrom(from);
    return *this;
  }
  inline VECTOR2& operator=(VECTOR2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VECTOR2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VECTOR2* internal_default_instance() {
    return reinterpret_cast<const VECTOR2*>(
               &_VECTOR2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(VECTOR2& a, VECTOR2& b) {
    a.Swap(&b);
  }
  inline void Swap(VECTOR2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VECTOR2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VECTOR2* New() const final {
    return CreateMaybeMessage<VECTOR2>(nullptr);
  }

  VECTOR2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VECTOR2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VECTOR2& from);
  void MergeFrom(const VECTOR2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VECTOR2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.VECTOR2";
  }
  protected:
  explicit VECTOR2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMxFieldNumber = 1,
    kMyFieldNumber = 2,
  };
  // int32 mx = 1;
  bool has_mx() const;
  private:
  bool _internal_has_mx() const;
  public:
  void clear_mx();
  ::PROTOBUF_NAMESPACE_ID::int32 mx() const;
  void set_mx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mx() const;
  void _internal_set_mx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 my = 2;
  bool has_my() const;
  private:
  bool _internal_has_my() const;
  public:
  void clear_my();
  ::PROTOBUF_NAMESPACE_ID::int32 my() const;
  void set_my(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_my() const;
  void _internal_set_my(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.VECTOR2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mx_;
  ::PROTOBUF_NAMESPACE_ID::int32 my_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class VECTOR3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.VECTOR3) */ {
 public:
  inline VECTOR3() : VECTOR3(nullptr) {};
  virtual ~VECTOR3();

  VECTOR3(const VECTOR3& from);
  VECTOR3(VECTOR3&& from) noexcept
    : VECTOR3() {
    *this = ::std::move(from);
  }

  inline VECTOR3& operator=(const VECTOR3& from) {
    CopyFrom(from);
    return *this;
  }
  inline VECTOR3& operator=(VECTOR3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VECTOR3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VECTOR3* internal_default_instance() {
    return reinterpret_cast<const VECTOR3*>(
               &_VECTOR3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(VECTOR3& a, VECTOR3& b) {
    a.Swap(&b);
  }
  inline void Swap(VECTOR3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VECTOR3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VECTOR3* New() const final {
    return CreateMaybeMessage<VECTOR3>(nullptr);
  }

  VECTOR3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VECTOR3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VECTOR3& from);
  void MergeFrom(const VECTOR3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VECTOR3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.VECTOR3";
  }
  protected:
  explicit VECTOR3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMxFieldNumber = 1,
    kMyFieldNumber = 2,
    kMzFieldNumber = 3,
  };
  // int32 mx = 1;
  bool has_mx() const;
  private:
  bool _internal_has_mx() const;
  public:
  void clear_mx();
  ::PROTOBUF_NAMESPACE_ID::int32 mx() const;
  void set_mx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mx() const;
  void _internal_set_mx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 my = 2;
  bool has_my() const;
  private:
  bool _internal_has_my() const;
  public:
  void clear_my();
  ::PROTOBUF_NAMESPACE_ID::int32 my() const;
  void set_my(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_my() const;
  void _internal_set_my(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mz = 3;
  bool has_mz() const;
  private:
  bool _internal_has_mz() const;
  public:
  void clear_mz();
  ::PROTOBUF_NAMESPACE_ID::int32 mz() const;
  void set_mz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mz() const;
  void _internal_set_mz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.VECTOR3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mx_;
  ::PROTOBUF_NAMESPACE_ID::int32 my_;
  ::PROTOBUF_NAMESPACE_ID::int32 mz_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class UNIT_POSITION PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.UNIT_POSITION) */ {
 public:
  inline UNIT_POSITION() : UNIT_POSITION(nullptr) {};
  virtual ~UNIT_POSITION();

  UNIT_POSITION(const UNIT_POSITION& from);
  UNIT_POSITION(UNIT_POSITION&& from) noexcept
    : UNIT_POSITION() {
    *this = ::std::move(from);
  }

  inline UNIT_POSITION& operator=(const UNIT_POSITION& from) {
    CopyFrom(from);
    return *this;
  }
  inline UNIT_POSITION& operator=(UNIT_POSITION&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UNIT_POSITION& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UNIT_POSITION* internal_default_instance() {
    return reinterpret_cast<const UNIT_POSITION*>(
               &_UNIT_POSITION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(UNIT_POSITION& a, UNIT_POSITION& b) {
    a.Swap(&b);
  }
  inline void Swap(UNIT_POSITION* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UNIT_POSITION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UNIT_POSITION* New() const final {
    return CreateMaybeMessage<UNIT_POSITION>(nullptr);
  }

  UNIT_POSITION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UNIT_POSITION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UNIT_POSITION& from);
  void MergeFrom(const UNIT_POSITION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UNIT_POSITION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.UNIT_POSITION";
  }
  protected:
  explicit UNIT_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMpositionFieldNumber = 3,
    kMidFieldNumber = 2,
    kMangleFieldNumber = 4,
    kMspeedFieldNumber = 5,
  };
  // .pbnet.VECTOR2 mposition = 3;
  bool has_mposition() const;
  private:
  bool _internal_has_mposition() const;
  public:
  void clear_mposition();
  const ::pbnet::VECTOR2& mposition() const;
  ::pbnet::VECTOR2* release_mposition();
  ::pbnet::VECTOR2* mutable_mposition();
  void set_allocated_mposition(::pbnet::VECTOR2* mposition);
  private:
  const ::pbnet::VECTOR2& _internal_mposition() const;
  ::pbnet::VECTOR2* _internal_mutable_mposition();
  public:
  void unsafe_arena_set_allocated_mposition(
      ::pbnet::VECTOR2* mposition);
  ::pbnet::VECTOR2* unsafe_arena_release_mposition();

  // int64 mid = 2;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 mangle = 4;
  bool has_mangle() const;
  private:
  bool _internal_has_mangle() const;
  public:
  void clear_mangle();
  ::PROTOBUF_NAMESPACE_ID::int32 mangle() const;
  void set_mangle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mangle() const;
  void _internal_set_mangle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mspeed = 5;
  bool has_mspeed() const;
  private:
  bool _internal_has_mspeed() const;
  public:
  void clear_mspeed();
  ::PROTOBUF_NAMESPACE_ID::int32 mspeed() const;
  void set_mspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mspeed() const;
  void _internal_set_mspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.UNIT_POSITION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pbnet::VECTOR2* mposition_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mangle_;
  ::PROTOBUF_NAMESPACE_ID::int32 mspeed_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class UnitAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.UnitAttribute) */ {
 public:
  inline UnitAttribute() : UnitAttribute(nullptr) {};
  virtual ~UnitAttribute();

  UnitAttribute(const UnitAttribute& from);
  UnitAttribute(UnitAttribute&& from) noexcept
    : UnitAttribute() {
    *this = ::std::move(from);
  }

  inline UnitAttribute& operator=(const UnitAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnitAttribute& operator=(UnitAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnitAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnitAttribute* internal_default_instance() {
    return reinterpret_cast<const UnitAttribute*>(
               &_UnitAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(UnitAttribute& a, UnitAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(UnitAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnitAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnitAttribute* New() const final {
    return CreateMaybeMessage<UnitAttribute>(nullptr);
  }

  UnitAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnitAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnitAttribute& from);
  void MergeFrom(const UnitAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnitAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.UnitAttribute";
  }
  protected:
  explicit UnitAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMvalueFieldNumber = 2,
    kMtypeFieldNumber = 1,
  };
  // int64 mvalue = 2;
  bool has_mvalue() const;
  private:
  bool _internal_has_mvalue() const;
  public:
  void clear_mvalue();
  ::PROTOBUF_NAMESPACE_ID::int64 mvalue() const;
  void set_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mvalue() const;
  void _internal_set_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 mtype = 1;
  bool has_mtype() const;
  private:
  bool _internal_has_mtype() const;
  public:
  void clear_mtype();
  ::PROTOBUF_NAMESPACE_ID::int32 mtype() const;
  void set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtype() const;
  void _internal_set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.UnitAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtype_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class UnitModule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.UnitModule) */ {
 public:
  inline UnitModule() : UnitModule(nullptr) {};
  virtual ~UnitModule();

  UnitModule(const UnitModule& from);
  UnitModule(UnitModule&& from) noexcept
    : UnitModule() {
    *this = ::std::move(from);
  }

  inline UnitModule& operator=(const UnitModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnitModule& operator=(UnitModule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnitModule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnitModule* internal_default_instance() {
    return reinterpret_cast<const UnitModule*>(
               &_UnitModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(UnitModule& a, UnitModule& b) {
    a.Swap(&b);
  }
  inline void Swap(UnitModule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnitModule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnitModule* New() const final {
    return CreateMaybeMessage<UnitModule>(nullptr);
  }

  UnitModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnitModule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnitModule& from);
  void MergeFrom(const UnitModule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnitModule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.UnitModule";
  }
  protected:
  explicit UnitModule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmodulesFieldNumber = 2,
    kMmtypeFieldNumber = 1,
  };
  // repeated .pbnet.UnitAttribute mmodules = 2;
  int mmodules_size() const;
  private:
  int _internal_mmodules_size() const;
  public:
  void clear_mmodules();
  ::pbnet::UnitAttribute* mutable_mmodules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitAttribute >*
      mutable_mmodules();
  private:
  const ::pbnet::UnitAttribute& _internal_mmodules(int index) const;
  ::pbnet::UnitAttribute* _internal_add_mmodules();
  public:
  const ::pbnet::UnitAttribute& mmodules(int index) const;
  ::pbnet::UnitAttribute* add_mmodules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitAttribute >&
      mmodules() const;

  // int32 mmtype = 1;
  bool has_mmtype() const;
  private:
  bool _internal_has_mmtype() const;
  public:
  void clear_mmtype();
  ::PROTOBUF_NAMESPACE_ID::int32 mmtype() const;
  void set_mmtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mmtype() const;
  void _internal_set_mmtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.UnitModule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitAttribute > mmodules_;
  ::PROTOBUF_NAMESPACE_ID::int32 mmtype_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class UNIT PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.UNIT) */ {
 public:
  inline UNIT() : UNIT(nullptr) {};
  virtual ~UNIT();

  UNIT(const UNIT& from);
  UNIT(UNIT&& from) noexcept
    : UNIT() {
    *this = ::std::move(from);
  }

  inline UNIT& operator=(const UNIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline UNIT& operator=(UNIT&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UNIT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UNIT* internal_default_instance() {
    return reinterpret_cast<const UNIT*>(
               &_UNIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(UNIT& a, UNIT& b) {
    a.Swap(&b);
  }
  inline void Swap(UNIT* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UNIT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UNIT* New() const final {
    return CreateMaybeMessage<UNIT>(nullptr);
  }

  UNIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UNIT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UNIT& from);
  void MergeFrom(const UNIT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UNIT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.UNIT";
  }
  protected:
  explicit UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmodulesFieldNumber = 4,
    kMpositionFieldNumber = 3,
    kMidFieldNumber = 2,
    kMtypeFieldNumber = 1,
    kMstatFieldNumber = 5,
  };
  // repeated .pbnet.UnitModule mmodules = 4;
  int mmodules_size() const;
  private:
  int _internal_mmodules_size() const;
  public:
  void clear_mmodules();
  ::pbnet::UnitModule* mutable_mmodules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >*
      mutable_mmodules();
  private:
  const ::pbnet::UnitModule& _internal_mmodules(int index) const;
  ::pbnet::UnitModule* _internal_add_mmodules();
  public:
  const ::pbnet::UnitModule& mmodules(int index) const;
  ::pbnet::UnitModule* add_mmodules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >&
      mmodules() const;

  // .pbnet.UNIT_POSITION mposition = 3;
  bool has_mposition() const;
  private:
  bool _internal_has_mposition() const;
  public:
  void clear_mposition();
  const ::pbnet::UNIT_POSITION& mposition() const;
  ::pbnet::UNIT_POSITION* release_mposition();
  ::pbnet::UNIT_POSITION* mutable_mposition();
  void set_allocated_mposition(::pbnet::UNIT_POSITION* mposition);
  private:
  const ::pbnet::UNIT_POSITION& _internal_mposition() const;
  ::pbnet::UNIT_POSITION* _internal_mutable_mposition();
  public:
  void unsafe_arena_set_allocated_mposition(
      ::pbnet::UNIT_POSITION* mposition);
  ::pbnet::UNIT_POSITION* unsafe_arena_release_mposition();

  // int64 mid = 2;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .pbnet.eunit mtype = 1;
  bool has_mtype() const;
  private:
  bool _internal_has_mtype() const;
  public:
  void clear_mtype();
  ::pbnet::eunit mtype() const;
  void set_mtype(::pbnet::eunit value);
  private:
  ::pbnet::eunit _internal_mtype() const;
  void _internal_set_mtype(::pbnet::eunit value);
  public:

  // .pbnet.eunitstat mstat = 5;
  bool has_mstat() const;
  private:
  bool _internal_has_mstat() const;
  public:
  void clear_mstat();
  ::pbnet::eunitstat mstat() const;
  void set_mstat(::pbnet::eunitstat value);
  private:
  ::pbnet::eunitstat _internal_mstat() const;
  void _internal_set_mstat(::pbnet::eunitstat value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.UNIT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule > mmodules_;
  ::pbnet::UNIT_POSITION* mposition_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  int mtype_;
  int mstat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_SYNC_ATTRIBUTE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE) */ {
 public:
  inline PROBUFF_NET_SYNC_ATTRIBUTE() : PROBUFF_NET_SYNC_ATTRIBUTE(nullptr) {};
  virtual ~PROBUFF_NET_SYNC_ATTRIBUTE();

  PROBUFF_NET_SYNC_ATTRIBUTE(const PROBUFF_NET_SYNC_ATTRIBUTE& from);
  PROBUFF_NET_SYNC_ATTRIBUTE(PROBUFF_NET_SYNC_ATTRIBUTE&& from) noexcept
    : PROBUFF_NET_SYNC_ATTRIBUTE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SYNC_ATTRIBUTE& operator=(const PROBUFF_NET_SYNC_ATTRIBUTE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SYNC_ATTRIBUTE& operator=(PROBUFF_NET_SYNC_ATTRIBUTE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_SYNC_ATTRIBUTE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_SYNC_ATTRIBUTE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SYNC_ATTRIBUTE*>(
               &_PROBUFF_NET_SYNC_ATTRIBUTE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(PROBUFF_NET_SYNC_ATTRIBUTE& a, PROBUFF_NET_SYNC_ATTRIBUTE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SYNC_ATTRIBUTE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SYNC_ATTRIBUTE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_SYNC_ATTRIBUTE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_ATTRIBUTE>(nullptr);
  }

  PROBUFF_NET_SYNC_ATTRIBUTE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_ATTRIBUTE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_SYNC_ATTRIBUTE& from);
  void MergeFrom(const PROBUFF_NET_SYNC_ATTRIBUTE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SYNC_ATTRIBUTE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_SYNC_ATTRIBUTE";
  }
  protected:
  explicit PROBUFF_NET_SYNC_ATTRIBUTE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmodulesFieldNumber = 1,
  };
  // repeated .pbnet.UnitModule mmodules = 1;
  int mmodules_size() const;
  private:
  int _internal_mmodules_size() const;
  public:
  void clear_mmodules();
  ::pbnet::UnitModule* mutable_mmodules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >*
      mutable_mmodules();
  private:
  const ::pbnet::UnitModule& _internal_mmodules(int index) const;
  ::pbnet::UnitModule* _internal_add_mmodules();
  public:
  const ::pbnet::UnitModule& mmodules(int index) const;
  ::pbnet::UnitModule* add_mmodules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >&
      mmodules() const;

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule > mmodules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_SYNC_UNIT PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SYNC_UNIT) */ {
 public:
  inline PROBUFF_NET_SYNC_UNIT() : PROBUFF_NET_SYNC_UNIT(nullptr) {};
  virtual ~PROBUFF_NET_SYNC_UNIT();

  PROBUFF_NET_SYNC_UNIT(const PROBUFF_NET_SYNC_UNIT& from);
  PROBUFF_NET_SYNC_UNIT(PROBUFF_NET_SYNC_UNIT&& from) noexcept
    : PROBUFF_NET_SYNC_UNIT() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SYNC_UNIT& operator=(const PROBUFF_NET_SYNC_UNIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SYNC_UNIT& operator=(PROBUFF_NET_SYNC_UNIT&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_SYNC_UNIT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_SYNC_UNIT* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SYNC_UNIT*>(
               &_PROBUFF_NET_SYNC_UNIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(PROBUFF_NET_SYNC_UNIT& a, PROBUFF_NET_SYNC_UNIT& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SYNC_UNIT* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SYNC_UNIT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_SYNC_UNIT* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_UNIT>(nullptr);
  }

  PROBUFF_NET_SYNC_UNIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_UNIT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_SYNC_UNIT& from);
  void MergeFrom(const PROBUFF_NET_SYNC_UNIT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SYNC_UNIT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_SYNC_UNIT";
  }
  protected:
  explicit PROBUFF_NET_SYNC_UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMunitsFieldNumber = 1,
  };
  // repeated .pbnet.UNIT munits = 1;
  int munits_size() const;
  private:
  int _internal_munits_size() const;
  public:
  void clear_munits();
  ::pbnet::UNIT* mutable_munits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT >*
      mutable_munits();
  private:
  const ::pbnet::UNIT& _internal_munits(int index) const;
  ::pbnet::UNIT* _internal_add_munits();
  public:
  const ::pbnet::UNIT& munits(int index) const;
  ::pbnet::UNIT* add_munits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT >&
      munits() const;

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SYNC_UNIT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT > munits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ENTER_LEAVE_VIEW PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW) */ {
 public:
  inline PROBUFF_NET_ENTER_LEAVE_VIEW() : PROBUFF_NET_ENTER_LEAVE_VIEW(nullptr) {};
  virtual ~PROBUFF_NET_ENTER_LEAVE_VIEW();

  PROBUFF_NET_ENTER_LEAVE_VIEW(const PROBUFF_NET_ENTER_LEAVE_VIEW& from);
  PROBUFF_NET_ENTER_LEAVE_VIEW(PROBUFF_NET_ENTER_LEAVE_VIEW&& from) noexcept
    : PROBUFF_NET_ENTER_LEAVE_VIEW() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ENTER_LEAVE_VIEW& operator=(const PROBUFF_NET_ENTER_LEAVE_VIEW& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ENTER_LEAVE_VIEW& operator=(PROBUFF_NET_ENTER_LEAVE_VIEW&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ENTER_LEAVE_VIEW& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ENTER_LEAVE_VIEW* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ENTER_LEAVE_VIEW*>(
               &_PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(PROBUFF_NET_ENTER_LEAVE_VIEW& a, PROBUFF_NET_ENTER_LEAVE_VIEW& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ENTER_LEAVE_VIEW* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ENTER_LEAVE_VIEW* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ENTER_LEAVE_VIEW* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ENTER_LEAVE_VIEW>(nullptr);
  }

  PROBUFF_NET_ENTER_LEAVE_VIEW* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ENTER_LEAVE_VIEW>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ENTER_LEAVE_VIEW& from);
  void MergeFrom(const PROBUFF_NET_ENTER_LEAVE_VIEW& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ENTER_LEAVE_VIEW* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW";
  }
  protected:
  explicit PROBUFF_NET_ENTER_LEAVE_VIEW(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMunitsFieldNumber = 2,
    kMisenterFieldNumber = 1,
  };
  // repeated int64 munits = 2;
  int munits_size() const;
  private:
  int _internal_munits_size() const;
  public:
  void clear_munits();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_munits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_munits() const;
  void _internal_add_munits(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_munits();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 munits(int index) const;
  void set_munits(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_munits(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      munits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_munits();

  // bool misenter = 1;
  bool has_misenter() const;
  private:
  bool _internal_has_misenter() const;
  public:
  void clear_misenter();
  bool misenter() const;
  void set_misenter(bool value);
  private:
  bool _internal_misenter() const;
  void _internal_set_misenter(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > munits_;
  mutable std::atomic<int> _munits_cached_byte_size_;
  bool misenter_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse();
  PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse& other);
  static const PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse*>(&_PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[82];
  }

  public:
};

// -------------------------------------------------------------------

class PROBUFF_NET_SYNC_POSITION PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SYNC_POSITION) */ {
 public:
  inline PROBUFF_NET_SYNC_POSITION() : PROBUFF_NET_SYNC_POSITION(nullptr) {};
  virtual ~PROBUFF_NET_SYNC_POSITION();

  PROBUFF_NET_SYNC_POSITION(const PROBUFF_NET_SYNC_POSITION& from);
  PROBUFF_NET_SYNC_POSITION(PROBUFF_NET_SYNC_POSITION&& from) noexcept
    : PROBUFF_NET_SYNC_POSITION() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SYNC_POSITION& operator=(const PROBUFF_NET_SYNC_POSITION& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SYNC_POSITION& operator=(PROBUFF_NET_SYNC_POSITION&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_SYNC_POSITION& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_SYNC_POSITION* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SYNC_POSITION*>(
               &_PROBUFF_NET_SYNC_POSITION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(PROBUFF_NET_SYNC_POSITION& a, PROBUFF_NET_SYNC_POSITION& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SYNC_POSITION* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SYNC_POSITION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_SYNC_POSITION* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_POSITION>(nullptr);
  }

  PROBUFF_NET_SYNC_POSITION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_POSITION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_SYNC_POSITION& from);
  void MergeFrom(const PROBUFF_NET_SYNC_POSITION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SYNC_POSITION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_SYNC_POSITION";
  }
  protected:
  explicit PROBUFF_NET_SYNC_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMpositionFieldNumber = 1,
  };
  // map<int64, .pbnet.UNIT_POSITION> mposition = 1;
  int mposition_size() const;
  private:
  int _internal_mposition_size() const;
  public:
  void clear_mposition();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >&
      _internal_mposition() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >*
      _internal_mutable_mposition();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >&
      mposition() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >*
      mutable_mposition();

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SYNC_POSITION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mposition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_CHANGE_ANGLE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CHANGE_ANGLE) */ {
 public:
  inline PROBUFF_NET_CHANGE_ANGLE() : PROBUFF_NET_CHANGE_ANGLE(nullptr) {};
  virtual ~PROBUFF_NET_CHANGE_ANGLE();

  PROBUFF_NET_CHANGE_ANGLE(const PROBUFF_NET_CHANGE_ANGLE& from);
  PROBUFF_NET_CHANGE_ANGLE(PROBUFF_NET_CHANGE_ANGLE&& from) noexcept
    : PROBUFF_NET_CHANGE_ANGLE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CHANGE_ANGLE& operator=(const PROBUFF_NET_CHANGE_ANGLE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CHANGE_ANGLE& operator=(PROBUFF_NET_CHANGE_ANGLE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_CHANGE_ANGLE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_CHANGE_ANGLE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CHANGE_ANGLE*>(
               &_PROBUFF_NET_CHANGE_ANGLE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(PROBUFF_NET_CHANGE_ANGLE& a, PROBUFF_NET_CHANGE_ANGLE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CHANGE_ANGLE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CHANGE_ANGLE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_CHANGE_ANGLE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_CHANGE_ANGLE>(nullptr);
  }

  PROBUFF_NET_CHANGE_ANGLE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_CHANGE_ANGLE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_CHANGE_ANGLE& from);
  void MergeFrom(const PROBUFF_NET_CHANGE_ANGLE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CHANGE_ANGLE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_CHANGE_ANGLE";
  }
  protected:
  explicit PROBUFF_NET_CHANGE_ANGLE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMpositionFieldNumber = 1,
  };
  // .pbnet.UNIT_POSITION mposition = 1;
  bool has_mposition() const;
  private:
  bool _internal_has_mposition() const;
  public:
  void clear_mposition();
  const ::pbnet::UNIT_POSITION& mposition() const;
  ::pbnet::UNIT_POSITION* release_mposition();
  ::pbnet::UNIT_POSITION* mutable_mposition();
  void set_allocated_mposition(::pbnet::UNIT_POSITION* mposition);
  private:
  const ::pbnet::UNIT_POSITION& _internal_mposition() const;
  ::pbnet::UNIT_POSITION* _internal_mutable_mposition();
  public:
  void unsafe_arena_set_allocated_mposition(
      ::pbnet::UNIT_POSITION* mposition);
  ::pbnet::UNIT_POSITION* unsafe_arena_release_mposition();

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CHANGE_ANGLE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pbnet::UNIT_POSITION* mposition_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse();
  PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse& other);
  static const PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse*>(&_PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pbnet.PROBUFF_NET_TESTLUA.MdataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[85];
  }

  public:
};

// -------------------------------------------------------------------

class PROBUFF_NET_TESTLUA PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_TESTLUA) */ {
 public:
  inline PROBUFF_NET_TESTLUA() : PROBUFF_NET_TESTLUA(nullptr) {};
  virtual ~PROBUFF_NET_TESTLUA();

  PROBUFF_NET_TESTLUA(const PROBUFF_NET_TESTLUA& from);
  PROBUFF_NET_TESTLUA(PROBUFF_NET_TESTLUA&& from) noexcept
    : PROBUFF_NET_TESTLUA() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_TESTLUA& operator=(const PROBUFF_NET_TESTLUA& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_TESTLUA& operator=(PROBUFF_NET_TESTLUA&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_TESTLUA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_TESTLUA* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_TESTLUA*>(
               &_PROBUFF_NET_TESTLUA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(PROBUFF_NET_TESTLUA& a, PROBUFF_NET_TESTLUA& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_TESTLUA* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_TESTLUA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_TESTLUA* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_TESTLUA>(nullptr);
  }

  PROBUFF_NET_TESTLUA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_TESTLUA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_TESTLUA& from);
  void MergeFrom(const PROBUFF_NET_TESTLUA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_TESTLUA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_TESTLUA";
  }
  protected:
  explicit PROBUFF_NET_TESTLUA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMdataFieldNumber = 3,
    kMvalueFieldNumber = 2,
    kMidFieldNumber = 1,
  };
  // map<int64, string> mdata = 3;
  int mdata_size() const;
  private:
  int _internal_mdata_size() const;
  public:
  void clear_mdata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >&
      _internal_mdata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >*
      _internal_mutable_mdata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >&
      mdata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >*
      mutable_mdata();

  // string mvalue = 2;
  bool has_mvalue() const;
  private:
  bool _internal_has_mvalue() const;
  public:
  void clear_mvalue();
  const std::string& mvalue() const;
  void set_mvalue(const std::string& value);
  void set_mvalue(std::string&& value);
  void set_mvalue(const char* value);
  void set_mvalue(const char* value, size_t size);
  std::string* mutable_mvalue();
  std::string* release_mvalue();
  void set_allocated_mvalue(std::string* mvalue);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mvalue();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mvalue(
      std::string* mvalue);
  private:
  const std::string& _internal_mvalue() const;
  void _internal_set_mvalue(const std::string& value);
  std::string* _internal_mutable_mvalue();
  public:

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_TESTLUA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > mdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mvalue_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  friend struct ::TableStruct_net_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PROBUFF_NET_MSG_RESPONSE

// string mmsg = 1;
inline bool PROBUFF_NET_MSG_RESPONSE::_internal_has_mmsg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MSG_RESPONSE::has_mmsg() const {
  return _internal_has_mmsg();
}
inline void PROBUFF_NET_MSG_RESPONSE::clear_mmsg() {
  mmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_MSG_RESPONSE::mmsg() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MSG_RESPONSE.mmsg)
  return _internal_mmsg();
}
inline void PROBUFF_NET_MSG_RESPONSE::set_mmsg(const std::string& value) {
  _internal_set_mmsg(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MSG_RESPONSE.mmsg)
}
inline std::string* PROBUFF_NET_MSG_RESPONSE::mutable_mmsg() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_MSG_RESPONSE.mmsg)
  return _internal_mutable_mmsg();
}
inline const std::string& PROBUFF_NET_MSG_RESPONSE::_internal_mmsg() const {
  return mmsg_.Get();
}
inline void PROBUFF_NET_MSG_RESPONSE::_internal_set_mmsg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_MSG_RESPONSE::set_mmsg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_MSG_RESPONSE.mmsg)
}
inline void PROBUFF_NET_MSG_RESPONSE::set_mmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_MSG_RESPONSE.mmsg)
}
inline void PROBUFF_NET_MSG_RESPONSE::set_mmsg(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_MSG_RESPONSE.mmsg)
}
inline std::string* PROBUFF_NET_MSG_RESPONSE::_internal_mutable_mmsg() {
  _has_bits_[0] |= 0x00000001u;
  return mmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_MSG_RESPONSE::release_mmsg() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_MSG_RESPONSE.mmsg)
  if (!_internal_has_mmsg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mmsg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_MSG_RESPONSE::set_allocated_mmsg(std::string* mmsg) {
  if (mmsg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_MSG_RESPONSE.mmsg)
}
inline std::string* PROBUFF_NET_MSG_RESPONSE::unsafe_arena_release_mmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_MSG_RESPONSE.mmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_MSG_RESPONSE::unsafe_arena_set_allocated_mmsg(
    std::string* mmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mmsg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_MSG_RESPONSE.mmsg)
}

// -------------------------------------------------------------------

// PROBUFF_NET_HEARTBEAT

// -------------------------------------------------------------------

// PROBUFF_NET_RECHARGE

// int32 mrechargeid = 1;
inline bool PROBUFF_NET_RECHARGE::_internal_has_mrechargeid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_RECHARGE::has_mrechargeid() const {
  return _internal_has_mrechargeid();
}
inline void PROBUFF_NET_RECHARGE::clear_mrechargeid() {
  mrechargeid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RECHARGE::_internal_mrechargeid() const {
  return mrechargeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RECHARGE::mrechargeid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RECHARGE.mrechargeid)
  return _internal_mrechargeid();
}
inline void PROBUFF_NET_RECHARGE::_internal_set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mrechargeid_ = value;
}
inline void PROBUFF_NET_RECHARGE::set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mrechargeid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RECHARGE.mrechargeid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_RECHARGE_RESPONSE

// int32 mrechargeid = 1;
inline bool PROBUFF_NET_RECHARGE_RESPONSE::_internal_has_mrechargeid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_RECHARGE_RESPONSE::has_mrechargeid() const {
  return _internal_has_mrechargeid();
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::clear_mrechargeid() {
  mrechargeid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RECHARGE_RESPONSE::_internal_mrechargeid() const {
  return mrechargeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RECHARGE_RESPONSE::mrechargeid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.mrechargeid)
  return _internal_mrechargeid();
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::_internal_set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mrechargeid_ = value;
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mrechargeid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.mrechargeid)
}

// .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat mstat = 2;
inline bool PROBUFF_NET_RECHARGE_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_RECHARGE_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::clear_mstat() {
  mstat_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::_internal_mstat() const {
  return static_cast< ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat >(mstat_);
}
inline ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::_internal_set_mstat(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat value) {
  _has_bits_[0] |= 0x00000004u;
  mstat_ = value;
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::set_mstat(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.mstat)
}

// string morderid = 3;
inline bool PROBUFF_NET_RECHARGE_RESPONSE::_internal_has_morderid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_RECHARGE_RESPONSE::has_morderid() const {
  return _internal_has_morderid();
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::clear_morderid() {
  morderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_RECHARGE_RESPONSE::morderid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.morderid)
  return _internal_morderid();
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::set_morderid(const std::string& value) {
  _internal_set_morderid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.morderid)
}
inline std::string* PROBUFF_NET_RECHARGE_RESPONSE::mutable_morderid() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.morderid)
  return _internal_mutable_morderid();
}
inline const std::string& PROBUFF_NET_RECHARGE_RESPONSE::_internal_morderid() const {
  return morderid_.Get();
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::_internal_set_morderid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  morderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::set_morderid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  morderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.morderid)
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::set_morderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  morderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.morderid)
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::set_morderid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  morderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.morderid)
}
inline std::string* PROBUFF_NET_RECHARGE_RESPONSE::_internal_mutable_morderid() {
  _has_bits_[0] |= 0x00000001u;
  return morderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_RECHARGE_RESPONSE::release_morderid() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.morderid)
  if (!_internal_has_morderid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return morderid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::set_allocated_morderid(std::string* morderid) {
  if (morderid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  morderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), morderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.morderid)
}
inline std::string* PROBUFF_NET_RECHARGE_RESPONSE::unsafe_arena_release_morderid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.morderid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return morderid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::unsafe_arena_set_allocated_morderid(
    std::string* morderid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (morderid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  morderid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      morderid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.morderid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PROBUFF_NET_DELIVER_GOODS_RECHARGE

// int32 mrechargeid = 1;
inline bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_has_mrechargeid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::has_mrechargeid() const {
  return _internal_has_mrechargeid();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::clear_mrechargeid() {
  mrechargeid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_mrechargeid() const {
  return mrechargeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_DELIVER_GOODS_RECHARGE::mrechargeid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.mrechargeid)
  return _internal_mrechargeid();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mrechargeid_ = value;
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mrechargeid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.mrechargeid)
}

// string morderid = 2;
inline bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_has_morderid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::has_morderid() const {
  return _internal_has_morderid();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::clear_morderid() {
  morderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_DELIVER_GOODS_RECHARGE::morderid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.morderid)
  return _internal_morderid();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::set_morderid(const std::string& value) {
  _internal_set_morderid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.morderid)
}
inline std::string* PROBUFF_NET_DELIVER_GOODS_RECHARGE::mutable_morderid() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.morderid)
  return _internal_mutable_morderid();
}
inline const std::string& PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_morderid() const {
  return morderid_.Get();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_set_morderid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  morderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::set_morderid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  morderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.morderid)
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::set_morderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  morderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.morderid)
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::set_morderid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  morderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.morderid)
}
inline std::string* PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_mutable_morderid() {
  _has_bits_[0] |= 0x00000001u;
  return morderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_DELIVER_GOODS_RECHARGE::release_morderid() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.morderid)
  if (!_internal_has_morderid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return morderid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::set_allocated_morderid(std::string* morderid) {
  if (morderid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  morderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), morderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.morderid)
}
inline std::string* PROBUFF_NET_DELIVER_GOODS_RECHARGE::unsafe_arena_release_morderid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.morderid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return morderid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::unsafe_arena_set_allocated_morderid(
    std::string* morderid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (morderid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  morderid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      morderid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.morderid)
}

// int32 mgold = 3;
inline bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_has_mgold() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::has_mgold() const {
  return _internal_has_mgold();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::clear_mgold() {
  mgold_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_mgold() const {
  return mgold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_DELIVER_GOODS_RECHARGE::mgold() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.mgold)
  return _internal_mgold();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_set_mgold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mgold_ = value;
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::set_mgold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mgold(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.mgold)
}

// map<int32, int32> mitems = 4;
inline int PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_mitems_size() const {
  return mitems_.size();
}
inline int PROBUFF_NET_DELIVER_GOODS_RECHARGE::mitems_size() const {
  return _internal_mitems_size();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::clear_mitems() {
  mitems_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_mitems() const {
  return mitems_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_DELIVER_GOODS_RECHARGE::mitems() const {
  // @@protoc_insertion_point(field_map:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.mitems)
  return _internal_mitems();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_mutable_mitems() {
  return mitems_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_DELIVER_GOODS_RECHARGE::mutable_mitems() {
  // @@protoc_insertion_point(field_mutable_map:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.mitems)
  return _internal_mutable_mitems();
}

// -------------------------------------------------------------------

// PROBUFF_NET_ERROR

// string merrmessage = 2;
inline bool PROBUFF_NET_ERROR::_internal_has_merrmessage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ERROR::has_merrmessage() const {
  return _internal_has_merrmessage();
}
inline void PROBUFF_NET_ERROR::clear_merrmessage() {
  merrmessage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_ERROR::merrmessage() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ERROR.merrmessage)
  return _internal_merrmessage();
}
inline void PROBUFF_NET_ERROR::set_merrmessage(const std::string& value) {
  _internal_set_merrmessage(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ERROR.merrmessage)
}
inline std::string* PROBUFF_NET_ERROR::mutable_merrmessage() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ERROR.merrmessage)
  return _internal_mutable_merrmessage();
}
inline const std::string& PROBUFF_NET_ERROR::_internal_merrmessage() const {
  return merrmessage_.Get();
}
inline void PROBUFF_NET_ERROR::_internal_set_merrmessage(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  merrmessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_ERROR::set_merrmessage(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  merrmessage_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_ERROR.merrmessage)
}
inline void PROBUFF_NET_ERROR::set_merrmessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  merrmessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_ERROR.merrmessage)
}
inline void PROBUFF_NET_ERROR::set_merrmessage(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  merrmessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_ERROR.merrmessage)
}
inline std::string* PROBUFF_NET_ERROR::_internal_mutable_merrmessage() {
  _has_bits_[0] |= 0x00000001u;
  return merrmessage_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_ERROR::release_merrmessage() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ERROR.merrmessage)
  if (!_internal_has_merrmessage()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return merrmessage_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_ERROR::set_allocated_merrmessage(std::string* merrmessage) {
  if (merrmessage != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  merrmessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merrmessage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ERROR.merrmessage)
}
inline std::string* PROBUFF_NET_ERROR::unsafe_arena_release_merrmessage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_ERROR.merrmessage)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return merrmessage_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_ERROR::unsafe_arena_set_allocated_merrmessage(
    std::string* merrmessage) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (merrmessage != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  merrmessage_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      merrmessage, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ERROR.merrmessage)
}

// -------------------------------------------------------------------

// PROBUFF_NET_GET_TIME

// -------------------------------------------------------------------

// PROBUFF_NET_GET_TIME_RESPONSE

// int32 mutc = 1;
inline bool PROBUFF_NET_GET_TIME_RESPONSE::_internal_has_mutc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_GET_TIME_RESPONSE::has_mutc() const {
  return _internal_has_mutc();
}
inline void PROBUFF_NET_GET_TIME_RESPONSE::clear_mutc() {
  mutc_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_GET_TIME_RESPONSE::_internal_mutc() const {
  return mutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_GET_TIME_RESPONSE::mutc() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_GET_TIME_RESPONSE.mutc)
  return _internal_mutc();
}
inline void PROBUFF_NET_GET_TIME_RESPONSE::_internal_set_mutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mutc_ = value;
}
inline void PROBUFF_NET_GET_TIME_RESPONSE::set_mutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mutc(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_GET_TIME_RESPONSE.mutc)
}

// -------------------------------------------------------------------

// PROBUFF_NET_NOTICE

// -------------------------------------------------------------------

// PROBUFF_NET_NOTICE_RESPONSE

// repeated .pbdb.db_notice mnotices = 1;
inline int PROBUFF_NET_NOTICE_RESPONSE::_internal_mnotices_size() const {
  return mnotices_.size();
}
inline int PROBUFF_NET_NOTICE_RESPONSE::mnotices_size() const {
  return _internal_mnotices_size();
}
inline ::pbdb::db_notice* PROBUFF_NET_NOTICE_RESPONSE::mutable_mnotices(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_NOTICE_RESPONSE.mnotices)
  return mnotices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice >*
PROBUFF_NET_NOTICE_RESPONSE::mutable_mnotices() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_NOTICE_RESPONSE.mnotices)
  return &mnotices_;
}
inline const ::pbdb::db_notice& PROBUFF_NET_NOTICE_RESPONSE::_internal_mnotices(int index) const {
  return mnotices_.Get(index);
}
inline const ::pbdb::db_notice& PROBUFF_NET_NOTICE_RESPONSE::mnotices(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_NOTICE_RESPONSE.mnotices)
  return _internal_mnotices(index);
}
inline ::pbdb::db_notice* PROBUFF_NET_NOTICE_RESPONSE::_internal_add_mnotices() {
  return mnotices_.Add();
}
inline ::pbdb::db_notice* PROBUFF_NET_NOTICE_RESPONSE::add_mnotices() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_NOTICE_RESPONSE.mnotices)
  return _internal_add_mnotices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice >&
PROBUFF_NET_NOTICE_RESPONSE::mnotices() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_NOTICE_RESPONSE.mnotices)
  return mnotices_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_ACOUNT_LOGIN

// int32 marea = 1;
inline bool PROBUFF_NET_ACOUNT_LOGIN::_internal_has_marea() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN::has_marea() const {
  return _internal_has_marea();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::clear_marea() {
  marea_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ACOUNT_LOGIN::_internal_marea() const {
  return marea_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ACOUNT_LOGIN::marea() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN.marea)
  return _internal_marea();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::_internal_set_marea(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  marea_ = value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_marea(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_marea(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN.marea)
}

// string maccount = 2;
inline bool PROBUFF_NET_ACOUNT_LOGIN::_internal_has_maccount() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN::has_maccount() const {
  return _internal_has_maccount();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::clear_maccount() {
  maccount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN::maccount() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN.maccount)
  return _internal_maccount();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_maccount(const std::string& value) {
  _internal_set_maccount(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN.maccount)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::mutable_maccount() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ACOUNT_LOGIN.maccount)
  return _internal_mutable_maccount();
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN::_internal_maccount() const {
  return maccount_.Get();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::_internal_set_maccount(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  maccount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_maccount(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  maccount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_ACOUNT_LOGIN.maccount)
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_maccount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  maccount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_ACOUNT_LOGIN.maccount)
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_maccount(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  maccount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_ACOUNT_LOGIN.maccount)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::_internal_mutable_maccount() {
  _has_bits_[0] |= 0x00000001u;
  return maccount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::release_maccount() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN.maccount)
  if (!_internal_has_maccount()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return maccount_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_allocated_maccount(std::string* maccount) {
  if (maccount != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  maccount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maccount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN.maccount)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::unsafe_arena_release_maccount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN.maccount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return maccount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN::unsafe_arena_set_allocated_maccount(
    std::string* maccount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (maccount != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  maccount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      maccount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN.maccount)
}

// string mpassword = 3;
inline bool PROBUFF_NET_ACOUNT_LOGIN::_internal_has_mpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN::has_mpassword() const {
  return _internal_has_mpassword();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::clear_mpassword() {
  mpassword_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN::mpassword() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN.mpassword)
  return _internal_mpassword();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_mpassword(const std::string& value) {
  _internal_set_mpassword(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN.mpassword)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::mutable_mpassword() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ACOUNT_LOGIN.mpassword)
  return _internal_mutable_mpassword();
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN::_internal_mpassword() const {
  return mpassword_.Get();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::_internal_set_mpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_mpassword(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mpassword_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_ACOUNT_LOGIN.mpassword)
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_mpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_ACOUNT_LOGIN.mpassword)
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_mpassword(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_ACOUNT_LOGIN.mpassword)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::_internal_mutable_mpassword() {
  _has_bits_[0] |= 0x00000002u;
  return mpassword_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::release_mpassword() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN.mpassword)
  if (!_internal_has_mpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mpassword_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_allocated_mpassword(std::string* mpassword) {
  if (mpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mpassword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mpassword,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN.mpassword)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::unsafe_arena_release_mpassword() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN.mpassword)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return mpassword_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN::unsafe_arena_set_allocated_mpassword(
    std::string* mpassword) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mpassword_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mpassword, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN.mpassword)
}

// -------------------------------------------------------------------

// PROBUFF_NET_ACOUNT_LOGIN_RESPONSE

// int32 marea = 1;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_has_marea() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_marea() const {
  return _internal_has_marea();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_marea() {
  marea_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_marea() const {
  return marea_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::marea() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.marea)
  return _internal_marea();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_marea(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  marea_ = value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_marea(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_marea(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.marea)
}

// int64 mroleid = 2;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_has_mroleid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_mroleid() const {
  return _internal_has_mroleid();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_mroleid() {
  mroleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_mroleid() const {
  return mroleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::mroleid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.mroleid)
  return _internal_mroleid();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  mroleid_ = value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mroleid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.mroleid)
}

// string msession = 3;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_has_msession() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_msession() const {
  return _internal_has_msession();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_msession() {
  msession_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::msession() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.msession)
  return _internal_msession();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_msession(const std::string& value) {
  _internal_set_msession(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.msession)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::mutable_msession() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.msession)
  return _internal_mutable_msession();
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_msession() const {
  return msession_.Get();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_msession(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_msession(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msession_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.msession)
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_msession(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.msession)
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_msession(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.msession)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_mutable_msession() {
  _has_bits_[0] |= 0x00000001u;
  return msession_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::release_msession() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.msession)
  if (!_internal_has_msession()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msession_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_allocated_msession(std::string* msession) {
  if (msession != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msession_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msession,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.msession)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::unsafe_arena_release_msession() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.msession)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return msession_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::unsafe_arena_set_allocated_msession(
    std::string* msession) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msession != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msession_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msession, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.msession)
}

// string maccount = 4;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_has_maccount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_maccount() const {
  return _internal_has_maccount();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_maccount() {
  maccount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::maccount() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.maccount)
  return _internal_maccount();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_maccount(const std::string& value) {
  _internal_set_maccount(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.maccount)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::mutable_maccount() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.maccount)
  return _internal_mutable_maccount();
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_maccount() const {
  return maccount_.Get();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_maccount(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  maccount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_maccount(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  maccount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.maccount)
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_maccount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  maccount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.maccount)
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_maccount(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  maccount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.maccount)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_mutable_maccount() {
  _has_bits_[0] |= 0x00000002u;
  return maccount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::release_maccount() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.maccount)
  if (!_internal_has_maccount()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return maccount_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_allocated_maccount(std::string* maccount) {
  if (maccount != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  maccount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maccount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.maccount)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::unsafe_arena_release_maccount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.maccount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return maccount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::unsafe_arena_set_allocated_maccount(
    std::string* maccount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (maccount != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  maccount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      maccount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.maccount)
}

// int32 mgatewayid = 5;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_has_mgatewayid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_mgatewayid() const {
  return _internal_has_mgatewayid();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_mgatewayid() {
  mgatewayid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_mgatewayid() const {
  return mgatewayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::mgatewayid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.mgatewayid)
  return _internal_mgatewayid();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_mgatewayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  mgatewayid_ = value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_mgatewayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mgatewayid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.mgatewayid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_ROLE_LOGIN

// int64 mroleid = 1;
inline bool PROBUFF_NET_ROLE_LOGIN::_internal_has_mroleid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_ROLE_LOGIN::has_mroleid() const {
  return _internal_has_mroleid();
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_mroleid() {
  mroleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ROLE_LOGIN::_internal_mroleid() const {
  return mroleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ROLE_LOGIN::mroleid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.mroleid)
  return _internal_mroleid();
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  mroleid_ = value;
}
inline void PROBUFF_NET_ROLE_LOGIN::set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mroleid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.mroleid)
}

// string msession = 2;
inline bool PROBUFF_NET_ROLE_LOGIN::_internal_has_msession() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ROLE_LOGIN::has_msession() const {
  return _internal_has_msession();
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_msession() {
  msession_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_ROLE_LOGIN::msession() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.msession)
  return _internal_msession();
}
inline void PROBUFF_NET_ROLE_LOGIN::set_msession(const std::string& value) {
  _internal_set_msession(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.msession)
}
inline std::string* PROBUFF_NET_ROLE_LOGIN::mutable_msession() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ROLE_LOGIN.msession)
  return _internal_mutable_msession();
}
inline const std::string& PROBUFF_NET_ROLE_LOGIN::_internal_msession() const {
  return msession_.Get();
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_msession(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_ROLE_LOGIN::set_msession(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msession_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_ROLE_LOGIN.msession)
}
inline void PROBUFF_NET_ROLE_LOGIN::set_msession(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_ROLE_LOGIN.msession)
}
inline void PROBUFF_NET_ROLE_LOGIN::set_msession(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_ROLE_LOGIN.msession)
}
inline std::string* PROBUFF_NET_ROLE_LOGIN::_internal_mutable_msession() {
  _has_bits_[0] |= 0x00000001u;
  return msession_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_ROLE_LOGIN::release_msession() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ROLE_LOGIN.msession)
  if (!_internal_has_msession()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msession_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_ROLE_LOGIN::set_allocated_msession(std::string* msession) {
  if (msession != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msession_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msession,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ROLE_LOGIN.msession)
}
inline std::string* PROBUFF_NET_ROLE_LOGIN::unsafe_arena_release_msession() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_ROLE_LOGIN.msession)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return msession_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_ROLE_LOGIN::unsafe_arena_set_allocated_msession(
    std::string* msession) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msession != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msession_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msession, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ROLE_LOGIN.msession)
}

// bool miscreate = 3;
inline bool PROBUFF_NET_ROLE_LOGIN::_internal_has_miscreate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_ROLE_LOGIN::has_miscreate() const {
  return _internal_has_miscreate();
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_miscreate() {
  miscreate_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PROBUFF_NET_ROLE_LOGIN::_internal_miscreate() const {
  return miscreate_;
}
inline bool PROBUFF_NET_ROLE_LOGIN::miscreate() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.miscreate)
  return _internal_miscreate();
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_miscreate(bool value) {
  _has_bits_[0] |= 0x00000004u;
  miscreate_ = value;
}
inline void PROBUFF_NET_ROLE_LOGIN::set_miscreate(bool value) {
  _internal_set_miscreate(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.miscreate)
}

// int32 marea = 4;
inline bool PROBUFF_NET_ROLE_LOGIN::_internal_has_marea() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PROBUFF_NET_ROLE_LOGIN::has_marea() const {
  return _internal_has_marea();
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_marea() {
  marea_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ROLE_LOGIN::_internal_marea() const {
  return marea_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ROLE_LOGIN::marea() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.marea)
  return _internal_marea();
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_marea(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  marea_ = value;
}
inline void PROBUFF_NET_ROLE_LOGIN::set_marea(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_marea(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.marea)
}

// int32 mgatewayid = 5;
inline bool PROBUFF_NET_ROLE_LOGIN::_internal_has_mgatewayid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PROBUFF_NET_ROLE_LOGIN::has_mgatewayid() const {
  return _internal_has_mgatewayid();
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_mgatewayid() {
  mgatewayid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ROLE_LOGIN::_internal_mgatewayid() const {
  return mgatewayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ROLE_LOGIN::mgatewayid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.mgatewayid)
  return _internal_mgatewayid();
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_mgatewayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  mgatewayid_ = value;
}
inline void PROBUFF_NET_ROLE_LOGIN::set_mgatewayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mgatewayid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.mgatewayid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_ROLE_SYNC

// -------------------------------------------------------------------

// PROBUFF_NET_ROLE_SYNC_RESPONSE

// .pbdb.db_role mrole = 1;
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_has_mrole() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mrole_ != nullptr);
  return value;
}
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::has_mrole() const {
  return _internal_has_mrole();
}
inline const ::pbdb::db_role& PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_mrole() const {
  const ::pbdb::db_role* p = mrole_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbdb::db_role*>(
      &::pbdb::_db_role_default_instance_);
}
inline const ::pbdb::db_role& PROBUFF_NET_ROLE_SYNC_RESPONSE::mrole() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mrole)
  return _internal_mrole();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_set_allocated_mrole(
    ::pbdb::db_role* mrole) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mrole_);
  }
  mrole_ = mrole;
  if (mrole) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mrole)
}
inline ::pbdb::db_role* PROBUFF_NET_ROLE_SYNC_RESPONSE::release_mrole() {
  auto temp = unsafe_arena_release_mrole();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbdb::db_role* PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_release_mrole() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mrole)
  _has_bits_[0] &= ~0x00000001u;
  ::pbdb::db_role* temp = mrole_;
  mrole_ = nullptr;
  return temp;
}
inline ::pbdb::db_role* PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_mutable_mrole() {
  _has_bits_[0] |= 0x00000001u;
  if (mrole_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_role>(GetArena());
    mrole_ = p;
  }
  return mrole_;
}
inline ::pbdb::db_role* PROBUFF_NET_ROLE_SYNC_RESPONSE::mutable_mrole() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mrole)
  return _internal_mutable_mrole();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::set_allocated_mrole(::pbdb::db_role* mrole) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mrole_);
  }
  if (mrole) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mrole)->GetArena();
    if (message_arena != submessage_arena) {
      mrole = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mrole, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mrole_ = mrole;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mrole)
}

// .pbdb.db_brief mbrief = 2;
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_has_mbrief() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || mbrief_ != nullptr);
  return value;
}
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::has_mbrief() const {
  return _internal_has_mbrief();
}
inline const ::pbdb::db_brief& PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_mbrief() const {
  const ::pbdb::db_brief* p = mbrief_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbdb::db_brief*>(
      &::pbdb::_db_brief_default_instance_);
}
inline const ::pbdb::db_brief& PROBUFF_NET_ROLE_SYNC_RESPONSE::mbrief() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mbrief)
  return _internal_mbrief();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_set_allocated_mbrief(
    ::pbdb::db_brief* mbrief) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mbrief_);
  }
  mbrief_ = mbrief;
  if (mbrief) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mbrief)
}
inline ::pbdb::db_brief* PROBUFF_NET_ROLE_SYNC_RESPONSE::release_mbrief() {
  auto temp = unsafe_arena_release_mbrief();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbdb::db_brief* PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_release_mbrief() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mbrief)
  _has_bits_[0] &= ~0x00000002u;
  ::pbdb::db_brief* temp = mbrief_;
  mbrief_ = nullptr;
  return temp;
}
inline ::pbdb::db_brief* PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_mutable_mbrief() {
  _has_bits_[0] |= 0x00000002u;
  if (mbrief_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_brief>(GetArena());
    mbrief_ = p;
  }
  return mbrief_;
}
inline ::pbdb::db_brief* PROBUFF_NET_ROLE_SYNC_RESPONSE::mutable_mbrief() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mbrief)
  return _internal_mutable_mbrief();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::set_allocated_mbrief(::pbdb::db_brief* mbrief) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mbrief_);
  }
  if (mbrief) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mbrief)->GetArena();
    if (message_arena != submessage_arena) {
      mbrief = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mbrief, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mbrief_ = mbrief;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mbrief)
}

// .pbdb.db_bag mbag = 3;
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_has_mbag() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || mbag_ != nullptr);
  return value;
}
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::has_mbag() const {
  return _internal_has_mbag();
}
inline const ::pbdb::db_bag& PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_mbag() const {
  const ::pbdb::db_bag* p = mbag_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbdb::db_bag*>(
      &::pbdb::_db_bag_default_instance_);
}
inline const ::pbdb::db_bag& PROBUFF_NET_ROLE_SYNC_RESPONSE::mbag() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mbag)
  return _internal_mbag();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_set_allocated_mbag(
    ::pbdb::db_bag* mbag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mbag_);
  }
  mbag_ = mbag;
  if (mbag) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mbag)
}
inline ::pbdb::db_bag* PROBUFF_NET_ROLE_SYNC_RESPONSE::release_mbag() {
  auto temp = unsafe_arena_release_mbag();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbdb::db_bag* PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_release_mbag() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mbag)
  _has_bits_[0] &= ~0x00000004u;
  ::pbdb::db_bag* temp = mbag_;
  mbag_ = nullptr;
  return temp;
}
inline ::pbdb::db_bag* PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_mutable_mbag() {
  _has_bits_[0] |= 0x00000004u;
  if (mbag_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_bag>(GetArena());
    mbag_ = p;
  }
  return mbag_;
}
inline ::pbdb::db_bag* PROBUFF_NET_ROLE_SYNC_RESPONSE::mutable_mbag() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mbag)
  return _internal_mutable_mbag();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::set_allocated_mbag(::pbdb::db_bag* mbag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mbag_);
  }
  if (mbag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mbag)->GetArena();
    if (message_arena != submessage_arena) {
      mbag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mbag, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mbag_ = mbag;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mbag)
}

// .pbdb.db_task mtask = 4;
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_has_mtask() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || mtask_ != nullptr);
  return value;
}
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::has_mtask() const {
  return _internal_has_mtask();
}
inline const ::pbdb::db_task& PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_mtask() const {
  const ::pbdb::db_task* p = mtask_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbdb::db_task*>(
      &::pbdb::_db_task_default_instance_);
}
inline const ::pbdb::db_task& PROBUFF_NET_ROLE_SYNC_RESPONSE::mtask() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mtask)
  return _internal_mtask();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_set_allocated_mtask(
    ::pbdb::db_task* mtask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtask_);
  }
  mtask_ = mtask;
  if (mtask) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mtask)
}
inline ::pbdb::db_task* PROBUFF_NET_ROLE_SYNC_RESPONSE::release_mtask() {
  auto temp = unsafe_arena_release_mtask();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbdb::db_task* PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_release_mtask() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mtask)
  _has_bits_[0] &= ~0x00000008u;
  ::pbdb::db_task* temp = mtask_;
  mtask_ = nullptr;
  return temp;
}
inline ::pbdb::db_task* PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_mutable_mtask() {
  _has_bits_[0] |= 0x00000008u;
  if (mtask_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_task>(GetArena());
    mtask_ = p;
  }
  return mtask_;
}
inline ::pbdb::db_task* PROBUFF_NET_ROLE_SYNC_RESPONSE::mutable_mtask() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mtask)
  return _internal_mutable_mtask();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::set_allocated_mtask(::pbdb::db_task* mtask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtask_);
  }
  if (mtask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtask)->GetArena();
    if (message_arena != submessage_arena) {
      mtask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mtask, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  mtask_ = mtask;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.mtask)
}

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_SYNC

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_SYNC_RESPONSE

// .pbdb.db_bag mbag = 1;
inline bool PROBUFF_NET_BAG_SYNC_RESPONSE::_internal_has_mbag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mbag_ != nullptr);
  return value;
}
inline bool PROBUFF_NET_BAG_SYNC_RESPONSE::has_mbag() const {
  return _internal_has_mbag();
}
inline const ::pbdb::db_bag& PROBUFF_NET_BAG_SYNC_RESPONSE::_internal_mbag() const {
  const ::pbdb::db_bag* p = mbag_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbdb::db_bag*>(
      &::pbdb::_db_bag_default_instance_);
}
inline const ::pbdb::db_bag& PROBUFF_NET_BAG_SYNC_RESPONSE::mbag() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.mbag)
  return _internal_mbag();
}
inline void PROBUFF_NET_BAG_SYNC_RESPONSE::unsafe_arena_set_allocated_mbag(
    ::pbdb::db_bag* mbag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mbag_);
  }
  mbag_ = mbag;
  if (mbag) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.mbag)
}
inline ::pbdb::db_bag* PROBUFF_NET_BAG_SYNC_RESPONSE::release_mbag() {
  auto temp = unsafe_arena_release_mbag();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbdb::db_bag* PROBUFF_NET_BAG_SYNC_RESPONSE::unsafe_arena_release_mbag() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.mbag)
  _has_bits_[0] &= ~0x00000001u;
  ::pbdb::db_bag* temp = mbag_;
  mbag_ = nullptr;
  return temp;
}
inline ::pbdb::db_bag* PROBUFF_NET_BAG_SYNC_RESPONSE::_internal_mutable_mbag() {
  _has_bits_[0] |= 0x00000001u;
  if (mbag_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_bag>(GetArena());
    mbag_ = p;
  }
  return mbag_;
}
inline ::pbdb::db_bag* PROBUFF_NET_BAG_SYNC_RESPONSE::mutable_mbag() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.mbag)
  return _internal_mutable_mbag();
}
inline void PROBUFF_NET_BAG_SYNC_RESPONSE::set_allocated_mbag(::pbdb::db_bag* mbag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mbag_);
  }
  if (mbag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mbag)->GetArena();
    if (message_arena != submessage_arena) {
      mbag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mbag, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mbag_ = mbag;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.mbag)
}

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_UPDATE_delitem

// int32 mid = 1;
inline bool PROBUFF_NET_BAG_UPDATE_delitem::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_BAG_UPDATE_delitem::has_mid() const {
  return _internal_has_mid();
}
inline void PROBUFF_NET_BAG_UPDATE_delitem::clear_mid() {
  mid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_delitem::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_delitem::mid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE.delitem.mid)
  return _internal_mid();
}
inline void PROBUFF_NET_BAG_UPDATE_delitem::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
}
inline void PROBUFF_NET_BAG_UPDATE_delitem::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE.delitem.mid)
}

// int32 mcount = 2;
inline bool PROBUFF_NET_BAG_UPDATE_delitem::_internal_has_mcount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_BAG_UPDATE_delitem::has_mcount() const {
  return _internal_has_mcount();
}
inline void PROBUFF_NET_BAG_UPDATE_delitem::clear_mcount() {
  mcount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_delitem::_internal_mcount() const {
  return mcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_delitem::mcount() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE.delitem.mcount)
  return _internal_mcount();
}
inline void PROBUFF_NET_BAG_UPDATE_delitem::_internal_set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mcount_ = value;
}
inline void PROBUFF_NET_BAG_UPDATE_delitem::set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mcount(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE.delitem.mcount)
}

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_UPDATE_additem

// int32 mid = 1;
inline bool PROBUFF_NET_BAG_UPDATE_additem::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_BAG_UPDATE_additem::has_mid() const {
  return _internal_has_mid();
}
inline void PROBUFF_NET_BAG_UPDATE_additem::clear_mid() {
  mid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_additem::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_additem::mid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE.additem.mid)
  return _internal_mid();
}
inline void PROBUFF_NET_BAG_UPDATE_additem::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
}
inline void PROBUFF_NET_BAG_UPDATE_additem::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE.additem.mid)
}

// int32 mcount = 2;
inline bool PROBUFF_NET_BAG_UPDATE_additem::_internal_has_mcount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_BAG_UPDATE_additem::has_mcount() const {
  return _internal_has_mcount();
}
inline void PROBUFF_NET_BAG_UPDATE_additem::clear_mcount() {
  mcount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_additem::_internal_mcount() const {
  return mcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_additem::mcount() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE.additem.mcount)
  return _internal_mcount();
}
inline void PROBUFF_NET_BAG_UPDATE_additem::_internal_set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mcount_ = value;
}
inline void PROBUFF_NET_BAG_UPDATE_additem::set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mcount(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE.additem.mcount)
}

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_UPDATE

// repeated .pbnet.PROBUFF_NET_BAG_UPDATE.delitem mdelitems = 1;
inline int PROBUFF_NET_BAG_UPDATE::_internal_mdelitems_size() const {
  return mdelitems_.size();
}
inline int PROBUFF_NET_BAG_UPDATE::mdelitems_size() const {
  return _internal_mdelitems_size();
}
inline void PROBUFF_NET_BAG_UPDATE::clear_mdelitems() {
  mdelitems_.Clear();
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem* PROBUFF_NET_BAG_UPDATE::mutable_mdelitems(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_BAG_UPDATE.mdelitems)
  return mdelitems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem >*
PROBUFF_NET_BAG_UPDATE::mutable_mdelitems() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_BAG_UPDATE.mdelitems)
  return &mdelitems_;
}
inline const ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem& PROBUFF_NET_BAG_UPDATE::_internal_mdelitems(int index) const {
  return mdelitems_.Get(index);
}
inline const ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem& PROBUFF_NET_BAG_UPDATE::mdelitems(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE.mdelitems)
  return _internal_mdelitems(index);
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem* PROBUFF_NET_BAG_UPDATE::_internal_add_mdelitems() {
  return mdelitems_.Add();
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem* PROBUFF_NET_BAG_UPDATE::add_mdelitems() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_BAG_UPDATE.mdelitems)
  return _internal_add_mdelitems();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem >&
PROBUFF_NET_BAG_UPDATE::mdelitems() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_BAG_UPDATE.mdelitems)
  return mdelitems_;
}

// repeated int32 mdelnostackitems = 2;
inline int PROBUFF_NET_BAG_UPDATE::_internal_mdelnostackitems_size() const {
  return mdelnostackitems_.size();
}
inline int PROBUFF_NET_BAG_UPDATE::mdelnostackitems_size() const {
  return _internal_mdelnostackitems_size();
}
inline void PROBUFF_NET_BAG_UPDATE::clear_mdelnostackitems() {
  mdelnostackitems_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE::_internal_mdelnostackitems(int index) const {
  return mdelnostackitems_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE::mdelnostackitems(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE.mdelnostackitems)
  return _internal_mdelnostackitems(index);
}
inline void PROBUFF_NET_BAG_UPDATE::set_mdelnostackitems(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  mdelnostackitems_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE.mdelnostackitems)
}
inline void PROBUFF_NET_BAG_UPDATE::_internal_add_mdelnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value) {
  mdelnostackitems_.Add(value);
}
inline void PROBUFF_NET_BAG_UPDATE::add_mdelnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_mdelnostackitems(value);
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_BAG_UPDATE.mdelnostackitems)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_BAG_UPDATE::_internal_mdelnostackitems() const {
  return mdelnostackitems_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_BAG_UPDATE::mdelnostackitems() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_BAG_UPDATE.mdelnostackitems)
  return _internal_mdelnostackitems();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_BAG_UPDATE::_internal_mutable_mdelnostackitems() {
  return &mdelnostackitems_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_BAG_UPDATE::mutable_mdelnostackitems() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_BAG_UPDATE.mdelnostackitems)
  return _internal_mutable_mdelnostackitems();
}

// repeated .pbnet.PROBUFF_NET_BAG_UPDATE.additem madditems = 3;
inline int PROBUFF_NET_BAG_UPDATE::_internal_madditems_size() const {
  return madditems_.size();
}
inline int PROBUFF_NET_BAG_UPDATE::madditems_size() const {
  return _internal_madditems_size();
}
inline void PROBUFF_NET_BAG_UPDATE::clear_madditems() {
  madditems_.Clear();
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_additem* PROBUFF_NET_BAG_UPDATE::mutable_madditems(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_BAG_UPDATE.madditems)
  return madditems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_additem >*
PROBUFF_NET_BAG_UPDATE::mutable_madditems() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_BAG_UPDATE.madditems)
  return &madditems_;
}
inline const ::pbnet::PROBUFF_NET_BAG_UPDATE_additem& PROBUFF_NET_BAG_UPDATE::_internal_madditems(int index) const {
  return madditems_.Get(index);
}
inline const ::pbnet::PROBUFF_NET_BAG_UPDATE_additem& PROBUFF_NET_BAG_UPDATE::madditems(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE.madditems)
  return _internal_madditems(index);
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_additem* PROBUFF_NET_BAG_UPDATE::_internal_add_madditems() {
  return madditems_.Add();
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_additem* PROBUFF_NET_BAG_UPDATE::add_madditems() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_BAG_UPDATE.madditems)
  return _internal_add_madditems();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_additem >&
PROBUFF_NET_BAG_UPDATE::madditems() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_BAG_UPDATE.madditems)
  return madditems_;
}

// repeated int32 maddnostackitems = 4;
inline int PROBUFF_NET_BAG_UPDATE::_internal_maddnostackitems_size() const {
  return maddnostackitems_.size();
}
inline int PROBUFF_NET_BAG_UPDATE::maddnostackitems_size() const {
  return _internal_maddnostackitems_size();
}
inline void PROBUFF_NET_BAG_UPDATE::clear_maddnostackitems() {
  maddnostackitems_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE::_internal_maddnostackitems(int index) const {
  return maddnostackitems_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE::maddnostackitems(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE.maddnostackitems)
  return _internal_maddnostackitems(index);
}
inline void PROBUFF_NET_BAG_UPDATE::set_maddnostackitems(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  maddnostackitems_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE.maddnostackitems)
}
inline void PROBUFF_NET_BAG_UPDATE::_internal_add_maddnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value) {
  maddnostackitems_.Add(value);
}
inline void PROBUFF_NET_BAG_UPDATE::add_maddnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_maddnostackitems(value);
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_BAG_UPDATE.maddnostackitems)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_BAG_UPDATE::_internal_maddnostackitems() const {
  return maddnostackitems_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_BAG_UPDATE::maddnostackitems() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_BAG_UPDATE.maddnostackitems)
  return _internal_maddnostackitems();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_BAG_UPDATE::_internal_mutable_maddnostackitems() {
  return &maddnostackitems_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_BAG_UPDATE::mutable_maddnostackitems() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_BAG_UPDATE.maddnostackitems)
  return _internal_mutable_maddnostackitems();
}

// -------------------------------------------------------------------

// PROBUFF_NET_CMD

// string mcmd = 1;
inline bool PROBUFF_NET_CMD::_internal_has_mcmd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_CMD::has_mcmd() const {
  return _internal_has_mcmd();
}
inline void PROBUFF_NET_CMD::clear_mcmd() {
  mcmd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_CMD::mcmd() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CMD.mcmd)
  return _internal_mcmd();
}
inline void PROBUFF_NET_CMD::set_mcmd(const std::string& value) {
  _internal_set_mcmd(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CMD.mcmd)
}
inline std::string* PROBUFF_NET_CMD::mutable_mcmd() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_CMD.mcmd)
  return _internal_mutable_mcmd();
}
inline const std::string& PROBUFF_NET_CMD::_internal_mcmd() const {
  return mcmd_.Get();
}
inline void PROBUFF_NET_CMD::_internal_set_mcmd(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mcmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_CMD::set_mcmd(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mcmd_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_CMD.mcmd)
}
inline void PROBUFF_NET_CMD::set_mcmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mcmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_CMD.mcmd)
}
inline void PROBUFF_NET_CMD::set_mcmd(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mcmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_CMD.mcmd)
}
inline std::string* PROBUFF_NET_CMD::_internal_mutable_mcmd() {
  _has_bits_[0] |= 0x00000001u;
  return mcmd_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_CMD::release_mcmd() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_CMD.mcmd)
  if (!_internal_has_mcmd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mcmd_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_CMD::set_allocated_mcmd(std::string* mcmd) {
  if (mcmd != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mcmd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mcmd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_CMD.mcmd)
}
inline std::string* PROBUFF_NET_CMD::unsafe_arena_release_mcmd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_CMD.mcmd)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mcmd_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_CMD::unsafe_arena_set_allocated_mcmd(
    std::string* mcmd) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mcmd != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mcmd_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mcmd, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_CMD.mcmd)
}

// -------------------------------------------------------------------

// PROBUFF_NET_CHAT

// int32 mtype = 1;
inline bool PROBUFF_NET_CHAT::_internal_has_mtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHAT::has_mtype() const {
  return _internal_has_mtype();
}
inline void PROBUFF_NET_CHAT::clear_mtype() {
  mtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT::_internal_mtype() const {
  return mtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT::mtype() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT.mtype)
  return _internal_mtype();
}
inline void PROBUFF_NET_CHAT::_internal_set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mtype_ = value;
}
inline void PROBUFF_NET_CHAT::set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtype(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT.mtype)
}

// int32 mchannelid = 2;
inline bool PROBUFF_NET_CHAT::_internal_has_mchannelid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHAT::has_mchannelid() const {
  return _internal_has_mchannelid();
}
inline void PROBUFF_NET_CHAT::clear_mchannelid() {
  mchannelid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT::_internal_mchannelid() const {
  return mchannelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT::mchannelid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT.mchannelid)
  return _internal_mchannelid();
}
inline void PROBUFF_NET_CHAT::_internal_set_mchannelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mchannelid_ = value;
}
inline void PROBUFF_NET_CHAT::set_mchannelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mchannelid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT.mchannelid)
}

// string mcontent = 3;
inline bool PROBUFF_NET_CHAT::_internal_has_mcontent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHAT::has_mcontent() const {
  return _internal_has_mcontent();
}
inline void PROBUFF_NET_CHAT::clear_mcontent() {
  mcontent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_CHAT::mcontent() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT.mcontent)
  return _internal_mcontent();
}
inline void PROBUFF_NET_CHAT::set_mcontent(const std::string& value) {
  _internal_set_mcontent(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT.mcontent)
}
inline std::string* PROBUFF_NET_CHAT::mutable_mcontent() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_CHAT.mcontent)
  return _internal_mutable_mcontent();
}
inline const std::string& PROBUFF_NET_CHAT::_internal_mcontent() const {
  return mcontent_.Get();
}
inline void PROBUFF_NET_CHAT::_internal_set_mcontent(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_CHAT::set_mcontent(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mcontent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_CHAT.mcontent)
}
inline void PROBUFF_NET_CHAT::set_mcontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_CHAT.mcontent)
}
inline void PROBUFF_NET_CHAT::set_mcontent(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_CHAT.mcontent)
}
inline std::string* PROBUFF_NET_CHAT::_internal_mutable_mcontent() {
  _has_bits_[0] |= 0x00000001u;
  return mcontent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_CHAT::release_mcontent() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_CHAT.mcontent)
  if (!_internal_has_mcontent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mcontent_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_CHAT::set_allocated_mcontent(std::string* mcontent) {
  if (mcontent != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mcontent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mcontent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_CHAT.mcontent)
}
inline std::string* PROBUFF_NET_CHAT::unsafe_arena_release_mcontent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_CHAT.mcontent)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mcontent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_CHAT::unsafe_arena_set_allocated_mcontent(
    std::string* mcontent) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mcontent != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mcontent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mcontent, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_CHAT.mcontent)
}

// -------------------------------------------------------------------

// chatitem

// int64 mroleid = 1;
inline bool chatitem::_internal_has_mroleid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool chatitem::has_mroleid() const {
  return _internal_has_mroleid();
}
inline void chatitem::clear_mroleid() {
  mroleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 chatitem::_internal_mroleid() const {
  return mroleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 chatitem::mroleid() const {
  // @@protoc_insertion_point(field_get:pbnet.chatitem.mroleid)
  return _internal_mroleid();
}
inline void chatitem::_internal_set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  mroleid_ = value;
}
inline void chatitem::set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mroleid(value);
  // @@protoc_insertion_point(field_set:pbnet.chatitem.mroleid)
}

// string mrolename = 2;
inline bool chatitem::_internal_has_mrolename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool chatitem::has_mrolename() const {
  return _internal_has_mrolename();
}
inline void chatitem::clear_mrolename() {
  mrolename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& chatitem::mrolename() const {
  // @@protoc_insertion_point(field_get:pbnet.chatitem.mrolename)
  return _internal_mrolename();
}
inline void chatitem::set_mrolename(const std::string& value) {
  _internal_set_mrolename(value);
  // @@protoc_insertion_point(field_set:pbnet.chatitem.mrolename)
}
inline std::string* chatitem::mutable_mrolename() {
  // @@protoc_insertion_point(field_mutable:pbnet.chatitem.mrolename)
  return _internal_mutable_mrolename();
}
inline const std::string& chatitem::_internal_mrolename() const {
  return mrolename_.Get();
}
inline void chatitem::_internal_set_mrolename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void chatitem::set_mrolename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mrolename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.chatitem.mrolename)
}
inline void chatitem::set_mrolename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.chatitem.mrolename)
}
inline void chatitem::set_mrolename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.chatitem.mrolename)
}
inline std::string* chatitem::_internal_mutable_mrolename() {
  _has_bits_[0] |= 0x00000001u;
  return mrolename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* chatitem::release_mrolename() {
  // @@protoc_insertion_point(field_release:pbnet.chatitem.mrolename)
  if (!_internal_has_mrolename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mrolename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void chatitem::set_allocated_mrolename(std::string* mrolename) {
  if (mrolename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mrolename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mrolename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.chatitem.mrolename)
}
inline std::string* chatitem::unsafe_arena_release_mrolename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.chatitem.mrolename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mrolename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void chatitem::unsafe_arena_set_allocated_mrolename(
    std::string* mrolename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mrolename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mrolename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mrolename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.chatitem.mrolename)
}

// string mcontent = 3;
inline bool chatitem::_internal_has_mcontent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool chatitem::has_mcontent() const {
  return _internal_has_mcontent();
}
inline void chatitem::clear_mcontent() {
  mcontent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& chatitem::mcontent() const {
  // @@protoc_insertion_point(field_get:pbnet.chatitem.mcontent)
  return _internal_mcontent();
}
inline void chatitem::set_mcontent(const std::string& value) {
  _internal_set_mcontent(value);
  // @@protoc_insertion_point(field_set:pbnet.chatitem.mcontent)
}
inline std::string* chatitem::mutable_mcontent() {
  // @@protoc_insertion_point(field_mutable:pbnet.chatitem.mcontent)
  return _internal_mutable_mcontent();
}
inline const std::string& chatitem::_internal_mcontent() const {
  return mcontent_.Get();
}
inline void chatitem::_internal_set_mcontent(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void chatitem::set_mcontent(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mcontent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.chatitem.mcontent)
}
inline void chatitem::set_mcontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.chatitem.mcontent)
}
inline void chatitem::set_mcontent(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.chatitem.mcontent)
}
inline std::string* chatitem::_internal_mutable_mcontent() {
  _has_bits_[0] |= 0x00000002u;
  return mcontent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* chatitem::release_mcontent() {
  // @@protoc_insertion_point(field_release:pbnet.chatitem.mcontent)
  if (!_internal_has_mcontent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mcontent_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void chatitem::set_allocated_mcontent(std::string* mcontent) {
  if (mcontent != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mcontent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mcontent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.chatitem.mcontent)
}
inline std::string* chatitem::unsafe_arena_release_mcontent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.chatitem.mcontent)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return mcontent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void chatitem::unsafe_arena_set_allocated_mcontent(
    std::string* mcontent) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mcontent != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mcontent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mcontent, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.chatitem.mcontent)
}

// int32 mutc = 4;
inline bool chatitem::_internal_has_mutc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool chatitem::has_mutc() const {
  return _internal_has_mutc();
}
inline void chatitem::clear_mutc() {
  mutc_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatitem::_internal_mutc() const {
  return mutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatitem::mutc() const {
  // @@protoc_insertion_point(field_get:pbnet.chatitem.mutc)
  return _internal_mutc();
}
inline void chatitem::_internal_set_mutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mutc_ = value;
}
inline void chatitem::set_mutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mutc(value);
  // @@protoc_insertion_point(field_set:pbnet.chatitem.mutc)
}

// -------------------------------------------------------------------

// PROBUFF_NET_CHAT_RESPONSE

// int32 mtype = 1;
inline bool PROBUFF_NET_CHAT_RESPONSE::_internal_has_mtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHAT_RESPONSE::has_mtype() const {
  return _internal_has_mtype();
}
inline void PROBUFF_NET_CHAT_RESPONSE::clear_mtype() {
  mtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT_RESPONSE::_internal_mtype() const {
  return mtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT_RESPONSE::mtype() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT_RESPONSE.mtype)
  return _internal_mtype();
}
inline void PROBUFF_NET_CHAT_RESPONSE::_internal_set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mtype_ = value;
}
inline void PROBUFF_NET_CHAT_RESPONSE::set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtype(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT_RESPONSE.mtype)
}

// int32 mchannelid = 2;
inline bool PROBUFF_NET_CHAT_RESPONSE::_internal_has_mchannelid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHAT_RESPONSE::has_mchannelid() const {
  return _internal_has_mchannelid();
}
inline void PROBUFF_NET_CHAT_RESPONSE::clear_mchannelid() {
  mchannelid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT_RESPONSE::_internal_mchannelid() const {
  return mchannelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT_RESPONSE::mchannelid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT_RESPONSE.mchannelid)
  return _internal_mchannelid();
}
inline void PROBUFF_NET_CHAT_RESPONSE::_internal_set_mchannelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mchannelid_ = value;
}
inline void PROBUFF_NET_CHAT_RESPONSE::set_mchannelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mchannelid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT_RESPONSE.mchannelid)
}

// repeated .pbnet.chatitem mchatlist = 3;
inline int PROBUFF_NET_CHAT_RESPONSE::_internal_mchatlist_size() const {
  return mchatlist_.size();
}
inline int PROBUFF_NET_CHAT_RESPONSE::mchatlist_size() const {
  return _internal_mchatlist_size();
}
inline void PROBUFF_NET_CHAT_RESPONSE::clear_mchatlist() {
  mchatlist_.Clear();
}
inline ::pbnet::chatitem* PROBUFF_NET_CHAT_RESPONSE::mutable_mchatlist(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_CHAT_RESPONSE.mchatlist)
  return mchatlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem >*
PROBUFF_NET_CHAT_RESPONSE::mutable_mchatlist() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_CHAT_RESPONSE.mchatlist)
  return &mchatlist_;
}
inline const ::pbnet::chatitem& PROBUFF_NET_CHAT_RESPONSE::_internal_mchatlist(int index) const {
  return mchatlist_.Get(index);
}
inline const ::pbnet::chatitem& PROBUFF_NET_CHAT_RESPONSE::mchatlist(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT_RESPONSE.mchatlist)
  return _internal_mchatlist(index);
}
inline ::pbnet::chatitem* PROBUFF_NET_CHAT_RESPONSE::_internal_add_mchatlist() {
  return mchatlist_.Add();
}
inline ::pbnet::chatitem* PROBUFF_NET_CHAT_RESPONSE::add_mchatlist() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_CHAT_RESPONSE.mchatlist)
  return _internal_add_mchatlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem >&
PROBUFF_NET_CHAT_RESPONSE::mchatlist() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_CHAT_RESPONSE.mchatlist)
  return mchatlist_;
}

// bool mstat = 4;
inline bool PROBUFF_NET_CHAT_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHAT_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_CHAT_RESPONSE::clear_mstat() {
  mstat_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PROBUFF_NET_CHAT_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline bool PROBUFF_NET_CHAT_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_CHAT_RESPONSE::_internal_set_mstat(bool value) {
  _has_bits_[0] |= 0x00000004u;
  mstat_ = value;
}
inline void PROBUFF_NET_CHAT_RESPONSE::set_mstat(bool value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_SWITCH_LINE

// int32 mline = 1;
inline bool PROBUFF_NET_SWITCH_LINE::_internal_has_mline() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_SWITCH_LINE::has_mline() const {
  return _internal_has_mline();
}
inline void PROBUFF_NET_SWITCH_LINE::clear_mline() {
  mline_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_SWITCH_LINE::_internal_mline() const {
  return mline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_SWITCH_LINE::mline() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SWITCH_LINE.mline)
  return _internal_mline();
}
inline void PROBUFF_NET_SWITCH_LINE::_internal_set_mline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mline_ = value;
}
inline void PROBUFF_NET_SWITCH_LINE::set_mline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mline(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SWITCH_LINE.mline)
}

// -------------------------------------------------------------------

// PROBUFF_NET_SWITCH_LINE_RESPONSE

// int32 mline = 1;
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_has_mline() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::has_mline() const {
  return _internal_has_mline();
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::clear_mline() {
  mline_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_mline() const {
  return mline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_SWITCH_LINE_RESPONSE::mline() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE.mline)
  return _internal_mline();
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_set_mline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mline_ = value;
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::set_mline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mline(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE.mline)
}

// bool mstat = 2;
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::clear_mstat() {
  mstat_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_set_mstat(bool value) {
  _has_bits_[0] |= 0x00000002u;
  mstat_ = value;
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::set_mstat(bool value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_LIST

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_LIST_RESPONSE

// map<int32, .pbdb.mail> mmail = 1;
inline int PROBUFF_NET_MAIL_LIST_RESPONSE::_internal_mmail_size() const {
  return mmail_.size();
}
inline int PROBUFF_NET_MAIL_LIST_RESPONSE::mmail_size() const {
  return _internal_mmail_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
PROBUFF_NET_MAIL_LIST_RESPONSE::_internal_mmail() const {
  return mmail_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
PROBUFF_NET_MAIL_LIST_RESPONSE::mmail() const {
  // @@protoc_insertion_point(field_map:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE.mmail)
  return _internal_mmail();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
PROBUFF_NET_MAIL_LIST_RESPONSE::_internal_mutable_mmail() {
  return mmail_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
PROBUFF_NET_MAIL_LIST_RESPONSE::mutable_mmail() {
  // @@protoc_insertion_point(field_mutable_map:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE.mmail)
  return _internal_mutable_mmail();
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_READ

// int64 mmailid = 1;
inline bool PROBUFF_NET_MAIL_READ::_internal_has_mmailid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_READ::has_mmailid() const {
  return _internal_has_mmailid();
}
inline void PROBUFF_NET_MAIL_READ::clear_mmailid() {
  mmailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_READ::_internal_mmailid() const {
  return mmailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_READ::mmailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_READ.mmailid)
  return _internal_mmailid();
}
inline void PROBUFF_NET_MAIL_READ::_internal_set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mmailid_ = value;
}
inline void PROBUFF_NET_MAIL_READ::set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mmailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_READ.mmailid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_READ_RESPONSE

// int64 mmailid = 1;
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::_internal_has_mmailid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::has_mmailid() const {
  return _internal_has_mmailid();
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::clear_mmailid() {
  mmailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_READ_RESPONSE::_internal_mmailid() const {
  return mmailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_READ_RESPONSE::mmailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE.mmailid)
  return _internal_mmailid();
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::_internal_set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mmailid_ = value;
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mmailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE.mmailid)
}

// bool mstat = 2;
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::clear_mstat() {
  mstat_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::_internal_set_mstat(bool value) {
  _has_bits_[0] |= 0x00000002u;
  mstat_ = value;
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::set_mstat(bool value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_DRAW

// int64 mmailid = 1;
inline bool PROBUFF_NET_MAIL_DRAW::_internal_has_mmailid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_DRAW::has_mmailid() const {
  return _internal_has_mmailid();
}
inline void PROBUFF_NET_MAIL_DRAW::clear_mmailid() {
  mmailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DRAW::_internal_mmailid() const {
  return mmailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DRAW::mmailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DRAW.mmailid)
  return _internal_mmailid();
}
inline void PROBUFF_NET_MAIL_DRAW::_internal_set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mmailid_ = value;
}
inline void PROBUFF_NET_MAIL_DRAW::set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mmailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DRAW.mmailid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_DRAW_RESPONSE

// int64 mmailid = 1;
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_has_mmailid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::has_mmailid() const {
  return _internal_has_mmailid();
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::clear_mmailid() {
  mmailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_mmailid() const {
  return mmailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DRAW_RESPONSE::mmailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE.mmailid)
  return _internal_mmailid();
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mmailid_ = value;
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mmailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE.mmailid)
}

// bool mstat = 2;
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::clear_mstat() {
  mstat_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_set_mstat(bool value) {
  _has_bits_[0] |= 0x00000002u;
  mstat_ = value;
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::set_mstat(bool value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_DEL

// int64 mmailid = 1;
inline bool PROBUFF_NET_MAIL_DEL::_internal_has_mmailid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_DEL::has_mmailid() const {
  return _internal_has_mmailid();
}
inline void PROBUFF_NET_MAIL_DEL::clear_mmailid() {
  mmailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DEL::_internal_mmailid() const {
  return mmailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DEL::mmailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DEL.mmailid)
  return _internal_mmailid();
}
inline void PROBUFF_NET_MAIL_DEL::_internal_set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mmailid_ = value;
}
inline void PROBUFF_NET_MAIL_DEL::set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mmailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DEL.mmailid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_DEL_RESPONSE

// int64 mmailid = 1;
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_has_mmailid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::has_mmailid() const {
  return _internal_has_mmailid();
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::clear_mmailid() {
  mmailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_mmailid() const {
  return mmailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DEL_RESPONSE::mmailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE.mmailid)
  return _internal_mmailid();
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mmailid_ = value;
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::set_mmailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mmailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE.mmailid)
}

// bool mstat = 2;
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::clear_mstat() {
  mstat_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_set_mstat(bool value) {
  _has_bits_[0] |= 0x00000002u;
  mstat_ = value;
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::set_mstat(bool value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_KCPSESSION

// int64 mserverid = 1;
inline bool PROBUFF_NET_KCPSESSION::_internal_has_mserverid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_KCPSESSION::has_mserverid() const {
  return _internal_has_mserverid();
}
inline void PROBUFF_NET_KCPSESSION::clear_mserverid() {
  mserverid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_KCPSESSION::_internal_mserverid() const {
  return mserverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_KCPSESSION::mserverid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_KCPSESSION.mserverid)
  return _internal_mserverid();
}
inline void PROBUFF_NET_KCPSESSION::_internal_set_mserverid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  mserverid_ = value;
}
inline void PROBUFF_NET_KCPSESSION::set_mserverid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mserverid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_KCPSESSION.mserverid)
}

// string muip = 2;
inline bool PROBUFF_NET_KCPSESSION::_internal_has_muip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_KCPSESSION::has_muip() const {
  return _internal_has_muip();
}
inline void PROBUFF_NET_KCPSESSION::clear_muip() {
  muip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_KCPSESSION::muip() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_KCPSESSION.muip)
  return _internal_muip();
}
inline void PROBUFF_NET_KCPSESSION::set_muip(const std::string& value) {
  _internal_set_muip(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_KCPSESSION.muip)
}
inline std::string* PROBUFF_NET_KCPSESSION::mutable_muip() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_KCPSESSION.muip)
  return _internal_mutable_muip();
}
inline const std::string& PROBUFF_NET_KCPSESSION::_internal_muip() const {
  return muip_.Get();
}
inline void PROBUFF_NET_KCPSESSION::_internal_set_muip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  muip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_KCPSESSION::set_muip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  muip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_KCPSESSION.muip)
}
inline void PROBUFF_NET_KCPSESSION::set_muip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  muip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_KCPSESSION.muip)
}
inline void PROBUFF_NET_KCPSESSION::set_muip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  muip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_KCPSESSION.muip)
}
inline std::string* PROBUFF_NET_KCPSESSION::_internal_mutable_muip() {
  _has_bits_[0] |= 0x00000001u;
  return muip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_KCPSESSION::release_muip() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_KCPSESSION.muip)
  if (!_internal_has_muip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return muip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_KCPSESSION::set_allocated_muip(std::string* muip) {
  if (muip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  muip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), muip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_KCPSESSION.muip)
}
inline std::string* PROBUFF_NET_KCPSESSION::unsafe_arena_release_muip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_KCPSESSION.muip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return muip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_KCPSESSION::unsafe_arena_set_allocated_muip(
    std::string* muip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (muip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  muip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      muip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_KCPSESSION.muip)
}

// int32 muport = 3;
inline bool PROBUFF_NET_KCPSESSION::_internal_has_muport() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_KCPSESSION::has_muport() const {
  return _internal_has_muport();
}
inline void PROBUFF_NET_KCPSESSION::clear_muport() {
  muport_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_KCPSESSION::_internal_muport() const {
  return muport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_KCPSESSION::muport() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_KCPSESSION.muport)
  return _internal_muport();
}
inline void PROBUFF_NET_KCPSESSION::_internal_set_muport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  muport_ = value;
}
inline void PROBUFF_NET_KCPSESSION::set_muport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_muport(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_KCPSESSION.muport)
}

// int32 mconv = 4;
inline bool PROBUFF_NET_KCPSESSION::_internal_has_mconv() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PROBUFF_NET_KCPSESSION::has_mconv() const {
  return _internal_has_mconv();
}
inline void PROBUFF_NET_KCPSESSION::clear_mconv() {
  mconv_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_KCPSESSION::_internal_mconv() const {
  return mconv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_KCPSESSION::mconv() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_KCPSESSION.mconv)
  return _internal_mconv();
}
inline void PROBUFF_NET_KCPSESSION::_internal_set_mconv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mconv_ = value;
}
inline void PROBUFF_NET_KCPSESSION::set_mconv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mconv(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_KCPSESSION.mconv)
}

// -------------------------------------------------------------------

// PROBUFF_NET_KCPSESSION_RESPONSE

// string mkcpsession = 1;
inline bool PROBUFF_NET_KCPSESSION_RESPONSE::_internal_has_mkcpsession() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_KCPSESSION_RESPONSE::has_mkcpsession() const {
  return _internal_has_mkcpsession();
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::clear_mkcpsession() {
  mkcpsession_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_KCPSESSION_RESPONSE::mkcpsession() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.mkcpsession)
  return _internal_mkcpsession();
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::set_mkcpsession(const std::string& value) {
  _internal_set_mkcpsession(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.mkcpsession)
}
inline std::string* PROBUFF_NET_KCPSESSION_RESPONSE::mutable_mkcpsession() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.mkcpsession)
  return _internal_mutable_mkcpsession();
}
inline const std::string& PROBUFF_NET_KCPSESSION_RESPONSE::_internal_mkcpsession() const {
  return mkcpsession_.Get();
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::_internal_set_mkcpsession(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mkcpsession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::set_mkcpsession(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mkcpsession_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.mkcpsession)
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::set_mkcpsession(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mkcpsession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.mkcpsession)
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::set_mkcpsession(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mkcpsession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.mkcpsession)
}
inline std::string* PROBUFF_NET_KCPSESSION_RESPONSE::_internal_mutable_mkcpsession() {
  _has_bits_[0] |= 0x00000001u;
  return mkcpsession_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_KCPSESSION_RESPONSE::release_mkcpsession() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.mkcpsession)
  if (!_internal_has_mkcpsession()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mkcpsession_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::set_allocated_mkcpsession(std::string* mkcpsession) {
  if (mkcpsession != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mkcpsession_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mkcpsession,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.mkcpsession)
}
inline std::string* PROBUFF_NET_KCPSESSION_RESPONSE::unsafe_arena_release_mkcpsession() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.mkcpsession)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mkcpsession_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::unsafe_arena_set_allocated_mkcpsession(
    std::string* mkcpsession) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mkcpsession != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mkcpsession_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mkcpsession, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.mkcpsession)
}

// -------------------------------------------------------------------

// PROBUFF_NET_TASK_RECEIVE_AWARD

// int32 mtaskid = 1;
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD::_internal_has_mtaskid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD::has_mtaskid() const {
  return _internal_has_mtaskid();
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD::clear_mtaskid() {
  mtaskid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_TASK_RECEIVE_AWARD::_internal_mtaskid() const {
  return mtaskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_TASK_RECEIVE_AWARD::mtaskid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD.mtaskid)
  return _internal_mtaskid();
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD::_internal_set_mtaskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mtaskid_ = value;
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD::set_mtaskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtaskid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD.mtaskid)
}

// -------------------------------------------------------------------

// drop_item

// int32 mitem = 1;
inline bool drop_item::_internal_has_mitem() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool drop_item::has_mitem() const {
  return _internal_has_mitem();
}
inline void drop_item::clear_mitem() {
  mitem_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 drop_item::_internal_mitem() const {
  return mitem_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 drop_item::mitem() const {
  // @@protoc_insertion_point(field_get:pbnet.drop_item.mitem)
  return _internal_mitem();
}
inline void drop_item::_internal_set_mitem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mitem_ = value;
}
inline void drop_item::set_mitem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mitem(value);
  // @@protoc_insertion_point(field_set:pbnet.drop_item.mitem)
}

// int32 mcount = 2;
inline bool drop_item::_internal_has_mcount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool drop_item::has_mcount() const {
  return _internal_has_mcount();
}
inline void drop_item::clear_mcount() {
  mcount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 drop_item::_internal_mcount() const {
  return mcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 drop_item::mcount() const {
  // @@protoc_insertion_point(field_get:pbnet.drop_item.mcount)
  return _internal_mcount();
}
inline void drop_item::_internal_set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mcount_ = value;
}
inline void drop_item::set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mcount(value);
  // @@protoc_insertion_point(field_set:pbnet.drop_item.mcount)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE

// int32 mtaskid = 1;
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_has_mtaskid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::has_mtaskid() const {
  return _internal_has_mtaskid();
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::clear_mtaskid() {
  mtaskid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_mtaskid() const {
  return mtaskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::mtaskid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE.mtaskid)
  return _internal_mtaskid();
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_set_mtaskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mtaskid_ = value;
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::set_mtaskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtaskid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE.mtaskid)
}

// bool mstat = 2;
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::clear_mstat() {
  mstat_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_set_mstat(bool value) {
  _has_bits_[0] |= 0x00000002u;
  mstat_ = value;
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::set_mstat(bool value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE.mstat)
}

// map<int32, int32> mdrop = 3;
inline int PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_mdrop_size() const {
  return mdrop_.size();
}
inline int PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::mdrop_size() const {
  return _internal_mdrop_size();
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::clear_mdrop() {
  mdrop_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_mdrop() const {
  return mdrop_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::mdrop() const {
  // @@protoc_insertion_point(field_map:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE.mdrop)
  return _internal_mdrop();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_mutable_mdrop() {
  return mdrop_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::mutable_mdrop() {
  // @@protoc_insertion_point(field_mutable_map:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE.mdrop)
  return _internal_mutable_mdrop();
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_CREATE

// string mname = 1;
inline bool PROBUFF_NET_FAMIL_CREATE::_internal_has_mname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_CREATE::has_mname() const {
  return _internal_has_mname();
}
inline void PROBUFF_NET_FAMIL_CREATE::clear_mname() {
  mname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_FAMIL_CREATE::mname() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_CREATE.mname)
  return _internal_mname();
}
inline void PROBUFF_NET_FAMIL_CREATE::set_mname(const std::string& value) {
  _internal_set_mname(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_CREATE.mname)
}
inline std::string* PROBUFF_NET_FAMIL_CREATE::mutable_mname() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_FAMIL_CREATE.mname)
  return _internal_mutable_mname();
}
inline const std::string& PROBUFF_NET_FAMIL_CREATE::_internal_mname() const {
  return mname_.Get();
}
inline void PROBUFF_NET_FAMIL_CREATE::_internal_set_mname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_FAMIL_CREATE::set_mname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_FAMIL_CREATE.mname)
}
inline void PROBUFF_NET_FAMIL_CREATE::set_mname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_FAMIL_CREATE.mname)
}
inline void PROBUFF_NET_FAMIL_CREATE::set_mname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_FAMIL_CREATE.mname)
}
inline std::string* PROBUFF_NET_FAMIL_CREATE::_internal_mutable_mname() {
  _has_bits_[0] |= 0x00000001u;
  return mname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_FAMIL_CREATE::release_mname() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_FAMIL_CREATE.mname)
  if (!_internal_has_mname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_FAMIL_CREATE::set_allocated_mname(std::string* mname) {
  if (mname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_FAMIL_CREATE.mname)
}
inline std::string* PROBUFF_NET_FAMIL_CREATE::unsafe_arena_release_mname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_FAMIL_CREATE.mname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_FAMIL_CREATE::unsafe_arena_set_allocated_mname(
    std::string* mname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_FAMIL_CREATE.mname)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_CREATE_RESPONSE

// int32 mstat = 1;
inline bool PROBUFF_NET_FAMIL_CREATE_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_CREATE_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_FAMIL_CREATE_RESPONSE::clear_mstat() {
  mstat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_CREATE_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_CREATE_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_FAMIL_CREATE_RESPONSE::_internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mstat_ = value;
}
inline void PROBUFF_NET_FAMIL_CREATE_RESPONSE::set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_INFO

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_INFO_RESPONSE

// int32 mstat = 1;
inline bool PROBUFF_NET_FAMIL_INFO_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_INFO_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_FAMIL_INFO_RESPONSE::clear_mstat() {
  mstat_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_INFO_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_INFO_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_FAMIL_INFO_RESPONSE::_internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mstat_ = value;
}
inline void PROBUFF_NET_FAMIL_INFO_RESPONSE::set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE.mstat)
}

// .pbdb.db_family minfo = 2;
inline bool PROBUFF_NET_FAMIL_INFO_RESPONSE::_internal_has_minfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || minfo_ != nullptr);
  return value;
}
inline bool PROBUFF_NET_FAMIL_INFO_RESPONSE::has_minfo() const {
  return _internal_has_minfo();
}
inline const ::pbdb::db_family& PROBUFF_NET_FAMIL_INFO_RESPONSE::_internal_minfo() const {
  const ::pbdb::db_family* p = minfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbdb::db_family*>(
      &::pbdb::_db_family_default_instance_);
}
inline const ::pbdb::db_family& PROBUFF_NET_FAMIL_INFO_RESPONSE::minfo() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE.minfo)
  return _internal_minfo();
}
inline void PROBUFF_NET_FAMIL_INFO_RESPONSE::unsafe_arena_set_allocated_minfo(
    ::pbdb::db_family* minfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minfo_);
  }
  minfo_ = minfo;
  if (minfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE.minfo)
}
inline ::pbdb::db_family* PROBUFF_NET_FAMIL_INFO_RESPONSE::release_minfo() {
  auto temp = unsafe_arena_release_minfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbdb::db_family* PROBUFF_NET_FAMIL_INFO_RESPONSE::unsafe_arena_release_minfo() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE.minfo)
  _has_bits_[0] &= ~0x00000001u;
  ::pbdb::db_family* temp = minfo_;
  minfo_ = nullptr;
  return temp;
}
inline ::pbdb::db_family* PROBUFF_NET_FAMIL_INFO_RESPONSE::_internal_mutable_minfo() {
  _has_bits_[0] |= 0x00000001u;
  if (minfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_family>(GetArena());
    minfo_ = p;
  }
  return minfo_;
}
inline ::pbdb::db_family* PROBUFF_NET_FAMIL_INFO_RESPONSE::mutable_minfo() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE.minfo)
  return _internal_mutable_minfo();
}
inline void PROBUFF_NET_FAMIL_INFO_RESPONSE::set_allocated_minfo(::pbdb::db_family* minfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(minfo_);
  }
  if (minfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minfo)->GetArena();
    if (message_arena != submessage_arena) {
      minfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  minfo_ = minfo;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE.minfo)
}

// repeated .pbdb.db_brief mmember = 3;
inline int PROBUFF_NET_FAMIL_INFO_RESPONSE::_internal_mmember_size() const {
  return mmember_.size();
}
inline int PROBUFF_NET_FAMIL_INFO_RESPONSE::mmember_size() const {
  return _internal_mmember_size();
}
inline ::pbdb::db_brief* PROBUFF_NET_FAMIL_INFO_RESPONSE::mutable_mmember(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE.mmember)
  return mmember_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >*
PROBUFF_NET_FAMIL_INFO_RESPONSE::mutable_mmember() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE.mmember)
  return &mmember_;
}
inline const ::pbdb::db_brief& PROBUFF_NET_FAMIL_INFO_RESPONSE::_internal_mmember(int index) const {
  return mmember_.Get(index);
}
inline const ::pbdb::db_brief& PROBUFF_NET_FAMIL_INFO_RESPONSE::mmember(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE.mmember)
  return _internal_mmember(index);
}
inline ::pbdb::db_brief* PROBUFF_NET_FAMIL_INFO_RESPONSE::_internal_add_mmember() {
  return mmember_.Add();
}
inline ::pbdb::db_brief* PROBUFF_NET_FAMIL_INFO_RESPONSE::add_mmember() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE.mmember)
  return _internal_add_mmember();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >&
PROBUFF_NET_FAMIL_INFO_RESPONSE::mmember() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE.mmember)
  return mmember_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_JOIN

// int64 mfamilid = 1;
inline bool PROBUFF_NET_FAMIL_JOIN::_internal_has_mfamilid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_JOIN::has_mfamilid() const {
  return _internal_has_mfamilid();
}
inline void PROBUFF_NET_FAMIL_JOIN::clear_mfamilid() {
  mfamilid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_JOIN::_internal_mfamilid() const {
  return mfamilid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_JOIN::mfamilid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_JOIN.mfamilid)
  return _internal_mfamilid();
}
inline void PROBUFF_NET_FAMIL_JOIN::_internal_set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mfamilid_ = value;
}
inline void PROBUFF_NET_FAMIL_JOIN::set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mfamilid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_JOIN.mfamilid)
}

// bool mapply = 2;
inline bool PROBUFF_NET_FAMIL_JOIN::_internal_has_mapply() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_JOIN::has_mapply() const {
  return _internal_has_mapply();
}
inline void PROBUFF_NET_FAMIL_JOIN::clear_mapply() {
  mapply_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_FAMIL_JOIN::_internal_mapply() const {
  return mapply_;
}
inline bool PROBUFF_NET_FAMIL_JOIN::mapply() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_JOIN.mapply)
  return _internal_mapply();
}
inline void PROBUFF_NET_FAMIL_JOIN::_internal_set_mapply(bool value) {
  _has_bits_[0] |= 0x00000002u;
  mapply_ = value;
}
inline void PROBUFF_NET_FAMIL_JOIN::set_mapply(bool value) {
  _internal_set_mapply(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_JOIN.mapply)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_JOIN_RESPONSE

// int32 mstat = 1;
inline bool PROBUFF_NET_FAMIL_JOIN_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_JOIN_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_FAMIL_JOIN_RESPONSE::clear_mstat() {
  mstat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_JOIN_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_JOIN_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_FAMIL_JOIN_RESPONSE::_internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mstat_ = value;
}
inline void PROBUFF_NET_FAMIL_JOIN_RESPONSE::set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_RATIFY_JOIN

// int64 mroleid = 1;
inline bool PROBUFF_NET_FAMIL_RATIFY_JOIN::_internal_has_mroleid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_RATIFY_JOIN::has_mroleid() const {
  return _internal_has_mroleid();
}
inline void PROBUFF_NET_FAMIL_RATIFY_JOIN::clear_mroleid() {
  mroleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_RATIFY_JOIN::_internal_mroleid() const {
  return mroleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_RATIFY_JOIN::mroleid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN.mroleid)
  return _internal_mroleid();
}
inline void PROBUFF_NET_FAMIL_RATIFY_JOIN::_internal_set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mroleid_ = value;
}
inline void PROBUFF_NET_FAMIL_RATIFY_JOIN::set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mroleid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN.mroleid)
}

// bool mratify = 2;
inline bool PROBUFF_NET_FAMIL_RATIFY_JOIN::_internal_has_mratify() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_RATIFY_JOIN::has_mratify() const {
  return _internal_has_mratify();
}
inline void PROBUFF_NET_FAMIL_RATIFY_JOIN::clear_mratify() {
  mratify_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_FAMIL_RATIFY_JOIN::_internal_mratify() const {
  return mratify_;
}
inline bool PROBUFF_NET_FAMIL_RATIFY_JOIN::mratify() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN.mratify)
  return _internal_mratify();
}
inline void PROBUFF_NET_FAMIL_RATIFY_JOIN::_internal_set_mratify(bool value) {
  _has_bits_[0] |= 0x00000002u;
  mratify_ = value;
}
inline void PROBUFF_NET_FAMIL_RATIFY_JOIN::set_mratify(bool value) {
  _internal_set_mratify(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN.mratify)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE

// int32 mstat = 1;
inline bool PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::clear_mstat() {
  mstat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::_internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mstat_ = value;
}
inline void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_CEDE

// int64 mroleid = 1;
inline bool PROBUFF_NET_FAMIL_CEDE::_internal_has_mroleid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_CEDE::has_mroleid() const {
  return _internal_has_mroleid();
}
inline void PROBUFF_NET_FAMIL_CEDE::clear_mroleid() {
  mroleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_CEDE::_internal_mroleid() const {
  return mroleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_CEDE::mroleid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_CEDE.mroleid)
  return _internal_mroleid();
}
inline void PROBUFF_NET_FAMIL_CEDE::_internal_set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mroleid_ = value;
}
inline void PROBUFF_NET_FAMIL_CEDE::set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mroleid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_CEDE.mroleid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_CEDE_RESPONSE

// int32 mstat = 1;
inline bool PROBUFF_NET_FAMIL_CEDE_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_CEDE_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_FAMIL_CEDE_RESPONSE::clear_mstat() {
  mstat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_CEDE_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_CEDE_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_FAMIL_CEDE_RESPONSE::_internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mstat_ = value;
}
inline void PROBUFF_NET_FAMIL_CEDE_RESPONSE::set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_LEAVE

// int64 mfamilid = 1;
inline bool PROBUFF_NET_FAMIL_LEAVE::_internal_has_mfamilid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_LEAVE::has_mfamilid() const {
  return _internal_has_mfamilid();
}
inline void PROBUFF_NET_FAMIL_LEAVE::clear_mfamilid() {
  mfamilid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_LEAVE::_internal_mfamilid() const {
  return mfamilid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_LEAVE::mfamilid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_LEAVE.mfamilid)
  return _internal_mfamilid();
}
inline void PROBUFF_NET_FAMIL_LEAVE::_internal_set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mfamilid_ = value;
}
inline void PROBUFF_NET_FAMIL_LEAVE::set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mfamilid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_LEAVE.mfamilid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_LEAVE_RESPONSE

// int32 mstat = 1;
inline bool PROBUFF_NET_FAMIL_LEAVE_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_LEAVE_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::clear_mstat() {
  mstat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_LEAVE_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_LEAVE_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::_internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mstat_ = value;
}
inline void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_LIST

// int64 mfamilid = 1;
inline bool PROBUFF_NET_FAMIL_LIST::_internal_has_mfamilid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_LIST::has_mfamilid() const {
  return _internal_has_mfamilid();
}
inline void PROBUFF_NET_FAMIL_LIST::clear_mfamilid() {
  mfamilid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_LIST::_internal_mfamilid() const {
  return mfamilid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_LIST::mfamilid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_LIST.mfamilid)
  return _internal_mfamilid();
}
inline void PROBUFF_NET_FAMIL_LIST::_internal_set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mfamilid_ = value;
}
inline void PROBUFF_NET_FAMIL_LIST::set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mfamilid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_LIST.mfamilid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_LIST_RESPONSE

// int64 mfamilid = 1;
inline bool PROBUFF_NET_FAMIL_LIST_RESPONSE::_internal_has_mfamilid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_LIST_RESPONSE::has_mfamilid() const {
  return _internal_has_mfamilid();
}
inline void PROBUFF_NET_FAMIL_LIST_RESPONSE::clear_mfamilid() {
  mfamilid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_LIST_RESPONSE::_internal_mfamilid() const {
  return mfamilid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_LIST_RESPONSE::mfamilid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE.mfamilid)
  return _internal_mfamilid();
}
inline void PROBUFF_NET_FAMIL_LIST_RESPONSE::_internal_set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mfamilid_ = value;
}
inline void PROBUFF_NET_FAMIL_LIST_RESPONSE::set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mfamilid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE.mfamilid)
}

// repeated .pbdb.db_family mfamily = 2;
inline int PROBUFF_NET_FAMIL_LIST_RESPONSE::_internal_mfamily_size() const {
  return mfamily_.size();
}
inline int PROBUFF_NET_FAMIL_LIST_RESPONSE::mfamily_size() const {
  return _internal_mfamily_size();
}
inline ::pbdb::db_family* PROBUFF_NET_FAMIL_LIST_RESPONSE::mutable_mfamily(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE.mfamily)
  return mfamily_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_family >*
PROBUFF_NET_FAMIL_LIST_RESPONSE::mutable_mfamily() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE.mfamily)
  return &mfamily_;
}
inline const ::pbdb::db_family& PROBUFF_NET_FAMIL_LIST_RESPONSE::_internal_mfamily(int index) const {
  return mfamily_.Get(index);
}
inline const ::pbdb::db_family& PROBUFF_NET_FAMIL_LIST_RESPONSE::mfamily(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE.mfamily)
  return _internal_mfamily(index);
}
inline ::pbdb::db_family* PROBUFF_NET_FAMIL_LIST_RESPONSE::_internal_add_mfamily() {
  return mfamily_.Add();
}
inline ::pbdb::db_family* PROBUFF_NET_FAMIL_LIST_RESPONSE::add_mfamily() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE.mfamily)
  return _internal_add_mfamily();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_family >&
PROBUFF_NET_FAMIL_LIST_RESPONSE::mfamily() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE.mfamily)
  return mfamily_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_CHANGENAME

// int64 mfamilid = 1;
inline bool PROBUFF_NET_FAMIL_CHANGENAME::_internal_has_mfamilid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_CHANGENAME::has_mfamilid() const {
  return _internal_has_mfamilid();
}
inline void PROBUFF_NET_FAMIL_CHANGENAME::clear_mfamilid() {
  mfamilid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_CHANGENAME::_internal_mfamilid() const {
  return mfamilid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_CHANGENAME::mfamilid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mfamilid)
  return _internal_mfamilid();
}
inline void PROBUFF_NET_FAMIL_CHANGENAME::_internal_set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  mfamilid_ = value;
}
inline void PROBUFF_NET_FAMIL_CHANGENAME::set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mfamilid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mfamilid)
}

// string mname = 2;
inline bool PROBUFF_NET_FAMIL_CHANGENAME::_internal_has_mname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_CHANGENAME::has_mname() const {
  return _internal_has_mname();
}
inline void PROBUFF_NET_FAMIL_CHANGENAME::clear_mname() {
  mname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_FAMIL_CHANGENAME::mname() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mname)
  return _internal_mname();
}
inline void PROBUFF_NET_FAMIL_CHANGENAME::set_mname(const std::string& value) {
  _internal_set_mname(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mname)
}
inline std::string* PROBUFF_NET_FAMIL_CHANGENAME::mutable_mname() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mname)
  return _internal_mutable_mname();
}
inline const std::string& PROBUFF_NET_FAMIL_CHANGENAME::_internal_mname() const {
  return mname_.Get();
}
inline void PROBUFF_NET_FAMIL_CHANGENAME::_internal_set_mname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_FAMIL_CHANGENAME::set_mname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mname)
}
inline void PROBUFF_NET_FAMIL_CHANGENAME::set_mname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mname)
}
inline void PROBUFF_NET_FAMIL_CHANGENAME::set_mname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mname)
}
inline std::string* PROBUFF_NET_FAMIL_CHANGENAME::_internal_mutable_mname() {
  _has_bits_[0] |= 0x00000001u;
  return mname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_FAMIL_CHANGENAME::release_mname() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mname)
  if (!_internal_has_mname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_FAMIL_CHANGENAME::set_allocated_mname(std::string* mname) {
  if (mname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mname)
}
inline std::string* PROBUFF_NET_FAMIL_CHANGENAME::unsafe_arena_release_mname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_FAMIL_CHANGENAME::unsafe_arena_set_allocated_mname(
    std::string* mname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mname)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE

// int32 mstat = 1;
inline bool PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::clear_mstat() {
  mstat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::_internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mstat_ = value;
}
inline void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_SIGN

// int64 mfamilid = 1;
inline bool PROBUFF_NET_FAMIL_SIGN::_internal_has_mfamilid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_SIGN::has_mfamilid() const {
  return _internal_has_mfamilid();
}
inline void PROBUFF_NET_FAMIL_SIGN::clear_mfamilid() {
  mfamilid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_SIGN::_internal_mfamilid() const {
  return mfamilid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_SIGN::mfamilid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_SIGN.mfamilid)
  return _internal_mfamilid();
}
inline void PROBUFF_NET_FAMIL_SIGN::_internal_set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mfamilid_ = value;
}
inline void PROBUFF_NET_FAMIL_SIGN::set_mfamilid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mfamilid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_SIGN.mfamilid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_SIGN_RESPONSE

// int32 mstat = 1;
inline bool PROBUFF_NET_FAMIL_SIGN_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_SIGN_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_FAMIL_SIGN_RESPONSE::clear_mstat() {
  mstat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_SIGN_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMIL_SIGN_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_FAMIL_SIGN_RESPONSE::_internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mstat_ = value;
}
inline void PROBUFF_NET_FAMIL_SIGN_RESPONSE::set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PROBUFF_NET_REWARD_ITEM_RESPONSE

// map<int32, int32> mitems = 1;
inline int PROBUFF_NET_REWARD_ITEM_RESPONSE::_internal_mitems_size() const {
  return mitems_.size();
}
inline int PROBUFF_NET_REWARD_ITEM_RESPONSE::mitems_size() const {
  return _internal_mitems_size();
}
inline void PROBUFF_NET_REWARD_ITEM_RESPONSE::clear_mitems() {
  mitems_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_REWARD_ITEM_RESPONSE::_internal_mitems() const {
  return mitems_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_REWARD_ITEM_RESPONSE::mitems() const {
  // @@protoc_insertion_point(field_map:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE.mitems)
  return _internal_mitems();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_REWARD_ITEM_RESPONSE::_internal_mutable_mitems() {
  return mitems_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_REWARD_ITEM_RESPONSE::mutable_mitems() {
  // @@protoc_insertion_point(field_mutable_map:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE.mitems)
  return _internal_mutable_mitems();
}

// -------------------------------------------------------------------

// PROBUFF_NET_RANKLIST

// bool miscross = 1;
inline bool PROBUFF_NET_RANKLIST::_internal_has_miscross() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_RANKLIST::has_miscross() const {
  return _internal_has_miscross();
}
inline void PROBUFF_NET_RANKLIST::clear_miscross() {
  miscross_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PROBUFF_NET_RANKLIST::_internal_miscross() const {
  return miscross_;
}
inline bool PROBUFF_NET_RANKLIST::miscross() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RANKLIST.miscross)
  return _internal_miscross();
}
inline void PROBUFF_NET_RANKLIST::_internal_set_miscross(bool value) {
  _has_bits_[0] |= 0x00000001u;
  miscross_ = value;
}
inline void PROBUFF_NET_RANKLIST::set_miscross(bool value) {
  _internal_set_miscross(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RANKLIST.miscross)
}

// .pbdb.eranklist mtype = 2;
inline bool PROBUFF_NET_RANKLIST::_internal_has_mtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_RANKLIST::has_mtype() const {
  return _internal_has_mtype();
}
inline void PROBUFF_NET_RANKLIST::clear_mtype() {
  mtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pbdb::eranklist PROBUFF_NET_RANKLIST::_internal_mtype() const {
  return static_cast< ::pbdb::eranklist >(mtype_);
}
inline ::pbdb::eranklist PROBUFF_NET_RANKLIST::mtype() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RANKLIST.mtype)
  return _internal_mtype();
}
inline void PROBUFF_NET_RANKLIST::_internal_set_mtype(::pbdb::eranklist value) {
  _has_bits_[0] |= 0x00000002u;
  mtype_ = value;
}
inline void PROBUFF_NET_RANKLIST::set_mtype(::pbdb::eranklist value) {
  _internal_set_mtype(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RANKLIST.mtype)
}

// int32 mactivityid = 3;
inline bool PROBUFF_NET_RANKLIST::_internal_has_mactivityid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_RANKLIST::has_mactivityid() const {
  return _internal_has_mactivityid();
}
inline void PROBUFF_NET_RANKLIST::clear_mactivityid() {
  mactivityid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RANKLIST::_internal_mactivityid() const {
  return mactivityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RANKLIST::mactivityid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RANKLIST.mactivityid)
  return _internal_mactivityid();
}
inline void PROBUFF_NET_RANKLIST::_internal_set_mactivityid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mactivityid_ = value;
}
inline void PROBUFF_NET_RANKLIST::set_mactivityid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mactivityid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RANKLIST.mactivityid)
}

// int32 mpage = 4;
inline bool PROBUFF_NET_RANKLIST::_internal_has_mpage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PROBUFF_NET_RANKLIST::has_mpage() const {
  return _internal_has_mpage();
}
inline void PROBUFF_NET_RANKLIST::clear_mpage() {
  mpage_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RANKLIST::_internal_mpage() const {
  return mpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RANKLIST::mpage() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RANKLIST.mpage)
  return _internal_mpage();
}
inline void PROBUFF_NET_RANKLIST::_internal_set_mpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mpage_ = value;
}
inline void PROBUFF_NET_RANKLIST::set_mpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mpage(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RANKLIST.mpage)
}

// -------------------------------------------------------------------

// PROBUFF_NET_RANKLIST_RESPONSE

// .pbdb.eranklist mtype = 1;
inline bool PROBUFF_NET_RANKLIST_RESPONSE::_internal_has_mtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_RANKLIST_RESPONSE::has_mtype() const {
  return _internal_has_mtype();
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::clear_mtype() {
  mtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbdb::eranklist PROBUFF_NET_RANKLIST_RESPONSE::_internal_mtype() const {
  return static_cast< ::pbdb::eranklist >(mtype_);
}
inline ::pbdb::eranklist PROBUFF_NET_RANKLIST_RESPONSE::mtype() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.mtype)
  return _internal_mtype();
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::_internal_set_mtype(::pbdb::eranklist value) {
  _has_bits_[0] |= 0x00000001u;
  mtype_ = value;
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::set_mtype(::pbdb::eranklist value) {
  _internal_set_mtype(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.mtype)
}

// repeated .pbdb.db_brief mitems = 2;
inline int PROBUFF_NET_RANKLIST_RESPONSE::_internal_mitems_size() const {
  return mitems_.size();
}
inline int PROBUFF_NET_RANKLIST_RESPONSE::mitems_size() const {
  return _internal_mitems_size();
}
inline ::pbdb::db_brief* PROBUFF_NET_RANKLIST_RESPONSE::mutable_mitems(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.mitems)
  return mitems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >*
PROBUFF_NET_RANKLIST_RESPONSE::mutable_mitems() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.mitems)
  return &mitems_;
}
inline const ::pbdb::db_brief& PROBUFF_NET_RANKLIST_RESPONSE::_internal_mitems(int index) const {
  return mitems_.Get(index);
}
inline const ::pbdb::db_brief& PROBUFF_NET_RANKLIST_RESPONSE::mitems(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.mitems)
  return _internal_mitems(index);
}
inline ::pbdb::db_brief* PROBUFF_NET_RANKLIST_RESPONSE::_internal_add_mitems() {
  return mitems_.Add();
}
inline ::pbdb::db_brief* PROBUFF_NET_RANKLIST_RESPONSE::add_mitems() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.mitems)
  return _internal_add_mitems();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >&
PROBUFF_NET_RANKLIST_RESPONSE::mitems() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.mitems)
  return mitems_;
}

// int32 mpage = 3;
inline bool PROBUFF_NET_RANKLIST_RESPONSE::_internal_has_mpage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_RANKLIST_RESPONSE::has_mpage() const {
  return _internal_has_mpage();
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::clear_mpage() {
  mpage_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RANKLIST_RESPONSE::_internal_mpage() const {
  return mpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RANKLIST_RESPONSE::mpage() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.mpage)
  return _internal_mpage();
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::_internal_set_mpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mpage_ = value;
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::set_mpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mpage(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.mpage)
}

// int32 mcount = 4;
inline bool PROBUFF_NET_RANKLIST_RESPONSE::_internal_has_mcount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_RANKLIST_RESPONSE::has_mcount() const {
  return _internal_has_mcount();
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::clear_mcount() {
  mcount_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RANKLIST_RESPONSE::_internal_mcount() const {
  return mcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RANKLIST_RESPONSE::mcount() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.mcount)
  return _internal_mcount();
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::_internal_set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mcount_ = value;
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mcount(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.mcount)
}

// int32 mrolerank = 5;
inline bool PROBUFF_NET_RANKLIST_RESPONSE::_internal_has_mrolerank() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PROBUFF_NET_RANKLIST_RESPONSE::has_mrolerank() const {
  return _internal_has_mrolerank();
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::clear_mrolerank() {
  mrolerank_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RANKLIST_RESPONSE::_internal_mrolerank() const {
  return mrolerank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RANKLIST_RESPONSE::mrolerank() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.mrolerank)
  return _internal_mrolerank();
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::_internal_set_mrolerank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mrolerank_ = value;
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::set_mrolerank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mrolerank(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.mrolerank)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FRIEND

// -------------------------------------------------------------------

// PROBUFF_NET_FRIEND_RESPONSE

// repeated .pbdb.db_brief mfriends = 1;
inline int PROBUFF_NET_FRIEND_RESPONSE::_internal_mfriends_size() const {
  return mfriends_.size();
}
inline int PROBUFF_NET_FRIEND_RESPONSE::mfriends_size() const {
  return _internal_mfriends_size();
}
inline ::pbdb::db_brief* PROBUFF_NET_FRIEND_RESPONSE::mutable_mfriends(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_FRIEND_RESPONSE.mfriends)
  return mfriends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >*
PROBUFF_NET_FRIEND_RESPONSE::mutable_mfriends() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_FRIEND_RESPONSE.mfriends)
  return &mfriends_;
}
inline const ::pbdb::db_brief& PROBUFF_NET_FRIEND_RESPONSE::_internal_mfriends(int index) const {
  return mfriends_.Get(index);
}
inline const ::pbdb::db_brief& PROBUFF_NET_FRIEND_RESPONSE::mfriends(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_RESPONSE.mfriends)
  return _internal_mfriends(index);
}
inline ::pbdb::db_brief* PROBUFF_NET_FRIEND_RESPONSE::_internal_add_mfriends() {
  return mfriends_.Add();
}
inline ::pbdb::db_brief* PROBUFF_NET_FRIEND_RESPONSE::add_mfriends() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_FRIEND_RESPONSE.mfriends)
  return _internal_add_mfriends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >&
PROBUFF_NET_FRIEND_RESPONSE::mfriends() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_FRIEND_RESPONSE.mfriends)
  return mfriends_;
}

// repeated .pbdb.db_brief mapplyfriends = 2;
inline int PROBUFF_NET_FRIEND_RESPONSE::_internal_mapplyfriends_size() const {
  return mapplyfriends_.size();
}
inline int PROBUFF_NET_FRIEND_RESPONSE::mapplyfriends_size() const {
  return _internal_mapplyfriends_size();
}
inline ::pbdb::db_brief* PROBUFF_NET_FRIEND_RESPONSE::mutable_mapplyfriends(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_FRIEND_RESPONSE.mapplyfriends)
  return mapplyfriends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >*
PROBUFF_NET_FRIEND_RESPONSE::mutable_mapplyfriends() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_FRIEND_RESPONSE.mapplyfriends)
  return &mapplyfriends_;
}
inline const ::pbdb::db_brief& PROBUFF_NET_FRIEND_RESPONSE::_internal_mapplyfriends(int index) const {
  return mapplyfriends_.Get(index);
}
inline const ::pbdb::db_brief& PROBUFF_NET_FRIEND_RESPONSE::mapplyfriends(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_RESPONSE.mapplyfriends)
  return _internal_mapplyfriends(index);
}
inline ::pbdb::db_brief* PROBUFF_NET_FRIEND_RESPONSE::_internal_add_mapplyfriends() {
  return mapplyfriends_.Add();
}
inline ::pbdb::db_brief* PROBUFF_NET_FRIEND_RESPONSE::add_mapplyfriends() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_FRIEND_RESPONSE.mapplyfriends)
  return _internal_add_mapplyfriends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >&
PROBUFF_NET_FRIEND_RESPONSE::mapplyfriends() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_FRIEND_RESPONSE.mapplyfriends)
  return mapplyfriends_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_FRIEND_ADD

// int64 mfriedid = 1;
inline bool PROBUFF_NET_FRIEND_ADD::_internal_has_mfriedid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FRIEND_ADD::has_mfriedid() const {
  return _internal_has_mfriedid();
}
inline void PROBUFF_NET_FRIEND_ADD::clear_mfriedid() {
  mfriedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FRIEND_ADD::_internal_mfriedid() const {
  return mfriedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FRIEND_ADD::mfriedid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_ADD.mfriedid)
  return _internal_mfriedid();
}
inline void PROBUFF_NET_FRIEND_ADD::_internal_set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mfriedid_ = value;
}
inline void PROBUFF_NET_FRIEND_ADD::set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mfriedid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FRIEND_ADD.mfriedid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FRIEND_ADD_RESPONSE

// int64 mfriedid = 1;
inline bool PROBUFF_NET_FRIEND_ADD_RESPONSE::_internal_has_mfriedid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FRIEND_ADD_RESPONSE::has_mfriedid() const {
  return _internal_has_mfriedid();
}
inline void PROBUFF_NET_FRIEND_ADD_RESPONSE::clear_mfriedid() {
  mfriedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FRIEND_ADD_RESPONSE::_internal_mfriedid() const {
  return mfriedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FRIEND_ADD_RESPONSE::mfriedid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE.mfriedid)
  return _internal_mfriedid();
}
inline void PROBUFF_NET_FRIEND_ADD_RESPONSE::_internal_set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mfriedid_ = value;
}
inline void PROBUFF_NET_FRIEND_ADD_RESPONSE::set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mfriedid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE.mfriedid)
}

// int32 mstat = 2;
inline bool PROBUFF_NET_FRIEND_ADD_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_FRIEND_ADD_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_FRIEND_ADD_RESPONSE::clear_mstat() {
  mstat_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FRIEND_ADD_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FRIEND_ADD_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_FRIEND_ADD_RESPONSE::_internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mstat_ = value;
}
inline void PROBUFF_NET_FRIEND_ADD_RESPONSE::set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FRIEND_RATIFY_ADD

// int64 mfriedid = 1;
inline bool PROBUFF_NET_FRIEND_RATIFY_ADD::_internal_has_mfriedid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FRIEND_RATIFY_ADD::has_mfriedid() const {
  return _internal_has_mfriedid();
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD::clear_mfriedid() {
  mfriedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FRIEND_RATIFY_ADD::_internal_mfriedid() const {
  return mfriedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FRIEND_RATIFY_ADD::mfriedid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD.mfriedid)
  return _internal_mfriedid();
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD::_internal_set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mfriedid_ = value;
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD::set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mfriedid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD.mfriedid)
}

// bool mratify = 2;
inline bool PROBUFF_NET_FRIEND_RATIFY_ADD::_internal_has_mratify() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_FRIEND_RATIFY_ADD::has_mratify() const {
  return _internal_has_mratify();
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD::clear_mratify() {
  mratify_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_FRIEND_RATIFY_ADD::_internal_mratify() const {
  return mratify_;
}
inline bool PROBUFF_NET_FRIEND_RATIFY_ADD::mratify() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD.mratify)
  return _internal_mratify();
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD::_internal_set_mratify(bool value) {
  _has_bits_[0] |= 0x00000002u;
  mratify_ = value;
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD::set_mratify(bool value) {
  _internal_set_mratify(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD.mratify)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE

// int64 mfriedid = 1;
inline bool PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_internal_has_mfriedid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::has_mfriedid() const {
  return _internal_has_mfriedid();
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::clear_mfriedid() {
  mfriedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_internal_mfriedid() const {
  return mfriedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::mfriedid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE.mfriedid)
  return _internal_mfriedid();
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_internal_set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mfriedid_ = value;
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mfriedid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE.mfriedid)
}

// bool mratify = 2;
inline bool PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_internal_has_mratify() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::has_mratify() const {
  return _internal_has_mratify();
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::clear_mratify() {
  mratify_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_internal_mratify() const {
  return mratify_;
}
inline bool PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::mratify() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE.mratify)
  return _internal_mratify();
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_internal_set_mratify(bool value) {
  _has_bits_[0] |= 0x00000002u;
  mratify_ = value;
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::set_mratify(bool value) {
  _internal_set_mratify(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE.mratify)
}

// int32 mstat = 3;
inline bool PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::clear_mstat() {
  mstat_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mstat_ = value;
}
inline void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FRIEND_ERASE

// int64 mfriedid = 1;
inline bool PROBUFF_NET_FRIEND_ERASE::_internal_has_mfriedid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FRIEND_ERASE::has_mfriedid() const {
  return _internal_has_mfriedid();
}
inline void PROBUFF_NET_FRIEND_ERASE::clear_mfriedid() {
  mfriedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FRIEND_ERASE::_internal_mfriedid() const {
  return mfriedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FRIEND_ERASE::mfriedid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_ERASE.mfriedid)
  return _internal_mfriedid();
}
inline void PROBUFF_NET_FRIEND_ERASE::_internal_set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mfriedid_ = value;
}
inline void PROBUFF_NET_FRIEND_ERASE::set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mfriedid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FRIEND_ERASE.mfriedid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FRIEND_ERASE_RESPONSE

// int64 mfriedid = 1;
inline bool PROBUFF_NET_FRIEND_ERASE_RESPONSE::_internal_has_mfriedid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FRIEND_ERASE_RESPONSE::has_mfriedid() const {
  return _internal_has_mfriedid();
}
inline void PROBUFF_NET_FRIEND_ERASE_RESPONSE::clear_mfriedid() {
  mfriedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FRIEND_ERASE_RESPONSE::_internal_mfriedid() const {
  return mfriedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FRIEND_ERASE_RESPONSE::mfriedid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE.mfriedid)
  return _internal_mfriedid();
}
inline void PROBUFF_NET_FRIEND_ERASE_RESPONSE::_internal_set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mfriedid_ = value;
}
inline void PROBUFF_NET_FRIEND_ERASE_RESPONSE::set_mfriedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mfriedid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE.mfriedid)
}

// int32 mstat = 2;
inline bool PROBUFF_NET_FRIEND_ERASE_RESPONSE::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_FRIEND_ERASE_RESPONSE::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_FRIEND_ERASE_RESPONSE::clear_mstat() {
  mstat_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FRIEND_ERASE_RESPONSE::_internal_mstat() const {
  return mstat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FRIEND_ERASE_RESPONSE::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_FRIEND_ERASE_RESPONSE::_internal_set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mstat_ = value;
}
inline void PROBUFF_NET_FRIEND_ERASE_RESPONSE::set_mstat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_ROLESTAT

// .pbnet.PROBUFF_NET_ROLESTAT.stat mstat = 1;
inline bool PROBUFF_NET_ROLESTAT::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ROLESTAT::has_mstat() const {
  return _internal_has_mstat();
}
inline void PROBUFF_NET_ROLESTAT::clear_mstat() {
  mstat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::_internal_mstat() const {
  return static_cast< ::pbnet::PROBUFF_NET_ROLESTAT_stat >(mstat_);
}
inline ::pbnet::PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLESTAT.mstat)
  return _internal_mstat();
}
inline void PROBUFF_NET_ROLESTAT::_internal_set_mstat(::pbnet::PROBUFF_NET_ROLESTAT_stat value) {
  _has_bits_[0] |= 0x00000001u;
  mstat_ = value;
}
inline void PROBUFF_NET_ROLESTAT::set_mstat(::pbnet::PROBUFF_NET_ROLESTAT_stat value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLESTAT.mstat)
}

// .pbnet.PROBUFF_NET_ROLESTAT.logic_stat mlogicstat = 2;
inline bool PROBUFF_NET_ROLESTAT::_internal_has_mlogicstat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_ROLESTAT::has_mlogicstat() const {
  return _internal_has_mlogicstat();
}
inline void PROBUFF_NET_ROLESTAT::clear_mlogicstat() {
  mlogicstat_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pbnet::PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::_internal_mlogicstat() const {
  return static_cast< ::pbnet::PROBUFF_NET_ROLESTAT_logic_stat >(mlogicstat_);
}
inline ::pbnet::PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::mlogicstat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLESTAT.mlogicstat)
  return _internal_mlogicstat();
}
inline void PROBUFF_NET_ROLESTAT::_internal_set_mlogicstat(::pbnet::PROBUFF_NET_ROLESTAT_logic_stat value) {
  _has_bits_[0] |= 0x00000002u;
  mlogicstat_ = value;
}
inline void PROBUFF_NET_ROLESTAT::set_mlogicstat(::pbnet::PROBUFF_NET_ROLESTAT_logic_stat value) {
  _internal_set_mlogicstat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLESTAT.mlogicstat)
}

// int64 mroleid = 3;
inline bool PROBUFF_NET_ROLESTAT::_internal_has_mroleid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_ROLESTAT::has_mroleid() const {
  return _internal_has_mroleid();
}
inline void PROBUFF_NET_ROLESTAT::clear_mroleid() {
  mroleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ROLESTAT::_internal_mroleid() const {
  return mroleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ROLESTAT::mroleid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLESTAT.mroleid)
  return _internal_mroleid();
}
inline void PROBUFF_NET_ROLESTAT::_internal_set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  mroleid_ = value;
}
inline void PROBUFF_NET_ROLESTAT::set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mroleid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLESTAT.mroleid)
}

// -------------------------------------------------------------------

// VECTOR2

// int32 mx = 1;
inline bool VECTOR2::_internal_has_mx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VECTOR2::has_mx() const {
  return _internal_has_mx();
}
inline void VECTOR2::clear_mx() {
  mx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR2::_internal_mx() const {
  return mx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR2::mx() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR2.mx)
  return _internal_mx();
}
inline void VECTOR2::_internal_set_mx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mx_ = value;
}
inline void VECTOR2::set_mx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mx(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR2.mx)
}

// int32 my = 2;
inline bool VECTOR2::_internal_has_my() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VECTOR2::has_my() const {
  return _internal_has_my();
}
inline void VECTOR2::clear_my() {
  my_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR2::_internal_my() const {
  return my_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR2::my() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR2.my)
  return _internal_my();
}
inline void VECTOR2::_internal_set_my(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  my_ = value;
}
inline void VECTOR2::set_my(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_my(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR2.my)
}

// -------------------------------------------------------------------

// VECTOR3

// int32 mx = 1;
inline bool VECTOR3::_internal_has_mx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VECTOR3::has_mx() const {
  return _internal_has_mx();
}
inline void VECTOR3::clear_mx() {
  mx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR3::_internal_mx() const {
  return mx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR3::mx() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR3.mx)
  return _internal_mx();
}
inline void VECTOR3::_internal_set_mx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mx_ = value;
}
inline void VECTOR3::set_mx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mx(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR3.mx)
}

// int32 my = 2;
inline bool VECTOR3::_internal_has_my() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VECTOR3::has_my() const {
  return _internal_has_my();
}
inline void VECTOR3::clear_my() {
  my_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR3::_internal_my() const {
  return my_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR3::my() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR3.my)
  return _internal_my();
}
inline void VECTOR3::_internal_set_my(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  my_ = value;
}
inline void VECTOR3::set_my(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_my(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR3.my)
}

// int32 mz = 3;
inline bool VECTOR3::_internal_has_mz() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VECTOR3::has_mz() const {
  return _internal_has_mz();
}
inline void VECTOR3::clear_mz() {
  mz_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR3::_internal_mz() const {
  return mz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR3::mz() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR3.mz)
  return _internal_mz();
}
inline void VECTOR3::_internal_set_mz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mz_ = value;
}
inline void VECTOR3::set_mz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mz(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR3.mz)
}

// -------------------------------------------------------------------

// UNIT_POSITION

// int64 mid = 2;
inline bool UNIT_POSITION::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UNIT_POSITION::has_mid() const {
  return _internal_has_mid();
}
inline void UNIT_POSITION::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UNIT_POSITION::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UNIT_POSITION::mid() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT_POSITION.mid)
  return _internal_mid();
}
inline void UNIT_POSITION::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  mid_ = value;
}
inline void UNIT_POSITION::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT_POSITION.mid)
}

// .pbnet.VECTOR2 mposition = 3;
inline bool UNIT_POSITION::_internal_has_mposition() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mposition_ != nullptr);
  return value;
}
inline bool UNIT_POSITION::has_mposition() const {
  return _internal_has_mposition();
}
inline void UNIT_POSITION::clear_mposition() {
  if (GetArena() == nullptr && mposition_ != nullptr) {
    delete mposition_;
  }
  mposition_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pbnet::VECTOR2& UNIT_POSITION::_internal_mposition() const {
  const ::pbnet::VECTOR2* p = mposition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbnet::VECTOR2*>(
      &::pbnet::_VECTOR2_default_instance_);
}
inline const ::pbnet::VECTOR2& UNIT_POSITION::mposition() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT_POSITION.mposition)
  return _internal_mposition();
}
inline void UNIT_POSITION::unsafe_arena_set_allocated_mposition(
    ::pbnet::VECTOR2* mposition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mposition_);
  }
  mposition_ = mposition;
  if (mposition) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.UNIT_POSITION.mposition)
}
inline ::pbnet::VECTOR2* UNIT_POSITION::release_mposition() {
  auto temp = unsafe_arena_release_mposition();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbnet::VECTOR2* UNIT_POSITION::unsafe_arena_release_mposition() {
  // @@protoc_insertion_point(field_release:pbnet.UNIT_POSITION.mposition)
  _has_bits_[0] &= ~0x00000001u;
  ::pbnet::VECTOR2* temp = mposition_;
  mposition_ = nullptr;
  return temp;
}
inline ::pbnet::VECTOR2* UNIT_POSITION::_internal_mutable_mposition() {
  _has_bits_[0] |= 0x00000001u;
  if (mposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbnet::VECTOR2>(GetArena());
    mposition_ = p;
  }
  return mposition_;
}
inline ::pbnet::VECTOR2* UNIT_POSITION::mutable_mposition() {
  // @@protoc_insertion_point(field_mutable:pbnet.UNIT_POSITION.mposition)
  return _internal_mutable_mposition();
}
inline void UNIT_POSITION::set_allocated_mposition(::pbnet::VECTOR2* mposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mposition_;
  }
  if (mposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mposition);
    if (message_arena != submessage_arena) {
      mposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mposition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mposition_ = mposition;
  // @@protoc_insertion_point(field_set_allocated:pbnet.UNIT_POSITION.mposition)
}

// int32 mangle = 4;
inline bool UNIT_POSITION::_internal_has_mangle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UNIT_POSITION::has_mangle() const {
  return _internal_has_mangle();
}
inline void UNIT_POSITION::clear_mangle() {
  mangle_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UNIT_POSITION::_internal_mangle() const {
  return mangle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UNIT_POSITION::mangle() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT_POSITION.mangle)
  return _internal_mangle();
}
inline void UNIT_POSITION::_internal_set_mangle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mangle_ = value;
}
inline void UNIT_POSITION::set_mangle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mangle(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT_POSITION.mangle)
}

// int32 mspeed = 5;
inline bool UNIT_POSITION::_internal_has_mspeed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UNIT_POSITION::has_mspeed() const {
  return _internal_has_mspeed();
}
inline void UNIT_POSITION::clear_mspeed() {
  mspeed_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UNIT_POSITION::_internal_mspeed() const {
  return mspeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UNIT_POSITION::mspeed() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT_POSITION.mspeed)
  return _internal_mspeed();
}
inline void UNIT_POSITION::_internal_set_mspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mspeed_ = value;
}
inline void UNIT_POSITION::set_mspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mspeed(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT_POSITION.mspeed)
}

// -------------------------------------------------------------------

// UnitAttribute

// int32 mtype = 1;
inline bool UnitAttribute::_internal_has_mtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnitAttribute::has_mtype() const {
  return _internal_has_mtype();
}
inline void UnitAttribute::clear_mtype() {
  mtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitAttribute::_internal_mtype() const {
  return mtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitAttribute::mtype() const {
  // @@protoc_insertion_point(field_get:pbnet.UnitAttribute.mtype)
  return _internal_mtype();
}
inline void UnitAttribute::_internal_set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mtype_ = value;
}
inline void UnitAttribute::set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtype(value);
  // @@protoc_insertion_point(field_set:pbnet.UnitAttribute.mtype)
}

// int64 mvalue = 2;
inline bool UnitAttribute::_internal_has_mvalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnitAttribute::has_mvalue() const {
  return _internal_has_mvalue();
}
inline void UnitAttribute::clear_mvalue() {
  mvalue_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnitAttribute::_internal_mvalue() const {
  return mvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnitAttribute::mvalue() const {
  // @@protoc_insertion_point(field_get:pbnet.UnitAttribute.mvalue)
  return _internal_mvalue();
}
inline void UnitAttribute::_internal_set_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mvalue_ = value;
}
inline void UnitAttribute::set_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mvalue(value);
  // @@protoc_insertion_point(field_set:pbnet.UnitAttribute.mvalue)
}

// -------------------------------------------------------------------

// UnitModule

// int32 mmtype = 1;
inline bool UnitModule::_internal_has_mmtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnitModule::has_mmtype() const {
  return _internal_has_mmtype();
}
inline void UnitModule::clear_mmtype() {
  mmtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitModule::_internal_mmtype() const {
  return mmtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitModule::mmtype() const {
  // @@protoc_insertion_point(field_get:pbnet.UnitModule.mmtype)
  return _internal_mmtype();
}
inline void UnitModule::_internal_set_mmtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mmtype_ = value;
}
inline void UnitModule::set_mmtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mmtype(value);
  // @@protoc_insertion_point(field_set:pbnet.UnitModule.mmtype)
}

// repeated .pbnet.UnitAttribute mmodules = 2;
inline int UnitModule::_internal_mmodules_size() const {
  return mmodules_.size();
}
inline int UnitModule::mmodules_size() const {
  return _internal_mmodules_size();
}
inline void UnitModule::clear_mmodules() {
  mmodules_.Clear();
}
inline ::pbnet::UnitAttribute* UnitModule::mutable_mmodules(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.UnitModule.mmodules)
  return mmodules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitAttribute >*
UnitModule::mutable_mmodules() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.UnitModule.mmodules)
  return &mmodules_;
}
inline const ::pbnet::UnitAttribute& UnitModule::_internal_mmodules(int index) const {
  return mmodules_.Get(index);
}
inline const ::pbnet::UnitAttribute& UnitModule::mmodules(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.UnitModule.mmodules)
  return _internal_mmodules(index);
}
inline ::pbnet::UnitAttribute* UnitModule::_internal_add_mmodules() {
  return mmodules_.Add();
}
inline ::pbnet::UnitAttribute* UnitModule::add_mmodules() {
  // @@protoc_insertion_point(field_add:pbnet.UnitModule.mmodules)
  return _internal_add_mmodules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitAttribute >&
UnitModule::mmodules() const {
  // @@protoc_insertion_point(field_list:pbnet.UnitModule.mmodules)
  return mmodules_;
}

// -------------------------------------------------------------------

// UNIT

// .pbnet.eunit mtype = 1;
inline bool UNIT::_internal_has_mtype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UNIT::has_mtype() const {
  return _internal_has_mtype();
}
inline void UNIT::clear_mtype() {
  mtype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pbnet::eunit UNIT::_internal_mtype() const {
  return static_cast< ::pbnet::eunit >(mtype_);
}
inline ::pbnet::eunit UNIT::mtype() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT.mtype)
  return _internal_mtype();
}
inline void UNIT::_internal_set_mtype(::pbnet::eunit value) {
  _has_bits_[0] |= 0x00000004u;
  mtype_ = value;
}
inline void UNIT::set_mtype(::pbnet::eunit value) {
  _internal_set_mtype(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT.mtype)
}

// int64 mid = 2;
inline bool UNIT::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UNIT::has_mid() const {
  return _internal_has_mid();
}
inline void UNIT::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UNIT::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UNIT::mid() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT.mid)
  return _internal_mid();
}
inline void UNIT::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  mid_ = value;
}
inline void UNIT::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT.mid)
}

// .pbnet.UNIT_POSITION mposition = 3;
inline bool UNIT::_internal_has_mposition() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mposition_ != nullptr);
  return value;
}
inline bool UNIT::has_mposition() const {
  return _internal_has_mposition();
}
inline void UNIT::clear_mposition() {
  if (GetArena() == nullptr && mposition_ != nullptr) {
    delete mposition_;
  }
  mposition_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pbnet::UNIT_POSITION& UNIT::_internal_mposition() const {
  const ::pbnet::UNIT_POSITION* p = mposition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbnet::UNIT_POSITION*>(
      &::pbnet::_UNIT_POSITION_default_instance_);
}
inline const ::pbnet::UNIT_POSITION& UNIT::mposition() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT.mposition)
  return _internal_mposition();
}
inline void UNIT::unsafe_arena_set_allocated_mposition(
    ::pbnet::UNIT_POSITION* mposition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mposition_);
  }
  mposition_ = mposition;
  if (mposition) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.UNIT.mposition)
}
inline ::pbnet::UNIT_POSITION* UNIT::release_mposition() {
  auto temp = unsafe_arena_release_mposition();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbnet::UNIT_POSITION* UNIT::unsafe_arena_release_mposition() {
  // @@protoc_insertion_point(field_release:pbnet.UNIT.mposition)
  _has_bits_[0] &= ~0x00000001u;
  ::pbnet::UNIT_POSITION* temp = mposition_;
  mposition_ = nullptr;
  return temp;
}
inline ::pbnet::UNIT_POSITION* UNIT::_internal_mutable_mposition() {
  _has_bits_[0] |= 0x00000001u;
  if (mposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbnet::UNIT_POSITION>(GetArena());
    mposition_ = p;
  }
  return mposition_;
}
inline ::pbnet::UNIT_POSITION* UNIT::mutable_mposition() {
  // @@protoc_insertion_point(field_mutable:pbnet.UNIT.mposition)
  return _internal_mutable_mposition();
}
inline void UNIT::set_allocated_mposition(::pbnet::UNIT_POSITION* mposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mposition_;
  }
  if (mposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mposition);
    if (message_arena != submessage_arena) {
      mposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mposition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mposition_ = mposition;
  // @@protoc_insertion_point(field_set_allocated:pbnet.UNIT.mposition)
}

// repeated .pbnet.UnitModule mmodules = 4;
inline int UNIT::_internal_mmodules_size() const {
  return mmodules_.size();
}
inline int UNIT::mmodules_size() const {
  return _internal_mmodules_size();
}
inline void UNIT::clear_mmodules() {
  mmodules_.Clear();
}
inline ::pbnet::UnitModule* UNIT::mutable_mmodules(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.UNIT.mmodules)
  return mmodules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >*
UNIT::mutable_mmodules() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.UNIT.mmodules)
  return &mmodules_;
}
inline const ::pbnet::UnitModule& UNIT::_internal_mmodules(int index) const {
  return mmodules_.Get(index);
}
inline const ::pbnet::UnitModule& UNIT::mmodules(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT.mmodules)
  return _internal_mmodules(index);
}
inline ::pbnet::UnitModule* UNIT::_internal_add_mmodules() {
  return mmodules_.Add();
}
inline ::pbnet::UnitModule* UNIT::add_mmodules() {
  // @@protoc_insertion_point(field_add:pbnet.UNIT.mmodules)
  return _internal_add_mmodules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >&
UNIT::mmodules() const {
  // @@protoc_insertion_point(field_list:pbnet.UNIT.mmodules)
  return mmodules_;
}

// .pbnet.eunitstat mstat = 5;
inline bool UNIT::_internal_has_mstat() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UNIT::has_mstat() const {
  return _internal_has_mstat();
}
inline void UNIT::clear_mstat() {
  mstat_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pbnet::eunitstat UNIT::_internal_mstat() const {
  return static_cast< ::pbnet::eunitstat >(mstat_);
}
inline ::pbnet::eunitstat UNIT::mstat() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT.mstat)
  return _internal_mstat();
}
inline void UNIT::_internal_set_mstat(::pbnet::eunitstat value) {
  _has_bits_[0] |= 0x00000008u;
  mstat_ = value;
}
inline void UNIT::set_mstat(::pbnet::eunitstat value) {
  _internal_set_mstat(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT.mstat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_SYNC_ATTRIBUTE

// repeated .pbnet.UnitModule mmodules = 1;
inline int PROBUFF_NET_SYNC_ATTRIBUTE::_internal_mmodules_size() const {
  return mmodules_.size();
}
inline int PROBUFF_NET_SYNC_ATTRIBUTE::mmodules_size() const {
  return _internal_mmodules_size();
}
inline void PROBUFF_NET_SYNC_ATTRIBUTE::clear_mmodules() {
  mmodules_.Clear();
}
inline ::pbnet::UnitModule* PROBUFF_NET_SYNC_ATTRIBUTE::mutable_mmodules(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE.mmodules)
  return mmodules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >*
PROBUFF_NET_SYNC_ATTRIBUTE::mutable_mmodules() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE.mmodules)
  return &mmodules_;
}
inline const ::pbnet::UnitModule& PROBUFF_NET_SYNC_ATTRIBUTE::_internal_mmodules(int index) const {
  return mmodules_.Get(index);
}
inline const ::pbnet::UnitModule& PROBUFF_NET_SYNC_ATTRIBUTE::mmodules(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE.mmodules)
  return _internal_mmodules(index);
}
inline ::pbnet::UnitModule* PROBUFF_NET_SYNC_ATTRIBUTE::_internal_add_mmodules() {
  return mmodules_.Add();
}
inline ::pbnet::UnitModule* PROBUFF_NET_SYNC_ATTRIBUTE::add_mmodules() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE.mmodules)
  return _internal_add_mmodules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >&
PROBUFF_NET_SYNC_ATTRIBUTE::mmodules() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE.mmodules)
  return mmodules_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_SYNC_UNIT

// repeated .pbnet.UNIT munits = 1;
inline int PROBUFF_NET_SYNC_UNIT::_internal_munits_size() const {
  return munits_.size();
}
inline int PROBUFF_NET_SYNC_UNIT::munits_size() const {
  return _internal_munits_size();
}
inline void PROBUFF_NET_SYNC_UNIT::clear_munits() {
  munits_.Clear();
}
inline ::pbnet::UNIT* PROBUFF_NET_SYNC_UNIT::mutable_munits(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_SYNC_UNIT.munits)
  return munits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT >*
PROBUFF_NET_SYNC_UNIT::mutable_munits() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_SYNC_UNIT.munits)
  return &munits_;
}
inline const ::pbnet::UNIT& PROBUFF_NET_SYNC_UNIT::_internal_munits(int index) const {
  return munits_.Get(index);
}
inline const ::pbnet::UNIT& PROBUFF_NET_SYNC_UNIT::munits(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SYNC_UNIT.munits)
  return _internal_munits(index);
}
inline ::pbnet::UNIT* PROBUFF_NET_SYNC_UNIT::_internal_add_munits() {
  return munits_.Add();
}
inline ::pbnet::UNIT* PROBUFF_NET_SYNC_UNIT::add_munits() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_SYNC_UNIT.munits)
  return _internal_add_munits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT >&
PROBUFF_NET_SYNC_UNIT::munits() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_SYNC_UNIT.munits)
  return munits_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_ENTER_LEAVE_VIEW

// bool misenter = 1;
inline bool PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_has_misenter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ENTER_LEAVE_VIEW::has_misenter() const {
  return _internal_has_misenter();
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::clear_misenter() {
  misenter_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_misenter() const {
  return misenter_;
}
inline bool PROBUFF_NET_ENTER_LEAVE_VIEW::misenter() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.misenter)
  return _internal_misenter();
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_set_misenter(bool value) {
  _has_bits_[0] |= 0x00000001u;
  misenter_ = value;
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::set_misenter(bool value) {
  _internal_set_misenter(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.misenter)
}

// repeated int64 munits = 2;
inline int PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_munits_size() const {
  return munits_.size();
}
inline int PROBUFF_NET_ENTER_LEAVE_VIEW::munits_size() const {
  return _internal_munits_size();
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::clear_munits() {
  munits_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_munits(int index) const {
  return munits_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ENTER_LEAVE_VIEW::munits(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.munits)
  return _internal_munits(index);
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::set_munits(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  munits_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.munits)
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_add_munits(::PROTOBUF_NAMESPACE_ID::int64 value) {
  munits_.Add(value);
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::add_munits(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_munits(value);
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.munits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_munits() const {
  return munits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PROBUFF_NET_ENTER_LEAVE_VIEW::munits() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.munits)
  return _internal_munits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_mutable_munits() {
  return &munits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PROBUFF_NET_ENTER_LEAVE_VIEW::mutable_munits() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.munits)
  return _internal_mutable_munits();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PROBUFF_NET_SYNC_POSITION

// map<int64, .pbnet.UNIT_POSITION> mposition = 1;
inline int PROBUFF_NET_SYNC_POSITION::_internal_mposition_size() const {
  return mposition_.size();
}
inline int PROBUFF_NET_SYNC_POSITION::mposition_size() const {
  return _internal_mposition_size();
}
inline void PROBUFF_NET_SYNC_POSITION::clear_mposition() {
  mposition_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >&
PROBUFF_NET_SYNC_POSITION::_internal_mposition() const {
  return mposition_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >&
PROBUFF_NET_SYNC_POSITION::mposition() const {
  // @@protoc_insertion_point(field_map:pbnet.PROBUFF_NET_SYNC_POSITION.mposition)
  return _internal_mposition();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >*
PROBUFF_NET_SYNC_POSITION::_internal_mutable_mposition() {
  return mposition_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >*
PROBUFF_NET_SYNC_POSITION::mutable_mposition() {
  // @@protoc_insertion_point(field_mutable_map:pbnet.PROBUFF_NET_SYNC_POSITION.mposition)
  return _internal_mutable_mposition();
}

// -------------------------------------------------------------------

// PROBUFF_NET_CHANGE_ANGLE

// .pbnet.UNIT_POSITION mposition = 1;
inline bool PROBUFF_NET_CHANGE_ANGLE::_internal_has_mposition() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mposition_ != nullptr);
  return value;
}
inline bool PROBUFF_NET_CHANGE_ANGLE::has_mposition() const {
  return _internal_has_mposition();
}
inline void PROBUFF_NET_CHANGE_ANGLE::clear_mposition() {
  if (GetArena() == nullptr && mposition_ != nullptr) {
    delete mposition_;
  }
  mposition_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pbnet::UNIT_POSITION& PROBUFF_NET_CHANGE_ANGLE::_internal_mposition() const {
  const ::pbnet::UNIT_POSITION* p = mposition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbnet::UNIT_POSITION*>(
      &::pbnet::_UNIT_POSITION_default_instance_);
}
inline const ::pbnet::UNIT_POSITION& PROBUFF_NET_CHANGE_ANGLE::mposition() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHANGE_ANGLE.mposition)
  return _internal_mposition();
}
inline void PROBUFF_NET_CHANGE_ANGLE::unsafe_arena_set_allocated_mposition(
    ::pbnet::UNIT_POSITION* mposition) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mposition_);
  }
  mposition_ = mposition;
  if (mposition) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_CHANGE_ANGLE.mposition)
}
inline ::pbnet::UNIT_POSITION* PROBUFF_NET_CHANGE_ANGLE::release_mposition() {
  auto temp = unsafe_arena_release_mposition();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbnet::UNIT_POSITION* PROBUFF_NET_CHANGE_ANGLE::unsafe_arena_release_mposition() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_CHANGE_ANGLE.mposition)
  _has_bits_[0] &= ~0x00000001u;
  ::pbnet::UNIT_POSITION* temp = mposition_;
  mposition_ = nullptr;
  return temp;
}
inline ::pbnet::UNIT_POSITION* PROBUFF_NET_CHANGE_ANGLE::_internal_mutable_mposition() {
  _has_bits_[0] |= 0x00000001u;
  if (mposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbnet::UNIT_POSITION>(GetArena());
    mposition_ = p;
  }
  return mposition_;
}
inline ::pbnet::UNIT_POSITION* PROBUFF_NET_CHANGE_ANGLE::mutable_mposition() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_CHANGE_ANGLE.mposition)
  return _internal_mutable_mposition();
}
inline void PROBUFF_NET_CHANGE_ANGLE::set_allocated_mposition(::pbnet::UNIT_POSITION* mposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mposition_;
  }
  if (mposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mposition);
    if (message_arena != submessage_arena) {
      mposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mposition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mposition_ = mposition;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_CHANGE_ANGLE.mposition)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PROBUFF_NET_TESTLUA

// int64 mid = 1;
inline bool PROBUFF_NET_TESTLUA::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_TESTLUA::has_mid() const {
  return _internal_has_mid();
}
inline void PROBUFF_NET_TESTLUA::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_TESTLUA::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_TESTLUA::mid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_TESTLUA.mid)
  return _internal_mid();
}
inline void PROBUFF_NET_TESTLUA::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  mid_ = value;
}
inline void PROBUFF_NET_TESTLUA::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_TESTLUA.mid)
}

// string mvalue = 2;
inline bool PROBUFF_NET_TESTLUA::_internal_has_mvalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_TESTLUA::has_mvalue() const {
  return _internal_has_mvalue();
}
inline void PROBUFF_NET_TESTLUA::clear_mvalue() {
  mvalue_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_TESTLUA::mvalue() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_TESTLUA.mvalue)
  return _internal_mvalue();
}
inline void PROBUFF_NET_TESTLUA::set_mvalue(const std::string& value) {
  _internal_set_mvalue(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_TESTLUA.mvalue)
}
inline std::string* PROBUFF_NET_TESTLUA::mutable_mvalue() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_TESTLUA.mvalue)
  return _internal_mutable_mvalue();
}
inline const std::string& PROBUFF_NET_TESTLUA::_internal_mvalue() const {
  return mvalue_.Get();
}
inline void PROBUFF_NET_TESTLUA::_internal_set_mvalue(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_TESTLUA::set_mvalue(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mvalue_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_TESTLUA.mvalue)
}
inline void PROBUFF_NET_TESTLUA::set_mvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_TESTLUA.mvalue)
}
inline void PROBUFF_NET_TESTLUA::set_mvalue(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_TESTLUA.mvalue)
}
inline std::string* PROBUFF_NET_TESTLUA::_internal_mutable_mvalue() {
  _has_bits_[0] |= 0x00000001u;
  return mvalue_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_TESTLUA::release_mvalue() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_TESTLUA.mvalue)
  if (!_internal_has_mvalue()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mvalue_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_TESTLUA::set_allocated_mvalue(std::string* mvalue) {
  if (mvalue != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_TESTLUA.mvalue)
}
inline std::string* PROBUFF_NET_TESTLUA::unsafe_arena_release_mvalue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbnet.PROBUFF_NET_TESTLUA.mvalue)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mvalue_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PROBUFF_NET_TESTLUA::unsafe_arena_set_allocated_mvalue(
    std::string* mvalue) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mvalue != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mvalue_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mvalue, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_TESTLUA.mvalue)
}

// map<int64, string> mdata = 3;
inline int PROBUFF_NET_TESTLUA::_internal_mdata_size() const {
  return mdata_.size();
}
inline int PROBUFF_NET_TESTLUA::mdata_size() const {
  return _internal_mdata_size();
}
inline void PROBUFF_NET_TESTLUA::clear_mdata() {
  mdata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >&
PROBUFF_NET_TESTLUA::_internal_mdata() const {
  return mdata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >&
PROBUFF_NET_TESTLUA::mdata() const {
  // @@protoc_insertion_point(field_map:pbnet.PROBUFF_NET_TESTLUA.mdata)
  return _internal_mdata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >*
PROBUFF_NET_TESTLUA::_internal_mutable_mdata() {
  return mdata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >*
PROBUFF_NET_TESTLUA::mutable_mdata() {
  // @@protoc_insertion_point(field_mutable_map:pbnet.PROBUFF_NET_TESTLUA.mdata)
  return _internal_mutable_mdata();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbnet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat>() {
  return ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat_descriptor();
}
template <> struct is_proto_enum< ::pbnet::PROBUFF_NET_ROLESTAT_stat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::PROBUFF_NET_ROLESTAT_stat>() {
  return ::pbnet::PROBUFF_NET_ROLESTAT_stat_descriptor();
}
template <> struct is_proto_enum< ::pbnet::PROBUFF_NET_ROLESTAT_logic_stat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::PROBUFF_NET_ROLESTAT_logic_stat>() {
  return ::pbnet::PROBUFF_NET_ROLESTAT_logic_stat_descriptor();
}
template <> struct is_proto_enum< ::pbnet::ENUM_LOGIC_CHAT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::ENUM_LOGIC_CHAT>() {
  return ::pbnet::ENUM_LOGIC_CHAT_descriptor();
}
template <> struct is_proto_enum< ::pbnet::ENUM_CHAT_CHANNEL> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::ENUM_CHAT_CHANNEL>() {
  return ::pbnet::ENUM_CHAT_CHANNEL_descriptor();
}
template <> struct is_proto_enum< ::pbnet::eunit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::eunit>() {
  return ::pbnet::eunit_descriptor();
}
template <> struct is_proto_enum< ::pbnet::eunitstat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::eunitstat>() {
  return ::pbnet::eunitstat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_net_2eproto
