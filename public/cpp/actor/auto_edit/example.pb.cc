// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#include "example.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pbexample {
PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_JOIN::PROBUFF_EXAMPLE_PLAY_JOIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mcross_)*/0
  , /*decltype(_impl_.mtype_)*/0} {}
struct PROBUFF_EXAMPLE_PLAY_JOINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_JOINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_EXAMPLE_PLAY_JOINDefaultTypeInternal() {}
  union {
    PROBUFF_EXAMPLE_PLAY_JOIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_EXAMPLE_PLAY_JOINDefaultTypeInternal _PROBUFF_EXAMPLE_PLAY_JOIN_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mroomid_)*/0} {}
struct PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSEDefaultTypeInternal _PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PLAYER::PLAYER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mplayers_)*/nullptr
  , /*decltype(_impl_.misconfirm_)*/false} {}
struct PLAYERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PLAYERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PLAYERDefaultTypeInternal() {}
  union {
    PLAYER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PLAYERDefaultTypeInternal _PLAYER_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_MATCHING::PROBUFF_EXAMPLE_PLAY_MATCHING(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mplayers_)*/{}
  , /*decltype(_impl_.mroomid_)*/0
  , /*decltype(_impl_.mtotalnumber_)*/0
  , /*decltype(_impl_.mroomcreate_)*/int64_t{0}
  , /*decltype(_impl_.mroomready_)*/int64_t{0}} {}
struct PROBUFF_EXAMPLE_PLAY_MATCHINGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_MATCHINGDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_EXAMPLE_PLAY_MATCHINGDefaultTypeInternal() {}
  union {
    PROBUFF_EXAMPLE_PLAY_MATCHING _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_EXAMPLE_PLAY_MATCHINGDefaultTypeInternal _PROBUFF_EXAMPLE_PLAY_MATCHING_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.merrorcode_)*/0
  , /*decltype(_impl_.mroomid_)*/0} {}
struct PROBUFF_EXAMPLE_PLAY_MATCHING_RESULTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_MATCHING_RESULTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_EXAMPLE_PLAY_MATCHING_RESULTDefaultTypeInternal() {}
  union {
    PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_EXAMPLE_PLAY_MATCHING_RESULTDefaultTypeInternal _PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.misconfirm_)*/false
  , /*decltype(_impl_.mroomid_)*/0} {}
struct PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRMDefaultTypeInternal() {}
  union {
    PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRMDefaultTypeInternal _PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_CANCEL::PROBUFF_EXAMPLE_PLAY_CANCEL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mtype_)*/0
  , /*decltype(_impl_.mroomid_)*/0} {}
struct PROBUFF_EXAMPLE_PLAY_CANCELDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_CANCELDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_EXAMPLE_PLAY_CANCELDefaultTypeInternal() {}
  union {
    PROBUFF_EXAMPLE_PLAY_CANCEL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_EXAMPLE_PLAY_CANCELDefaultTypeInternal _PROBUFF_EXAMPLE_PLAY_CANCEL_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_CREATE::PROBUFF_EXAMPLE_PLAY_CREATE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mexampleactorid_)*/int64_t{0}
  , /*decltype(_impl_.mtype_)*/0
  , /*decltype(_impl_.mstat_)*/0} {}
struct PROBUFF_EXAMPLE_PLAY_CREATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_CREATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_EXAMPLE_PLAY_CREATEDefaultTypeInternal() {}
  union {
    PROBUFF_EXAMPLE_PLAY_CREATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_EXAMPLE_PLAY_CREATEDefaultTypeInternal _PROBUFF_EXAMPLE_PLAY_CREATE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mcross_)*/0
  , /*decltype(_impl_.mtype_)*/0
  , /*decltype(_impl_.mexampleactorid_)*/int64_t{0}} {}
struct PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLEDefaultTypeInternal() {}
  union {
    PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLEDefaultTypeInternal _PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mplayers_)*/{}
  , /*decltype(_impl_._mplayers_cached_byte_size_)*/{0}
  , /*decltype(_impl_.mcross_)*/0
  , /*decltype(_impl_.mtype_)*/0
  , /*decltype(_impl_.mexampleactorid_)*/int64_t{0}} {}
struct PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSEDefaultTypeInternal _PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::PROBUFF_EXAMPLE_GUESS_NUMBER_INFO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mmaxnumber_)*/0
  , /*decltype(_impl_.mminnumber_)*/0
  , /*decltype(_impl_.mwhoguess_)*/int64_t{0}} {}
struct PROBUFF_EXAMPLE_GUESS_NUMBER_INFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_GUESS_NUMBER_INFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_EXAMPLE_GUESS_NUMBER_INFODefaultTypeInternal() {}
  union {
    PROBUFF_EXAMPLE_GUESS_NUMBER_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_EXAMPLE_GUESS_NUMBER_INFODefaultTypeInternal _PROBUFF_EXAMPLE_GUESS_NUMBER_INFO_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_GUESS_NUMBER::PROBUFF_EXAMPLE_GUESS_NUMBER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mguessnumber_)*/0} {}
struct PROBUFF_EXAMPLE_GUESS_NUMBERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_GUESS_NUMBERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_EXAMPLE_GUESS_NUMBERDefaultTypeInternal() {}
  union {
    PROBUFF_EXAMPLE_GUESS_NUMBER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_EXAMPLE_GUESS_NUMBERDefaultTypeInternal _PROBUFF_EXAMPLE_GUESS_NUMBER_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mstat_)*/0} {}
struct PROBUFF_EXAMPLE_GUESS_NUMBER_ERRORDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_GUESS_NUMBER_ERRORDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_EXAMPLE_GUESS_NUMBER_ERRORDefaultTypeInternal() {}
  union {
    PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_EXAMPLE_GUESS_NUMBER_ERRORDefaultTypeInternal _PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mroleid_)*/int64_t{0}
  , /*decltype(_impl_.mbombvalue_)*/0} {}
struct PROBUFF_EXAMPLE_GUESS_NUMBER_BOMBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_EXAMPLE_GUESS_NUMBER_BOMBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_EXAMPLE_GUESS_NUMBER_BOMBDefaultTypeInternal() {}
  union {
    PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_EXAMPLE_GUESS_NUMBER_BOMBDefaultTypeInternal _PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB_default_instance_;
}  // namespace pbexample
static ::_pb::Metadata file_level_metadata_example_2eproto[14];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_example_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_example_2eproto = nullptr;

const uint32_t TableStruct_example_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN, _impl_.mcross_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN, _impl_.mtype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE, _impl_.mroomid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbexample::PLAYER, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PLAYER, _impl_.mplayers_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PLAYER, _impl_.misconfirm_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING, _impl_.mroomid_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING, _impl_.mtotalnumber_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING, _impl_.mroomcreate_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING, _impl_.mroomready_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING, _impl_.mplayers_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT, _impl_.merrorcode_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT, _impl_.mroomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM, _impl_.misconfirm_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM, _impl_.mroomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_CANCEL, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_CANCEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_CANCEL, _impl_.mtype_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_CANCEL, _impl_.mroomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_CREATE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_CREATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_CREATE, _impl_.mtype_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_CREATE, _impl_.mexampleactorid_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_CREATE, _impl_.mstat_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE, _impl_.mcross_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE, _impl_.mtype_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE, _impl_.mexampleactorid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE, _impl_.mcross_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE, _impl_.mtype_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE, _impl_.mexampleactorid_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE, _impl_.mplayers_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_INFO, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_INFO, _impl_.mmaxnumber_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_INFO, _impl_.mminnumber_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_INFO, _impl_.mwhoguess_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER, _impl_.mguessnumber_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR, _impl_.mstat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB, _impl_.mbombvalue_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB, _impl_.mroleid_),
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN)},
  { 10, 17, -1, sizeof(::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE)},
  { 18, 26, -1, sizeof(::pbexample::PLAYER)},
  { 28, 39, -1, sizeof(::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING)},
  { 44, 52, -1, sizeof(::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT)},
  { 54, 62, -1, sizeof(::pbexample::PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM)},
  { 64, 72, -1, sizeof(::pbexample::PROBUFF_EXAMPLE_PLAY_CANCEL)},
  { 74, 83, -1, sizeof(::pbexample::PROBUFF_EXAMPLE_PLAY_CREATE)},
  { 86, 95, -1, sizeof(::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE)},
  { 98, 108, -1, sizeof(::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE)},
  { 112, 121, -1, sizeof(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_INFO)},
  { 124, 131, -1, sizeof(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER)},
  { 132, 139, -1, sizeof(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR)},
  { 140, 148, -1, sizeof(::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pbexample::_PROBUFF_EXAMPLE_PLAY_JOIN_default_instance_._instance,
  &::pbexample::_PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE_default_instance_._instance,
  &::pbexample::_PLAYER_default_instance_._instance,
  &::pbexample::_PROBUFF_EXAMPLE_PLAY_MATCHING_default_instance_._instance,
  &::pbexample::_PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT_default_instance_._instance,
  &::pbexample::_PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM_default_instance_._instance,
  &::pbexample::_PROBUFF_EXAMPLE_PLAY_CANCEL_default_instance_._instance,
  &::pbexample::_PROBUFF_EXAMPLE_PLAY_CREATE_default_instance_._instance,
  &::pbexample::_PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_default_instance_._instance,
  &::pbexample::_PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE_default_instance_._instance,
  &::pbexample::_PROBUFF_EXAMPLE_GUESS_NUMBER_INFO_default_instance_._instance,
  &::pbexample::_PROBUFF_EXAMPLE_GUESS_NUMBER_default_instance_._instance,
  &::pbexample::_PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR_default_instance_._instance,
  &::pbexample::_PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB_default_instance_._instance,
};

const char descriptor_table_protodef_example_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rexample.proto\022\tpbexample\032\010db.proto\032\tne"
  "t.proto\"\203\001\n\031PROBUFF_EXAMPLE_PLAY_JOIN\022&\n"
  "\006mcross\030\001 \001(\0162\021.pbexample.ECROSSH\000\210\001\001\022)\n"
  "\005mtype\030\002 \001(\0162\025.pbexample.EPLAY_TYPEH\001\210\001\001"
  "B\t\n\007_mcrossB\010\n\006_mtype\"F\n\"PROBUFF_EXAMPLE"
  "_PLAY_JOIN_RESPONSE\022\024\n\007mroomid\030\002 \001(\005H\000\210\001"
  "\001B\n\n\010_mroomid\"d\n\006PLAYER\022%\n\010mplayers\030\001 \001("
  "\0132\016.pbdb.db_briefH\000\210\001\001\022\027\n\nmisconfirm\030\002 \001"
  "(\010H\001\210\001\001B\013\n\t_mplayersB\r\n\013_misconfirm\"\344\001\n\035"
  "PROBUFF_EXAMPLE_PLAY_MATCHING\022\024\n\007mroomid"
  "\030\001 \001(\005H\000\210\001\001\022\031\n\014mtotalnumber\030\002 \001(\005H\001\210\001\001\022\030"
  "\n\013mroomcreate\030\003 \001(\003H\002\210\001\001\022\027\n\nmroomready\030\004"
  " \001(\003H\003\210\001\001\022#\n\010mplayers\030\005 \003(\0132\021.pbexample."
  "PLAYERB\n\n\010_mroomidB\017\n\r_mtotalnumberB\016\n\014_"
  "mroomcreateB\r\n\013_mroomready\"\226\001\n$PROBUFF_E"
  "XAMPLE_PLAY_MATCHING_RESULT\022=\n\nmerrorcod"
  "e\030\001 \001(\0162$.pbexample.PLAY_MATCHING_EERROR"
  "_CODEH\000\210\001\001\022\024\n\007mroomid\030\002 \001(\005H\001\210\001\001B\r\n\013_mer"
  "rorcodeB\n\n\010_mroomid\"o\n#PROBUFF_EXAMPLE_P"
  "LAY_PLAYER_CONFIRM\022\027\n\nmisconfirm\030\001 \001(\010H\000"
  "\210\001\001\022\024\n\007mroomid\030\002 \001(\005H\001\210\001\001B\r\n\013_misconfirm"
  "B\n\n\010_mroomid\"t\n\033PROBUFF_EXAMPLE_PLAY_CAN"
  "CEL\022)\n\005mtype\030\001 \001(\0162\025.pbexample.EPLAY_TYP"
  "EH\000\210\001\001\022\024\n\007mroomid\030\002 \001(\005H\001\210\001\001B\010\n\006_mtypeB\n"
  "\n\010_mroomid\"\374\001\n\033PROBUFF_EXAMPLE_PLAY_CREA"
  "TE\022)\n\005mtype\030\001 \001(\0162\025.pbexample.EPLAY_TYPE"
  "H\000\210\001\001\022\034\n\017mexampleactorid\030\002 \001(\003H\001\210\001\001\022@\n\005m"
  "stat\030\003 \001(\0162,.pbexample.PROBUFF_EXAMPLE_P"
  "LAY_CREATE.estatH\002\210\001\001\"*\n\005estat\022\021\n\restat_"
  "success\020\000\022\016\n\nestat_fail\020\001B\010\n\006_mtypeB\022\n\020_"
  "mexampleactoridB\010\n\006_mstat\"\276\001\n\"PROBUFF_EX"
  "AMPLE_PLAY_ENTER_EXAMPLE\022&\n\006mcross\030\001 \001(\016"
  "2\021.pbexample.ECROSSH\000\210\001\001\022)\n\005mtype\030\002 \001(\0162"
  "\025.pbexample.EPLAY_TYPEH\001\210\001\001\022\034\n\017mexamplea"
  "ctorid\030\003 \001(\003H\002\210\001\001B\t\n\007_mcrossB\010\n\006_mtypeB\022"
  "\n\020_mexampleactorid\"\331\001\n+PROBUFF_EXAMPLE_P"
  "LAY_ENTER_EXAMPLE_RESPONSE\022&\n\006mcross\030\001 \001"
  "(\0162\021.pbexample.ECROSSH\000\210\001\001\022)\n\005mtype\030\002 \001("
  "\0162\025.pbexample.EPLAY_TYPEH\001\210\001\001\022\034\n\017mexampl"
  "eactorid\030\003 \001(\003H\002\210\001\001\022\020\n\010mplayers\030\004 \003(\003B\t\n"
  "\007_mcrossB\010\n\006_mtypeB\022\n\020_mexampleactorid\"\231"
  "\001\n!PROBUFF_EXAMPLE_GUESS_NUMBER_INFO\022\027\n\n"
  "mmaxnumber\030\001 \001(\005H\000\210\001\001\022\027\n\nmminnumber\030\002 \001("
  "\005H\001\210\001\001\022\026\n\tmwhoguess\030\003 \001(\003H\002\210\001\001B\r\n\013_mmaxn"
  "umberB\r\n\013_mminnumberB\014\n\n_mwhoguess\"J\n\034PR"
  "OBUFF_EXAMPLE_GUESS_NUMBER\022\031\n\014mguessnumb"
  "er\030\001 \001(\005H\000\210\001\001B\017\n\r_mguessnumber\"c\n\"PROBUF"
  "F_EXAMPLE_GUESS_NUMBER_ERROR\0223\n\005mstat\030\001 "
  "\001(\0162\037.pbexample.E_GUESS_NUMBER_ERRORH\000\210\001"
  "\001B\010\n\006_mstat\"m\n!PROBUFF_EXAMPLE_GUESS_NUM"
  "BER_BOMB\022\027\n\nmbombvalue\030\001 \001(\005H\000\210\001\001\022\024\n\007mro"
  "leid\030\002 \001(\003H\001\210\001\001B\r\n\013_mbombvalueB\n\n\010_mrole"
  "id*I\n\006ECROSS\022\017\n\013ECROSS_NULL\020\000\022\023\n\017ECROSS_"
  "ORDINARY\020\001\022\031\n\025ECROSS_CROSS_ORDINARY\020\002*4\n"
  "\nEPLAY_TYPE\022\016\n\nEPLAY_NULL\020\000\022\026\n\022EPLAY_GUE"
  "SS_NUMBER\020\001*\315\002\n\031PLAY_MATCHING_EERROR_COD"
  "E\022\027\n\023EERROR_CODE_SUCCESS\020\000\022\027\n\023EERROR_COD"
  "E_TIMEOUT\020\001\022\026\n\022EERROR_CODE_CANCEL\020\002\022\036\n\032E"
  "ERROR_CODE_CURRENT_CANCEL\020\003\022\033\n\027EERROR_CO"
  "DE_NOTFINDROOM\020\004\022\034\n\030EERROR_CODE_ROOM_DES"
  "TORY\020\005\022\026\n\022EERROR_CODE_FINISH\020\006\022\030\n\024EERROR"
  "_CODE_NOTMATCH\020\007\022\037\n\033EERROR_CODE_CREATERO"
  "OM_FAIL\020\010\022\037\n\033EERROR_CODE_CREATEGAME_FAIL"
  "\020\t\022\027\n\023EERROR_CODE_NOTFIND\020\n*y\n\024E_GUESS_N"
  "UMBER_ERROR\022\035\n\031E_GUESS_NUMBER_ERROR_NULL"
  "\020\000\022\036\n\032E_GUESS_NUMBER_ERROR_VALUE\020\001\022\"\n\036E_"
  "GUESS_NUMBER_ERROR_NOT_GUESS\020\002B\002H\001b\006prot"
  "o3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_example_2eproto_deps[2] = {
  &::descriptor_table_db_2eproto,
  &::descriptor_table_net_2eproto,
};
static ::_pbi::once_flag descriptor_table_example_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_example_2eproto = {
    false, false, 2682, descriptor_table_protodef_example_2eproto,
    "example.proto",
    &descriptor_table_example_2eproto_once, descriptor_table_example_2eproto_deps, 2, 14,
    schemas, file_default_instances, TableStruct_example_2eproto::offsets,
    file_level_metadata_example_2eproto, file_level_enum_descriptors_example_2eproto,
    file_level_service_descriptors_example_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_example_2eproto_getter() {
  return &descriptor_table_example_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_example_2eproto(&descriptor_table_example_2eproto);
namespace pbexample {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_EXAMPLE_PLAY_CREATE_estat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_example_2eproto);
  return file_level_enum_descriptors_example_2eproto[0];
}
bool PROBUFF_EXAMPLE_PLAY_CREATE_estat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PROBUFF_EXAMPLE_PLAY_CREATE_estat PROBUFF_EXAMPLE_PLAY_CREATE::estat_success;
constexpr PROBUFF_EXAMPLE_PLAY_CREATE_estat PROBUFF_EXAMPLE_PLAY_CREATE::estat_fail;
constexpr PROBUFF_EXAMPLE_PLAY_CREATE_estat PROBUFF_EXAMPLE_PLAY_CREATE::estat_MIN;
constexpr PROBUFF_EXAMPLE_PLAY_CREATE_estat PROBUFF_EXAMPLE_PLAY_CREATE::estat_MAX;
constexpr int PROBUFF_EXAMPLE_PLAY_CREATE::estat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECROSS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_example_2eproto);
  return file_level_enum_descriptors_example_2eproto[1];
}
bool ECROSS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPLAY_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_example_2eproto);
  return file_level_enum_descriptors_example_2eproto[2];
}
bool EPLAY_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PLAY_MATCHING_EERROR_CODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_example_2eproto);
  return file_level_enum_descriptors_example_2eproto[3];
}
bool PLAY_MATCHING_EERROR_CODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_GUESS_NUMBER_ERROR_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_example_2eproto);
  return file_level_enum_descriptors_example_2eproto[4];
}
bool E_GUESS_NUMBER_ERROR_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PROBUFF_EXAMPLE_PLAY_JOIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_EXAMPLE_PLAY_JOIN>()._impl_._has_bits_);
  static void set_has_mcross(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_EXAMPLE_PLAY_JOIN::PROBUFF_EXAMPLE_PLAY_JOIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN)
}
PROBUFF_EXAMPLE_PLAY_JOIN::PROBUFF_EXAMPLE_PLAY_JOIN(const PROBUFF_EXAMPLE_PLAY_JOIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_EXAMPLE_PLAY_JOIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mcross_){}
    , decltype(_impl_.mtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mcross_, &from._impl_.mcross_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mtype_) -
    reinterpret_cast<char*>(&_impl_.mcross_)) + sizeof(_impl_.mtype_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN)
}

inline void PROBUFF_EXAMPLE_PLAY_JOIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mcross_){0}
    , decltype(_impl_.mtype_){0}
  };
}

PROBUFF_EXAMPLE_PLAY_JOIN::~PROBUFF_EXAMPLE_PLAY_JOIN() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_EXAMPLE_PLAY_JOIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_EXAMPLE_PLAY_JOIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_EXAMPLE_PLAY_JOIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mcross_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mtype_) -
        reinterpret_cast<char*>(&_impl_.mcross_)) + sizeof(_impl_.mtype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_EXAMPLE_PLAY_JOIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbexample.ECROSS mcross = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mcross(static_cast<::pbexample::ECROSS>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .pbexample.EPLAY_TYPE mtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mtype(static_cast<::pbexample::EPLAY_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_EXAMPLE_PLAY_JOIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbexample.ECROSS mcross = 1;
  if (_internal_has_mcross()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mcross(), target);
  }

  // optional .pbexample.EPLAY_TYPE mtype = 2;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN)
  return target;
}

size_t PROBUFF_EXAMPLE_PLAY_JOIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbexample.ECROSS mcross = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mcross());
    }

    // optional .pbexample.EPLAY_TYPE mtype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mtype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_EXAMPLE_PLAY_JOIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_EXAMPLE_PLAY_JOIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_EXAMPLE_PLAY_JOIN::GetClassData() const { return &_class_data_; }


void PROBUFF_EXAMPLE_PLAY_JOIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_EXAMPLE_PLAY_JOIN*>(&to_msg);
  auto& from = static_cast<const PROBUFF_EXAMPLE_PLAY_JOIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mcross_ = from._impl_.mcross_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mtype_ = from._impl_.mtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_EXAMPLE_PLAY_JOIN::CopyFrom(const PROBUFF_EXAMPLE_PLAY_JOIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_EXAMPLE_PLAY_JOIN::IsInitialized() const {
  return true;
}

void PROBUFF_EXAMPLE_PLAY_JOIN::InternalSwap(PROBUFF_EXAMPLE_PLAY_JOIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_JOIN, _impl_.mtype_)
      + sizeof(PROBUFF_EXAMPLE_PLAY_JOIN::_impl_.mtype_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_JOIN, _impl_.mcross_)>(
          reinterpret_cast<char*>(&_impl_.mcross_),
          reinterpret_cast<char*>(&other->_impl_.mcross_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_EXAMPLE_PLAY_JOIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[0]);
}

// ===================================================================

class PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE>()._impl_._has_bits_);
  static void set_has_mroomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE)
}
PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE(const PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mroomid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mroomid_ = from._impl_.mroomid_;
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE)
}

inline void PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mroomid_){0}
  };
}

PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::~PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mroomid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mroomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mroomid(&has_bits);
          _impl_.mroomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mroomid = 2;
  if (_internal_has_mroomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mroomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE)
  return target;
}

size_t PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mroomid = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mroomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mroomid()) {
    _this->_internal_set_mroomid(from._internal_mroomid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::CopyFrom(const PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::InternalSwap(PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mroomid_, other->_impl_.mroomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[1]);
}

// ===================================================================

class PLAYER::_Internal {
 public:
  using HasBits = decltype(std::declval<PLAYER>()._impl_._has_bits_);
  static const ::pbdb::db_brief& mplayers(const PLAYER* msg);
  static void set_has_mplayers(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_misconfirm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pbdb::db_brief&
PLAYER::_Internal::mplayers(const PLAYER* msg) {
  return *msg->_impl_.mplayers_;
}
void PLAYER::clear_mplayers() {
  if (_impl_.mplayers_ != nullptr) _impl_.mplayers_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PLAYER::PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PLAYER)
}
PLAYER::PLAYER(const PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PLAYER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mplayers_){nullptr}
    , decltype(_impl_.misconfirm_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mplayers()) {
    _this->_impl_.mplayers_ = new ::pbdb::db_brief(*from._impl_.mplayers_);
  }
  _this->_impl_.misconfirm_ = from._impl_.misconfirm_;
  // @@protoc_insertion_point(copy_constructor:pbexample.PLAYER)
}

inline void PLAYER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mplayers_){nullptr}
    , decltype(_impl_.misconfirm_){false}
  };
}

PLAYER::~PLAYER() {
  // @@protoc_insertion_point(destructor:pbexample.PLAYER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PLAYER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mplayers_;
}

void PLAYER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PLAYER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.mplayers_ != nullptr);
    _impl_.mplayers_->Clear();
  }
  _impl_.misconfirm_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PLAYER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbdb.db_brief mplayers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mplayers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool misconfirm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_misconfirm(&has_bits);
          _impl_.misconfirm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PLAYER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PLAYER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbdb.db_brief mplayers = 1;
  if (_internal_has_mplayers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mplayers(this),
        _Internal::mplayers(this).GetCachedSize(), target, stream);
  }

  // optional bool misconfirm = 2;
  if (_internal_has_misconfirm()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_misconfirm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PLAYER)
  return target;
}

size_t PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PLAYER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbdb.db_brief mplayers = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mplayers_);
    }

    // optional bool misconfirm = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PLAYER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PLAYER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PLAYER::GetClassData() const { return &_class_data_; }


void PLAYER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PLAYER*>(&to_msg);
  auto& from = static_cast<const PLAYER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PLAYER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_mplayers()->::pbdb::db_brief::MergeFrom(
          from._internal_mplayers());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.misconfirm_ = from._impl_.misconfirm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PLAYER::CopyFrom(const PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLAYER::IsInitialized() const {
  return true;
}

void PLAYER::InternalSwap(PLAYER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PLAYER, _impl_.misconfirm_)
      + sizeof(PLAYER::_impl_.misconfirm_)
      - PROTOBUF_FIELD_OFFSET(PLAYER, _impl_.mplayers_)>(
          reinterpret_cast<char*>(&_impl_.mplayers_),
          reinterpret_cast<char*>(&other->_impl_.mplayers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PLAYER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[2]);
}

// ===================================================================

class PROBUFF_EXAMPLE_PLAY_MATCHING::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_EXAMPLE_PLAY_MATCHING>()._impl_._has_bits_);
  static void set_has_mroomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mtotalnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mroomcreate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mroomready(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PROBUFF_EXAMPLE_PLAY_MATCHING::PROBUFF_EXAMPLE_PLAY_MATCHING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING)
}
PROBUFF_EXAMPLE_PLAY_MATCHING::PROBUFF_EXAMPLE_PLAY_MATCHING(const PROBUFF_EXAMPLE_PLAY_MATCHING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_EXAMPLE_PLAY_MATCHING* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mplayers_){from._impl_.mplayers_}
    , decltype(_impl_.mroomid_){}
    , decltype(_impl_.mtotalnumber_){}
    , decltype(_impl_.mroomcreate_){}
    , decltype(_impl_.mroomready_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mroomid_, &from._impl_.mroomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mroomready_) -
    reinterpret_cast<char*>(&_impl_.mroomid_)) + sizeof(_impl_.mroomready_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING)
}

inline void PROBUFF_EXAMPLE_PLAY_MATCHING::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mplayers_){arena}
    , decltype(_impl_.mroomid_){0}
    , decltype(_impl_.mtotalnumber_){0}
    , decltype(_impl_.mroomcreate_){int64_t{0}}
    , decltype(_impl_.mroomready_){int64_t{0}}
  };
}

PROBUFF_EXAMPLE_PLAY_MATCHING::~PROBUFF_EXAMPLE_PLAY_MATCHING() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_EXAMPLE_PLAY_MATCHING::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mplayers_.~RepeatedPtrField();
}

void PROBUFF_EXAMPLE_PLAY_MATCHING::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_EXAMPLE_PLAY_MATCHING::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mplayers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.mroomid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mroomready_) -
        reinterpret_cast<char*>(&_impl_.mroomid_)) + sizeof(_impl_.mroomready_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_EXAMPLE_PLAY_MATCHING::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mroomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mroomid(&has_bits);
          _impl_.mroomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mtotalnumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mtotalnumber(&has_bits);
          _impl_.mtotalnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 mroomcreate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mroomcreate(&has_bits);
          _impl_.mroomcreate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 mroomready = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mroomready(&has_bits);
          _impl_.mroomready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbexample.PLAYER mplayers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mplayers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_EXAMPLE_PLAY_MATCHING::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mroomid = 1;
  if (_internal_has_mroomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mroomid(), target);
  }

  // optional int32 mtotalnumber = 2;
  if (_internal_has_mtotalnumber()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mtotalnumber(), target);
  }

  // optional int64 mroomcreate = 3;
  if (_internal_has_mroomcreate()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_mroomcreate(), target);
  }

  // optional int64 mroomready = 4;
  if (_internal_has_mroomready()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_mroomready(), target);
  }

  // repeated .pbexample.PLAYER mplayers = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mplayers_size()); i < n; i++) {
    const auto& repfield = this->_internal_mplayers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING)
  return target;
}

size_t PROBUFF_EXAMPLE_PLAY_MATCHING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbexample.PLAYER mplayers = 5;
  total_size += 1UL * this->_internal_mplayers_size();
  for (const auto& msg : this->_impl_.mplayers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 mroomid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mroomid());
    }

    // optional int32 mtotalnumber = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mtotalnumber());
    }

    // optional int64 mroomcreate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mroomcreate());
    }

    // optional int64 mroomready = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mroomready());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_EXAMPLE_PLAY_MATCHING::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_EXAMPLE_PLAY_MATCHING::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_EXAMPLE_PLAY_MATCHING::GetClassData() const { return &_class_data_; }


void PROBUFF_EXAMPLE_PLAY_MATCHING::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_EXAMPLE_PLAY_MATCHING*>(&to_msg);
  auto& from = static_cast<const PROBUFF_EXAMPLE_PLAY_MATCHING&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mplayers_.MergeFrom(from._impl_.mplayers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mroomid_ = from._impl_.mroomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mtotalnumber_ = from._impl_.mtotalnumber_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mroomcreate_ = from._impl_.mroomcreate_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mroomready_ = from._impl_.mroomready_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_EXAMPLE_PLAY_MATCHING::CopyFrom(const PROBUFF_EXAMPLE_PLAY_MATCHING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_EXAMPLE_PLAY_MATCHING::IsInitialized() const {
  return true;
}

void PROBUFF_EXAMPLE_PLAY_MATCHING::InternalSwap(PROBUFF_EXAMPLE_PLAY_MATCHING* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mplayers_.InternalSwap(&other->_impl_.mplayers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_MATCHING, _impl_.mroomready_)
      + sizeof(PROBUFF_EXAMPLE_PLAY_MATCHING::_impl_.mroomready_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_MATCHING, _impl_.mroomid_)>(
          reinterpret_cast<char*>(&_impl_.mroomid_),
          reinterpret_cast<char*>(&other->_impl_.mroomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_EXAMPLE_PLAY_MATCHING::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[3]);
}

// ===================================================================

class PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT>()._impl_._has_bits_);
  static void set_has_merrorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mroomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT)
}
PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT(const PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.merrorcode_){}
    , decltype(_impl_.mroomid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.merrorcode_, &from._impl_.merrorcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mroomid_) -
    reinterpret_cast<char*>(&_impl_.merrorcode_)) + sizeof(_impl_.mroomid_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT)
}

inline void PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.merrorcode_){0}
    , decltype(_impl_.mroomid_){0}
  };
}

PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::~PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.merrorcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mroomid_) -
        reinterpret_cast<char*>(&_impl_.merrorcode_)) + sizeof(_impl_.mroomid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbexample.PLAY_MATCHING_EERROR_CODE merrorcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_merrorcode(static_cast<::pbexample::PLAY_MATCHING_EERROR_CODE>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 mroomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mroomid(&has_bits);
          _impl_.mroomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbexample.PLAY_MATCHING_EERROR_CODE merrorcode = 1;
  if (_internal_has_merrorcode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_merrorcode(), target);
  }

  // optional int32 mroomid = 2;
  if (_internal_has_mroomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mroomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT)
  return target;
}

size_t PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbexample.PLAY_MATCHING_EERROR_CODE merrorcode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_merrorcode());
    }

    // optional int32 mroomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mroomid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::GetClassData() const { return &_class_data_; }


void PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT*>(&to_msg);
  auto& from = static_cast<const PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.merrorcode_ = from._impl_.merrorcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mroomid_ = from._impl_.mroomid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::CopyFrom(const PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::IsInitialized() const {
  return true;
}

void PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::InternalSwap(PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT, _impl_.mroomid_)
      + sizeof(PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::_impl_.mroomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT, _impl_.merrorcode_)>(
          reinterpret_cast<char*>(&_impl_.merrorcode_),
          reinterpret_cast<char*>(&other->_impl_.merrorcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[4]);
}

// ===================================================================

class PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM>()._impl_._has_bits_);
  static void set_has_misconfirm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mroomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM)
}
PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM(const PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.misconfirm_){}
    , decltype(_impl_.mroomid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.misconfirm_, &from._impl_.misconfirm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mroomid_) -
    reinterpret_cast<char*>(&_impl_.misconfirm_)) + sizeof(_impl_.mroomid_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM)
}

inline void PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.misconfirm_){false}
    , decltype(_impl_.mroomid_){0}
  };
}

PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::~PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.misconfirm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mroomid_) -
        reinterpret_cast<char*>(&_impl_.misconfirm_)) + sizeof(_impl_.mroomid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool misconfirm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_misconfirm(&has_bits);
          _impl_.misconfirm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mroomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mroomid(&has_bits);
          _impl_.mroomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool misconfirm = 1;
  if (_internal_has_misconfirm()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_misconfirm(), target);
  }

  // optional int32 mroomid = 2;
  if (_internal_has_mroomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mroomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM)
  return target;
}

size_t PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool misconfirm = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 mroomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mroomid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::GetClassData() const { return &_class_data_; }


void PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM*>(&to_msg);
  auto& from = static_cast<const PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.misconfirm_ = from._impl_.misconfirm_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mroomid_ = from._impl_.mroomid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::CopyFrom(const PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::IsInitialized() const {
  return true;
}

void PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::InternalSwap(PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM, _impl_.mroomid_)
      + sizeof(PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::_impl_.mroomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM, _impl_.misconfirm_)>(
          reinterpret_cast<char*>(&_impl_.misconfirm_),
          reinterpret_cast<char*>(&other->_impl_.misconfirm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[5]);
}

// ===================================================================

class PROBUFF_EXAMPLE_PLAY_CANCEL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_EXAMPLE_PLAY_CANCEL>()._impl_._has_bits_);
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mroomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_EXAMPLE_PLAY_CANCEL::PROBUFF_EXAMPLE_PLAY_CANCEL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_CANCEL)
}
PROBUFF_EXAMPLE_PLAY_CANCEL::PROBUFF_EXAMPLE_PLAY_CANCEL(const PROBUFF_EXAMPLE_PLAY_CANCEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_EXAMPLE_PLAY_CANCEL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mtype_){}
    , decltype(_impl_.mroomid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mtype_, &from._impl_.mtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mroomid_) -
    reinterpret_cast<char*>(&_impl_.mtype_)) + sizeof(_impl_.mroomid_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_CANCEL)
}

inline void PROBUFF_EXAMPLE_PLAY_CANCEL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mtype_){0}
    , decltype(_impl_.mroomid_){0}
  };
}

PROBUFF_EXAMPLE_PLAY_CANCEL::~PROBUFF_EXAMPLE_PLAY_CANCEL() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_EXAMPLE_PLAY_CANCEL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_EXAMPLE_PLAY_CANCEL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_EXAMPLE_PLAY_CANCEL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_EXAMPLE_PLAY_CANCEL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_EXAMPLE_PLAY_CANCEL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mroomid_) -
        reinterpret_cast<char*>(&_impl_.mtype_)) + sizeof(_impl_.mroomid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_EXAMPLE_PLAY_CANCEL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbexample.EPLAY_TYPE mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mtype(static_cast<::pbexample::EPLAY_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 mroomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mroomid(&has_bits);
          _impl_.mroomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_EXAMPLE_PLAY_CANCEL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_EXAMPLE_PLAY_CANCEL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbexample.EPLAY_TYPE mtype = 1;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mtype(), target);
  }

  // optional int32 mroomid = 2;
  if (_internal_has_mroomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mroomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_EXAMPLE_PLAY_CANCEL)
  return target;
}

size_t PROBUFF_EXAMPLE_PLAY_CANCEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_EXAMPLE_PLAY_CANCEL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbexample.EPLAY_TYPE mtype = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mtype());
    }

    // optional int32 mroomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mroomid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_EXAMPLE_PLAY_CANCEL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_EXAMPLE_PLAY_CANCEL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_EXAMPLE_PLAY_CANCEL::GetClassData() const { return &_class_data_; }


void PROBUFF_EXAMPLE_PLAY_CANCEL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_EXAMPLE_PLAY_CANCEL*>(&to_msg);
  auto& from = static_cast<const PROBUFF_EXAMPLE_PLAY_CANCEL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_CANCEL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mtype_ = from._impl_.mtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mroomid_ = from._impl_.mroomid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_EXAMPLE_PLAY_CANCEL::CopyFrom(const PROBUFF_EXAMPLE_PLAY_CANCEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_CANCEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_EXAMPLE_PLAY_CANCEL::IsInitialized() const {
  return true;
}

void PROBUFF_EXAMPLE_PLAY_CANCEL::InternalSwap(PROBUFF_EXAMPLE_PLAY_CANCEL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_CANCEL, _impl_.mroomid_)
      + sizeof(PROBUFF_EXAMPLE_PLAY_CANCEL::_impl_.mroomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_CANCEL, _impl_.mtype_)>(
          reinterpret_cast<char*>(&_impl_.mtype_),
          reinterpret_cast<char*>(&other->_impl_.mtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_EXAMPLE_PLAY_CANCEL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[6]);
}

// ===================================================================

class PROBUFF_EXAMPLE_PLAY_CREATE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_EXAMPLE_PLAY_CREATE>()._impl_._has_bits_);
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mexampleactorid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_EXAMPLE_PLAY_CREATE::PROBUFF_EXAMPLE_PLAY_CREATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_CREATE)
}
PROBUFF_EXAMPLE_PLAY_CREATE::PROBUFF_EXAMPLE_PLAY_CREATE(const PROBUFF_EXAMPLE_PLAY_CREATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_EXAMPLE_PLAY_CREATE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mexampleactorid_){}
    , decltype(_impl_.mtype_){}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mexampleactorid_, &from._impl_.mexampleactorid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstat_) -
    reinterpret_cast<char*>(&_impl_.mexampleactorid_)) + sizeof(_impl_.mstat_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_CREATE)
}

inline void PROBUFF_EXAMPLE_PLAY_CREATE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mexampleactorid_){int64_t{0}}
    , decltype(_impl_.mtype_){0}
    , decltype(_impl_.mstat_){0}
  };
}

PROBUFF_EXAMPLE_PLAY_CREATE::~PROBUFF_EXAMPLE_PLAY_CREATE() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_EXAMPLE_PLAY_CREATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_EXAMPLE_PLAY_CREATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_EXAMPLE_PLAY_CREATE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_EXAMPLE_PLAY_CREATE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_EXAMPLE_PLAY_CREATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.mexampleactorid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstat_) -
        reinterpret_cast<char*>(&_impl_.mexampleactorid_)) + sizeof(_impl_.mstat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_EXAMPLE_PLAY_CREATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbexample.EPLAY_TYPE mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mtype(static_cast<::pbexample::EPLAY_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int64 mexampleactorid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mexampleactorid(&has_bits);
          _impl_.mexampleactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbexample.PROBUFF_EXAMPLE_PLAY_CREATE.estat mstat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mstat(static_cast<::pbexample::PROBUFF_EXAMPLE_PLAY_CREATE_estat>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_EXAMPLE_PLAY_CREATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_EXAMPLE_PLAY_CREATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbexample.EPLAY_TYPE mtype = 1;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mtype(), target);
  }

  // optional int64 mexampleactorid = 2;
  if (_internal_has_mexampleactorid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_mexampleactorid(), target);
  }

  // optional .pbexample.PROBUFF_EXAMPLE_PLAY_CREATE.estat mstat = 3;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_EXAMPLE_PLAY_CREATE)
  return target;
}

size_t PROBUFF_EXAMPLE_PLAY_CREATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_EXAMPLE_PLAY_CREATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 mexampleactorid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mexampleactorid());
    }

    // optional .pbexample.EPLAY_TYPE mtype = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mtype());
    }

    // optional .pbexample.PROBUFF_EXAMPLE_PLAY_CREATE.estat mstat = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mstat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_EXAMPLE_PLAY_CREATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_EXAMPLE_PLAY_CREATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_EXAMPLE_PLAY_CREATE::GetClassData() const { return &_class_data_; }


void PROBUFF_EXAMPLE_PLAY_CREATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_EXAMPLE_PLAY_CREATE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_EXAMPLE_PLAY_CREATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_CREATE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mexampleactorid_ = from._impl_.mexampleactorid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mtype_ = from._impl_.mtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mstat_ = from._impl_.mstat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_EXAMPLE_PLAY_CREATE::CopyFrom(const PROBUFF_EXAMPLE_PLAY_CREATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_CREATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_EXAMPLE_PLAY_CREATE::IsInitialized() const {
  return true;
}

void PROBUFF_EXAMPLE_PLAY_CREATE::InternalSwap(PROBUFF_EXAMPLE_PLAY_CREATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_CREATE, _impl_.mstat_)
      + sizeof(PROBUFF_EXAMPLE_PLAY_CREATE::_impl_.mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_CREATE, _impl_.mexampleactorid_)>(
          reinterpret_cast<char*>(&_impl_.mexampleactorid_),
          reinterpret_cast<char*>(&other->_impl_.mexampleactorid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_EXAMPLE_PLAY_CREATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[7]);
}

// ===================================================================

class PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE>()._impl_._has_bits_);
  static void set_has_mcross(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mexampleactorid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE)
}
PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE(const PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mcross_){}
    , decltype(_impl_.mtype_){}
    , decltype(_impl_.mexampleactorid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mcross_, &from._impl_.mcross_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mexampleactorid_) -
    reinterpret_cast<char*>(&_impl_.mcross_)) + sizeof(_impl_.mexampleactorid_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE)
}

inline void PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mcross_){0}
    , decltype(_impl_.mtype_){0}
    , decltype(_impl_.mexampleactorid_){int64_t{0}}
  };
}

PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::~PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.mcross_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mexampleactorid_) -
        reinterpret_cast<char*>(&_impl_.mcross_)) + sizeof(_impl_.mexampleactorid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbexample.ECROSS mcross = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mcross(static_cast<::pbexample::ECROSS>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .pbexample.EPLAY_TYPE mtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mtype(static_cast<::pbexample::EPLAY_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int64 mexampleactorid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mexampleactorid(&has_bits);
          _impl_.mexampleactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbexample.ECROSS mcross = 1;
  if (_internal_has_mcross()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mcross(), target);
  }

  // optional .pbexample.EPLAY_TYPE mtype = 2;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mtype(), target);
  }

  // optional int64 mexampleactorid = 3;
  if (_internal_has_mexampleactorid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_mexampleactorid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE)
  return target;
}

size_t PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .pbexample.ECROSS mcross = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mcross());
    }

    // optional .pbexample.EPLAY_TYPE mtype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mtype());
    }

    // optional int64 mexampleactorid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mexampleactorid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::GetClassData() const { return &_class_data_; }


void PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mcross_ = from._impl_.mcross_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mtype_ = from._impl_.mtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mexampleactorid_ = from._impl_.mexampleactorid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::CopyFrom(const PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::IsInitialized() const {
  return true;
}

void PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::InternalSwap(PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE, _impl_.mexampleactorid_)
      + sizeof(PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::_impl_.mexampleactorid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE, _impl_.mcross_)>(
          reinterpret_cast<char*>(&_impl_.mcross_),
          reinterpret_cast<char*>(&other->_impl_.mcross_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[8]);
}

// ===================================================================

class PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE>()._impl_._has_bits_);
  static void set_has_mcross(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mexampleactorid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE)
}
PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE(const PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mplayers_){from._impl_.mplayers_}
    , /*decltype(_impl_._mplayers_cached_byte_size_)*/{0}
    , decltype(_impl_.mcross_){}
    , decltype(_impl_.mtype_){}
    , decltype(_impl_.mexampleactorid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mcross_, &from._impl_.mcross_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mexampleactorid_) -
    reinterpret_cast<char*>(&_impl_.mcross_)) + sizeof(_impl_.mexampleactorid_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE)
}

inline void PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mplayers_){arena}
    , /*decltype(_impl_._mplayers_cached_byte_size_)*/{0}
    , decltype(_impl_.mcross_){0}
    , decltype(_impl_.mtype_){0}
    , decltype(_impl_.mexampleactorid_){int64_t{0}}
  };
}

PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::~PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mplayers_.~RepeatedField();
}

void PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mplayers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.mcross_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mexampleactorid_) -
        reinterpret_cast<char*>(&_impl_.mcross_)) + sizeof(_impl_.mexampleactorid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbexample.ECROSS mcross = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mcross(static_cast<::pbexample::ECROSS>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .pbexample.EPLAY_TYPE mtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mtype(static_cast<::pbexample::EPLAY_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int64 mexampleactorid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mexampleactorid(&has_bits);
          _impl_.mexampleactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 mplayers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_mplayers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_mplayers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbexample.ECROSS mcross = 1;
  if (_internal_has_mcross()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mcross(), target);
  }

  // optional .pbexample.EPLAY_TYPE mtype = 2;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mtype(), target);
  }

  // optional int64 mexampleactorid = 3;
  if (_internal_has_mexampleactorid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_mexampleactorid(), target);
  }

  // repeated int64 mplayers = 4;
  {
    int byte_size = _impl_._mplayers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_mplayers(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE)
  return target;
}

size_t PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 mplayers = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.mplayers_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._mplayers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .pbexample.ECROSS mcross = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mcross());
    }

    // optional .pbexample.EPLAY_TYPE mtype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mtype());
    }

    // optional int64 mexampleactorid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mexampleactorid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mplayers_.MergeFrom(from._impl_.mplayers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mcross_ = from._impl_.mcross_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mtype_ = from._impl_.mtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mexampleactorid_ = from._impl_.mexampleactorid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::CopyFrom(const PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::InternalSwap(PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mplayers_.InternalSwap(&other->_impl_.mplayers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE, _impl_.mexampleactorid_)
      + sizeof(PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::_impl_.mexampleactorid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE, _impl_.mcross_)>(
          reinterpret_cast<char*>(&_impl_.mcross_),
          reinterpret_cast<char*>(&other->_impl_.mcross_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[9]);
}

// ===================================================================

class PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_EXAMPLE_GUESS_NUMBER_INFO>()._impl_._has_bits_);
  static void set_has_mmaxnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mminnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mwhoguess(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::PROBUFF_EXAMPLE_GUESS_NUMBER_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_INFO)
}
PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::PROBUFF_EXAMPLE_GUESS_NUMBER_INFO(const PROBUFF_EXAMPLE_GUESS_NUMBER_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_EXAMPLE_GUESS_NUMBER_INFO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmaxnumber_){}
    , decltype(_impl_.mminnumber_){}
    , decltype(_impl_.mwhoguess_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mmaxnumber_, &from._impl_.mmaxnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mwhoguess_) -
    reinterpret_cast<char*>(&_impl_.mmaxnumber_)) + sizeof(_impl_.mwhoguess_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_INFO)
}

inline void PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmaxnumber_){0}
    , decltype(_impl_.mminnumber_){0}
    , decltype(_impl_.mwhoguess_){int64_t{0}}
  };
}

PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::~PROBUFF_EXAMPLE_GUESS_NUMBER_INFO() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_INFO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_INFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.mmaxnumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mwhoguess_) -
        reinterpret_cast<char*>(&_impl_.mmaxnumber_)) + sizeof(_impl_.mwhoguess_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mmaxnumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mmaxnumber(&has_bits);
          _impl_.mmaxnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mminnumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mminnumber(&has_bits);
          _impl_.mminnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 mwhoguess = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mwhoguess(&has_bits);
          _impl_.mwhoguess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_INFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mmaxnumber = 1;
  if (_internal_has_mmaxnumber()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mmaxnumber(), target);
  }

  // optional int32 mminnumber = 2;
  if (_internal_has_mminnumber()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mminnumber(), target);
  }

  // optional int64 mwhoguess = 3;
  if (_internal_has_mwhoguess()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_mwhoguess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_INFO)
  return target;
}

size_t PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_INFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 mmaxnumber = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mmaxnumber());
    }

    // optional int32 mminnumber = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mminnumber());
    }

    // optional int64 mwhoguess = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mwhoguess());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::GetClassData() const { return &_class_data_; }


void PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_EXAMPLE_GUESS_NUMBER_INFO*>(&to_msg);
  auto& from = static_cast<const PROBUFF_EXAMPLE_GUESS_NUMBER_INFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_INFO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mmaxnumber_ = from._impl_.mmaxnumber_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mminnumber_ = from._impl_.mminnumber_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mwhoguess_ = from._impl_.mwhoguess_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::CopyFrom(const PROBUFF_EXAMPLE_GUESS_NUMBER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::IsInitialized() const {
  return true;
}

void PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::InternalSwap(PROBUFF_EXAMPLE_GUESS_NUMBER_INFO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_GUESS_NUMBER_INFO, _impl_.mwhoguess_)
      + sizeof(PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::_impl_.mwhoguess_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_GUESS_NUMBER_INFO, _impl_.mmaxnumber_)>(
          reinterpret_cast<char*>(&_impl_.mmaxnumber_),
          reinterpret_cast<char*>(&other->_impl_.mmaxnumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_EXAMPLE_GUESS_NUMBER_INFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[10]);
}

// ===================================================================

class PROBUFF_EXAMPLE_GUESS_NUMBER::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_EXAMPLE_GUESS_NUMBER>()._impl_._has_bits_);
  static void set_has_mguessnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_EXAMPLE_GUESS_NUMBER::PROBUFF_EXAMPLE_GUESS_NUMBER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER)
}
PROBUFF_EXAMPLE_GUESS_NUMBER::PROBUFF_EXAMPLE_GUESS_NUMBER(const PROBUFF_EXAMPLE_GUESS_NUMBER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_EXAMPLE_GUESS_NUMBER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mguessnumber_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mguessnumber_ = from._impl_.mguessnumber_;
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER)
}

inline void PROBUFF_EXAMPLE_GUESS_NUMBER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mguessnumber_){0}
  };
}

PROBUFF_EXAMPLE_GUESS_NUMBER::~PROBUFF_EXAMPLE_GUESS_NUMBER() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_EXAMPLE_GUESS_NUMBER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_EXAMPLE_GUESS_NUMBER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_EXAMPLE_GUESS_NUMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mguessnumber_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_EXAMPLE_GUESS_NUMBER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mguessnumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mguessnumber(&has_bits);
          _impl_.mguessnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_EXAMPLE_GUESS_NUMBER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mguessnumber = 1;
  if (_internal_has_mguessnumber()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mguessnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER)
  return target;
}

size_t PROBUFF_EXAMPLE_GUESS_NUMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mguessnumber = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mguessnumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_EXAMPLE_GUESS_NUMBER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_EXAMPLE_GUESS_NUMBER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_EXAMPLE_GUESS_NUMBER::GetClassData() const { return &_class_data_; }


void PROBUFF_EXAMPLE_GUESS_NUMBER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_EXAMPLE_GUESS_NUMBER*>(&to_msg);
  auto& from = static_cast<const PROBUFF_EXAMPLE_GUESS_NUMBER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mguessnumber()) {
    _this->_internal_set_mguessnumber(from._internal_mguessnumber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_EXAMPLE_GUESS_NUMBER::CopyFrom(const PROBUFF_EXAMPLE_GUESS_NUMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_EXAMPLE_GUESS_NUMBER::IsInitialized() const {
  return true;
}

void PROBUFF_EXAMPLE_GUESS_NUMBER::InternalSwap(PROBUFF_EXAMPLE_GUESS_NUMBER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mguessnumber_, other->_impl_.mguessnumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_EXAMPLE_GUESS_NUMBER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[11]);
}

// ===================================================================

class PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR>()._impl_._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR)
}
PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR(const PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mstat_ = from._impl_.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR)
}

inline void PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){0}
  };
}

PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::~PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mstat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbexample.E_GUESS_NUMBER_ERROR mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mstat(static_cast<::pbexample::E_GUESS_NUMBER_ERROR>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbexample.E_GUESS_NUMBER_ERROR mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR)
  return target;
}

size_t PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .pbexample.E_GUESS_NUMBER_ERROR mstat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mstat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::GetClassData() const { return &_class_data_; }


void PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR*>(&to_msg);
  auto& from = static_cast<const PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _this->_internal_set_mstat(from._internal_mstat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::CopyFrom(const PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::IsInitialized() const {
  return true;
}

void PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::InternalSwap(PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mstat_, other->_impl_.mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[12]);
}

// ===================================================================

class PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB>()._impl_._has_bits_);
  static void set_has_mbombvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB)
}
PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB(const PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mroleid_){}
    , decltype(_impl_.mbombvalue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mroleid_, &from._impl_.mroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mbombvalue_) -
    reinterpret_cast<char*>(&_impl_.mroleid_)) + sizeof(_impl_.mbombvalue_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB)
}

inline void PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mroleid_){int64_t{0}}
    , decltype(_impl_.mbombvalue_){0}
  };
}

PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::~PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mroleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mbombvalue_) -
        reinterpret_cast<char*>(&_impl_.mroleid_)) + sizeof(_impl_.mbombvalue_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mbombvalue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mbombvalue(&has_bits);
          _impl_.mbombvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 mroleid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mroleid(&has_bits);
          _impl_.mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mbombvalue = 1;
  if (_internal_has_mbombvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mbombvalue(), target);
  }

  // optional int64 mroleid = 2;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_mroleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB)
  return target;
}

size_t PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 mroleid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mroleid());
    }

    // optional int32 mbombvalue = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mbombvalue());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::GetClassData() const { return &_class_data_; }


void PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB*>(&to_msg);
  auto& from = static_cast<const PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mroleid_ = from._impl_.mroleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mbombvalue_ = from._impl_.mbombvalue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::CopyFrom(const PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::IsInitialized() const {
  return true;
}

void PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::InternalSwap(PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB, _impl_.mbombvalue_)
      + sizeof(PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::_impl_.mbombvalue_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB, _impl_.mroleid_)>(
          reinterpret_cast<char*>(&_impl_.mroleid_),
          reinterpret_cast<char*>(&other->_impl_.mroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pbexample
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_EXAMPLE_PLAY_JOIN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PLAYER*
Arena::CreateMaybeMessage< ::pbexample::PLAYER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_EXAMPLE_PLAY_MATCHING_RESULT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_EXAMPLE_PLAY_PLAYER_CONFIRM >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_EXAMPLE_PLAY_CANCEL*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_EXAMPLE_PLAY_CANCEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_EXAMPLE_PLAY_CANCEL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_EXAMPLE_PLAY_CREATE*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_EXAMPLE_PLAY_CREATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_EXAMPLE_PLAY_CREATE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_EXAMPLE_PLAY_ENTER_EXAMPLE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_INFO*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_ERROR >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_EXAMPLE_GUESS_NUMBER_BOMB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
