// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_db_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_db_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_db_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[40]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_2eproto;
namespace pbdb {
class activity_drawcompliance;
class activity_drawcomplianceDefaultTypeInternal;
extern activity_drawcomplianceDefaultTypeInternal _activity_drawcompliance_default_instance_;
class activity_drawcompliance_MRewardEntry_DoNotUse;
class activity_drawcompliance_MRewardEntry_DoNotUseDefaultTypeInternal;
extern activity_drawcompliance_MRewardEntry_DoNotUseDefaultTypeInternal _activity_drawcompliance_MRewardEntry_DoNotUse_default_instance_;
class activity_task;
class activity_taskDefaultTypeInternal;
extern activity_taskDefaultTypeInternal _activity_task_default_instance_;
class activity_task_MCloseEntry_DoNotUse;
class activity_task_MCloseEntry_DoNotUseDefaultTypeInternal;
extern activity_task_MCloseEntry_DoNotUseDefaultTypeInternal _activity_task_MCloseEntry_DoNotUse_default_instance_;
class activity_task_MOpenEntry_DoNotUse;
class activity_task_MOpenEntry_DoNotUseDefaultTypeInternal;
extern activity_task_MOpenEntry_DoNotUseDefaultTypeInternal _activity_task_MOpenEntry_DoNotUse_default_instance_;
class brief_activityvalues;
class brief_activityvaluesDefaultTypeInternal;
extern brief_activityvaluesDefaultTypeInternal _brief_activityvalues_default_instance_;
class brief_activityvalues_MActivityRolegoldEntry_DoNotUse;
class brief_activityvalues_MActivityRolegoldEntry_DoNotUseDefaultTypeInternal;
extern brief_activityvalues_MActivityRolegoldEntry_DoNotUseDefaultTypeInternal _brief_activityvalues_MActivityRolegoldEntry_DoNotUse_default_instance_;
class brief_activityvalues_MActivityRolelvEntry_DoNotUse;
class brief_activityvalues_MActivityRolelvEntry_DoNotUseDefaultTypeInternal;
extern brief_activityvalues_MActivityRolelvEntry_DoNotUseDefaultTypeInternal _brief_activityvalues_MActivityRolelvEntry_DoNotUse_default_instance_;
class db_account;
class db_accountDefaultTypeInternal;
extern db_accountDefaultTypeInternal _db_account_default_instance_;
class db_activity;
class db_activityDefaultTypeInternal;
extern db_activityDefaultTypeInternal _db_activity_default_instance_;
class db_activity_MDrawcomplianceEntry_DoNotUse;
class db_activity_MDrawcomplianceEntry_DoNotUseDefaultTypeInternal;
extern db_activity_MDrawcomplianceEntry_DoNotUseDefaultTypeInternal _db_activity_MDrawcomplianceEntry_DoNotUse_default_instance_;
class db_activity_MTaskEntry_DoNotUse;
class db_activity_MTaskEntry_DoNotUseDefaultTypeInternal;
extern db_activity_MTaskEntry_DoNotUseDefaultTypeInternal _db_activity_MTaskEntry_DoNotUse_default_instance_;
class db_activitytimes;
class db_activitytimesDefaultTypeInternal;
extern db_activitytimesDefaultTypeInternal _db_activitytimes_default_instance_;
class db_bag;
class db_bagDefaultTypeInternal;
extern db_bagDefaultTypeInternal _db_bag_default_instance_;
class db_bag_MItemsEntry_DoNotUse;
class db_bag_MItemsEntry_DoNotUseDefaultTypeInternal;
extern db_bag_MItemsEntry_DoNotUseDefaultTypeInternal _db_bag_MItemsEntry_DoNotUse_default_instance_;
class db_brief;
class db_briefDefaultTypeInternal;
extern db_briefDefaultTypeInternal _db_brief_default_instance_;
class db_family;
class db_familyDefaultTypeInternal;
extern db_familyDefaultTypeInternal _db_family_default_instance_;
class db_familyer;
class db_familyerDefaultTypeInternal;
extern db_familyerDefaultTypeInternal _db_familyer_default_instance_;
class db_friends;
class db_friendsDefaultTypeInternal;
extern db_friendsDefaultTypeInternal _db_friends_default_instance_;
class db_keyvalue;
class db_keyvalueDefaultTypeInternal;
extern db_keyvalueDefaultTypeInternal _db_keyvalue_default_instance_;
class db_mail;
class db_mailDefaultTypeInternal;
extern db_mailDefaultTypeInternal _db_mail_default_instance_;
class db_mail_MMailEntry_DoNotUse;
class db_mail_MMailEntry_DoNotUseDefaultTypeInternal;
extern db_mail_MMailEntry_DoNotUseDefaultTypeInternal _db_mail_MMailEntry_DoNotUse_default_instance_;
class db_notice;
class db_noticeDefaultTypeInternal;
extern db_noticeDefaultTypeInternal _db_notice_default_instance_;
class db_ranklist;
class db_ranklistDefaultTypeInternal;
extern db_ranklistDefaultTypeInternal _db_ranklist_default_instance_;
class db_ranklist_MItemsEntry_DoNotUse;
class db_ranklist_MItemsEntry_DoNotUseDefaultTypeInternal;
extern db_ranklist_MItemsEntry_DoNotUseDefaultTypeInternal _db_ranklist_MItemsEntry_DoNotUse_default_instance_;
class db_role;
class db_roleDefaultTypeInternal;
extern db_roleDefaultTypeInternal _db_role_default_instance_;
class db_role_recharge;
class db_role_rechargeDefaultTypeInternal;
extern db_role_rechargeDefaultTypeInternal _db_role_recharge_default_instance_;
class db_rolekeyvalue;
class db_rolekeyvalueDefaultTypeInternal;
extern db_rolekeyvalueDefaultTypeInternal _db_rolekeyvalue_default_instance_;
class db_rolekeyvalue_MDataEntry_DoNotUse;
class db_rolekeyvalue_MDataEntry_DoNotUseDefaultTypeInternal;
extern db_rolekeyvalue_MDataEntry_DoNotUseDefaultTypeInternal _db_rolekeyvalue_MDataEntry_DoNotUse_default_instance_;
class db_task;
class db_taskDefaultTypeInternal;
extern db_taskDefaultTypeInternal _db_task_default_instance_;
class db_task_MCompleteddatasEntry_DoNotUse;
class db_task_MCompleteddatasEntry_DoNotUseDefaultTypeInternal;
extern db_task_MCompleteddatasEntry_DoNotUseDefaultTypeInternal _db_task_MCompleteddatasEntry_DoNotUse_default_instance_;
class db_task_MRundatasEntry_DoNotUse;
class db_task_MRundatasEntry_DoNotUseDefaultTypeInternal;
extern db_task_MRundatasEntry_DoNotUseDefaultTypeInternal _db_task_MRundatasEntry_DoNotUse_default_instance_;
class db_task_complete;
class db_task_completeDefaultTypeInternal;
extern db_task_completeDefaultTypeInternal _db_task_complete_default_instance_;
class db_task_data;
class db_task_dataDefaultTypeInternal;
extern db_task_dataDefaultTypeInternal _db_task_data_default_instance_;
class db_task_data_schedule;
class db_task_data_scheduleDefaultTypeInternal;
extern db_task_data_scheduleDefaultTypeInternal _db_task_data_schedule_default_instance_;
class dbcross_test;
class dbcross_testDefaultTypeInternal;
extern dbcross_testDefaultTypeInternal _dbcross_test_default_instance_;
class item;
class itemDefaultTypeInternal;
extern itemDefaultTypeInternal _item_default_instance_;
class mail;
class mailDefaultTypeInternal;
extern mailDefaultTypeInternal _mail_default_instance_;
class mailitem;
class mailitemDefaultTypeInternal;
extern mailitemDefaultTypeInternal _mailitem_default_instance_;
class rankitem;
class rankitemDefaultTypeInternal;
extern rankitemDefaultTypeInternal _rankitem_default_instance_;
}  // namespace pbdb
PROTOBUF_NAMESPACE_OPEN
template<> ::pbdb::activity_drawcompliance* Arena::CreateMaybeMessage<::pbdb::activity_drawcompliance>(Arena*);
template<> ::pbdb::activity_drawcompliance_MRewardEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::activity_drawcompliance_MRewardEntry_DoNotUse>(Arena*);
template<> ::pbdb::activity_task* Arena::CreateMaybeMessage<::pbdb::activity_task>(Arena*);
template<> ::pbdb::activity_task_MCloseEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::activity_task_MCloseEntry_DoNotUse>(Arena*);
template<> ::pbdb::activity_task_MOpenEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::activity_task_MOpenEntry_DoNotUse>(Arena*);
template<> ::pbdb::brief_activityvalues* Arena::CreateMaybeMessage<::pbdb::brief_activityvalues>(Arena*);
template<> ::pbdb::brief_activityvalues_MActivityRolegoldEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::brief_activityvalues_MActivityRolegoldEntry_DoNotUse>(Arena*);
template<> ::pbdb::brief_activityvalues_MActivityRolelvEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::brief_activityvalues_MActivityRolelvEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_account* Arena::CreateMaybeMessage<::pbdb::db_account>(Arena*);
template<> ::pbdb::db_activity* Arena::CreateMaybeMessage<::pbdb::db_activity>(Arena*);
template<> ::pbdb::db_activity_MDrawcomplianceEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_activity_MDrawcomplianceEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_activity_MTaskEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_activity_MTaskEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_activitytimes* Arena::CreateMaybeMessage<::pbdb::db_activitytimes>(Arena*);
template<> ::pbdb::db_bag* Arena::CreateMaybeMessage<::pbdb::db_bag>(Arena*);
template<> ::pbdb::db_bag_MItemsEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_bag_MItemsEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_brief* Arena::CreateMaybeMessage<::pbdb::db_brief>(Arena*);
template<> ::pbdb::db_family* Arena::CreateMaybeMessage<::pbdb::db_family>(Arena*);
template<> ::pbdb::db_familyer* Arena::CreateMaybeMessage<::pbdb::db_familyer>(Arena*);
template<> ::pbdb::db_friends* Arena::CreateMaybeMessage<::pbdb::db_friends>(Arena*);
template<> ::pbdb::db_keyvalue* Arena::CreateMaybeMessage<::pbdb::db_keyvalue>(Arena*);
template<> ::pbdb::db_mail* Arena::CreateMaybeMessage<::pbdb::db_mail>(Arena*);
template<> ::pbdb::db_mail_MMailEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_mail_MMailEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_notice* Arena::CreateMaybeMessage<::pbdb::db_notice>(Arena*);
template<> ::pbdb::db_ranklist* Arena::CreateMaybeMessage<::pbdb::db_ranklist>(Arena*);
template<> ::pbdb::db_ranklist_MItemsEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_ranklist_MItemsEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_role* Arena::CreateMaybeMessage<::pbdb::db_role>(Arena*);
template<> ::pbdb::db_role_recharge* Arena::CreateMaybeMessage<::pbdb::db_role_recharge>(Arena*);
template<> ::pbdb::db_rolekeyvalue* Arena::CreateMaybeMessage<::pbdb::db_rolekeyvalue>(Arena*);
template<> ::pbdb::db_rolekeyvalue_MDataEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_rolekeyvalue_MDataEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_task* Arena::CreateMaybeMessage<::pbdb::db_task>(Arena*);
template<> ::pbdb::db_task_MCompleteddatasEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_task_MCompleteddatasEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_task_MRundatasEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_task_MRundatasEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_task_complete* Arena::CreateMaybeMessage<::pbdb::db_task_complete>(Arena*);
template<> ::pbdb::db_task_data* Arena::CreateMaybeMessage<::pbdb::db_task_data>(Arena*);
template<> ::pbdb::db_task_data_schedule* Arena::CreateMaybeMessage<::pbdb::db_task_data_schedule>(Arena*);
template<> ::pbdb::dbcross_test* Arena::CreateMaybeMessage<::pbdb::dbcross_test>(Arena*);
template<> ::pbdb::item* Arena::CreateMaybeMessage<::pbdb::item>(Arena*);
template<> ::pbdb::mail* Arena::CreateMaybeMessage<::pbdb::mail>(Arena*);
template<> ::pbdb::mailitem* Arena::CreateMaybeMessage<::pbdb::mailitem>(Arena*);
template<> ::pbdb::rankitem* Arena::CreateMaybeMessage<::pbdb::rankitem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pbdb {

enum db_keyvalue_ekv : int {
  db_keyvalue_ekv_none = 0,
  db_keyvalue_ekv_account_ban = 1,
  db_keyvalue_ekv_open_server = 2,
  db_keyvalue_ekv_db_keyvalue_ekv_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  db_keyvalue_ekv_db_keyvalue_ekv_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool db_keyvalue_ekv_IsValid(int value);
constexpr db_keyvalue_ekv db_keyvalue_ekv_ekv_MIN = db_keyvalue_ekv_none;
constexpr db_keyvalue_ekv db_keyvalue_ekv_ekv_MAX = db_keyvalue_ekv_open_server;
constexpr int db_keyvalue_ekv_ekv_ARRAYSIZE = db_keyvalue_ekv_ekv_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* db_keyvalue_ekv_descriptor();
template<typename T>
inline const std::string& db_keyvalue_ekv_Name(T enum_t_value) {
  static_assert(::std::is_same<T, db_keyvalue_ekv>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function db_keyvalue_ekv_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    db_keyvalue_ekv_descriptor(), enum_t_value);
}
inline bool db_keyvalue_ekv_Parse(
    const std::string& name, db_keyvalue_ekv* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<db_keyvalue_ekv>(
    db_keyvalue_ekv_descriptor(), name, value);
}
enum db_familyer_eposition : int {
  db_familyer_eposition_none = 0,
  db_familyer_eposition_leader = 1,
  db_familyer_eposition_counsellor = 2,
  db_familyer_eposition_ordinary = 3,
  db_familyer_eposition_db_familyer_eposition_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  db_familyer_eposition_db_familyer_eposition_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool db_familyer_eposition_IsValid(int value);
constexpr db_familyer_eposition db_familyer_eposition_eposition_MIN = db_familyer_eposition_none;
constexpr db_familyer_eposition db_familyer_eposition_eposition_MAX = db_familyer_eposition_ordinary;
constexpr int db_familyer_eposition_eposition_ARRAYSIZE = db_familyer_eposition_eposition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* db_familyer_eposition_descriptor();
template<typename T>
inline const std::string& db_familyer_eposition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, db_familyer_eposition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function db_familyer_eposition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    db_familyer_eposition_descriptor(), enum_t_value);
}
inline bool db_familyer_eposition_Parse(
    const std::string& name, db_familyer_eposition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<db_familyer_eposition>(
    db_familyer_eposition_descriptor(), name, value);
}
enum ENUM_DB : int {
  ENUM_DB_ACCOUNT = 0,
  ENUM_DB_ROLE = 1,
  ENUM_DB_BRIEF = 2,
  ENUM_DB_BAG = 3,
  ENUM_DB_KEYVALUE = 4,
  ENUM_DB_MAIL = 5,
  ENUM_DB_NOTICE = 6,
  ENUM_DB_RANKLIST = 7,
  ENUM_DB_ACTIVITY = 8,
  ENUM_DB_ACTIVITYTIMES = 9,
  ENUM_DB_TASK = 10,
  ENUM_DB_ROLEKEYVALUE = 11,
  ENUM_DB_FAMILY = 12,
  ENUM_DB_FAMILYER = 13,
  ENUM_DB_FRIENDS = 14,
  ENUM_DB_COUNT = 15,
  ENUM_DBCROSS_TEST = 1001,
  ENUM_DB_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENUM_DB_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENUM_DB_IsValid(int value);
constexpr ENUM_DB ENUM_DB_MIN = ENUM_DB_ACCOUNT;
constexpr ENUM_DB ENUM_DB_MAX = ENUM_DBCROSS_TEST;
constexpr int ENUM_DB_ARRAYSIZE = ENUM_DB_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_DB_descriptor();
template<typename T>
inline const std::string& ENUM_DB_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENUM_DB>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENUM_DB_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENUM_DB_descriptor(), enum_t_value);
}
inline bool ENUM_DB_Parse(
    const std::string& name, ENUM_DB* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENUM_DB>(
    ENUM_DB_descriptor(), name, value);
}
enum eranklist : int {
  lv = 0,
  count = 1,
  activity_lv = 1000000,
  activity_gold = 2000000,
  eranklist_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eranklist_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eranklist_IsValid(int value);
constexpr eranklist eranklist_MIN = lv;
constexpr eranklist eranklist_MAX = activity_gold;
constexpr int eranklist_ARRAYSIZE = eranklist_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eranklist_descriptor();
template<typename T>
inline const std::string& eranklist_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eranklist>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eranklist_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eranklist_descriptor(), enum_t_value);
}
inline bool eranklist_Parse(
    const std::string& name, eranklist* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eranklist>(
    eranklist_descriptor(), name, value);
}
// ===================================================================

class db_account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_account) */ {
 public:
  inline db_account() : db_account(nullptr) {};
  virtual ~db_account();

  db_account(const db_account& from);
  db_account(db_account&& from) noexcept
    : db_account() {
    *this = ::std::move(from);
  }

  inline db_account& operator=(const db_account& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_account& operator=(db_account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_account* internal_default_instance() {
    return reinterpret_cast<const db_account*>(
               &_db_account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(db_account& a, db_account& b) {
    a.Swap(&b);
  }
  inline void Swap(db_account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_account* New() const final {
    return CreateMaybeMessage<db_account>(nullptr);
  }

  db_account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_account& from);
  void MergeFrom(const db_account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_account";
  }
  protected:
  explicit db_account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMAccountFieldNumber = 3,
    kMPassworldFieldNumber = 4,
    kMIdFieldNumber = 1,
    kMRoleidFieldNumber = 2,
    kMAreaFieldNumber = 5,
  };
  // string m_account = 3;
  bool has_m_account() const;
  private:
  bool _internal_has_m_account() const;
  public:
  void clear_m_account();
  const std::string& m_account() const;
  void set_m_account(const std::string& value);
  void set_m_account(std::string&& value);
  void set_m_account(const char* value);
  void set_m_account(const char* value, size_t size);
  std::string* mutable_m_account();
  std::string* release_m_account();
  void set_allocated_m_account(std::string* m_account);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_m_account();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_m_account(
      std::string* m_account);
  private:
  const std::string& _internal_m_account() const;
  void _internal_set_m_account(const std::string& value);
  std::string* _internal_mutable_m_account();
  public:

  // string m_passworld = 4;
  bool has_m_passworld() const;
  private:
  bool _internal_has_m_passworld() const;
  public:
  void clear_m_passworld();
  const std::string& m_passworld() const;
  void set_m_passworld(const std::string& value);
  void set_m_passworld(std::string&& value);
  void set_m_passworld(const char* value);
  void set_m_passworld(const char* value, size_t size);
  std::string* mutable_m_passworld();
  std::string* release_m_passworld();
  void set_allocated_m_passworld(std::string* m_passworld);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_m_passworld();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_m_passworld(
      std::string* m_passworld);
  private:
  const std::string& _internal_m_passworld() const;
  void _internal_set_m_passworld(const std::string& value);
  std::string* _internal_mutable_m_passworld();
  public:

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 m_roleid = 2;
  bool has_m_roleid() const;
  private:
  bool _internal_has_m_roleid() const;
  public:
  void clear_m_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid() const;
  void set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_roleid() const;
  void _internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_area = 5;
  bool has_m_area() const;
  private:
  bool _internal_has_m_area() const;
  public:
  void clear_m_area();
  ::PROTOBUF_NAMESPACE_ID::int32 m_area() const;
  void set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_area() const;
  void _internal_set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_passworld_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_area_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class brief_activityvalues_MActivityRolelvEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<brief_activityvalues_MActivityRolelvEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<brief_activityvalues_MActivityRolelvEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  brief_activityvalues_MActivityRolelvEntry_DoNotUse();
  brief_activityvalues_MActivityRolelvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const brief_activityvalues_MActivityRolelvEntry_DoNotUse& other);
  static const brief_activityvalues_MActivityRolelvEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const brief_activityvalues_MActivityRolelvEntry_DoNotUse*>(&_brief_activityvalues_MActivityRolelvEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class brief_activityvalues_MActivityRolegoldEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<brief_activityvalues_MActivityRolegoldEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<brief_activityvalues_MActivityRolegoldEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  brief_activityvalues_MActivityRolegoldEntry_DoNotUse();
  brief_activityvalues_MActivityRolegoldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const brief_activityvalues_MActivityRolegoldEntry_DoNotUse& other);
  static const brief_activityvalues_MActivityRolegoldEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const brief_activityvalues_MActivityRolegoldEntry_DoNotUse*>(&_brief_activityvalues_MActivityRolegoldEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class brief_activityvalues PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.brief_activityvalues) */ {
 public:
  inline brief_activityvalues() : brief_activityvalues(nullptr) {};
  virtual ~brief_activityvalues();

  brief_activityvalues(const brief_activityvalues& from);
  brief_activityvalues(brief_activityvalues&& from) noexcept
    : brief_activityvalues() {
    *this = ::std::move(from);
  }

  inline brief_activityvalues& operator=(const brief_activityvalues& from) {
    CopyFrom(from);
    return *this;
  }
  inline brief_activityvalues& operator=(brief_activityvalues&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const brief_activityvalues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const brief_activityvalues* internal_default_instance() {
    return reinterpret_cast<const brief_activityvalues*>(
               &_brief_activityvalues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(brief_activityvalues& a, brief_activityvalues& b) {
    a.Swap(&b);
  }
  inline void Swap(brief_activityvalues* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(brief_activityvalues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline brief_activityvalues* New() const final {
    return CreateMaybeMessage<brief_activityvalues>(nullptr);
  }

  brief_activityvalues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<brief_activityvalues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const brief_activityvalues& from);
  void MergeFrom(const brief_activityvalues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(brief_activityvalues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.brief_activityvalues";
  }
  protected:
  explicit brief_activityvalues(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMActivityRolelvFieldNumber = 1,
    kMActivityRolegoldFieldNumber = 2,
  };
  // map<int32, int32> m_activity_rolelv = 1;
  int m_activity_rolelv_size() const;
  private:
  int _internal_m_activity_rolelv_size() const;
  public:
  void clear_m_activity_rolelv();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_m_activity_rolelv() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_m_activity_rolelv();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      m_activity_rolelv() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_m_activity_rolelv();

  // map<int32, int32> m_activity_rolegold = 2;
  int m_activity_rolegold_size() const;
  private:
  int _internal_m_activity_rolegold_size() const;
  public:
  void clear_m_activity_rolegold();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_m_activity_rolegold() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_m_activity_rolegold();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      m_activity_rolegold() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_m_activity_rolegold();

  // @@protoc_insertion_point(class_scope:pbdb.brief_activityvalues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      brief_activityvalues_MActivityRolelvEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > m_activity_rolelv_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      brief_activityvalues_MActivityRolegoldEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > m_activity_rolegold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_brief PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_brief) */ {
 public:
  inline db_brief() : db_brief(nullptr) {};
  virtual ~db_brief();

  db_brief(const db_brief& from);
  db_brief(db_brief&& from) noexcept
    : db_brief() {
    *this = ::std::move(from);
  }

  inline db_brief& operator=(const db_brief& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_brief& operator=(db_brief&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_brief& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_brief* internal_default_instance() {
    return reinterpret_cast<const db_brief*>(
               &_db_brief_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(db_brief& a, db_brief& b) {
    a.Swap(&b);
  }
  inline void Swap(db_brief* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_brief* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_brief* New() const final {
    return CreateMaybeMessage<db_brief>(nullptr);
  }

  db_brief* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_brief>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_brief& from);
  void MergeFrom(const db_brief& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_brief* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_brief";
  }
  protected:
  explicit db_brief(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMNameFieldNumber = 2,
    kMActivityvaluesFieldNumber = 9,
    kMIdFieldNumber = 1,
    kMLvFieldNumber = 3,
    kMMoneygoldFieldNumber = 4,
    kMMoneysilverFieldNumber = 5,
    kMVipFieldNumber = 6,
    kMNotalkutcFieldNumber = 7,
    kMCreateutcFieldNumber = 8,
  };
  // string m_name = 2;
  bool has_m_name() const;
  private:
  bool _internal_has_m_name() const;
  public:
  void clear_m_name();
  const std::string& m_name() const;
  void set_m_name(const std::string& value);
  void set_m_name(std::string&& value);
  void set_m_name(const char* value);
  void set_m_name(const char* value, size_t size);
  std::string* mutable_m_name();
  std::string* release_m_name();
  void set_allocated_m_name(std::string* m_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_m_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_m_name(
      std::string* m_name);
  private:
  const std::string& _internal_m_name() const;
  void _internal_set_m_name(const std::string& value);
  std::string* _internal_mutable_m_name();
  public:

  // .pbdb.brief_activityvalues m_activityvalues = 9;
  bool has_m_activityvalues() const;
  private:
  bool _internal_has_m_activityvalues() const;
  public:
  void clear_m_activityvalues();
  const ::pbdb::brief_activityvalues& m_activityvalues() const;
  ::pbdb::brief_activityvalues* release_m_activityvalues();
  ::pbdb::brief_activityvalues* mutable_m_activityvalues();
  void set_allocated_m_activityvalues(::pbdb::brief_activityvalues* m_activityvalues);
  private:
  const ::pbdb::brief_activityvalues& _internal_m_activityvalues() const;
  ::pbdb::brief_activityvalues* _internal_mutable_m_activityvalues();
  public:
  void unsafe_arena_set_allocated_m_activityvalues(
      ::pbdb::brief_activityvalues* m_activityvalues);
  ::pbdb::brief_activityvalues* unsafe_arena_release_m_activityvalues();

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_lv = 3;
  bool has_m_lv() const;
  private:
  bool _internal_has_m_lv() const;
  public:
  void clear_m_lv();
  ::PROTOBUF_NAMESPACE_ID::int32 m_lv() const;
  void set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_lv() const;
  void _internal_set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_moneygold = 4;
  bool has_m_moneygold() const;
  private:
  bool _internal_has_m_moneygold() const;
  public:
  void clear_m_moneygold();
  ::PROTOBUF_NAMESPACE_ID::int32 m_moneygold() const;
  void set_m_moneygold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_moneygold() const;
  void _internal_set_m_moneygold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_moneysilver = 5;
  bool has_m_moneysilver() const;
  private:
  bool _internal_has_m_moneysilver() const;
  public:
  void clear_m_moneysilver();
  ::PROTOBUF_NAMESPACE_ID::int32 m_moneysilver() const;
  void set_m_moneysilver(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_moneysilver() const;
  void _internal_set_m_moneysilver(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_vip = 6;
  bool has_m_vip() const;
  private:
  bool _internal_has_m_vip() const;
  public:
  void clear_m_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 m_vip() const;
  void set_m_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_vip() const;
  void _internal_set_m_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_notalkutc = 7;
  bool has_m_notalkutc() const;
  private:
  bool _internal_has_m_notalkutc() const;
  public:
  void clear_m_notalkutc();
  ::PROTOBUF_NAMESPACE_ID::int32 m_notalkutc() const;
  void set_m_notalkutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_notalkutc() const;
  void _internal_set_m_notalkutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_createutc = 8;
  bool has_m_createutc() const;
  private:
  bool _internal_has_m_createutc() const;
  public:
  void clear_m_createutc();
  ::PROTOBUF_NAMESPACE_ID::int32 m_createutc() const;
  void set_m_createutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_createutc() const;
  void _internal_set_m_createutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_brief)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_name_;
  ::pbdb::brief_activityvalues* m_activityvalues_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_lv_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_moneygold_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_moneysilver_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_notalkutc_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_createutc_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_role_recharge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_role.recharge) */ {
 public:
  inline db_role_recharge() : db_role_recharge(nullptr) {};
  virtual ~db_role_recharge();

  db_role_recharge(const db_role_recharge& from);
  db_role_recharge(db_role_recharge&& from) noexcept
    : db_role_recharge() {
    *this = ::std::move(from);
  }

  inline db_role_recharge& operator=(const db_role_recharge& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_role_recharge& operator=(db_role_recharge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_role_recharge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_role_recharge* internal_default_instance() {
    return reinterpret_cast<const db_role_recharge*>(
               &_db_role_recharge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(db_role_recharge& a, db_role_recharge& b) {
    a.Swap(&b);
  }
  inline void Swap(db_role_recharge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_role_recharge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_role_recharge* New() const final {
    return CreateMaybeMessage<db_role_recharge>(nullptr);
  }

  db_role_recharge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_role_recharge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_role_recharge& from);
  void MergeFrom(const db_role_recharge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_role_recharge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_role.recharge";
  }
  protected:
  explicit db_role_recharge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRechargeidFieldNumber = 1,
    kMUtcFieldNumber = 2,
  };
  // int32 m_rechargeid = 1;
  bool has_m_rechargeid() const;
  private:
  bool _internal_has_m_rechargeid() const;
  public:
  void clear_m_rechargeid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_rechargeid() const;
  void set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_rechargeid() const;
  void _internal_set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_utc = 2;
  bool has_m_utc() const;
  private:
  bool _internal_has_m_utc() const;
  public:
  void clear_m_utc();
  ::PROTOBUF_NAMESPACE_ID::int32 m_utc() const;
  void set_m_utc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_utc() const;
  void _internal_set_m_utc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_role.recharge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_rechargeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_utc_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_role PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_role) */ {
 public:
  inline db_role() : db_role(nullptr) {};
  virtual ~db_role();

  db_role(const db_role& from);
  db_role(db_role&& from) noexcept
    : db_role() {
    *this = ::std::move(from);
  }

  inline db_role& operator=(const db_role& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_role& operator=(db_role&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_role* internal_default_instance() {
    return reinterpret_cast<const db_role*>(
               &_db_role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(db_role& a, db_role& b) {
    a.Swap(&b);
  }
  inline void Swap(db_role* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_role* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_role* New() const final {
    return CreateMaybeMessage<db_role>(nullptr);
  }

  db_role* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_role>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_role& from);
  void MergeFrom(const db_role& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_role* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_role";
  }
  protected:
  explicit db_role(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef db_role_recharge recharge;

  // accessors -------------------------------------------------------

  enum : int {
    kMRechargeFieldNumber = 3,
    kMBaseFieldNumber = 2,
    kMIdFieldNumber = 1,
  };
  // repeated .pbdb.db_role.recharge m_recharge = 3;
  int m_recharge_size() const;
  private:
  int _internal_m_recharge_size() const;
  public:
  void clear_m_recharge();
  ::pbdb::db_role_recharge* mutable_m_recharge(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_role_recharge >*
      mutable_m_recharge();
  private:
  const ::pbdb::db_role_recharge& _internal_m_recharge(int index) const;
  ::pbdb::db_role_recharge* _internal_add_m_recharge();
  public:
  const ::pbdb::db_role_recharge& m_recharge(int index) const;
  ::pbdb::db_role_recharge* add_m_recharge();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_role_recharge >&
      m_recharge() const;

  // .pbdb.db_brief m_base = 2;
  bool has_m_base() const;
  private:
  bool _internal_has_m_base() const;
  public:
  void clear_m_base();
  const ::pbdb::db_brief& m_base() const;
  ::pbdb::db_brief* release_m_base();
  ::pbdb::db_brief* mutable_m_base();
  void set_allocated_m_base(::pbdb::db_brief* m_base);
  private:
  const ::pbdb::db_brief& _internal_m_base() const;
  ::pbdb::db_brief* _internal_mutable_m_base();
  public:
  void unsafe_arena_set_allocated_m_base(
      ::pbdb::db_brief* m_base);
  ::pbdb::db_brief* unsafe_arena_release_m_base();

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_role)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_role_recharge > m_recharge_;
  ::pbdb::db_brief* m_base_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.item) */ {
 public:
  inline item() : item(nullptr) {};
  virtual ~item();

  item(const item& from);
  item(item&& from) noexcept
    : item() {
    *this = ::std::move(from);
  }

  inline item& operator=(const item& from) {
    CopyFrom(from);
    return *this;
  }
  inline item& operator=(item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const item* internal_default_instance() {
    return reinterpret_cast<const item*>(
               &_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(item& a, item& b) {
    a.Swap(&b);
  }
  inline void Swap(item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline item* New() const final {
    return CreateMaybeMessage<item>(nullptr);
  }

  item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const item& from);
  void MergeFrom(const item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.item";
  }
  protected:
  explicit item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMIdFieldNumber = 1,
    kMTidFieldNumber = 2,
    kMCountFieldNumber = 3,
    kMLvFieldNumber = 4,
    kMStarFieldNumber = 5,
  };
  // int32 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int32 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_tid = 2;
  bool has_m_tid() const;
  private:
  bool _internal_has_m_tid() const;
  public:
  void clear_m_tid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_tid() const;
  void set_m_tid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_tid() const;
  void _internal_set_m_tid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_count = 3;
  bool has_m_count() const;
  private:
  bool _internal_has_m_count() const;
  public:
  void clear_m_count();
  ::PROTOBUF_NAMESPACE_ID::int32 m_count() const;
  void set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_count() const;
  void _internal_set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_lv = 4;
  bool has_m_lv() const;
  private:
  bool _internal_has_m_lv() const;
  public:
  void clear_m_lv();
  ::PROTOBUF_NAMESPACE_ID::int32 m_lv() const;
  void set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_lv() const;
  void _internal_set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_star = 5;
  bool has_m_star() const;
  private:
  bool _internal_has_m_star() const;
  public:
  void clear_m_star();
  ::PROTOBUF_NAMESPACE_ID::int32 m_star() const;
  void set_m_star(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_star() const;
  void _internal_set_m_star(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_tid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_lv_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_star_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_bag_MItemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_bag_MItemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_bag_MItemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_bag_MItemsEntry_DoNotUse();
  db_bag_MItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_bag_MItemsEntry_DoNotUse& other);
  static const db_bag_MItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_bag_MItemsEntry_DoNotUse*>(&_db_bag_MItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class db_bag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_bag) */ {
 public:
  inline db_bag() : db_bag(nullptr) {};
  virtual ~db_bag();

  db_bag(const db_bag& from);
  db_bag(db_bag&& from) noexcept
    : db_bag() {
    *this = ::std::move(from);
  }

  inline db_bag& operator=(const db_bag& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_bag& operator=(db_bag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_bag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_bag* internal_default_instance() {
    return reinterpret_cast<const db_bag*>(
               &_db_bag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(db_bag& a, db_bag& b) {
    a.Swap(&b);
  }
  inline void Swap(db_bag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_bag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_bag* New() const final {
    return CreateMaybeMessage<db_bag>(nullptr);
  }

  db_bag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_bag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_bag& from);
  void MergeFrom(const db_bag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_bag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_bag";
  }
  protected:
  explicit db_bag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMItemsFieldNumber = 2,
    kMIdFieldNumber = 1,
    kMMaxidFieldNumber = 3,
  };
  // map<int32, .pbdb.item> m_items = 2;
  int m_items_size() const;
  private:
  int _internal_m_items_size() const;
  public:
  void clear_m_items();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >&
      _internal_m_items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >*
      _internal_mutable_m_items();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >&
      m_items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >*
      mutable_m_items();

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_maxid = 3;
  bool has_m_maxid() const;
  private:
  bool _internal_has_m_maxid() const;
  public:
  void clear_m_maxid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_maxid() const;
  void set_m_maxid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_maxid() const;
  void _internal_set_m_maxid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_bag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_bag_MItemsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > m_items_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_maxid_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_keyvalue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_keyvalue) */ {
 public:
  inline db_keyvalue() : db_keyvalue(nullptr) {};
  virtual ~db_keyvalue();

  db_keyvalue(const db_keyvalue& from);
  db_keyvalue(db_keyvalue&& from) noexcept
    : db_keyvalue() {
    *this = ::std::move(from);
  }

  inline db_keyvalue& operator=(const db_keyvalue& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_keyvalue& operator=(db_keyvalue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_keyvalue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_keyvalue* internal_default_instance() {
    return reinterpret_cast<const db_keyvalue*>(
               &_db_keyvalue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(db_keyvalue& a, db_keyvalue& b) {
    a.Swap(&b);
  }
  inline void Swap(db_keyvalue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_keyvalue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_keyvalue* New() const final {
    return CreateMaybeMessage<db_keyvalue>(nullptr);
  }

  db_keyvalue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_keyvalue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_keyvalue& from);
  void MergeFrom(const db_keyvalue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_keyvalue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_keyvalue";
  }
  protected:
  explicit db_keyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef db_keyvalue_ekv ekv;
  static constexpr ekv none =
    db_keyvalue_ekv_none;
  static constexpr ekv account_ban =
    db_keyvalue_ekv_account_ban;
  static constexpr ekv open_server =
    db_keyvalue_ekv_open_server;
  static inline bool ekv_IsValid(int value) {
    return db_keyvalue_ekv_IsValid(value);
  }
  static constexpr ekv ekv_MIN =
    db_keyvalue_ekv_ekv_MIN;
  static constexpr ekv ekv_MAX =
    db_keyvalue_ekv_ekv_MAX;
  static constexpr int ekv_ARRAYSIZE =
    db_keyvalue_ekv_ekv_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ekv_descriptor() {
    return db_keyvalue_ekv_descriptor();
  }
  template<typename T>
  static inline const std::string& ekv_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ekv>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ekv_Name.");
    return db_keyvalue_ekv_Name(enum_t_value);
  }
  static inline bool ekv_Parse(const std::string& name,
      ekv* value) {
    return db_keyvalue_ekv_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMValueFieldNumber = 2,
    kMIdFieldNumber = 1,
  };
  // string m_value = 2;
  bool has_m_value() const;
  private:
  bool _internal_has_m_value() const;
  public:
  void clear_m_value();
  const std::string& m_value() const;
  void set_m_value(const std::string& value);
  void set_m_value(std::string&& value);
  void set_m_value(const char* value);
  void set_m_value(const char* value, size_t size);
  std::string* mutable_m_value();
  std::string* release_m_value();
  void set_allocated_m_value(std::string* m_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_m_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_m_value(
      std::string* m_value);
  private:
  const std::string& _internal_m_value() const;
  void _internal_set_m_value(const std::string& value);
  std::string* _internal_mutable_m_value();
  public:

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_keyvalue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_rolekeyvalue_MDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_rolekeyvalue_MDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_rolekeyvalue_MDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  db_rolekeyvalue_MDataEntry_DoNotUse();
  db_rolekeyvalue_MDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_rolekeyvalue_MDataEntry_DoNotUse& other);
  static const db_rolekeyvalue_MDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_rolekeyvalue_MDataEntry_DoNotUse*>(&_db_rolekeyvalue_MDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pbdb.db_rolekeyvalue.MDataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pbdb.db_rolekeyvalue.MDataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class db_rolekeyvalue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_rolekeyvalue) */ {
 public:
  inline db_rolekeyvalue() : db_rolekeyvalue(nullptr) {};
  virtual ~db_rolekeyvalue();

  db_rolekeyvalue(const db_rolekeyvalue& from);
  db_rolekeyvalue(db_rolekeyvalue&& from) noexcept
    : db_rolekeyvalue() {
    *this = ::std::move(from);
  }

  inline db_rolekeyvalue& operator=(const db_rolekeyvalue& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_rolekeyvalue& operator=(db_rolekeyvalue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_rolekeyvalue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_rolekeyvalue* internal_default_instance() {
    return reinterpret_cast<const db_rolekeyvalue*>(
               &_db_rolekeyvalue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(db_rolekeyvalue& a, db_rolekeyvalue& b) {
    a.Swap(&b);
  }
  inline void Swap(db_rolekeyvalue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_rolekeyvalue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_rolekeyvalue* New() const final {
    return CreateMaybeMessage<db_rolekeyvalue>(nullptr);
  }

  db_rolekeyvalue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_rolekeyvalue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_rolekeyvalue& from);
  void MergeFrom(const db_rolekeyvalue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_rolekeyvalue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_rolekeyvalue";
  }
  protected:
  explicit db_rolekeyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMDataFieldNumber = 2,
    kMIdFieldNumber = 1,
  };
  // map<string, string> m_data = 2;
  int m_data_size() const;
  private:
  int _internal_m_data_size() const;
  public:
  void clear_m_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_m_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_m_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      m_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_m_data();

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_rolekeyvalue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_rolekeyvalue_MDataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > m_data_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class mailitem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.mailitem) */ {
 public:
  inline mailitem() : mailitem(nullptr) {};
  virtual ~mailitem();

  mailitem(const mailitem& from);
  mailitem(mailitem&& from) noexcept
    : mailitem() {
    *this = ::std::move(from);
  }

  inline mailitem& operator=(const mailitem& from) {
    CopyFrom(from);
    return *this;
  }
  inline mailitem& operator=(mailitem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mailitem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mailitem* internal_default_instance() {
    return reinterpret_cast<const mailitem*>(
               &_mailitem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(mailitem& a, mailitem& b) {
    a.Swap(&b);
  }
  inline void Swap(mailitem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mailitem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mailitem* New() const final {
    return CreateMaybeMessage<mailitem>(nullptr);
  }

  mailitem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mailitem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mailitem& from);
  void MergeFrom(const mailitem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mailitem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.mailitem";
  }
  protected:
  explicit mailitem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMItemtidFieldNumber = 1,
    kMCountFieldNumber = 2,
  };
  // int32 m_itemtid = 1;
  bool has_m_itemtid() const;
  private:
  bool _internal_has_m_itemtid() const;
  public:
  void clear_m_itemtid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_itemtid() const;
  void set_m_itemtid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_itemtid() const;
  void _internal_set_m_itemtid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_count = 2;
  bool has_m_count() const;
  private:
  bool _internal_has_m_count() const;
  public:
  void clear_m_count();
  ::PROTOBUF_NAMESPACE_ID::int32 m_count() const;
  void set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_count() const;
  void _internal_set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.mailitem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_itemtid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_count_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class mail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.mail) */ {
 public:
  inline mail() : mail(nullptr) {};
  virtual ~mail();

  mail(const mail& from);
  mail(mail&& from) noexcept
    : mail() {
    *this = ::std::move(from);
  }

  inline mail& operator=(const mail& from) {
    CopyFrom(from);
    return *this;
  }
  inline mail& operator=(mail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mail* internal_default_instance() {
    return reinterpret_cast<const mail*>(
               &_mail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(mail& a, mail& b) {
    a.Swap(&b);
  }
  inline void Swap(mail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mail* New() const final {
    return CreateMaybeMessage<mail>(nullptr);
  }

  mail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mail& from);
  void MergeFrom(const mail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.mail";
  }
  protected:
  explicit mail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMItemsFieldNumber = 6,
    kMPramsFieldNumber = 4,
    kMContentFieldNumber = 5,
    kMIdFieldNumber = 1,
    kMCreateutcFieldNumber = 2,
    kMTidFieldNumber = 3,
    kMReadFieldNumber = 7,
    kMDrawFieldNumber = 8,
  };
  // repeated .pbdb.mailitem m_items = 6;
  int m_items_size() const;
  private:
  int _internal_m_items_size() const;
  public:
  void clear_m_items();
  ::pbdb::mailitem* mutable_m_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::mailitem >*
      mutable_m_items();
  private:
  const ::pbdb::mailitem& _internal_m_items(int index) const;
  ::pbdb::mailitem* _internal_add_m_items();
  public:
  const ::pbdb::mailitem& m_items(int index) const;
  ::pbdb::mailitem* add_m_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::mailitem >&
      m_items() const;

  // string m_prams = 4;
  bool has_m_prams() const;
  private:
  bool _internal_has_m_prams() const;
  public:
  void clear_m_prams();
  const std::string& m_prams() const;
  void set_m_prams(const std::string& value);
  void set_m_prams(std::string&& value);
  void set_m_prams(const char* value);
  void set_m_prams(const char* value, size_t size);
  std::string* mutable_m_prams();
  std::string* release_m_prams();
  void set_allocated_m_prams(std::string* m_prams);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_m_prams();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_m_prams(
      std::string* m_prams);
  private:
  const std::string& _internal_m_prams() const;
  void _internal_set_m_prams(const std::string& value);
  std::string* _internal_mutable_m_prams();
  public:

  // string m_content = 5;
  bool has_m_content() const;
  private:
  bool _internal_has_m_content() const;
  public:
  void clear_m_content();
  const std::string& m_content() const;
  void set_m_content(const std::string& value);
  void set_m_content(std::string&& value);
  void set_m_content(const char* value);
  void set_m_content(const char* value, size_t size);
  std::string* mutable_m_content();
  std::string* release_m_content();
  void set_allocated_m_content(std::string* m_content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_m_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_m_content(
      std::string* m_content);
  private:
  const std::string& _internal_m_content() const;
  void _internal_set_m_content(const std::string& value);
  std::string* _internal_mutable_m_content();
  public:

  // int32 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int32 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_createutc = 2;
  bool has_m_createutc() const;
  private:
  bool _internal_has_m_createutc() const;
  public:
  void clear_m_createutc();
  ::PROTOBUF_NAMESPACE_ID::int32 m_createutc() const;
  void set_m_createutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_createutc() const;
  void _internal_set_m_createutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_tid = 3;
  bool has_m_tid() const;
  private:
  bool _internal_has_m_tid() const;
  public:
  void clear_m_tid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_tid() const;
  void set_m_tid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_tid() const;
  void _internal_set_m_tid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool m_read = 7;
  bool has_m_read() const;
  private:
  bool _internal_has_m_read() const;
  public:
  void clear_m_read();
  bool m_read() const;
  void set_m_read(bool value);
  private:
  bool _internal_m_read() const;
  void _internal_set_m_read(bool value);
  public:

  // bool m_draw = 8;
  bool has_m_draw() const;
  private:
  bool _internal_has_m_draw() const;
  public:
  void clear_m_draw();
  bool m_draw() const;
  void set_m_draw(bool value);
  private:
  bool _internal_m_draw() const;
  void _internal_set_m_draw(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.mail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::mailitem > m_items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_prams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_content_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_createutc_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_tid_;
  bool m_read_;
  bool m_draw_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_mail_MMailEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_mail_MMailEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_mail_MMailEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_mail_MMailEntry_DoNotUse();
  db_mail_MMailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_mail_MMailEntry_DoNotUse& other);
  static const db_mail_MMailEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_mail_MMailEntry_DoNotUse*>(&_db_mail_MMailEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[15];
  }

  public:
};

// -------------------------------------------------------------------

class db_mail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_mail) */ {
 public:
  inline db_mail() : db_mail(nullptr) {};
  virtual ~db_mail();

  db_mail(const db_mail& from);
  db_mail(db_mail&& from) noexcept
    : db_mail() {
    *this = ::std::move(from);
  }

  inline db_mail& operator=(const db_mail& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_mail& operator=(db_mail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_mail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_mail* internal_default_instance() {
    return reinterpret_cast<const db_mail*>(
               &_db_mail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(db_mail& a, db_mail& b) {
    a.Swap(&b);
  }
  inline void Swap(db_mail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_mail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_mail* New() const final {
    return CreateMaybeMessage<db_mail>(nullptr);
  }

  db_mail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_mail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_mail& from);
  void MergeFrom(const db_mail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_mail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_mail";
  }
  protected:
  explicit db_mail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMMailFieldNumber = 2,
    kMIdFieldNumber = 1,
  };
  // map<int32, .pbdb.mail> m_mail = 2;
  int m_mail_size() const;
  private:
  int _internal_m_mail_size() const;
  public:
  void clear_m_mail();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
      _internal_m_mail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
      _internal_mutable_m_mail();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
      m_mail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
      mutable_m_mail();

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_mail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_mail_MMailEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > m_mail_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_notice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_notice) */ {
 public:
  inline db_notice() : db_notice(nullptr) {};
  virtual ~db_notice();

  db_notice(const db_notice& from);
  db_notice(db_notice&& from) noexcept
    : db_notice() {
    *this = ::std::move(from);
  }

  inline db_notice& operator=(const db_notice& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_notice& operator=(db_notice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_notice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_notice* internal_default_instance() {
    return reinterpret_cast<const db_notice*>(
               &_db_notice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(db_notice& a, db_notice& b) {
    a.Swap(&b);
  }
  inline void Swap(db_notice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_notice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_notice* New() const final {
    return CreateMaybeMessage<db_notice>(nullptr);
  }

  db_notice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_notice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_notice& from);
  void MergeFrom(const db_notice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_notice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_notice";
  }
  protected:
  explicit db_notice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMNoticeFieldNumber = 2,
    kMIdFieldNumber = 1,
    kMStarttimeFieldNumber = 3,
    kMFinishtimeFieldNumber = 4,
  };
  // string m_notice = 2;
  bool has_m_notice() const;
  private:
  bool _internal_has_m_notice() const;
  public:
  void clear_m_notice();
  const std::string& m_notice() const;
  void set_m_notice(const std::string& value);
  void set_m_notice(std::string&& value);
  void set_m_notice(const char* value);
  void set_m_notice(const char* value, size_t size);
  std::string* mutable_m_notice();
  std::string* release_m_notice();
  void set_allocated_m_notice(std::string* m_notice);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_m_notice();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_m_notice(
      std::string* m_notice);
  private:
  const std::string& _internal_m_notice() const;
  void _internal_set_m_notice(const std::string& value);
  std::string* _internal_mutable_m_notice();
  public:

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_starttime = 3;
  bool has_m_starttime() const;
  private:
  bool _internal_has_m_starttime() const;
  public:
  void clear_m_starttime();
  ::PROTOBUF_NAMESPACE_ID::int32 m_starttime() const;
  void set_m_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_starttime() const;
  void _internal_set_m_starttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_finishtime = 4;
  bool has_m_finishtime() const;
  private:
  bool _internal_has_m_finishtime() const;
  public:
  void clear_m_finishtime();
  ::PROTOBUF_NAMESPACE_ID::int32 m_finishtime() const;
  void set_m_finishtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_finishtime() const;
  void _internal_set_m_finishtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_notice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_notice_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_starttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_finishtime_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class rankitem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.rankitem) */ {
 public:
  inline rankitem() : rankitem(nullptr) {};
  virtual ~rankitem();

  rankitem(const rankitem& from);
  rankitem(rankitem&& from) noexcept
    : rankitem() {
    *this = ::std::move(from);
  }

  inline rankitem& operator=(const rankitem& from) {
    CopyFrom(from);
    return *this;
  }
  inline rankitem& operator=(rankitem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rankitem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rankitem* internal_default_instance() {
    return reinterpret_cast<const rankitem*>(
               &_rankitem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(rankitem& a, rankitem& b) {
    a.Swap(&b);
  }
  inline void Swap(rankitem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rankitem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rankitem* New() const final {
    return CreateMaybeMessage<rankitem>(nullptr);
  }

  rankitem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rankitem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rankitem& from);
  void MergeFrom(const rankitem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rankitem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.rankitem";
  }
  protected:
  explicit rankitem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMValueFieldNumber = 1,
    kMTimeFieldNumber = 2,
  };
  // int64 m_value = 1;
  bool has_m_value() const;
  private:
  bool _internal_has_m_value() const;
  public:
  void clear_m_value();
  ::PROTOBUF_NAMESPACE_ID::int64 m_value() const;
  void set_m_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_value() const;
  void _internal_set_m_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_time = 2;
  bool has_m_time() const;
  private:
  bool _internal_has_m_time() const;
  public:
  void clear_m_time();
  ::PROTOBUF_NAMESPACE_ID::int32 m_time() const;
  void set_m_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_time() const;
  void _internal_set_m_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.rankitem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_time_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_ranklist_MItemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_ranklist_MItemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_ranklist_MItemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_ranklist_MItemsEntry_DoNotUse();
  db_ranklist_MItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_ranklist_MItemsEntry_DoNotUse& other);
  static const db_ranklist_MItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_ranklist_MItemsEntry_DoNotUse*>(&_db_ranklist_MItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[19];
  }

  public:
};

// -------------------------------------------------------------------

class db_ranklist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_ranklist) */ {
 public:
  inline db_ranklist() : db_ranklist(nullptr) {};
  virtual ~db_ranklist();

  db_ranklist(const db_ranklist& from);
  db_ranklist(db_ranklist&& from) noexcept
    : db_ranklist() {
    *this = ::std::move(from);
  }

  inline db_ranklist& operator=(const db_ranklist& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_ranklist& operator=(db_ranklist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_ranklist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_ranklist* internal_default_instance() {
    return reinterpret_cast<const db_ranklist*>(
               &_db_ranklist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(db_ranklist& a, db_ranklist& b) {
    a.Swap(&b);
  }
  inline void Swap(db_ranklist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_ranklist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_ranklist* New() const final {
    return CreateMaybeMessage<db_ranklist>(nullptr);
  }

  db_ranklist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_ranklist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_ranklist& from);
  void MergeFrom(const db_ranklist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_ranklist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_ranklist";
  }
  protected:
  explicit db_ranklist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMItemsFieldNumber = 2,
    kMIdFieldNumber = 1,
  };
  // map<int32, .pbdb.rankitem> m_items = 2;
  int m_items_size() const;
  private:
  int _internal_m_items_size() const;
  public:
  void clear_m_items();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >&
      _internal_m_items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >*
      _internal_mutable_m_items();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >&
      m_items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >*
      mutable_m_items();

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_ranklist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_ranklist_MItemsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > m_items_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_activitytimes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_activitytimes) */ {
 public:
  inline db_activitytimes() : db_activitytimes(nullptr) {};
  virtual ~db_activitytimes();

  db_activitytimes(const db_activitytimes& from);
  db_activitytimes(db_activitytimes&& from) noexcept
    : db_activitytimes() {
    *this = ::std::move(from);
  }

  inline db_activitytimes& operator=(const db_activitytimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_activitytimes& operator=(db_activitytimes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_activitytimes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_activitytimes* internal_default_instance() {
    return reinterpret_cast<const db_activitytimes*>(
               &_db_activitytimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(db_activitytimes& a, db_activitytimes& b) {
    a.Swap(&b);
  }
  inline void Swap(db_activitytimes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_activitytimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_activitytimes* New() const final {
    return CreateMaybeMessage<db_activitytimes>(nullptr);
  }

  db_activitytimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_activitytimes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_activitytimes& from);
  void MergeFrom(const db_activitytimes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_activitytimes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_activitytimes";
  }
  protected:
  explicit db_activitytimes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMIdFieldNumber = 1,
    kMBegFieldNumber = 2,
    kMDurationFieldNumber = 3,
    kMStartFieldNumber = 4,
    kMFinishFieldNumber = 5,
  };
  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_beg = 2;
  bool has_m_beg() const;
  private:
  bool _internal_has_m_beg() const;
  public:
  void clear_m_beg();
  ::PROTOBUF_NAMESPACE_ID::int32 m_beg() const;
  void set_m_beg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_beg() const;
  void _internal_set_m_beg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_duration = 3;
  bool has_m_duration() const;
  private:
  bool _internal_has_m_duration() const;
  public:
  void clear_m_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 m_duration() const;
  void set_m_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_duration() const;
  void _internal_set_m_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool m_start = 4;
  bool has_m_start() const;
  private:
  bool _internal_has_m_start() const;
  public:
  void clear_m_start();
  bool m_start() const;
  void set_m_start(bool value);
  private:
  bool _internal_m_start() const;
  void _internal_set_m_start(bool value);
  public:

  // bool m_finish = 5;
  bool has_m_finish() const;
  private:
  bool _internal_has_m_finish() const;
  public:
  void clear_m_finish();
  bool m_finish() const;
  void set_m_finish(bool value);
  private:
  bool _internal_m_finish() const;
  void _internal_set_m_finish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_activitytimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_beg_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_duration_;
  bool m_start_;
  bool m_finish_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class activity_task_MOpenEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<activity_task_MOpenEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<activity_task_MOpenEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  activity_task_MOpenEntry_DoNotUse();
  activity_task_MOpenEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const activity_task_MOpenEntry_DoNotUse& other);
  static const activity_task_MOpenEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const activity_task_MOpenEntry_DoNotUse*>(&_activity_task_MOpenEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[22];
  }

  public:
};

// -------------------------------------------------------------------

class activity_task_MCloseEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<activity_task_MCloseEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<activity_task_MCloseEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  activity_task_MCloseEntry_DoNotUse();
  activity_task_MCloseEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const activity_task_MCloseEntry_DoNotUse& other);
  static const activity_task_MCloseEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const activity_task_MCloseEntry_DoNotUse*>(&_activity_task_MCloseEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[23];
  }

  public:
};

// -------------------------------------------------------------------

class activity_task PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.activity_task) */ {
 public:
  inline activity_task() : activity_task(nullptr) {};
  virtual ~activity_task();

  activity_task(const activity_task& from);
  activity_task(activity_task&& from) noexcept
    : activity_task() {
    *this = ::std::move(from);
  }

  inline activity_task& operator=(const activity_task& from) {
    CopyFrom(from);
    return *this;
  }
  inline activity_task& operator=(activity_task&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const activity_task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const activity_task* internal_default_instance() {
    return reinterpret_cast<const activity_task*>(
               &_activity_task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(activity_task& a, activity_task& b) {
    a.Swap(&b);
  }
  inline void Swap(activity_task* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(activity_task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline activity_task* New() const final {
    return CreateMaybeMessage<activity_task>(nullptr);
  }

  activity_task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<activity_task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const activity_task& from);
  void MergeFrom(const activity_task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(activity_task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.activity_task";
  }
  protected:
  explicit activity_task(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMOpenFieldNumber = 1,
    kMCloseFieldNumber = 2,
  };
  // map<int32, bool> m_open = 1;
  int m_open_size() const;
  private:
  int _internal_m_open_size() const;
  public:
  void clear_m_open();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      _internal_m_open() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      _internal_mutable_m_open();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      m_open() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      mutable_m_open();

  // map<int32, bool> m_close = 2;
  int m_close_size() const;
  private:
  int _internal_m_close_size() const;
  public:
  void clear_m_close();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      _internal_m_close() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      _internal_mutable_m_close();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      m_close() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      mutable_m_close();

  // @@protoc_insertion_point(class_scope:pbdb.activity_task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      activity_task_MOpenEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      0 > m_open_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      activity_task_MCloseEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      0 > m_close_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class activity_drawcompliance_MRewardEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<activity_drawcompliance_MRewardEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<activity_drawcompliance_MRewardEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  activity_drawcompliance_MRewardEntry_DoNotUse();
  activity_drawcompliance_MRewardEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const activity_drawcompliance_MRewardEntry_DoNotUse& other);
  static const activity_drawcompliance_MRewardEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const activity_drawcompliance_MRewardEntry_DoNotUse*>(&_activity_drawcompliance_MRewardEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[25];
  }

  public:
};

// -------------------------------------------------------------------

class activity_drawcompliance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.activity_drawcompliance) */ {
 public:
  inline activity_drawcompliance() : activity_drawcompliance(nullptr) {};
  virtual ~activity_drawcompliance();

  activity_drawcompliance(const activity_drawcompliance& from);
  activity_drawcompliance(activity_drawcompliance&& from) noexcept
    : activity_drawcompliance() {
    *this = ::std::move(from);
  }

  inline activity_drawcompliance& operator=(const activity_drawcompliance& from) {
    CopyFrom(from);
    return *this;
  }
  inline activity_drawcompliance& operator=(activity_drawcompliance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const activity_drawcompliance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const activity_drawcompliance* internal_default_instance() {
    return reinterpret_cast<const activity_drawcompliance*>(
               &_activity_drawcompliance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(activity_drawcompliance& a, activity_drawcompliance& b) {
    a.Swap(&b);
  }
  inline void Swap(activity_drawcompliance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(activity_drawcompliance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline activity_drawcompliance* New() const final {
    return CreateMaybeMessage<activity_drawcompliance>(nullptr);
  }

  activity_drawcompliance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<activity_drawcompliance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const activity_drawcompliance& from);
  void MergeFrom(const activity_drawcompliance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(activity_drawcompliance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.activity_drawcompliance";
  }
  protected:
  explicit activity_drawcompliance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMRewardFieldNumber = 2,
    kMCountFieldNumber = 1,
  };
  // map<int32, bool> m_reward = 2;
  int m_reward_size() const;
  private:
  int _internal_m_reward_size() const;
  public:
  void clear_m_reward();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      _internal_m_reward() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      _internal_mutable_m_reward();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      m_reward() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      mutable_m_reward();

  // int32 m_count = 1;
  bool has_m_count() const;
  private:
  bool _internal_has_m_count() const;
  public:
  void clear_m_count();
  ::PROTOBUF_NAMESPACE_ID::int32 m_count() const;
  void set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_count() const;
  void _internal_set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.activity_drawcompliance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      activity_drawcompliance_MRewardEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      0 > m_reward_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_count_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_activity_MTaskEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_activity_MTaskEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_activity_MTaskEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_activity_MTaskEntry_DoNotUse();
  db_activity_MTaskEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_activity_MTaskEntry_DoNotUse& other);
  static const db_activity_MTaskEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_activity_MTaskEntry_DoNotUse*>(&_db_activity_MTaskEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[27];
  }

  public:
};

// -------------------------------------------------------------------

class db_activity_MDrawcomplianceEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_activity_MDrawcomplianceEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_activity_MDrawcomplianceEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_activity_MDrawcomplianceEntry_DoNotUse();
  db_activity_MDrawcomplianceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_activity_MDrawcomplianceEntry_DoNotUse& other);
  static const db_activity_MDrawcomplianceEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_activity_MDrawcomplianceEntry_DoNotUse*>(&_db_activity_MDrawcomplianceEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[28];
  }

  public:
};

// -------------------------------------------------------------------

class db_activity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_activity) */ {
 public:
  inline db_activity() : db_activity(nullptr) {};
  virtual ~db_activity();

  db_activity(const db_activity& from);
  db_activity(db_activity&& from) noexcept
    : db_activity() {
    *this = ::std::move(from);
  }

  inline db_activity& operator=(const db_activity& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_activity& operator=(db_activity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_activity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_activity* internal_default_instance() {
    return reinterpret_cast<const db_activity*>(
               &_db_activity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(db_activity& a, db_activity& b) {
    a.Swap(&b);
  }
  inline void Swap(db_activity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_activity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_activity* New() const final {
    return CreateMaybeMessage<db_activity>(nullptr);
  }

  db_activity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_activity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_activity& from);
  void MergeFrom(const db_activity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_activity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_activity";
  }
  protected:
  explicit db_activity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMTaskFieldNumber = 2,
    kMDrawcomplianceFieldNumber = 3,
    kMIdFieldNumber = 1,
  };
  // map<int64, .pbdb.activity_task> m_task = 2;
  int m_task_size() const;
  private:
  int _internal_m_task_size() const;
  public:
  void clear_m_task();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >&
      _internal_m_task() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >*
      _internal_mutable_m_task();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >&
      m_task() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >*
      mutable_m_task();

  // map<int64, .pbdb.activity_drawcompliance> m_drawcompliance = 3;
  int m_drawcompliance_size() const;
  private:
  int _internal_m_drawcompliance_size() const;
  public:
  void clear_m_drawcompliance();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >&
      _internal_m_drawcompliance() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >*
      _internal_mutable_m_drawcompliance();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >&
      m_drawcompliance() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >*
      mutable_m_drawcompliance();

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_activity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_activity_MTaskEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > m_task_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_activity_MDrawcomplianceEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > m_drawcompliance_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_task_data_schedule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_task.data_schedule) */ {
 public:
  inline db_task_data_schedule() : db_task_data_schedule(nullptr) {};
  virtual ~db_task_data_schedule();

  db_task_data_schedule(const db_task_data_schedule& from);
  db_task_data_schedule(db_task_data_schedule&& from) noexcept
    : db_task_data_schedule() {
    *this = ::std::move(from);
  }

  inline db_task_data_schedule& operator=(const db_task_data_schedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_task_data_schedule& operator=(db_task_data_schedule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_task_data_schedule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_task_data_schedule* internal_default_instance() {
    return reinterpret_cast<const db_task_data_schedule*>(
               &_db_task_data_schedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(db_task_data_schedule& a, db_task_data_schedule& b) {
    a.Swap(&b);
  }
  inline void Swap(db_task_data_schedule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_task_data_schedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_task_data_schedule* New() const final {
    return CreateMaybeMessage<db_task_data_schedule>(nullptr);
  }

  db_task_data_schedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_task_data_schedule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_task_data_schedule& from);
  void MergeFrom(const db_task_data_schedule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_task_data_schedule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_task.data_schedule";
  }
  protected:
  explicit db_task_data_schedule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMValueFieldNumber = 2,
    kMSumintFieldNumber = 3,
  };
  // int32 m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::PROTOBUF_NAMESPACE_ID::int32 m_type() const;
  void set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_type() const;
  void _internal_set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_value = 2;
  bool has_m_value() const;
  private:
  bool _internal_has_m_value() const;
  public:
  void clear_m_value();
  ::PROTOBUF_NAMESPACE_ID::int32 m_value() const;
  void set_m_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_value() const;
  void _internal_set_m_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_sumint = 3;
  bool has_m_sumint() const;
  private:
  bool _internal_has_m_sumint() const;
  public:
  void clear_m_sumint();
  ::PROTOBUF_NAMESPACE_ID::int32 m_sumint() const;
  void set_m_sumint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_sumint() const;
  void _internal_set_m_sumint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_task.data_schedule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_sumint_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_task_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_task.data) */ {
 public:
  inline db_task_data() : db_task_data(nullptr) {};
  virtual ~db_task_data();

  db_task_data(const db_task_data& from);
  db_task_data(db_task_data&& from) noexcept
    : db_task_data() {
    *this = ::std::move(from);
  }

  inline db_task_data& operator=(const db_task_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_task_data& operator=(db_task_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_task_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_task_data* internal_default_instance() {
    return reinterpret_cast<const db_task_data*>(
               &_db_task_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(db_task_data& a, db_task_data& b) {
    a.Swap(&b);
  }
  inline void Swap(db_task_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_task_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_task_data* New() const final {
    return CreateMaybeMessage<db_task_data>(nullptr);
  }

  db_task_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_task_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_task_data& from);
  void MergeFrom(const db_task_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_task_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_task.data";
  }
  protected:
  explicit db_task_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMSchedulesFieldNumber = 4,
    kMTaskidFieldNumber = 1,
    kMReceiveutcFieldNumber = 2,
    kMFinshutcFieldNumber = 3,
    kMReceiveFieldNumber = 5,
  };
  // repeated .pbdb.db_task.data_schedule m_schedules = 4;
  int m_schedules_size() const;
  private:
  int _internal_m_schedules_size() const;
  public:
  void clear_m_schedules();
  ::pbdb::db_task_data_schedule* mutable_m_schedules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data_schedule >*
      mutable_m_schedules();
  private:
  const ::pbdb::db_task_data_schedule& _internal_m_schedules(int index) const;
  ::pbdb::db_task_data_schedule* _internal_add_m_schedules();
  public:
  const ::pbdb::db_task_data_schedule& m_schedules(int index) const;
  ::pbdb::db_task_data_schedule* add_m_schedules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data_schedule >&
      m_schedules() const;

  // int32 m_taskid = 1;
  bool has_m_taskid() const;
  private:
  bool _internal_has_m_taskid() const;
  public:
  void clear_m_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_taskid() const;
  void set_m_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_taskid() const;
  void _internal_set_m_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_receiveutc = 2;
  bool has_m_receiveutc() const;
  private:
  bool _internal_has_m_receiveutc() const;
  public:
  void clear_m_receiveutc();
  ::PROTOBUF_NAMESPACE_ID::int32 m_receiveutc() const;
  void set_m_receiveutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_receiveutc() const;
  void _internal_set_m_receiveutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_finshutc = 3;
  bool has_m_finshutc() const;
  private:
  bool _internal_has_m_finshutc() const;
  public:
  void clear_m_finshutc();
  ::PROTOBUF_NAMESPACE_ID::int32 m_finshutc() const;
  void set_m_finshutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_finshutc() const;
  void _internal_set_m_finshutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool m_receive = 5;
  bool has_m_receive() const;
  private:
  bool _internal_has_m_receive() const;
  public:
  void clear_m_receive();
  bool m_receive() const;
  void set_m_receive(bool value);
  private:
  bool _internal_m_receive() const;
  void _internal_set_m_receive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_task.data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data_schedule > m_schedules_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_taskid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_receiveutc_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_finshutc_;
  bool m_receive_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_task_complete PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_task.complete) */ {
 public:
  inline db_task_complete() : db_task_complete(nullptr) {};
  virtual ~db_task_complete();

  db_task_complete(const db_task_complete& from);
  db_task_complete(db_task_complete&& from) noexcept
    : db_task_complete() {
    *this = ::std::move(from);
  }

  inline db_task_complete& operator=(const db_task_complete& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_task_complete& operator=(db_task_complete&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_task_complete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_task_complete* internal_default_instance() {
    return reinterpret_cast<const db_task_complete*>(
               &_db_task_complete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(db_task_complete& a, db_task_complete& b) {
    a.Swap(&b);
  }
  inline void Swap(db_task_complete* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_task_complete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_task_complete* New() const final {
    return CreateMaybeMessage<db_task_complete>(nullptr);
  }

  db_task_complete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_task_complete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_task_complete& from);
  void MergeFrom(const db_task_complete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_task_complete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_task.complete";
  }
  protected:
  explicit db_task_complete(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMHistoryFieldNumber = 1,
  };
  // repeated .pbdb.db_task.data m_history = 1;
  int m_history_size() const;
  private:
  int _internal_m_history_size() const;
  public:
  void clear_m_history();
  ::pbdb::db_task_data* mutable_m_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data >*
      mutable_m_history();
  private:
  const ::pbdb::db_task_data& _internal_m_history(int index) const;
  ::pbdb::db_task_data* _internal_add_m_history();
  public:
  const ::pbdb::db_task_data& m_history(int index) const;
  ::pbdb::db_task_data* add_m_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data >&
      m_history() const;

  // @@protoc_insertion_point(class_scope:pbdb.db_task.complete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data > m_history_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_task_MRundatasEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_task_MRundatasEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_task_MRundatasEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_task_MRundatasEntry_DoNotUse();
  db_task_MRundatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_task_MRundatasEntry_DoNotUse& other);
  static const db_task_MRundatasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_task_MRundatasEntry_DoNotUse*>(&_db_task_MRundatasEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[33];
  }

  public:
};

// -------------------------------------------------------------------

class db_task_MCompleteddatasEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_task_MCompleteddatasEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_task_MCompleteddatasEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_task_MCompleteddatasEntry_DoNotUse();
  db_task_MCompleteddatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_task_MCompleteddatasEntry_DoNotUse& other);
  static const db_task_MCompleteddatasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_task_MCompleteddatasEntry_DoNotUse*>(&_db_task_MCompleteddatasEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[34];
  }

  public:
};

// -------------------------------------------------------------------

class db_task PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_task) */ {
 public:
  inline db_task() : db_task(nullptr) {};
  virtual ~db_task();

  db_task(const db_task& from);
  db_task(db_task&& from) noexcept
    : db_task() {
    *this = ::std::move(from);
  }

  inline db_task& operator=(const db_task& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_task& operator=(db_task&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_task* internal_default_instance() {
    return reinterpret_cast<const db_task*>(
               &_db_task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(db_task& a, db_task& b) {
    a.Swap(&b);
  }
  inline void Swap(db_task* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_task* New() const final {
    return CreateMaybeMessage<db_task>(nullptr);
  }

  db_task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_task& from);
  void MergeFrom(const db_task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_task";
  }
  protected:
  explicit db_task(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef db_task_data_schedule data_schedule;
  typedef db_task_data data;
  typedef db_task_complete complete;

  // accessors -------------------------------------------------------

  enum : int {
    kMRundatasFieldNumber = 2,
    kMCompleteddatasFieldNumber = 3,
    kMIdFieldNumber = 1,
  };
  // map<int32, .pbdb.db_task.data> m_rundatas = 2;
  int m_rundatas_size() const;
  private:
  int _internal_m_rundatas_size() const;
  public:
  void clear_m_rundatas();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >&
      _internal_m_rundatas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >*
      _internal_mutable_m_rundatas();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >&
      m_rundatas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >*
      mutable_m_rundatas();

  // map<int32, .pbdb.db_task.complete> m_completeddatas = 3;
  int m_completeddatas_size() const;
  private:
  int _internal_m_completeddatas_size() const;
  public:
  void clear_m_completeddatas();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >&
      _internal_m_completeddatas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >*
      _internal_mutable_m_completeddatas();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >&
      m_completeddatas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >*
      mutable_m_completeddatas();

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_task_MRundatasEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > m_rundatas_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_task_MCompleteddatasEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > m_completeddatas_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_familyer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_familyer) */ {
 public:
  inline db_familyer() : db_familyer(nullptr) {};
  virtual ~db_familyer();

  db_familyer(const db_familyer& from);
  db_familyer(db_familyer&& from) noexcept
    : db_familyer() {
    *this = ::std::move(from);
  }

  inline db_familyer& operator=(const db_familyer& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_familyer& operator=(db_familyer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_familyer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_familyer* internal_default_instance() {
    return reinterpret_cast<const db_familyer*>(
               &_db_familyer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(db_familyer& a, db_familyer& b) {
    a.Swap(&b);
  }
  inline void Swap(db_familyer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_familyer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_familyer* New() const final {
    return CreateMaybeMessage<db_familyer>(nullptr);
  }

  db_familyer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_familyer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_familyer& from);
  void MergeFrom(const db_familyer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_familyer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_familyer";
  }
  protected:
  explicit db_familyer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef db_familyer_eposition eposition;
  static constexpr eposition none =
    db_familyer_eposition_none;
  static constexpr eposition leader =
    db_familyer_eposition_leader;
  static constexpr eposition counsellor =
    db_familyer_eposition_counsellor;
  static constexpr eposition ordinary =
    db_familyer_eposition_ordinary;
  static inline bool eposition_IsValid(int value) {
    return db_familyer_eposition_IsValid(value);
  }
  static constexpr eposition eposition_MIN =
    db_familyer_eposition_eposition_MIN;
  static constexpr eposition eposition_MAX =
    db_familyer_eposition_eposition_MAX;
  static constexpr int eposition_ARRAYSIZE =
    db_familyer_eposition_eposition_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eposition_descriptor() {
    return db_familyer_eposition_descriptor();
  }
  template<typename T>
  static inline const std::string& eposition_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eposition>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eposition_Name.");
    return db_familyer_eposition_Name(enum_t_value);
  }
  static inline bool eposition_Parse(const std::string& name,
      eposition* value) {
    return db_familyer_eposition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMIdFieldNumber = 1,
    kMJoinutcFieldNumber = 2,
    kMLastsignutcFieldNumber = 3,
    kMLastleaveutcFieldNumber = 4,
    kMPositionFieldNumber = 5,
  };
  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_joinutc = 2;
  bool has_m_joinutc() const;
  private:
  bool _internal_has_m_joinutc() const;
  public:
  void clear_m_joinutc();
  ::PROTOBUF_NAMESPACE_ID::int32 m_joinutc() const;
  void set_m_joinutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_joinutc() const;
  void _internal_set_m_joinutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_lastsignutc = 3;
  bool has_m_lastsignutc() const;
  private:
  bool _internal_has_m_lastsignutc() const;
  public:
  void clear_m_lastsignutc();
  ::PROTOBUF_NAMESPACE_ID::int32 m_lastsignutc() const;
  void set_m_lastsignutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_lastsignutc() const;
  void _internal_set_m_lastsignutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_lastleaveutc = 4;
  bool has_m_lastleaveutc() const;
  private:
  bool _internal_has_m_lastleaveutc() const;
  public:
  void clear_m_lastleaveutc();
  ::PROTOBUF_NAMESPACE_ID::int32 m_lastleaveutc() const;
  void set_m_lastleaveutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_lastleaveutc() const;
  void _internal_set_m_lastleaveutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .pbdb.db_familyer.eposition m_position = 5;
  bool has_m_position() const;
  private:
  bool _internal_has_m_position() const;
  public:
  void clear_m_position();
  ::pbdb::db_familyer_eposition m_position() const;
  void set_m_position(::pbdb::db_familyer_eposition value);
  private:
  ::pbdb::db_familyer_eposition _internal_m_position() const;
  void _internal_set_m_position(::pbdb::db_familyer_eposition value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_familyer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_joinutc_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_lastsignutc_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_lastleaveutc_;
  int m_position_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_family PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_family) */ {
 public:
  inline db_family() : db_family(nullptr) {};
  virtual ~db_family();

  db_family(const db_family& from);
  db_family(db_family&& from) noexcept
    : db_family() {
    *this = ::std::move(from);
  }

  inline db_family& operator=(const db_family& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_family& operator=(db_family&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_family& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_family* internal_default_instance() {
    return reinterpret_cast<const db_family*>(
               &_db_family_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(db_family& a, db_family& b) {
    a.Swap(&b);
  }
  inline void Swap(db_family* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_family* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_family* New() const final {
    return CreateMaybeMessage<db_family>(nullptr);
  }

  db_family* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_family>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_family& from);
  void MergeFrom(const db_family& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_family* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_family";
  }
  protected:
  explicit db_family(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMemberFieldNumber = 7,
    kMApplylistFieldNumber = 8,
    kMNameFieldNumber = 3,
    kMIdFieldNumber = 1,
    kMCreateutcFieldNumber = 2,
    kMLvFieldNumber = 5,
    kMLeaderFieldNumber = 4,
    kMExpFieldNumber = 6,
  };
  // repeated int64 m_member = 7;
  int m_member_size() const;
  private:
  int _internal_m_member_size() const;
  public:
  void clear_m_member();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_member(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_m_member() const;
  void _internal_add_m_member(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_m_member();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 m_member(int index) const;
  void set_m_member(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_m_member(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      m_member() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_m_member();

  // repeated int64 m_applylist = 8;
  int m_applylist_size() const;
  private:
  int _internal_m_applylist_size() const;
  public:
  void clear_m_applylist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_applylist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_m_applylist() const;
  void _internal_add_m_applylist(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_m_applylist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 m_applylist(int index) const;
  void set_m_applylist(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_m_applylist(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      m_applylist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_m_applylist();

  // string m_name = 3;
  bool has_m_name() const;
  private:
  bool _internal_has_m_name() const;
  public:
  void clear_m_name();
  const std::string& m_name() const;
  void set_m_name(const std::string& value);
  void set_m_name(std::string&& value);
  void set_m_name(const char* value);
  void set_m_name(const char* value, size_t size);
  std::string* mutable_m_name();
  std::string* release_m_name();
  void set_allocated_m_name(std::string* m_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_m_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_m_name(
      std::string* m_name);
  private:
  const std::string& _internal_m_name() const;
  void _internal_set_m_name(const std::string& value);
  std::string* _internal_mutable_m_name();
  public:

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_createutc = 2;
  bool has_m_createutc() const;
  private:
  bool _internal_has_m_createutc() const;
  public:
  void clear_m_createutc();
  ::PROTOBUF_NAMESPACE_ID::int32 m_createutc() const;
  void set_m_createutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_createutc() const;
  void _internal_set_m_createutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_lv = 5;
  bool has_m_lv() const;
  private:
  bool _internal_has_m_lv() const;
  public:
  void clear_m_lv();
  ::PROTOBUF_NAMESPACE_ID::int32 m_lv() const;
  void set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_lv() const;
  void _internal_set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 m_leader = 4;
  bool has_m_leader() const;
  private:
  bool _internal_has_m_leader() const;
  public:
  void clear_m_leader();
  ::PROTOBUF_NAMESPACE_ID::int64 m_leader() const;
  void set_m_leader(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_leader() const;
  void _internal_set_m_leader(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_exp = 6;
  bool has_m_exp() const;
  private:
  bool _internal_has_m_exp() const;
  public:
  void clear_m_exp();
  ::PROTOBUF_NAMESPACE_ID::int32 m_exp() const;
  void set_m_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_exp() const;
  void _internal_set_m_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_family)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > m_member_;
  mutable std::atomic<int> _m_member_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > m_applylist_;
  mutable std::atomic<int> _m_applylist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_createutc_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_lv_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_leader_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_exp_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_friends PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_friends) */ {
 public:
  inline db_friends() : db_friends(nullptr) {};
  virtual ~db_friends();

  db_friends(const db_friends& from);
  db_friends(db_friends&& from) noexcept
    : db_friends() {
    *this = ::std::move(from);
  }

  inline db_friends& operator=(const db_friends& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_friends& operator=(db_friends&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_friends& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_friends* internal_default_instance() {
    return reinterpret_cast<const db_friends*>(
               &_db_friends_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(db_friends& a, db_friends& b) {
    a.Swap(&b);
  }
  inline void Swap(db_friends* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_friends* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_friends* New() const final {
    return CreateMaybeMessage<db_friends>(nullptr);
  }

  db_friends* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_friends>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_friends& from);
  void MergeFrom(const db_friends& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_friends* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_friends";
  }
  protected:
  explicit db_friends(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFriendsFieldNumber = 2,
    kMApplyfriendsFieldNumber = 3,
    kMIdFieldNumber = 1,
  };
  // repeated int64 m_friends = 2;
  int m_friends_size() const;
  private:
  int _internal_m_friends_size() const;
  public:
  void clear_m_friends();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_friends(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_m_friends() const;
  void _internal_add_m_friends(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_m_friends();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 m_friends(int index) const;
  void set_m_friends(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_m_friends(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      m_friends() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_m_friends();

  // repeated int64 m_applyfriends = 3;
  int m_applyfriends_size() const;
  private:
  int _internal_m_applyfriends_size() const;
  public:
  void clear_m_applyfriends();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_applyfriends(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_m_applyfriends() const;
  void _internal_add_m_applyfriends(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_m_applyfriends();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 m_applyfriends(int index) const;
  void set_m_applyfriends(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_m_applyfriends(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      m_applyfriends() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_m_applyfriends();

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_friends)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > m_friends_;
  mutable std::atomic<int> _m_friends_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > m_applyfriends_;
  mutable std::atomic<int> _m_applyfriends_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class dbcross_test PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.dbcross_test) */ {
 public:
  inline dbcross_test() : dbcross_test(nullptr) {};
  virtual ~dbcross_test();

  dbcross_test(const dbcross_test& from);
  dbcross_test(dbcross_test&& from) noexcept
    : dbcross_test() {
    *this = ::std::move(from);
  }

  inline dbcross_test& operator=(const dbcross_test& from) {
    CopyFrom(from);
    return *this;
  }
  inline dbcross_test& operator=(dbcross_test&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dbcross_test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dbcross_test* internal_default_instance() {
    return reinterpret_cast<const dbcross_test*>(
               &_dbcross_test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(dbcross_test& a, dbcross_test& b) {
    a.Swap(&b);
  }
  inline void Swap(dbcross_test* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dbcross_test* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dbcross_test* New() const final {
    return CreateMaybeMessage<dbcross_test>(nullptr);
  }

  dbcross_test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dbcross_test>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dbcross_test& from);
  void MergeFrom(const dbcross_test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dbcross_test* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.dbcross_test";
  }
  protected:
  explicit dbcross_test(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMValueFieldNumber = 2,
    kMNameFieldNumber = 1,
  };
  // repeated int64 m_value = 2;
  int m_value_size() const;
  private:
  int _internal_m_value_size() const;
  public:
  void clear_m_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_m_value() const;
  void _internal_add_m_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_m_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 m_value(int index) const;
  void set_m_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_m_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      m_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_m_value();

  // string m_name = 1;
  bool has_m_name() const;
  private:
  bool _internal_has_m_name() const;
  public:
  void clear_m_name();
  const std::string& m_name() const;
  void set_m_name(const std::string& value);
  void set_m_name(std::string&& value);
  void set_m_name(const char* value);
  void set_m_name(const char* value, size_t size);
  std::string* mutable_m_name();
  std::string* release_m_name();
  void set_allocated_m_name(std::string* m_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_m_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_m_name(
      std::string* m_name);
  private:
  const std::string& _internal_m_name() const;
  void _internal_set_m_name(const std::string& value);
  std::string* _internal_mutable_m_name();
  public:

  // @@protoc_insertion_point(class_scope:pbdb.dbcross_test)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > m_value_;
  mutable std::atomic<int> _m_value_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_name_;
  friend struct ::TableStruct_db_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// db_account

// int64 m_id = 1;
inline bool db_account::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_account::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_account::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_account::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_account::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_account.m_id)
  return _internal_m_id();
}
inline void db_account::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  m_id_ = value;
}
inline void db_account::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_account.m_id)
}

// int64 m_roleid = 2;
inline bool db_account::_internal_has_m_roleid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool db_account::has_m_roleid() const {
  return _internal_has_m_roleid();
}
inline void db_account::clear_m_roleid() {
  m_roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_account::_internal_m_roleid() const {
  return m_roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_account::m_roleid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_account.m_roleid)
  return _internal_m_roleid();
}
inline void db_account::_internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  m_roleid_ = value;
}
inline void db_account::set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_roleid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_account.m_roleid)
}

// string m_account = 3;
inline bool db_account::_internal_has_m_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_account::has_m_account() const {
  return _internal_has_m_account();
}
inline void db_account::clear_m_account() {
  m_account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& db_account::m_account() const {
  // @@protoc_insertion_point(field_get:pbdb.db_account.m_account)
  return _internal_m_account();
}
inline void db_account::set_m_account(const std::string& value) {
  _internal_set_m_account(value);
  // @@protoc_insertion_point(field_set:pbdb.db_account.m_account)
}
inline std::string* db_account::mutable_m_account() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_account.m_account)
  return _internal_mutable_m_account();
}
inline const std::string& db_account::_internal_m_account() const {
  return m_account_.Get();
}
inline void db_account::_internal_set_m_account(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void db_account::set_m_account(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_account_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.db_account.m_account)
}
inline void db_account::set_m_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.db_account.m_account)
}
inline void db_account::set_m_account(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.db_account.m_account)
}
inline std::string* db_account::_internal_mutable_m_account() {
  _has_bits_[0] |= 0x00000001u;
  return m_account_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* db_account::release_m_account() {
  // @@protoc_insertion_point(field_release:pbdb.db_account.m_account)
  if (!_internal_has_m_account()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_account_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_account::set_allocated_m_account(std::string* m_account) {
  if (m_account != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_account.m_account)
}
inline std::string* db_account::unsafe_arena_release_m_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.db_account.m_account)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return m_account_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void db_account::unsafe_arena_set_allocated_m_account(
    std::string* m_account) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (m_account != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_account_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      m_account, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_account.m_account)
}

// string m_passworld = 4;
inline bool db_account::_internal_has_m_passworld() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_account::has_m_passworld() const {
  return _internal_has_m_passworld();
}
inline void db_account::clear_m_passworld() {
  m_passworld_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& db_account::m_passworld() const {
  // @@protoc_insertion_point(field_get:pbdb.db_account.m_passworld)
  return _internal_m_passworld();
}
inline void db_account::set_m_passworld(const std::string& value) {
  _internal_set_m_passworld(value);
  // @@protoc_insertion_point(field_set:pbdb.db_account.m_passworld)
}
inline std::string* db_account::mutable_m_passworld() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_account.m_passworld)
  return _internal_mutable_m_passworld();
}
inline const std::string& db_account::_internal_m_passworld() const {
  return m_passworld_.Get();
}
inline void db_account::_internal_set_m_passworld(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  m_passworld_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void db_account::set_m_passworld(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  m_passworld_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.db_account.m_passworld)
}
inline void db_account::set_m_passworld(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  m_passworld_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.db_account.m_passworld)
}
inline void db_account::set_m_passworld(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  m_passworld_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.db_account.m_passworld)
}
inline std::string* db_account::_internal_mutable_m_passworld() {
  _has_bits_[0] |= 0x00000002u;
  return m_passworld_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* db_account::release_m_passworld() {
  // @@protoc_insertion_point(field_release:pbdb.db_account.m_passworld)
  if (!_internal_has_m_passworld()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return m_passworld_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_account::set_allocated_m_passworld(std::string* m_passworld) {
  if (m_passworld != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  m_passworld_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_passworld,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_account.m_passworld)
}
inline std::string* db_account::unsafe_arena_release_m_passworld() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.db_account.m_passworld)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return m_passworld_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void db_account::unsafe_arena_set_allocated_m_passworld(
    std::string* m_passworld) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (m_passworld != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  m_passworld_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      m_passworld, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_account.m_passworld)
}

// int32 m_area = 5;
inline bool db_account::_internal_has_m_area() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool db_account::has_m_area() const {
  return _internal_has_m_area();
}
inline void db_account::clear_m_area() {
  m_area_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_account::_internal_m_area() const {
  return m_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_account::m_area() const {
  // @@protoc_insertion_point(field_get:pbdb.db_account.m_area)
  return _internal_m_area();
}
inline void db_account::_internal_set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  m_area_ = value;
}
inline void db_account::set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_area(value);
  // @@protoc_insertion_point(field_set:pbdb.db_account.m_area)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// brief_activityvalues

// map<int32, int32> m_activity_rolelv = 1;
inline int brief_activityvalues::_internal_m_activity_rolelv_size() const {
  return m_activity_rolelv_.size();
}
inline int brief_activityvalues::m_activity_rolelv_size() const {
  return _internal_m_activity_rolelv_size();
}
inline void brief_activityvalues::clear_m_activity_rolelv() {
  m_activity_rolelv_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
brief_activityvalues::_internal_m_activity_rolelv() const {
  return m_activity_rolelv_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
brief_activityvalues::m_activity_rolelv() const {
  // @@protoc_insertion_point(field_map:pbdb.brief_activityvalues.m_activity_rolelv)
  return _internal_m_activity_rolelv();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
brief_activityvalues::_internal_mutable_m_activity_rolelv() {
  return m_activity_rolelv_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
brief_activityvalues::mutable_m_activity_rolelv() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.brief_activityvalues.m_activity_rolelv)
  return _internal_mutable_m_activity_rolelv();
}

// map<int32, int32> m_activity_rolegold = 2;
inline int brief_activityvalues::_internal_m_activity_rolegold_size() const {
  return m_activity_rolegold_.size();
}
inline int brief_activityvalues::m_activity_rolegold_size() const {
  return _internal_m_activity_rolegold_size();
}
inline void brief_activityvalues::clear_m_activity_rolegold() {
  m_activity_rolegold_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
brief_activityvalues::_internal_m_activity_rolegold() const {
  return m_activity_rolegold_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
brief_activityvalues::m_activity_rolegold() const {
  // @@protoc_insertion_point(field_map:pbdb.brief_activityvalues.m_activity_rolegold)
  return _internal_m_activity_rolegold();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
brief_activityvalues::_internal_mutable_m_activity_rolegold() {
  return m_activity_rolegold_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
brief_activityvalues::mutable_m_activity_rolegold() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.brief_activityvalues.m_activity_rolegold)
  return _internal_mutable_m_activity_rolegold();
}

// -------------------------------------------------------------------

// db_brief

// int64 m_id = 1;
inline bool db_brief::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_brief::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_brief::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_brief::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_brief::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_brief.m_id)
  return _internal_m_id();
}
inline void db_brief::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  m_id_ = value;
}
inline void db_brief::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_brief.m_id)
}

// string m_name = 2;
inline bool db_brief::_internal_has_m_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_brief::has_m_name() const {
  return _internal_has_m_name();
}
inline void db_brief::clear_m_name() {
  m_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& db_brief::m_name() const {
  // @@protoc_insertion_point(field_get:pbdb.db_brief.m_name)
  return _internal_m_name();
}
inline void db_brief::set_m_name(const std::string& value) {
  _internal_set_m_name(value);
  // @@protoc_insertion_point(field_set:pbdb.db_brief.m_name)
}
inline std::string* db_brief::mutable_m_name() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_brief.m_name)
  return _internal_mutable_m_name();
}
inline const std::string& db_brief::_internal_m_name() const {
  return m_name_.Get();
}
inline void db_brief::_internal_set_m_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void db_brief::set_m_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.db_brief.m_name)
}
inline void db_brief::set_m_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.db_brief.m_name)
}
inline void db_brief::set_m_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.db_brief.m_name)
}
inline std::string* db_brief::_internal_mutable_m_name() {
  _has_bits_[0] |= 0x00000001u;
  return m_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* db_brief::release_m_name() {
  // @@protoc_insertion_point(field_release:pbdb.db_brief.m_name)
  if (!_internal_has_m_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_brief::set_allocated_m_name(std::string* m_name) {
  if (m_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_brief.m_name)
}
inline std::string* db_brief::unsafe_arena_release_m_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.db_brief.m_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return m_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void db_brief::unsafe_arena_set_allocated_m_name(
    std::string* m_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (m_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      m_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_brief.m_name)
}

// int32 m_lv = 3;
inline bool db_brief::_internal_has_m_lv() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool db_brief::has_m_lv() const {
  return _internal_has_m_lv();
}
inline void db_brief::clear_m_lv() {
  m_lv_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_brief::_internal_m_lv() const {
  return m_lv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_brief::m_lv() const {
  // @@protoc_insertion_point(field_get:pbdb.db_brief.m_lv)
  return _internal_m_lv();
}
inline void db_brief::_internal_set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_lv_ = value;
}
inline void db_brief::set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_lv(value);
  // @@protoc_insertion_point(field_set:pbdb.db_brief.m_lv)
}

// int32 m_moneygold = 4;
inline bool db_brief::_internal_has_m_moneygold() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool db_brief::has_m_moneygold() const {
  return _internal_has_m_moneygold();
}
inline void db_brief::clear_m_moneygold() {
  m_moneygold_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_brief::_internal_m_moneygold() const {
  return m_moneygold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_brief::m_moneygold() const {
  // @@protoc_insertion_point(field_get:pbdb.db_brief.m_moneygold)
  return _internal_m_moneygold();
}
inline void db_brief::_internal_set_m_moneygold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  m_moneygold_ = value;
}
inline void db_brief::set_m_moneygold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_moneygold(value);
  // @@protoc_insertion_point(field_set:pbdb.db_brief.m_moneygold)
}

// int32 m_moneysilver = 5;
inline bool db_brief::_internal_has_m_moneysilver() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool db_brief::has_m_moneysilver() const {
  return _internal_has_m_moneysilver();
}
inline void db_brief::clear_m_moneysilver() {
  m_moneysilver_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_brief::_internal_m_moneysilver() const {
  return m_moneysilver_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_brief::m_moneysilver() const {
  // @@protoc_insertion_point(field_get:pbdb.db_brief.m_moneysilver)
  return _internal_m_moneysilver();
}
inline void db_brief::_internal_set_m_moneysilver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  m_moneysilver_ = value;
}
inline void db_brief::set_m_moneysilver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_moneysilver(value);
  // @@protoc_insertion_point(field_set:pbdb.db_brief.m_moneysilver)
}

// int32 m_vip = 6;
inline bool db_brief::_internal_has_m_vip() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool db_brief::has_m_vip() const {
  return _internal_has_m_vip();
}
inline void db_brief::clear_m_vip() {
  m_vip_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_brief::_internal_m_vip() const {
  return m_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_brief::m_vip() const {
  // @@protoc_insertion_point(field_get:pbdb.db_brief.m_vip)
  return _internal_m_vip();
}
inline void db_brief::_internal_set_m_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  m_vip_ = value;
}
inline void db_brief::set_m_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_vip(value);
  // @@protoc_insertion_point(field_set:pbdb.db_brief.m_vip)
}

// int32 m_notalkutc = 7;
inline bool db_brief::_internal_has_m_notalkutc() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool db_brief::has_m_notalkutc() const {
  return _internal_has_m_notalkutc();
}
inline void db_brief::clear_m_notalkutc() {
  m_notalkutc_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_brief::_internal_m_notalkutc() const {
  return m_notalkutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_brief::m_notalkutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_brief.m_notalkutc)
  return _internal_m_notalkutc();
}
inline void db_brief::_internal_set_m_notalkutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  m_notalkutc_ = value;
}
inline void db_brief::set_m_notalkutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_notalkutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_brief.m_notalkutc)
}

// int32 m_createutc = 8;
inline bool db_brief::_internal_has_m_createutc() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool db_brief::has_m_createutc() const {
  return _internal_has_m_createutc();
}
inline void db_brief::clear_m_createutc() {
  m_createutc_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_brief::_internal_m_createutc() const {
  return m_createutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_brief::m_createutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_brief.m_createutc)
  return _internal_m_createutc();
}
inline void db_brief::_internal_set_m_createutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  m_createutc_ = value;
}
inline void db_brief::set_m_createutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_createutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_brief.m_createutc)
}

// .pbdb.brief_activityvalues m_activityvalues = 9;
inline bool db_brief::_internal_has_m_activityvalues() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || m_activityvalues_ != nullptr);
  return value;
}
inline bool db_brief::has_m_activityvalues() const {
  return _internal_has_m_activityvalues();
}
inline void db_brief::clear_m_activityvalues() {
  if (GetArena() == nullptr && m_activityvalues_ != nullptr) {
    delete m_activityvalues_;
  }
  m_activityvalues_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pbdb::brief_activityvalues& db_brief::_internal_m_activityvalues() const {
  const ::pbdb::brief_activityvalues* p = m_activityvalues_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbdb::brief_activityvalues*>(
      &::pbdb::_brief_activityvalues_default_instance_);
}
inline const ::pbdb::brief_activityvalues& db_brief::m_activityvalues() const {
  // @@protoc_insertion_point(field_get:pbdb.db_brief.m_activityvalues)
  return _internal_m_activityvalues();
}
inline void db_brief::unsafe_arena_set_allocated_m_activityvalues(
    ::pbdb::brief_activityvalues* m_activityvalues) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_activityvalues_);
  }
  m_activityvalues_ = m_activityvalues;
  if (m_activityvalues) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_brief.m_activityvalues)
}
inline ::pbdb::brief_activityvalues* db_brief::release_m_activityvalues() {
  auto temp = unsafe_arena_release_m_activityvalues();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbdb::brief_activityvalues* db_brief::unsafe_arena_release_m_activityvalues() {
  // @@protoc_insertion_point(field_release:pbdb.db_brief.m_activityvalues)
  _has_bits_[0] &= ~0x00000002u;
  ::pbdb::brief_activityvalues* temp = m_activityvalues_;
  m_activityvalues_ = nullptr;
  return temp;
}
inline ::pbdb::brief_activityvalues* db_brief::_internal_mutable_m_activityvalues() {
  _has_bits_[0] |= 0x00000002u;
  if (m_activityvalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::brief_activityvalues>(GetArena());
    m_activityvalues_ = p;
  }
  return m_activityvalues_;
}
inline ::pbdb::brief_activityvalues* db_brief::mutable_m_activityvalues() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_brief.m_activityvalues)
  return _internal_mutable_m_activityvalues();
}
inline void db_brief::set_allocated_m_activityvalues(::pbdb::brief_activityvalues* m_activityvalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete m_activityvalues_;
  }
  if (m_activityvalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(m_activityvalues);
    if (message_arena != submessage_arena) {
      m_activityvalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_activityvalues, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  m_activityvalues_ = m_activityvalues;
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_brief.m_activityvalues)
}

// -------------------------------------------------------------------

// db_role_recharge

// int32 m_rechargeid = 1;
inline bool db_role_recharge::_internal_has_m_rechargeid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_role_recharge::has_m_rechargeid() const {
  return _internal_has_m_rechargeid();
}
inline void db_role_recharge::clear_m_rechargeid() {
  m_rechargeid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_role_recharge::_internal_m_rechargeid() const {
  return m_rechargeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_role_recharge::m_rechargeid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_role.recharge.m_rechargeid)
  return _internal_m_rechargeid();
}
inline void db_role_recharge::_internal_set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_rechargeid_ = value;
}
inline void db_role_recharge::set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_rechargeid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_role.recharge.m_rechargeid)
}

// int32 m_utc = 2;
inline bool db_role_recharge::_internal_has_m_utc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_role_recharge::has_m_utc() const {
  return _internal_has_m_utc();
}
inline void db_role_recharge::clear_m_utc() {
  m_utc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_role_recharge::_internal_m_utc() const {
  return m_utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_role_recharge::m_utc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_role.recharge.m_utc)
  return _internal_m_utc();
}
inline void db_role_recharge::_internal_set_m_utc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_utc_ = value;
}
inline void db_role_recharge::set_m_utc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_utc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_role.recharge.m_utc)
}

// -------------------------------------------------------------------

// db_role

// int64 m_id = 1;
inline bool db_role::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_role::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_role::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_role::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_role::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_role.m_id)
  return _internal_m_id();
}
inline void db_role::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  m_id_ = value;
}
inline void db_role::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_role.m_id)
}

// .pbdb.db_brief m_base = 2;
inline bool db_role::_internal_has_m_base() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || m_base_ != nullptr);
  return value;
}
inline bool db_role::has_m_base() const {
  return _internal_has_m_base();
}
inline void db_role::clear_m_base() {
  if (GetArena() == nullptr && m_base_ != nullptr) {
    delete m_base_;
  }
  m_base_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pbdb::db_brief& db_role::_internal_m_base() const {
  const ::pbdb::db_brief* p = m_base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbdb::db_brief*>(
      &::pbdb::_db_brief_default_instance_);
}
inline const ::pbdb::db_brief& db_role::m_base() const {
  // @@protoc_insertion_point(field_get:pbdb.db_role.m_base)
  return _internal_m_base();
}
inline void db_role::unsafe_arena_set_allocated_m_base(
    ::pbdb::db_brief* m_base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_base_);
  }
  m_base_ = m_base;
  if (m_base) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_role.m_base)
}
inline ::pbdb::db_brief* db_role::release_m_base() {
  auto temp = unsafe_arena_release_m_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbdb::db_brief* db_role::unsafe_arena_release_m_base() {
  // @@protoc_insertion_point(field_release:pbdb.db_role.m_base)
  _has_bits_[0] &= ~0x00000001u;
  ::pbdb::db_brief* temp = m_base_;
  m_base_ = nullptr;
  return temp;
}
inline ::pbdb::db_brief* db_role::_internal_mutable_m_base() {
  _has_bits_[0] |= 0x00000001u;
  if (m_base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_brief>(GetArena());
    m_base_ = p;
  }
  return m_base_;
}
inline ::pbdb::db_brief* db_role::mutable_m_base() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_role.m_base)
  return _internal_mutable_m_base();
}
inline void db_role::set_allocated_m_base(::pbdb::db_brief* m_base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete m_base_;
  }
  if (m_base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(m_base);
    if (message_arena != submessage_arena) {
      m_base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_base, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_base_ = m_base;
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_role.m_base)
}

// repeated .pbdb.db_role.recharge m_recharge = 3;
inline int db_role::_internal_m_recharge_size() const {
  return m_recharge_.size();
}
inline int db_role::m_recharge_size() const {
  return _internal_m_recharge_size();
}
inline void db_role::clear_m_recharge() {
  m_recharge_.Clear();
}
inline ::pbdb::db_role_recharge* db_role::mutable_m_recharge(int index) {
  // @@protoc_insertion_point(field_mutable:pbdb.db_role.m_recharge)
  return m_recharge_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_role_recharge >*
db_role::mutable_m_recharge() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_role.m_recharge)
  return &m_recharge_;
}
inline const ::pbdb::db_role_recharge& db_role::_internal_m_recharge(int index) const {
  return m_recharge_.Get(index);
}
inline const ::pbdb::db_role_recharge& db_role::m_recharge(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_role.m_recharge)
  return _internal_m_recharge(index);
}
inline ::pbdb::db_role_recharge* db_role::_internal_add_m_recharge() {
  return m_recharge_.Add();
}
inline ::pbdb::db_role_recharge* db_role::add_m_recharge() {
  // @@protoc_insertion_point(field_add:pbdb.db_role.m_recharge)
  return _internal_add_m_recharge();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_role_recharge >&
db_role::m_recharge() const {
  // @@protoc_insertion_point(field_list:pbdb.db_role.m_recharge)
  return m_recharge_;
}

// -------------------------------------------------------------------

// item

// int32 m_id = 1;
inline bool item::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool item::has_m_id() const {
  return _internal_has_m_id();
}
inline void item::clear_m_id() {
  m_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.item.m_id)
  return _internal_m_id();
}
inline void item::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_id_ = value;
}
inline void item::set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.item.m_id)
}

// int32 m_tid = 2;
inline bool item::_internal_has_m_tid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool item::has_m_tid() const {
  return _internal_has_m_tid();
}
inline void item::clear_m_tid() {
  m_tid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::_internal_m_tid() const {
  return m_tid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::m_tid() const {
  // @@protoc_insertion_point(field_get:pbdb.item.m_tid)
  return _internal_m_tid();
}
inline void item::_internal_set_m_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_tid_ = value;
}
inline void item::set_m_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_tid(value);
  // @@protoc_insertion_point(field_set:pbdb.item.m_tid)
}

// int32 m_count = 3;
inline bool item::_internal_has_m_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool item::has_m_count() const {
  return _internal_has_m_count();
}
inline void item::clear_m_count() {
  m_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::_internal_m_count() const {
  return m_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::m_count() const {
  // @@protoc_insertion_point(field_get:pbdb.item.m_count)
  return _internal_m_count();
}
inline void item::_internal_set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_count_ = value;
}
inline void item::set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_count(value);
  // @@protoc_insertion_point(field_set:pbdb.item.m_count)
}

// int32 m_lv = 4;
inline bool item::_internal_has_m_lv() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool item::has_m_lv() const {
  return _internal_has_m_lv();
}
inline void item::clear_m_lv() {
  m_lv_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::_internal_m_lv() const {
  return m_lv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::m_lv() const {
  // @@protoc_insertion_point(field_get:pbdb.item.m_lv)
  return _internal_m_lv();
}
inline void item::_internal_set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_lv_ = value;
}
inline void item::set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_lv(value);
  // @@protoc_insertion_point(field_set:pbdb.item.m_lv)
}

// int32 m_star = 5;
inline bool item::_internal_has_m_star() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool item::has_m_star() const {
  return _internal_has_m_star();
}
inline void item::clear_m_star() {
  m_star_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::_internal_m_star() const {
  return m_star_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::m_star() const {
  // @@protoc_insertion_point(field_get:pbdb.item.m_star)
  return _internal_m_star();
}
inline void item::_internal_set_m_star(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  m_star_ = value;
}
inline void item::set_m_star(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_star(value);
  // @@protoc_insertion_point(field_set:pbdb.item.m_star)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// db_bag

// int64 m_id = 1;
inline bool db_bag::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_bag::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_bag::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_bag::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_bag::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_bag.m_id)
  return _internal_m_id();
}
inline void db_bag::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_id_ = value;
}
inline void db_bag::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_bag.m_id)
}

// map<int32, .pbdb.item> m_items = 2;
inline int db_bag::_internal_m_items_size() const {
  return m_items_.size();
}
inline int db_bag::m_items_size() const {
  return _internal_m_items_size();
}
inline void db_bag::clear_m_items() {
  m_items_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >&
db_bag::_internal_m_items() const {
  return m_items_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >&
db_bag::m_items() const {
  // @@protoc_insertion_point(field_map:pbdb.db_bag.m_items)
  return _internal_m_items();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >*
db_bag::_internal_mutable_m_items() {
  return m_items_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >*
db_bag::mutable_m_items() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_bag.m_items)
  return _internal_mutable_m_items();
}

// int32 m_maxid = 3;
inline bool db_bag::_internal_has_m_maxid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_bag::has_m_maxid() const {
  return _internal_has_m_maxid();
}
inline void db_bag::clear_m_maxid() {
  m_maxid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_bag::_internal_m_maxid() const {
  return m_maxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_bag::m_maxid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_bag.m_maxid)
  return _internal_m_maxid();
}
inline void db_bag::_internal_set_m_maxid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_maxid_ = value;
}
inline void db_bag::set_m_maxid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_maxid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_bag.m_maxid)
}

// -------------------------------------------------------------------

// db_keyvalue

// int64 m_id = 1;
inline bool db_keyvalue::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_keyvalue::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_keyvalue::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_keyvalue::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_keyvalue::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_keyvalue.m_id)
  return _internal_m_id();
}
inline void db_keyvalue::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  m_id_ = value;
}
inline void db_keyvalue::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_keyvalue.m_id)
}

// string m_value = 2;
inline bool db_keyvalue::_internal_has_m_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_keyvalue::has_m_value() const {
  return _internal_has_m_value();
}
inline void db_keyvalue::clear_m_value() {
  m_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& db_keyvalue::m_value() const {
  // @@protoc_insertion_point(field_get:pbdb.db_keyvalue.m_value)
  return _internal_m_value();
}
inline void db_keyvalue::set_m_value(const std::string& value) {
  _internal_set_m_value(value);
  // @@protoc_insertion_point(field_set:pbdb.db_keyvalue.m_value)
}
inline std::string* db_keyvalue::mutable_m_value() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_keyvalue.m_value)
  return _internal_mutable_m_value();
}
inline const std::string& db_keyvalue::_internal_m_value() const {
  return m_value_.Get();
}
inline void db_keyvalue::_internal_set_m_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void db_keyvalue::set_m_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.db_keyvalue.m_value)
}
inline void db_keyvalue::set_m_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.db_keyvalue.m_value)
}
inline void db_keyvalue::set_m_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.db_keyvalue.m_value)
}
inline std::string* db_keyvalue::_internal_mutable_m_value() {
  _has_bits_[0] |= 0x00000001u;
  return m_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* db_keyvalue::release_m_value() {
  // @@protoc_insertion_point(field_release:pbdb.db_keyvalue.m_value)
  if (!_internal_has_m_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_keyvalue::set_allocated_m_value(std::string* m_value) {
  if (m_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_keyvalue.m_value)
}
inline std::string* db_keyvalue::unsafe_arena_release_m_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.db_keyvalue.m_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return m_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void db_keyvalue::unsafe_arena_set_allocated_m_value(
    std::string* m_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (m_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      m_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_keyvalue.m_value)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// db_rolekeyvalue

// int64 m_id = 1;
inline bool db_rolekeyvalue::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_rolekeyvalue::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_rolekeyvalue::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_rolekeyvalue::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_rolekeyvalue::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_rolekeyvalue.m_id)
  return _internal_m_id();
}
inline void db_rolekeyvalue::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_id_ = value;
}
inline void db_rolekeyvalue::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_rolekeyvalue.m_id)
}

// map<string, string> m_data = 2;
inline int db_rolekeyvalue::_internal_m_data_size() const {
  return m_data_.size();
}
inline int db_rolekeyvalue::m_data_size() const {
  return _internal_m_data_size();
}
inline void db_rolekeyvalue::clear_m_data() {
  m_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
db_rolekeyvalue::_internal_m_data() const {
  return m_data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
db_rolekeyvalue::m_data() const {
  // @@protoc_insertion_point(field_map:pbdb.db_rolekeyvalue.m_data)
  return _internal_m_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
db_rolekeyvalue::_internal_mutable_m_data() {
  return m_data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
db_rolekeyvalue::mutable_m_data() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_rolekeyvalue.m_data)
  return _internal_mutable_m_data();
}

// -------------------------------------------------------------------

// mailitem

// int32 m_itemtid = 1;
inline bool mailitem::_internal_has_m_itemtid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool mailitem::has_m_itemtid() const {
  return _internal_has_m_itemtid();
}
inline void mailitem::clear_m_itemtid() {
  m_itemtid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mailitem::_internal_m_itemtid() const {
  return m_itemtid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mailitem::m_itemtid() const {
  // @@protoc_insertion_point(field_get:pbdb.mailitem.m_itemtid)
  return _internal_m_itemtid();
}
inline void mailitem::_internal_set_m_itemtid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_itemtid_ = value;
}
inline void mailitem::set_m_itemtid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_itemtid(value);
  // @@protoc_insertion_point(field_set:pbdb.mailitem.m_itemtid)
}

// int32 m_count = 2;
inline bool mailitem::_internal_has_m_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool mailitem::has_m_count() const {
  return _internal_has_m_count();
}
inline void mailitem::clear_m_count() {
  m_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mailitem::_internal_m_count() const {
  return m_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mailitem::m_count() const {
  // @@protoc_insertion_point(field_get:pbdb.mailitem.m_count)
  return _internal_m_count();
}
inline void mailitem::_internal_set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_count_ = value;
}
inline void mailitem::set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_count(value);
  // @@protoc_insertion_point(field_set:pbdb.mailitem.m_count)
}

// -------------------------------------------------------------------

// mail

// int32 m_id = 1;
inline bool mail::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool mail::has_m_id() const {
  return _internal_has_m_id();
}
inline void mail::clear_m_id() {
  m_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.mail.m_id)
  return _internal_m_id();
}
inline void mail::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_id_ = value;
}
inline void mail::set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.mail.m_id)
}

// int32 m_createutc = 2;
inline bool mail::_internal_has_m_createutc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool mail::has_m_createutc() const {
  return _internal_has_m_createutc();
}
inline void mail::clear_m_createutc() {
  m_createutc_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail::_internal_m_createutc() const {
  return m_createutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail::m_createutc() const {
  // @@protoc_insertion_point(field_get:pbdb.mail.m_createutc)
  return _internal_m_createutc();
}
inline void mail::_internal_set_m_createutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_createutc_ = value;
}
inline void mail::set_m_createutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_createutc(value);
  // @@protoc_insertion_point(field_set:pbdb.mail.m_createutc)
}

// int32 m_tid = 3;
inline bool mail::_internal_has_m_tid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool mail::has_m_tid() const {
  return _internal_has_m_tid();
}
inline void mail::clear_m_tid() {
  m_tid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail::_internal_m_tid() const {
  return m_tid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail::m_tid() const {
  // @@protoc_insertion_point(field_get:pbdb.mail.m_tid)
  return _internal_m_tid();
}
inline void mail::_internal_set_m_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  m_tid_ = value;
}
inline void mail::set_m_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_tid(value);
  // @@protoc_insertion_point(field_set:pbdb.mail.m_tid)
}

// string m_prams = 4;
inline bool mail::_internal_has_m_prams() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool mail::has_m_prams() const {
  return _internal_has_m_prams();
}
inline void mail::clear_m_prams() {
  m_prams_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& mail::m_prams() const {
  // @@protoc_insertion_point(field_get:pbdb.mail.m_prams)
  return _internal_m_prams();
}
inline void mail::set_m_prams(const std::string& value) {
  _internal_set_m_prams(value);
  // @@protoc_insertion_point(field_set:pbdb.mail.m_prams)
}
inline std::string* mail::mutable_m_prams() {
  // @@protoc_insertion_point(field_mutable:pbdb.mail.m_prams)
  return _internal_mutable_m_prams();
}
inline const std::string& mail::_internal_m_prams() const {
  return m_prams_.Get();
}
inline void mail::_internal_set_m_prams(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_prams_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void mail::set_m_prams(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_prams_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.mail.m_prams)
}
inline void mail::set_m_prams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_prams_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.mail.m_prams)
}
inline void mail::set_m_prams(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_prams_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.mail.m_prams)
}
inline std::string* mail::_internal_mutable_m_prams() {
  _has_bits_[0] |= 0x00000001u;
  return m_prams_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* mail::release_m_prams() {
  // @@protoc_insertion_point(field_release:pbdb.mail.m_prams)
  if (!_internal_has_m_prams()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_prams_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mail::set_allocated_m_prams(std::string* m_prams) {
  if (m_prams != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_prams_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_prams,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.mail.m_prams)
}
inline std::string* mail::unsafe_arena_release_m_prams() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.mail.m_prams)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return m_prams_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void mail::unsafe_arena_set_allocated_m_prams(
    std::string* m_prams) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (m_prams != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_prams_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      m_prams, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.mail.m_prams)
}

// string m_content = 5;
inline bool mail::_internal_has_m_content() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool mail::has_m_content() const {
  return _internal_has_m_content();
}
inline void mail::clear_m_content() {
  m_content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& mail::m_content() const {
  // @@protoc_insertion_point(field_get:pbdb.mail.m_content)
  return _internal_m_content();
}
inline void mail::set_m_content(const std::string& value) {
  _internal_set_m_content(value);
  // @@protoc_insertion_point(field_set:pbdb.mail.m_content)
}
inline std::string* mail::mutable_m_content() {
  // @@protoc_insertion_point(field_mutable:pbdb.mail.m_content)
  return _internal_mutable_m_content();
}
inline const std::string& mail::_internal_m_content() const {
  return m_content_.Get();
}
inline void mail::_internal_set_m_content(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  m_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void mail::set_m_content(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  m_content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.mail.m_content)
}
inline void mail::set_m_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  m_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.mail.m_content)
}
inline void mail::set_m_content(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  m_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.mail.m_content)
}
inline std::string* mail::_internal_mutable_m_content() {
  _has_bits_[0] |= 0x00000002u;
  return m_content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* mail::release_m_content() {
  // @@protoc_insertion_point(field_release:pbdb.mail.m_content)
  if (!_internal_has_m_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return m_content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mail::set_allocated_m_content(std::string* m_content) {
  if (m_content != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  m_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.mail.m_content)
}
inline std::string* mail::unsafe_arena_release_m_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.mail.m_content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return m_content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void mail::unsafe_arena_set_allocated_m_content(
    std::string* m_content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (m_content != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  m_content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      m_content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.mail.m_content)
}

// repeated .pbdb.mailitem m_items = 6;
inline int mail::_internal_m_items_size() const {
  return m_items_.size();
}
inline int mail::m_items_size() const {
  return _internal_m_items_size();
}
inline void mail::clear_m_items() {
  m_items_.Clear();
}
inline ::pbdb::mailitem* mail::mutable_m_items(int index) {
  // @@protoc_insertion_point(field_mutable:pbdb.mail.m_items)
  return m_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::mailitem >*
mail::mutable_m_items() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.mail.m_items)
  return &m_items_;
}
inline const ::pbdb::mailitem& mail::_internal_m_items(int index) const {
  return m_items_.Get(index);
}
inline const ::pbdb::mailitem& mail::m_items(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.mail.m_items)
  return _internal_m_items(index);
}
inline ::pbdb::mailitem* mail::_internal_add_m_items() {
  return m_items_.Add();
}
inline ::pbdb::mailitem* mail::add_m_items() {
  // @@protoc_insertion_point(field_add:pbdb.mail.m_items)
  return _internal_add_m_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::mailitem >&
mail::m_items() const {
  // @@protoc_insertion_point(field_list:pbdb.mail.m_items)
  return m_items_;
}

// bool m_read = 7;
inline bool mail::_internal_has_m_read() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool mail::has_m_read() const {
  return _internal_has_m_read();
}
inline void mail::clear_m_read() {
  m_read_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool mail::_internal_m_read() const {
  return m_read_;
}
inline bool mail::m_read() const {
  // @@protoc_insertion_point(field_get:pbdb.mail.m_read)
  return _internal_m_read();
}
inline void mail::_internal_set_m_read(bool value) {
  _has_bits_[0] |= 0x00000020u;
  m_read_ = value;
}
inline void mail::set_m_read(bool value) {
  _internal_set_m_read(value);
  // @@protoc_insertion_point(field_set:pbdb.mail.m_read)
}

// bool m_draw = 8;
inline bool mail::_internal_has_m_draw() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool mail::has_m_draw() const {
  return _internal_has_m_draw();
}
inline void mail::clear_m_draw() {
  m_draw_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool mail::_internal_m_draw() const {
  return m_draw_;
}
inline bool mail::m_draw() const {
  // @@protoc_insertion_point(field_get:pbdb.mail.m_draw)
  return _internal_m_draw();
}
inline void mail::_internal_set_m_draw(bool value) {
  _has_bits_[0] |= 0x00000040u;
  m_draw_ = value;
}
inline void mail::set_m_draw(bool value) {
  _internal_set_m_draw(value);
  // @@protoc_insertion_point(field_set:pbdb.mail.m_draw)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// db_mail

// int64 m_id = 1;
inline bool db_mail::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_mail::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_mail::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_mail::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_mail::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_mail.m_id)
  return _internal_m_id();
}
inline void db_mail::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_id_ = value;
}
inline void db_mail::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_mail.m_id)
}

// map<int32, .pbdb.mail> m_mail = 2;
inline int db_mail::_internal_m_mail_size() const {
  return m_mail_.size();
}
inline int db_mail::m_mail_size() const {
  return _internal_m_mail_size();
}
inline void db_mail::clear_m_mail() {
  m_mail_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
db_mail::_internal_m_mail() const {
  return m_mail_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
db_mail::m_mail() const {
  // @@protoc_insertion_point(field_map:pbdb.db_mail.m_mail)
  return _internal_m_mail();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
db_mail::_internal_mutable_m_mail() {
  return m_mail_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
db_mail::mutable_m_mail() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_mail.m_mail)
  return _internal_mutable_m_mail();
}

// -------------------------------------------------------------------

// db_notice

// int64 m_id = 1;
inline bool db_notice::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_notice::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_notice::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_notice::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_notice::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_notice.m_id)
  return _internal_m_id();
}
inline void db_notice::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  m_id_ = value;
}
inline void db_notice::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_notice.m_id)
}

// string m_notice = 2;
inline bool db_notice::_internal_has_m_notice() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_notice::has_m_notice() const {
  return _internal_has_m_notice();
}
inline void db_notice::clear_m_notice() {
  m_notice_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& db_notice::m_notice() const {
  // @@protoc_insertion_point(field_get:pbdb.db_notice.m_notice)
  return _internal_m_notice();
}
inline void db_notice::set_m_notice(const std::string& value) {
  _internal_set_m_notice(value);
  // @@protoc_insertion_point(field_set:pbdb.db_notice.m_notice)
}
inline std::string* db_notice::mutable_m_notice() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_notice.m_notice)
  return _internal_mutable_m_notice();
}
inline const std::string& db_notice::_internal_m_notice() const {
  return m_notice_.Get();
}
inline void db_notice::_internal_set_m_notice(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_notice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void db_notice::set_m_notice(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_notice_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.db_notice.m_notice)
}
inline void db_notice::set_m_notice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_notice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.db_notice.m_notice)
}
inline void db_notice::set_m_notice(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_notice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.db_notice.m_notice)
}
inline std::string* db_notice::_internal_mutable_m_notice() {
  _has_bits_[0] |= 0x00000001u;
  return m_notice_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* db_notice::release_m_notice() {
  // @@protoc_insertion_point(field_release:pbdb.db_notice.m_notice)
  if (!_internal_has_m_notice()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_notice_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_notice::set_allocated_m_notice(std::string* m_notice) {
  if (m_notice != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_notice_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_notice,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_notice.m_notice)
}
inline std::string* db_notice::unsafe_arena_release_m_notice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.db_notice.m_notice)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return m_notice_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void db_notice::unsafe_arena_set_allocated_m_notice(
    std::string* m_notice) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (m_notice != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_notice_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      m_notice, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_notice.m_notice)
}

// int32 m_starttime = 3;
inline bool db_notice::_internal_has_m_starttime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_notice::has_m_starttime() const {
  return _internal_has_m_starttime();
}
inline void db_notice::clear_m_starttime() {
  m_starttime_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_notice::_internal_m_starttime() const {
  return m_starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_notice::m_starttime() const {
  // @@protoc_insertion_point(field_get:pbdb.db_notice.m_starttime)
  return _internal_m_starttime();
}
inline void db_notice::_internal_set_m_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_starttime_ = value;
}
inline void db_notice::set_m_starttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_starttime(value);
  // @@protoc_insertion_point(field_set:pbdb.db_notice.m_starttime)
}

// int32 m_finishtime = 4;
inline bool db_notice::_internal_has_m_finishtime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool db_notice::has_m_finishtime() const {
  return _internal_has_m_finishtime();
}
inline void db_notice::clear_m_finishtime() {
  m_finishtime_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_notice::_internal_m_finishtime() const {
  return m_finishtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_notice::m_finishtime() const {
  // @@protoc_insertion_point(field_get:pbdb.db_notice.m_finishtime)
  return _internal_m_finishtime();
}
inline void db_notice::_internal_set_m_finishtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_finishtime_ = value;
}
inline void db_notice::set_m_finishtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_finishtime(value);
  // @@protoc_insertion_point(field_set:pbdb.db_notice.m_finishtime)
}

// -------------------------------------------------------------------

// rankitem

// int64 m_value = 1;
inline bool rankitem::_internal_has_m_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool rankitem::has_m_value() const {
  return _internal_has_m_value();
}
inline void rankitem::clear_m_value() {
  m_value_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 rankitem::_internal_m_value() const {
  return m_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 rankitem::m_value() const {
  // @@protoc_insertion_point(field_get:pbdb.rankitem.m_value)
  return _internal_m_value();
}
inline void rankitem::_internal_set_m_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_value_ = value;
}
inline void rankitem::set_m_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_value(value);
  // @@protoc_insertion_point(field_set:pbdb.rankitem.m_value)
}

// int32 m_time = 2;
inline bool rankitem::_internal_has_m_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool rankitem::has_m_time() const {
  return _internal_has_m_time();
}
inline void rankitem::clear_m_time() {
  m_time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rankitem::_internal_m_time() const {
  return m_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rankitem::m_time() const {
  // @@protoc_insertion_point(field_get:pbdb.rankitem.m_time)
  return _internal_m_time();
}
inline void rankitem::_internal_set_m_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_time_ = value;
}
inline void rankitem::set_m_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_time(value);
  // @@protoc_insertion_point(field_set:pbdb.rankitem.m_time)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// db_ranklist

// int64 m_id = 1;
inline bool db_ranklist::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_ranklist::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_ranklist::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_ranklist::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_ranklist::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_ranklist.m_id)
  return _internal_m_id();
}
inline void db_ranklist::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_id_ = value;
}
inline void db_ranklist::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_ranklist.m_id)
}

// map<int32, .pbdb.rankitem> m_items = 2;
inline int db_ranklist::_internal_m_items_size() const {
  return m_items_.size();
}
inline int db_ranklist::m_items_size() const {
  return _internal_m_items_size();
}
inline void db_ranklist::clear_m_items() {
  m_items_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >&
db_ranklist::_internal_m_items() const {
  return m_items_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >&
db_ranklist::m_items() const {
  // @@protoc_insertion_point(field_map:pbdb.db_ranklist.m_items)
  return _internal_m_items();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >*
db_ranklist::_internal_mutable_m_items() {
  return m_items_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >*
db_ranklist::mutable_m_items() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_ranklist.m_items)
  return _internal_mutable_m_items();
}

// -------------------------------------------------------------------

// db_activitytimes

// int64 m_id = 1;
inline bool db_activitytimes::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_activitytimes::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_activitytimes::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_activitytimes::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_activitytimes::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_activitytimes.m_id)
  return _internal_m_id();
}
inline void db_activitytimes::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_id_ = value;
}
inline void db_activitytimes::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_activitytimes.m_id)
}

// int32 m_beg = 2;
inline bool db_activitytimes::_internal_has_m_beg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_activitytimes::has_m_beg() const {
  return _internal_has_m_beg();
}
inline void db_activitytimes::clear_m_beg() {
  m_beg_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_activitytimes::_internal_m_beg() const {
  return m_beg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_activitytimes::m_beg() const {
  // @@protoc_insertion_point(field_get:pbdb.db_activitytimes.m_beg)
  return _internal_m_beg();
}
inline void db_activitytimes::_internal_set_m_beg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_beg_ = value;
}
inline void db_activitytimes::set_m_beg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_beg(value);
  // @@protoc_insertion_point(field_set:pbdb.db_activitytimes.m_beg)
}

// int32 m_duration = 3;
inline bool db_activitytimes::_internal_has_m_duration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_activitytimes::has_m_duration() const {
  return _internal_has_m_duration();
}
inline void db_activitytimes::clear_m_duration() {
  m_duration_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_activitytimes::_internal_m_duration() const {
  return m_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_activitytimes::m_duration() const {
  // @@protoc_insertion_point(field_get:pbdb.db_activitytimes.m_duration)
  return _internal_m_duration();
}
inline void db_activitytimes::_internal_set_m_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_duration_ = value;
}
inline void db_activitytimes::set_m_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_duration(value);
  // @@protoc_insertion_point(field_set:pbdb.db_activitytimes.m_duration)
}

// bool m_start = 4;
inline bool db_activitytimes::_internal_has_m_start() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool db_activitytimes::has_m_start() const {
  return _internal_has_m_start();
}
inline void db_activitytimes::clear_m_start() {
  m_start_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool db_activitytimes::_internal_m_start() const {
  return m_start_;
}
inline bool db_activitytimes::m_start() const {
  // @@protoc_insertion_point(field_get:pbdb.db_activitytimes.m_start)
  return _internal_m_start();
}
inline void db_activitytimes::_internal_set_m_start(bool value) {
  _has_bits_[0] |= 0x00000008u;
  m_start_ = value;
}
inline void db_activitytimes::set_m_start(bool value) {
  _internal_set_m_start(value);
  // @@protoc_insertion_point(field_set:pbdb.db_activitytimes.m_start)
}

// bool m_finish = 5;
inline bool db_activitytimes::_internal_has_m_finish() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool db_activitytimes::has_m_finish() const {
  return _internal_has_m_finish();
}
inline void db_activitytimes::clear_m_finish() {
  m_finish_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool db_activitytimes::_internal_m_finish() const {
  return m_finish_;
}
inline bool db_activitytimes::m_finish() const {
  // @@protoc_insertion_point(field_get:pbdb.db_activitytimes.m_finish)
  return _internal_m_finish();
}
inline void db_activitytimes::_internal_set_m_finish(bool value) {
  _has_bits_[0] |= 0x00000010u;
  m_finish_ = value;
}
inline void db_activitytimes::set_m_finish(bool value) {
  _internal_set_m_finish(value);
  // @@protoc_insertion_point(field_set:pbdb.db_activitytimes.m_finish)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// activity_task

// map<int32, bool> m_open = 1;
inline int activity_task::_internal_m_open_size() const {
  return m_open_.size();
}
inline int activity_task::m_open_size() const {
  return _internal_m_open_size();
}
inline void activity_task::clear_m_open() {
  m_open_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
activity_task::_internal_m_open() const {
  return m_open_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
activity_task::m_open() const {
  // @@protoc_insertion_point(field_map:pbdb.activity_task.m_open)
  return _internal_m_open();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
activity_task::_internal_mutable_m_open() {
  return m_open_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
activity_task::mutable_m_open() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.activity_task.m_open)
  return _internal_mutable_m_open();
}

// map<int32, bool> m_close = 2;
inline int activity_task::_internal_m_close_size() const {
  return m_close_.size();
}
inline int activity_task::m_close_size() const {
  return _internal_m_close_size();
}
inline void activity_task::clear_m_close() {
  m_close_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
activity_task::_internal_m_close() const {
  return m_close_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
activity_task::m_close() const {
  // @@protoc_insertion_point(field_map:pbdb.activity_task.m_close)
  return _internal_m_close();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
activity_task::_internal_mutable_m_close() {
  return m_close_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
activity_task::mutable_m_close() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.activity_task.m_close)
  return _internal_mutable_m_close();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// activity_drawcompliance

// int32 m_count = 1;
inline bool activity_drawcompliance::_internal_has_m_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool activity_drawcompliance::has_m_count() const {
  return _internal_has_m_count();
}
inline void activity_drawcompliance::clear_m_count() {
  m_count_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 activity_drawcompliance::_internal_m_count() const {
  return m_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 activity_drawcompliance::m_count() const {
  // @@protoc_insertion_point(field_get:pbdb.activity_drawcompliance.m_count)
  return _internal_m_count();
}
inline void activity_drawcompliance::_internal_set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_count_ = value;
}
inline void activity_drawcompliance::set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_count(value);
  // @@protoc_insertion_point(field_set:pbdb.activity_drawcompliance.m_count)
}

// map<int32, bool> m_reward = 2;
inline int activity_drawcompliance::_internal_m_reward_size() const {
  return m_reward_.size();
}
inline int activity_drawcompliance::m_reward_size() const {
  return _internal_m_reward_size();
}
inline void activity_drawcompliance::clear_m_reward() {
  m_reward_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
activity_drawcompliance::_internal_m_reward() const {
  return m_reward_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
activity_drawcompliance::m_reward() const {
  // @@protoc_insertion_point(field_map:pbdb.activity_drawcompliance.m_reward)
  return _internal_m_reward();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
activity_drawcompliance::_internal_mutable_m_reward() {
  return m_reward_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
activity_drawcompliance::mutable_m_reward() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.activity_drawcompliance.m_reward)
  return _internal_mutable_m_reward();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// db_activity

// int64 m_id = 1;
inline bool db_activity::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_activity::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_activity::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_activity::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_activity::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_activity.m_id)
  return _internal_m_id();
}
inline void db_activity::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_id_ = value;
}
inline void db_activity::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_activity.m_id)
}

// map<int64, .pbdb.activity_task> m_task = 2;
inline int db_activity::_internal_m_task_size() const {
  return m_task_.size();
}
inline int db_activity::m_task_size() const {
  return _internal_m_task_size();
}
inline void db_activity::clear_m_task() {
  m_task_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >&
db_activity::_internal_m_task() const {
  return m_task_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >&
db_activity::m_task() const {
  // @@protoc_insertion_point(field_map:pbdb.db_activity.m_task)
  return _internal_m_task();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >*
db_activity::_internal_mutable_m_task() {
  return m_task_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >*
db_activity::mutable_m_task() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_activity.m_task)
  return _internal_mutable_m_task();
}

// map<int64, .pbdb.activity_drawcompliance> m_drawcompliance = 3;
inline int db_activity::_internal_m_drawcompliance_size() const {
  return m_drawcompliance_.size();
}
inline int db_activity::m_drawcompliance_size() const {
  return _internal_m_drawcompliance_size();
}
inline void db_activity::clear_m_drawcompliance() {
  m_drawcompliance_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >&
db_activity::_internal_m_drawcompliance() const {
  return m_drawcompliance_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >&
db_activity::m_drawcompliance() const {
  // @@protoc_insertion_point(field_map:pbdb.db_activity.m_drawcompliance)
  return _internal_m_drawcompliance();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >*
db_activity::_internal_mutable_m_drawcompliance() {
  return m_drawcompliance_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >*
db_activity::mutable_m_drawcompliance() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_activity.m_drawcompliance)
  return _internal_mutable_m_drawcompliance();
}

// -------------------------------------------------------------------

// db_task_data_schedule

// int32 m_type = 1;
inline bool db_task_data_schedule::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_task_data_schedule::has_m_type() const {
  return _internal_has_m_type();
}
inline void db_task_data_schedule::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data_schedule::_internal_m_type() const {
  return m_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data_schedule::m_type() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data_schedule.m_type)
  return _internal_m_type();
}
inline void db_task_data_schedule::_internal_set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void db_task_data_schedule::set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.data_schedule.m_type)
}

// int32 m_value = 2;
inline bool db_task_data_schedule::_internal_has_m_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_task_data_schedule::has_m_value() const {
  return _internal_has_m_value();
}
inline void db_task_data_schedule::clear_m_value() {
  m_value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data_schedule::_internal_m_value() const {
  return m_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data_schedule::m_value() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data_schedule.m_value)
  return _internal_m_value();
}
inline void db_task_data_schedule::_internal_set_m_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_value_ = value;
}
inline void db_task_data_schedule::set_m_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_value(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.data_schedule.m_value)
}

// int32 m_sumint = 3;
inline bool db_task_data_schedule::_internal_has_m_sumint() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_task_data_schedule::has_m_sumint() const {
  return _internal_has_m_sumint();
}
inline void db_task_data_schedule::clear_m_sumint() {
  m_sumint_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data_schedule::_internal_m_sumint() const {
  return m_sumint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data_schedule::m_sumint() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data_schedule.m_sumint)
  return _internal_m_sumint();
}
inline void db_task_data_schedule::_internal_set_m_sumint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_sumint_ = value;
}
inline void db_task_data_schedule::set_m_sumint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_sumint(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.data_schedule.m_sumint)
}

// -------------------------------------------------------------------

// db_task_data

// int32 m_taskid = 1;
inline bool db_task_data::_internal_has_m_taskid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_task_data::has_m_taskid() const {
  return _internal_has_m_taskid();
}
inline void db_task_data::clear_m_taskid() {
  m_taskid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data::_internal_m_taskid() const {
  return m_taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data::m_taskid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data.m_taskid)
  return _internal_m_taskid();
}
inline void db_task_data::_internal_set_m_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_taskid_ = value;
}
inline void db_task_data::set_m_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_taskid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.data.m_taskid)
}

// int32 m_receiveutc = 2;
inline bool db_task_data::_internal_has_m_receiveutc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_task_data::has_m_receiveutc() const {
  return _internal_has_m_receiveutc();
}
inline void db_task_data::clear_m_receiveutc() {
  m_receiveutc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data::_internal_m_receiveutc() const {
  return m_receiveutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data::m_receiveutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data.m_receiveutc)
  return _internal_m_receiveutc();
}
inline void db_task_data::_internal_set_m_receiveutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_receiveutc_ = value;
}
inline void db_task_data::set_m_receiveutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_receiveutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.data.m_receiveutc)
}

// int32 m_finshutc = 3;
inline bool db_task_data::_internal_has_m_finshutc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_task_data::has_m_finshutc() const {
  return _internal_has_m_finshutc();
}
inline void db_task_data::clear_m_finshutc() {
  m_finshutc_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data::_internal_m_finshutc() const {
  return m_finshutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data::m_finshutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data.m_finshutc)
  return _internal_m_finshutc();
}
inline void db_task_data::_internal_set_m_finshutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_finshutc_ = value;
}
inline void db_task_data::set_m_finshutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_finshutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.data.m_finshutc)
}

// repeated .pbdb.db_task.data_schedule m_schedules = 4;
inline int db_task_data::_internal_m_schedules_size() const {
  return m_schedules_.size();
}
inline int db_task_data::m_schedules_size() const {
  return _internal_m_schedules_size();
}
inline void db_task_data::clear_m_schedules() {
  m_schedules_.Clear();
}
inline ::pbdb::db_task_data_schedule* db_task_data::mutable_m_schedules(int index) {
  // @@protoc_insertion_point(field_mutable:pbdb.db_task.data.m_schedules)
  return m_schedules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data_schedule >*
db_task_data::mutable_m_schedules() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_task.data.m_schedules)
  return &m_schedules_;
}
inline const ::pbdb::db_task_data_schedule& db_task_data::_internal_m_schedules(int index) const {
  return m_schedules_.Get(index);
}
inline const ::pbdb::db_task_data_schedule& db_task_data::m_schedules(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data.m_schedules)
  return _internal_m_schedules(index);
}
inline ::pbdb::db_task_data_schedule* db_task_data::_internal_add_m_schedules() {
  return m_schedules_.Add();
}
inline ::pbdb::db_task_data_schedule* db_task_data::add_m_schedules() {
  // @@protoc_insertion_point(field_add:pbdb.db_task.data.m_schedules)
  return _internal_add_m_schedules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data_schedule >&
db_task_data::m_schedules() const {
  // @@protoc_insertion_point(field_list:pbdb.db_task.data.m_schedules)
  return m_schedules_;
}

// bool m_receive = 5;
inline bool db_task_data::_internal_has_m_receive() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool db_task_data::has_m_receive() const {
  return _internal_has_m_receive();
}
inline void db_task_data::clear_m_receive() {
  m_receive_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool db_task_data::_internal_m_receive() const {
  return m_receive_;
}
inline bool db_task_data::m_receive() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data.m_receive)
  return _internal_m_receive();
}
inline void db_task_data::_internal_set_m_receive(bool value) {
  _has_bits_[0] |= 0x00000008u;
  m_receive_ = value;
}
inline void db_task_data::set_m_receive(bool value) {
  _internal_set_m_receive(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.data.m_receive)
}

// -------------------------------------------------------------------

// db_task_complete

// repeated .pbdb.db_task.data m_history = 1;
inline int db_task_complete::_internal_m_history_size() const {
  return m_history_.size();
}
inline int db_task_complete::m_history_size() const {
  return _internal_m_history_size();
}
inline void db_task_complete::clear_m_history() {
  m_history_.Clear();
}
inline ::pbdb::db_task_data* db_task_complete::mutable_m_history(int index) {
  // @@protoc_insertion_point(field_mutable:pbdb.db_task.complete.m_history)
  return m_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data >*
db_task_complete::mutable_m_history() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_task.complete.m_history)
  return &m_history_;
}
inline const ::pbdb::db_task_data& db_task_complete::_internal_m_history(int index) const {
  return m_history_.Get(index);
}
inline const ::pbdb::db_task_data& db_task_complete::m_history(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.complete.m_history)
  return _internal_m_history(index);
}
inline ::pbdb::db_task_data* db_task_complete::_internal_add_m_history() {
  return m_history_.Add();
}
inline ::pbdb::db_task_data* db_task_complete::add_m_history() {
  // @@protoc_insertion_point(field_add:pbdb.db_task.complete.m_history)
  return _internal_add_m_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data >&
db_task_complete::m_history() const {
  // @@protoc_insertion_point(field_list:pbdb.db_task.complete.m_history)
  return m_history_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// db_task

// int64 m_id = 1;
inline bool db_task::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_task::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_task::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_task::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_task::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.m_id)
  return _internal_m_id();
}
inline void db_task::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_id_ = value;
}
inline void db_task::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.m_id)
}

// map<int32, .pbdb.db_task.data> m_rundatas = 2;
inline int db_task::_internal_m_rundatas_size() const {
  return m_rundatas_.size();
}
inline int db_task::m_rundatas_size() const {
  return _internal_m_rundatas_size();
}
inline void db_task::clear_m_rundatas() {
  m_rundatas_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >&
db_task::_internal_m_rundatas() const {
  return m_rundatas_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >&
db_task::m_rundatas() const {
  // @@protoc_insertion_point(field_map:pbdb.db_task.m_rundatas)
  return _internal_m_rundatas();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >*
db_task::_internal_mutable_m_rundatas() {
  return m_rundatas_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >*
db_task::mutable_m_rundatas() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_task.m_rundatas)
  return _internal_mutable_m_rundatas();
}

// map<int32, .pbdb.db_task.complete> m_completeddatas = 3;
inline int db_task::_internal_m_completeddatas_size() const {
  return m_completeddatas_.size();
}
inline int db_task::m_completeddatas_size() const {
  return _internal_m_completeddatas_size();
}
inline void db_task::clear_m_completeddatas() {
  m_completeddatas_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >&
db_task::_internal_m_completeddatas() const {
  return m_completeddatas_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >&
db_task::m_completeddatas() const {
  // @@protoc_insertion_point(field_map:pbdb.db_task.m_completeddatas)
  return _internal_m_completeddatas();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >*
db_task::_internal_mutable_m_completeddatas() {
  return m_completeddatas_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >*
db_task::mutable_m_completeddatas() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_task.m_completeddatas)
  return _internal_mutable_m_completeddatas();
}

// -------------------------------------------------------------------

// db_familyer

// int64 m_id = 1;
inline bool db_familyer::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_familyer::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_familyer::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_familyer::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_familyer::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_familyer.m_id)
  return _internal_m_id();
}
inline void db_familyer::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_id_ = value;
}
inline void db_familyer::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_familyer.m_id)
}

// int32 m_joinutc = 2;
inline bool db_familyer::_internal_has_m_joinutc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_familyer::has_m_joinutc() const {
  return _internal_has_m_joinutc();
}
inline void db_familyer::clear_m_joinutc() {
  m_joinutc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_familyer::_internal_m_joinutc() const {
  return m_joinutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_familyer::m_joinutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_familyer.m_joinutc)
  return _internal_m_joinutc();
}
inline void db_familyer::_internal_set_m_joinutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_joinutc_ = value;
}
inline void db_familyer::set_m_joinutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_joinutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_familyer.m_joinutc)
}

// int32 m_lastsignutc = 3;
inline bool db_familyer::_internal_has_m_lastsignutc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_familyer::has_m_lastsignutc() const {
  return _internal_has_m_lastsignutc();
}
inline void db_familyer::clear_m_lastsignutc() {
  m_lastsignutc_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_familyer::_internal_m_lastsignutc() const {
  return m_lastsignutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_familyer::m_lastsignutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_familyer.m_lastsignutc)
  return _internal_m_lastsignutc();
}
inline void db_familyer::_internal_set_m_lastsignutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_lastsignutc_ = value;
}
inline void db_familyer::set_m_lastsignutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_lastsignutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_familyer.m_lastsignutc)
}

// int32 m_lastleaveutc = 4;
inline bool db_familyer::_internal_has_m_lastleaveutc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool db_familyer::has_m_lastleaveutc() const {
  return _internal_has_m_lastleaveutc();
}
inline void db_familyer::clear_m_lastleaveutc() {
  m_lastleaveutc_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_familyer::_internal_m_lastleaveutc() const {
  return m_lastleaveutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_familyer::m_lastleaveutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_familyer.m_lastleaveutc)
  return _internal_m_lastleaveutc();
}
inline void db_familyer::_internal_set_m_lastleaveutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_lastleaveutc_ = value;
}
inline void db_familyer::set_m_lastleaveutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_lastleaveutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_familyer.m_lastleaveutc)
}

// .pbdb.db_familyer.eposition m_position = 5;
inline bool db_familyer::_internal_has_m_position() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool db_familyer::has_m_position() const {
  return _internal_has_m_position();
}
inline void db_familyer::clear_m_position() {
  m_position_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::pbdb::db_familyer_eposition db_familyer::_internal_m_position() const {
  return static_cast< ::pbdb::db_familyer_eposition >(m_position_);
}
inline ::pbdb::db_familyer_eposition db_familyer::m_position() const {
  // @@protoc_insertion_point(field_get:pbdb.db_familyer.m_position)
  return _internal_m_position();
}
inline void db_familyer::_internal_set_m_position(::pbdb::db_familyer_eposition value) {
  _has_bits_[0] |= 0x00000010u;
  m_position_ = value;
}
inline void db_familyer::set_m_position(::pbdb::db_familyer_eposition value) {
  _internal_set_m_position(value);
  // @@protoc_insertion_point(field_set:pbdb.db_familyer.m_position)
}

// -------------------------------------------------------------------

// db_family

// int64 m_id = 1;
inline bool db_family::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_family::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_family::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.m_id)
  return _internal_m_id();
}
inline void db_family::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  m_id_ = value;
}
inline void db_family::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.m_id)
}

// int32 m_createutc = 2;
inline bool db_family::_internal_has_m_createutc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_family::has_m_createutc() const {
  return _internal_has_m_createutc();
}
inline void db_family::clear_m_createutc() {
  m_createutc_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_family::_internal_m_createutc() const {
  return m_createutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_family::m_createutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.m_createutc)
  return _internal_m_createutc();
}
inline void db_family::_internal_set_m_createutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_createutc_ = value;
}
inline void db_family::set_m_createutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_createutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.m_createutc)
}

// string m_name = 3;
inline bool db_family::_internal_has_m_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_family::has_m_name() const {
  return _internal_has_m_name();
}
inline void db_family::clear_m_name() {
  m_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& db_family::m_name() const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.m_name)
  return _internal_m_name();
}
inline void db_family::set_m_name(const std::string& value) {
  _internal_set_m_name(value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.m_name)
}
inline std::string* db_family::mutable_m_name() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_family.m_name)
  return _internal_mutable_m_name();
}
inline const std::string& db_family::_internal_m_name() const {
  return m_name_.Get();
}
inline void db_family::_internal_set_m_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void db_family::set_m_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.db_family.m_name)
}
inline void db_family::set_m_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.db_family.m_name)
}
inline void db_family::set_m_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.db_family.m_name)
}
inline std::string* db_family::_internal_mutable_m_name() {
  _has_bits_[0] |= 0x00000001u;
  return m_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* db_family::release_m_name() {
  // @@protoc_insertion_point(field_release:pbdb.db_family.m_name)
  if (!_internal_has_m_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_family::set_allocated_m_name(std::string* m_name) {
  if (m_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_family.m_name)
}
inline std::string* db_family::unsafe_arena_release_m_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.db_family.m_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return m_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void db_family::unsafe_arena_set_allocated_m_name(
    std::string* m_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (m_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      m_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_family.m_name)
}

// int64 m_leader = 4;
inline bool db_family::_internal_has_m_leader() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool db_family::has_m_leader() const {
  return _internal_has_m_leader();
}
inline void db_family::clear_m_leader() {
  m_leader_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::_internal_m_leader() const {
  return m_leader_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::m_leader() const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.m_leader)
  return _internal_m_leader();
}
inline void db_family::_internal_set_m_leader(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  m_leader_ = value;
}
inline void db_family::set_m_leader(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_leader(value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.m_leader)
}

// int32 m_lv = 5;
inline bool db_family::_internal_has_m_lv() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool db_family::has_m_lv() const {
  return _internal_has_m_lv();
}
inline void db_family::clear_m_lv() {
  m_lv_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_family::_internal_m_lv() const {
  return m_lv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_family::m_lv() const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.m_lv)
  return _internal_m_lv();
}
inline void db_family::_internal_set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_lv_ = value;
}
inline void db_family::set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_lv(value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.m_lv)
}

// int32 m_exp = 6;
inline bool db_family::_internal_has_m_exp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool db_family::has_m_exp() const {
  return _internal_has_m_exp();
}
inline void db_family::clear_m_exp() {
  m_exp_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_family::_internal_m_exp() const {
  return m_exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_family::m_exp() const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.m_exp)
  return _internal_m_exp();
}
inline void db_family::_internal_set_m_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  m_exp_ = value;
}
inline void db_family::set_m_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_exp(value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.m_exp)
}

// repeated int64 m_member = 7;
inline int db_family::_internal_m_member_size() const {
  return m_member_.size();
}
inline int db_family::m_member_size() const {
  return _internal_m_member_size();
}
inline void db_family::clear_m_member() {
  m_member_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::_internal_m_member(int index) const {
  return m_member_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::m_member(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.m_member)
  return _internal_m_member(index);
}
inline void db_family::set_m_member(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_member_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.m_member)
}
inline void db_family::_internal_add_m_member(::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_member_.Add(value);
}
inline void db_family::add_m_member(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_m_member(value);
  // @@protoc_insertion_point(field_add:pbdb.db_family.m_member)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_family::_internal_m_member() const {
  return m_member_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_family::m_member() const {
  // @@protoc_insertion_point(field_list:pbdb.db_family.m_member)
  return _internal_m_member();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_family::_internal_mutable_m_member() {
  return &m_member_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_family::mutable_m_member() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_family.m_member)
  return _internal_mutable_m_member();
}

// repeated int64 m_applylist = 8;
inline int db_family::_internal_m_applylist_size() const {
  return m_applylist_.size();
}
inline int db_family::m_applylist_size() const {
  return _internal_m_applylist_size();
}
inline void db_family::clear_m_applylist() {
  m_applylist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::_internal_m_applylist(int index) const {
  return m_applylist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::m_applylist(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.m_applylist)
  return _internal_m_applylist(index);
}
inline void db_family::set_m_applylist(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_applylist_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.m_applylist)
}
inline void db_family::_internal_add_m_applylist(::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_applylist_.Add(value);
}
inline void db_family::add_m_applylist(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_m_applylist(value);
  // @@protoc_insertion_point(field_add:pbdb.db_family.m_applylist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_family::_internal_m_applylist() const {
  return m_applylist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_family::m_applylist() const {
  // @@protoc_insertion_point(field_list:pbdb.db_family.m_applylist)
  return _internal_m_applylist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_family::_internal_mutable_m_applylist() {
  return &m_applylist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_family::mutable_m_applylist() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_family.m_applylist)
  return _internal_mutable_m_applylist();
}

// -------------------------------------------------------------------

// db_friends

// int64 m_id = 1;
inline bool db_friends::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_friends::has_m_id() const {
  return _internal_has_m_id();
}
inline void db_friends::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_friends::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_friends::m_id() const {
  // @@protoc_insertion_point(field_get:pbdb.db_friends.m_id)
  return _internal_m_id();
}
inline void db_friends::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_id_ = value;
}
inline void db_friends::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbdb.db_friends.m_id)
}

// repeated int64 m_friends = 2;
inline int db_friends::_internal_m_friends_size() const {
  return m_friends_.size();
}
inline int db_friends::m_friends_size() const {
  return _internal_m_friends_size();
}
inline void db_friends::clear_m_friends() {
  m_friends_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_friends::_internal_m_friends(int index) const {
  return m_friends_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_friends::m_friends(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_friends.m_friends)
  return _internal_m_friends(index);
}
inline void db_friends::set_m_friends(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_friends_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbdb.db_friends.m_friends)
}
inline void db_friends::_internal_add_m_friends(::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_friends_.Add(value);
}
inline void db_friends::add_m_friends(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_m_friends(value);
  // @@protoc_insertion_point(field_add:pbdb.db_friends.m_friends)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_friends::_internal_m_friends() const {
  return m_friends_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_friends::m_friends() const {
  // @@protoc_insertion_point(field_list:pbdb.db_friends.m_friends)
  return _internal_m_friends();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_friends::_internal_mutable_m_friends() {
  return &m_friends_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_friends::mutable_m_friends() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_friends.m_friends)
  return _internal_mutable_m_friends();
}

// repeated int64 m_applyfriends = 3;
inline int db_friends::_internal_m_applyfriends_size() const {
  return m_applyfriends_.size();
}
inline int db_friends::m_applyfriends_size() const {
  return _internal_m_applyfriends_size();
}
inline void db_friends::clear_m_applyfriends() {
  m_applyfriends_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_friends::_internal_m_applyfriends(int index) const {
  return m_applyfriends_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_friends::m_applyfriends(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_friends.m_applyfriends)
  return _internal_m_applyfriends(index);
}
inline void db_friends::set_m_applyfriends(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_applyfriends_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbdb.db_friends.m_applyfriends)
}
inline void db_friends::_internal_add_m_applyfriends(::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_applyfriends_.Add(value);
}
inline void db_friends::add_m_applyfriends(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_m_applyfriends(value);
  // @@protoc_insertion_point(field_add:pbdb.db_friends.m_applyfriends)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_friends::_internal_m_applyfriends() const {
  return m_applyfriends_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_friends::m_applyfriends() const {
  // @@protoc_insertion_point(field_list:pbdb.db_friends.m_applyfriends)
  return _internal_m_applyfriends();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_friends::_internal_mutable_m_applyfriends() {
  return &m_applyfriends_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_friends::mutable_m_applyfriends() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_friends.m_applyfriends)
  return _internal_mutable_m_applyfriends();
}

// -------------------------------------------------------------------

// dbcross_test

// string m_name = 1;
inline bool dbcross_test::_internal_has_m_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool dbcross_test::has_m_name() const {
  return _internal_has_m_name();
}
inline void dbcross_test::clear_m_name() {
  m_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& dbcross_test::m_name() const {
  // @@protoc_insertion_point(field_get:pbdb.dbcross_test.m_name)
  return _internal_m_name();
}
inline void dbcross_test::set_m_name(const std::string& value) {
  _internal_set_m_name(value);
  // @@protoc_insertion_point(field_set:pbdb.dbcross_test.m_name)
}
inline std::string* dbcross_test::mutable_m_name() {
  // @@protoc_insertion_point(field_mutable:pbdb.dbcross_test.m_name)
  return _internal_mutable_m_name();
}
inline const std::string& dbcross_test::_internal_m_name() const {
  return m_name_.Get();
}
inline void dbcross_test::_internal_set_m_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void dbcross_test::set_m_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.dbcross_test.m_name)
}
inline void dbcross_test::set_m_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.dbcross_test.m_name)
}
inline void dbcross_test::set_m_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.dbcross_test.m_name)
}
inline std::string* dbcross_test::_internal_mutable_m_name() {
  _has_bits_[0] |= 0x00000001u;
  return m_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* dbcross_test::release_m_name() {
  // @@protoc_insertion_point(field_release:pbdb.dbcross_test.m_name)
  if (!_internal_has_m_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void dbcross_test::set_allocated_m_name(std::string* m_name) {
  if (m_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.dbcross_test.m_name)
}
inline std::string* dbcross_test::unsafe_arena_release_m_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.dbcross_test.m_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return m_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void dbcross_test::unsafe_arena_set_allocated_m_name(
    std::string* m_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (m_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      m_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.dbcross_test.m_name)
}

// repeated int64 m_value = 2;
inline int dbcross_test::_internal_m_value_size() const {
  return m_value_.size();
}
inline int dbcross_test::m_value_size() const {
  return _internal_m_value_size();
}
inline void dbcross_test::clear_m_value() {
  m_value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 dbcross_test::_internal_m_value(int index) const {
  return m_value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 dbcross_test::m_value(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.dbcross_test.m_value)
  return _internal_m_value(index);
}
inline void dbcross_test::set_m_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbdb.dbcross_test.m_value)
}
inline void dbcross_test::_internal_add_m_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_value_.Add(value);
}
inline void dbcross_test::add_m_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_m_value(value);
  // @@protoc_insertion_point(field_add:pbdb.dbcross_test.m_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
dbcross_test::_internal_m_value() const {
  return m_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
dbcross_test::m_value() const {
  // @@protoc_insertion_point(field_list:pbdb.dbcross_test.m_value)
  return _internal_m_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
dbcross_test::_internal_mutable_m_value() {
  return &m_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
dbcross_test::mutable_m_value() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.dbcross_test.m_value)
  return _internal_mutable_m_value();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbdb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pbdb::db_keyvalue_ekv> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbdb::db_keyvalue_ekv>() {
  return ::pbdb::db_keyvalue_ekv_descriptor();
}
template <> struct is_proto_enum< ::pbdb::db_familyer_eposition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbdb::db_familyer_eposition>() {
  return ::pbdb::db_familyer_eposition_descriptor();
}
template <> struct is_proto_enum< ::pbdb::ENUM_DB> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbdb::ENUM_DB>() {
  return ::pbdb::ENUM_DB_descriptor();
}
template <> struct is_proto_enum< ::pbdb::eranklist> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbdb::eranklist>() {
  return ::pbdb::eranklist_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_db_2eproto
