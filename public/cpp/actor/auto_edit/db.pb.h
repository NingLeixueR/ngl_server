// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_db_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_db_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_db_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[44]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_2eproto;
namespace pbdb {
class activity_drawcompliance;
class activity_drawcomplianceDefaultTypeInternal;
extern activity_drawcomplianceDefaultTypeInternal _activity_drawcompliance_default_instance_;
class activity_drawcompliance_MrewardEntry_DoNotUse;
class activity_drawcompliance_MrewardEntry_DoNotUseDefaultTypeInternal;
extern activity_drawcompliance_MrewardEntry_DoNotUseDefaultTypeInternal _activity_drawcompliance_MrewardEntry_DoNotUse_default_instance_;
class activity_task;
class activity_taskDefaultTypeInternal;
extern activity_taskDefaultTypeInternal _activity_task_default_instance_;
class activity_task_McloseEntry_DoNotUse;
class activity_task_McloseEntry_DoNotUseDefaultTypeInternal;
extern activity_task_McloseEntry_DoNotUseDefaultTypeInternal _activity_task_McloseEntry_DoNotUse_default_instance_;
class activity_task_MopenEntry_DoNotUse;
class activity_task_MopenEntry_DoNotUseDefaultTypeInternal;
extern activity_task_MopenEntry_DoNotUseDefaultTypeInternal _activity_task_MopenEntry_DoNotUse_default_instance_;
class brief_activityvalues;
class brief_activityvaluesDefaultTypeInternal;
extern brief_activityvaluesDefaultTypeInternal _brief_activityvalues_default_instance_;
class brief_activityvalues_MactivityRolegoldEntry_DoNotUse;
class brief_activityvalues_MactivityRolegoldEntry_DoNotUseDefaultTypeInternal;
extern brief_activityvalues_MactivityRolegoldEntry_DoNotUseDefaultTypeInternal _brief_activityvalues_MactivityRolegoldEntry_DoNotUse_default_instance_;
class brief_activityvalues_MactivityRolelvEntry_DoNotUse;
class brief_activityvalues_MactivityRolelvEntry_DoNotUseDefaultTypeInternal;
extern brief_activityvalues_MactivityRolelvEntry_DoNotUseDefaultTypeInternal _brief_activityvalues_MactivityRolelvEntry_DoNotUse_default_instance_;
class brief_base;
class brief_baseDefaultTypeInternal;
extern brief_baseDefaultTypeInternal _brief_base_default_instance_;
class db_account;
class db_accountDefaultTypeInternal;
extern db_accountDefaultTypeInternal _db_account_default_instance_;
class db_activity;
class db_activityDefaultTypeInternal;
extern db_activityDefaultTypeInternal _db_activity_default_instance_;
class db_activity_MdrawcomplianceEntry_DoNotUse;
class db_activity_MdrawcomplianceEntry_DoNotUseDefaultTypeInternal;
extern db_activity_MdrawcomplianceEntry_DoNotUseDefaultTypeInternal _db_activity_MdrawcomplianceEntry_DoNotUse_default_instance_;
class db_activity_MtaskEntry_DoNotUse;
class db_activity_MtaskEntry_DoNotUseDefaultTypeInternal;
extern db_activity_MtaskEntry_DoNotUseDefaultTypeInternal _db_activity_MtaskEntry_DoNotUse_default_instance_;
class db_activitytimes;
class db_activitytimesDefaultTypeInternal;
extern db_activitytimesDefaultTypeInternal _db_activitytimes_default_instance_;
class db_bag;
class db_bagDefaultTypeInternal;
extern db_bagDefaultTypeInternal _db_bag_default_instance_;
class db_bag_MitemsEntry_DoNotUse;
class db_bag_MitemsEntry_DoNotUseDefaultTypeInternal;
extern db_bag_MitemsEntry_DoNotUseDefaultTypeInternal _db_bag_MitemsEntry_DoNotUse_default_instance_;
class db_brief;
class db_briefDefaultTypeInternal;
extern db_briefDefaultTypeInternal _db_brief_default_instance_;
class db_family;
class db_familyDefaultTypeInternal;
extern db_familyDefaultTypeInternal _db_family_default_instance_;
class db_familyer;
class db_familyerDefaultTypeInternal;
extern db_familyerDefaultTypeInternal _db_familyer_default_instance_;
class db_friends;
class db_friendsDefaultTypeInternal;
extern db_friendsDefaultTypeInternal _db_friends_default_instance_;
class db_keyvalue;
class db_keyvalueDefaultTypeInternal;
extern db_keyvalueDefaultTypeInternal _db_keyvalue_default_instance_;
class db_mail;
class db_mailDefaultTypeInternal;
extern db_mailDefaultTypeInternal _db_mail_default_instance_;
class db_mail_MmailEntry_DoNotUse;
class db_mail_MmailEntry_DoNotUseDefaultTypeInternal;
extern db_mail_MmailEntry_DoNotUseDefaultTypeInternal _db_mail_MmailEntry_DoNotUse_default_instance_;
class db_notice;
class db_noticeDefaultTypeInternal;
extern db_noticeDefaultTypeInternal _db_notice_default_instance_;
class db_ranklist;
class db_ranklistDefaultTypeInternal;
extern db_ranklistDefaultTypeInternal _db_ranklist_default_instance_;
class db_ranklist_MitemsEntry_DoNotUse;
class db_ranklist_MitemsEntry_DoNotUseDefaultTypeInternal;
extern db_ranklist_MitemsEntry_DoNotUseDefaultTypeInternal _db_ranklist_MitemsEntry_DoNotUse_default_instance_;
class db_role;
class db_roleDefaultTypeInternal;
extern db_roleDefaultTypeInternal _db_role_default_instance_;
class db_role_recharge;
class db_role_rechargeDefaultTypeInternal;
extern db_role_rechargeDefaultTypeInternal _db_role_recharge_default_instance_;
class db_rolekeyvalue;
class db_rolekeyvalueDefaultTypeInternal;
extern db_rolekeyvalueDefaultTypeInternal _db_rolekeyvalue_default_instance_;
class db_rolekeyvalue_MdataEntry_DoNotUse;
class db_rolekeyvalue_MdataEntry_DoNotUseDefaultTypeInternal;
extern db_rolekeyvalue_MdataEntry_DoNotUseDefaultTypeInternal _db_rolekeyvalue_MdataEntry_DoNotUse_default_instance_;
class db_task;
class db_taskDefaultTypeInternal;
extern db_taskDefaultTypeInternal _db_task_default_instance_;
class db_task_McompleteddatasEntry_DoNotUse;
class db_task_McompleteddatasEntry_DoNotUseDefaultTypeInternal;
extern db_task_McompleteddatasEntry_DoNotUseDefaultTypeInternal _db_task_McompleteddatasEntry_DoNotUse_default_instance_;
class db_task_MrundatasEntry_DoNotUse;
class db_task_MrundatasEntry_DoNotUseDefaultTypeInternal;
extern db_task_MrundatasEntry_DoNotUseDefaultTypeInternal _db_task_MrundatasEntry_DoNotUse_default_instance_;
class db_task_complete;
class db_task_completeDefaultTypeInternal;
extern db_task_completeDefaultTypeInternal _db_task_complete_default_instance_;
class db_task_data;
class db_task_dataDefaultTypeInternal;
extern db_task_dataDefaultTypeInternal _db_task_data_default_instance_;
class db_task_data_schedule;
class db_task_data_scheduleDefaultTypeInternal;
extern db_task_data_scheduleDefaultTypeInternal _db_task_data_schedule_default_instance_;
class db_testlua;
class db_testluaDefaultTypeInternal;
extern db_testluaDefaultTypeInternal _db_testlua_default_instance_;
class db_testlua_MdatasEntry_DoNotUse;
class db_testlua_MdatasEntry_DoNotUseDefaultTypeInternal;
extern db_testlua_MdatasEntry_DoNotUseDefaultTypeInternal _db_testlua_MdatasEntry_DoNotUse_default_instance_;
class db_testlua_luadata;
class db_testlua_luadataDefaultTypeInternal;
extern db_testlua_luadataDefaultTypeInternal _db_testlua_luadata_default_instance_;
class dbcross_test;
class dbcross_testDefaultTypeInternal;
extern dbcross_testDefaultTypeInternal _dbcross_test_default_instance_;
class item;
class itemDefaultTypeInternal;
extern itemDefaultTypeInternal _item_default_instance_;
class mail;
class mailDefaultTypeInternal;
extern mailDefaultTypeInternal _mail_default_instance_;
class mailitem;
class mailitemDefaultTypeInternal;
extern mailitemDefaultTypeInternal _mailitem_default_instance_;
class rankitem;
class rankitemDefaultTypeInternal;
extern rankitemDefaultTypeInternal _rankitem_default_instance_;
}  // namespace pbdb
PROTOBUF_NAMESPACE_OPEN
template<> ::pbdb::activity_drawcompliance* Arena::CreateMaybeMessage<::pbdb::activity_drawcompliance>(Arena*);
template<> ::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse>(Arena*);
template<> ::pbdb::activity_task* Arena::CreateMaybeMessage<::pbdb::activity_task>(Arena*);
template<> ::pbdb::activity_task_McloseEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::activity_task_McloseEntry_DoNotUse>(Arena*);
template<> ::pbdb::activity_task_MopenEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::activity_task_MopenEntry_DoNotUse>(Arena*);
template<> ::pbdb::brief_activityvalues* Arena::CreateMaybeMessage<::pbdb::brief_activityvalues>(Arena*);
template<> ::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse>(Arena*);
template<> ::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse>(Arena*);
template<> ::pbdb::brief_base* Arena::CreateMaybeMessage<::pbdb::brief_base>(Arena*);
template<> ::pbdb::db_account* Arena::CreateMaybeMessage<::pbdb::db_account>(Arena*);
template<> ::pbdb::db_activity* Arena::CreateMaybeMessage<::pbdb::db_activity>(Arena*);
template<> ::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_activity_MtaskEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_activity_MtaskEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_activitytimes* Arena::CreateMaybeMessage<::pbdb::db_activitytimes>(Arena*);
template<> ::pbdb::db_bag* Arena::CreateMaybeMessage<::pbdb::db_bag>(Arena*);
template<> ::pbdb::db_bag_MitemsEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_bag_MitemsEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_brief* Arena::CreateMaybeMessage<::pbdb::db_brief>(Arena*);
template<> ::pbdb::db_family* Arena::CreateMaybeMessage<::pbdb::db_family>(Arena*);
template<> ::pbdb::db_familyer* Arena::CreateMaybeMessage<::pbdb::db_familyer>(Arena*);
template<> ::pbdb::db_friends* Arena::CreateMaybeMessage<::pbdb::db_friends>(Arena*);
template<> ::pbdb::db_keyvalue* Arena::CreateMaybeMessage<::pbdb::db_keyvalue>(Arena*);
template<> ::pbdb::db_mail* Arena::CreateMaybeMessage<::pbdb::db_mail>(Arena*);
template<> ::pbdb::db_mail_MmailEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_mail_MmailEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_notice* Arena::CreateMaybeMessage<::pbdb::db_notice>(Arena*);
template<> ::pbdb::db_ranklist* Arena::CreateMaybeMessage<::pbdb::db_ranklist>(Arena*);
template<> ::pbdb::db_ranklist_MitemsEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_ranklist_MitemsEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_role* Arena::CreateMaybeMessage<::pbdb::db_role>(Arena*);
template<> ::pbdb::db_role_recharge* Arena::CreateMaybeMessage<::pbdb::db_role_recharge>(Arena*);
template<> ::pbdb::db_rolekeyvalue* Arena::CreateMaybeMessage<::pbdb::db_rolekeyvalue>(Arena*);
template<> ::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_task* Arena::CreateMaybeMessage<::pbdb::db_task>(Arena*);
template<> ::pbdb::db_task_McompleteddatasEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_task_McompleteddatasEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_task_MrundatasEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_task_MrundatasEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_task_complete* Arena::CreateMaybeMessage<::pbdb::db_task_complete>(Arena*);
template<> ::pbdb::db_task_data* Arena::CreateMaybeMessage<::pbdb::db_task_data>(Arena*);
template<> ::pbdb::db_task_data_schedule* Arena::CreateMaybeMessage<::pbdb::db_task_data_schedule>(Arena*);
template<> ::pbdb::db_testlua* Arena::CreateMaybeMessage<::pbdb::db_testlua>(Arena*);
template<> ::pbdb::db_testlua_MdatasEntry_DoNotUse* Arena::CreateMaybeMessage<::pbdb::db_testlua_MdatasEntry_DoNotUse>(Arena*);
template<> ::pbdb::db_testlua_luadata* Arena::CreateMaybeMessage<::pbdb::db_testlua_luadata>(Arena*);
template<> ::pbdb::dbcross_test* Arena::CreateMaybeMessage<::pbdb::dbcross_test>(Arena*);
template<> ::pbdb::item* Arena::CreateMaybeMessage<::pbdb::item>(Arena*);
template<> ::pbdb::mail* Arena::CreateMaybeMessage<::pbdb::mail>(Arena*);
template<> ::pbdb::mailitem* Arena::CreateMaybeMessage<::pbdb::mailitem>(Arena*);
template<> ::pbdb::rankitem* Arena::CreateMaybeMessage<::pbdb::rankitem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pbdb {

enum db_keyvalue_ekv : int {
  db_keyvalue_ekv_none = 0,
  db_keyvalue_ekv_account_ban = 1,
  db_keyvalue_ekv_open_server = 2,
  db_keyvalue_ekv_db_keyvalue_ekv_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  db_keyvalue_ekv_db_keyvalue_ekv_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool db_keyvalue_ekv_IsValid(int value);
constexpr db_keyvalue_ekv db_keyvalue_ekv_ekv_MIN = db_keyvalue_ekv_none;
constexpr db_keyvalue_ekv db_keyvalue_ekv_ekv_MAX = db_keyvalue_ekv_open_server;
constexpr int db_keyvalue_ekv_ekv_ARRAYSIZE = db_keyvalue_ekv_ekv_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* db_keyvalue_ekv_descriptor();
template<typename T>
inline const std::string& db_keyvalue_ekv_Name(T enum_t_value) {
  static_assert(::std::is_same<T, db_keyvalue_ekv>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function db_keyvalue_ekv_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    db_keyvalue_ekv_descriptor(), enum_t_value);
}
inline bool db_keyvalue_ekv_Parse(
    const std::string& name, db_keyvalue_ekv* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<db_keyvalue_ekv>(
    db_keyvalue_ekv_descriptor(), name, value);
}
enum db_familyer_eposition : int {
  db_familyer_eposition_none = 0,
  db_familyer_eposition_leader = 1,
  db_familyer_eposition_counsellor = 2,
  db_familyer_eposition_ordinary = 3,
  db_familyer_eposition_db_familyer_eposition_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  db_familyer_eposition_db_familyer_eposition_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool db_familyer_eposition_IsValid(int value);
constexpr db_familyer_eposition db_familyer_eposition_eposition_MIN = db_familyer_eposition_none;
constexpr db_familyer_eposition db_familyer_eposition_eposition_MAX = db_familyer_eposition_ordinary;
constexpr int db_familyer_eposition_eposition_ARRAYSIZE = db_familyer_eposition_eposition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* db_familyer_eposition_descriptor();
template<typename T>
inline const std::string& db_familyer_eposition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, db_familyer_eposition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function db_familyer_eposition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    db_familyer_eposition_descriptor(), enum_t_value);
}
inline bool db_familyer_eposition_Parse(
    const std::string& name, db_familyer_eposition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<db_familyer_eposition>(
    db_familyer_eposition_descriptor(), name, value);
}
enum ENUM_DB : int {
  ENUM_DB_ACCOUNT = 0,
  ENUM_DB_ROLE = 1,
  ENUM_DB_BRIEF = 2,
  ENUM_DB_BAG = 3,
  ENUM_DB_KEYVALUE = 4,
  ENUM_DB_MAIL = 5,
  ENUM_DB_NOTICE = 6,
  ENUM_DB_RANKLIST = 7,
  ENUM_DB_ACTIVITY = 8,
  ENUM_DB_ACTIVITYTIMES = 9,
  ENUM_DB_TASK = 10,
  ENUM_DB_ROLEKEYVALUE = 11,
  ENUM_DB_FAMILY = 12,
  ENUM_DB_FAMILYER = 13,
  ENUM_DB_FRIENDS = 14,
  ENUM_DB_TESTLUA = 15,
  ENUM_DB_COUNT = 16,
  ENUM_DBCROSS_TEST = 1001,
  ENUM_DB_FAIL = -1,
  ENUM_DB_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENUM_DB_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENUM_DB_IsValid(int value);
constexpr ENUM_DB ENUM_DB_MIN = ENUM_DB_FAIL;
constexpr ENUM_DB ENUM_DB_MAX = ENUM_DBCROSS_TEST;
constexpr int ENUM_DB_ARRAYSIZE = ENUM_DB_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_DB_descriptor();
template<typename T>
inline const std::string& ENUM_DB_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENUM_DB>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENUM_DB_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENUM_DB_descriptor(), enum_t_value);
}
inline bool ENUM_DB_Parse(
    const std::string& name, ENUM_DB* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENUM_DB>(
    ENUM_DB_descriptor(), name, value);
}
enum eranklist : int {
  eranklist_null = 0,
  lv = 1,
  gold = 2,
  count = 3,
  activity_lv = 1000000,
  activity_gold = 2000000,
  eranklist_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eranklist_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eranklist_IsValid(int value);
constexpr eranklist eranklist_MIN = eranklist_null;
constexpr eranklist eranklist_MAX = activity_gold;
constexpr int eranklist_ARRAYSIZE = eranklist_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eranklist_descriptor();
template<typename T>
inline const std::string& eranklist_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eranklist>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eranklist_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eranklist_descriptor(), enum_t_value);
}
inline bool eranklist_Parse(
    const std::string& name, eranklist* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eranklist>(
    eranklist_descriptor(), name, value);
}
// ===================================================================

class db_account PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_account) */ {
 public:
  inline db_account() : db_account(nullptr) {};
  virtual ~db_account();

  db_account(const db_account& from);
  db_account(db_account&& from) noexcept
    : db_account() {
    *this = ::std::move(from);
  }

  inline db_account& operator=(const db_account& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_account& operator=(db_account&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_account* internal_default_instance() {
    return reinterpret_cast<const db_account*>(
               &_db_account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(db_account& a, db_account& b) {
    a.Swap(&b);
  }
  inline void Swap(db_account* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_account* New() const final {
    return CreateMaybeMessage<db_account>(nullptr);
  }

  db_account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_account& from);
  void MergeFrom(const db_account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_account";
  }
  protected:
  explicit db_account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaccountFieldNumber = 3,
    kMpassworldFieldNumber = 4,
    kMidFieldNumber = 1,
    kMroleidFieldNumber = 2,
    kMareaFieldNumber = 5,
  };
  // string maccount = 3;
  bool has_maccount() const;
  private:
  bool _internal_has_maccount() const;
  public:
  void clear_maccount();
  const std::string& maccount() const;
  void set_maccount(const std::string& value);
  void set_maccount(std::string&& value);
  void set_maccount(const char* value);
  void set_maccount(const char* value, size_t size);
  std::string* mutable_maccount();
  std::string* release_maccount();
  void set_allocated_maccount(std::string* maccount);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_maccount();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_maccount(
      std::string* maccount);
  private:
  const std::string& _internal_maccount() const;
  void _internal_set_maccount(const std::string& value);
  std::string* _internal_mutable_maccount();
  public:

  // string mpassworld = 4;
  bool has_mpassworld() const;
  private:
  bool _internal_has_mpassworld() const;
  public:
  void clear_mpassworld();
  const std::string& mpassworld() const;
  void set_mpassworld(const std::string& value);
  void set_mpassworld(std::string&& value);
  void set_mpassworld(const char* value);
  void set_mpassworld(const char* value, size_t size);
  std::string* mutable_mpassworld();
  std::string* release_mpassworld();
  void set_allocated_mpassworld(std::string* mpassworld);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mpassworld();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mpassworld(
      std::string* mpassworld);
  private:
  const std::string& _internal_mpassworld() const;
  void _internal_set_mpassworld(const std::string& value);
  std::string* _internal_mutable_mpassworld();
  public:

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 mroleid = 2;
  bool has_mroleid() const;
  private:
  bool _internal_has_mroleid() const;
  public:
  void clear_mroleid();
  ::PROTOBUF_NAMESPACE_ID::int64 mroleid() const;
  void set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mroleid() const;
  void _internal_set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 marea = 5;
  bool has_marea() const;
  private:
  bool _internal_has_marea() const;
  public:
  void clear_marea();
  ::PROTOBUF_NAMESPACE_ID::int32 marea() const;
  void set_marea(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_marea() const;
  void _internal_set_marea(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maccount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mpassworld_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  ::PROTOBUF_NAMESPACE_ID::int64 mroleid_;
  ::PROTOBUF_NAMESPACE_ID::int32 marea_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class brief_activityvalues_MactivityRolelvEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<brief_activityvalues_MactivityRolelvEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<brief_activityvalues_MactivityRolelvEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  brief_activityvalues_MactivityRolelvEntry_DoNotUse();
  brief_activityvalues_MactivityRolelvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const brief_activityvalues_MactivityRolelvEntry_DoNotUse& other);
  static const brief_activityvalues_MactivityRolelvEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const brief_activityvalues_MactivityRolelvEntry_DoNotUse*>(&_brief_activityvalues_MactivityRolelvEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class brief_activityvalues_MactivityRolegoldEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<brief_activityvalues_MactivityRolegoldEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<brief_activityvalues_MactivityRolegoldEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  brief_activityvalues_MactivityRolegoldEntry_DoNotUse();
  brief_activityvalues_MactivityRolegoldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const brief_activityvalues_MactivityRolegoldEntry_DoNotUse& other);
  static const brief_activityvalues_MactivityRolegoldEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const brief_activityvalues_MactivityRolegoldEntry_DoNotUse*>(&_brief_activityvalues_MactivityRolegoldEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class brief_activityvalues PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.brief_activityvalues) */ {
 public:
  inline brief_activityvalues() : brief_activityvalues(nullptr) {};
  virtual ~brief_activityvalues();

  brief_activityvalues(const brief_activityvalues& from);
  brief_activityvalues(brief_activityvalues&& from) noexcept
    : brief_activityvalues() {
    *this = ::std::move(from);
  }

  inline brief_activityvalues& operator=(const brief_activityvalues& from) {
    CopyFrom(from);
    return *this;
  }
  inline brief_activityvalues& operator=(brief_activityvalues&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const brief_activityvalues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const brief_activityvalues* internal_default_instance() {
    return reinterpret_cast<const brief_activityvalues*>(
               &_brief_activityvalues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(brief_activityvalues& a, brief_activityvalues& b) {
    a.Swap(&b);
  }
  inline void Swap(brief_activityvalues* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(brief_activityvalues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline brief_activityvalues* New() const final {
    return CreateMaybeMessage<brief_activityvalues>(nullptr);
  }

  brief_activityvalues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<brief_activityvalues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const brief_activityvalues& from);
  void MergeFrom(const brief_activityvalues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(brief_activityvalues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.brief_activityvalues";
  }
  protected:
  explicit brief_activityvalues(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMactivityRolelvFieldNumber = 1,
    kMactivityRolegoldFieldNumber = 2,
  };
  // map<int32, int32> mactivity_rolelv = 1;
  int mactivity_rolelv_size() const;
  private:
  int _internal_mactivity_rolelv_size() const;
  public:
  void clear_mactivity_rolelv();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_mactivity_rolelv() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_mactivity_rolelv();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      mactivity_rolelv() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_mactivity_rolelv();

  // map<int32, int32> mactivity_rolegold = 2;
  int mactivity_rolegold_size() const;
  private:
  int _internal_mactivity_rolegold_size() const;
  public:
  void clear_mactivity_rolegold();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_mactivity_rolegold() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_mactivity_rolegold();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      mactivity_rolegold() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_mactivity_rolegold();

  // @@protoc_insertion_point(class_scope:pbdb.brief_activityvalues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      brief_activityvalues_MactivityRolelvEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > mactivity_rolelv_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      brief_activityvalues_MactivityRolegoldEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > mactivity_rolegold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class brief_base PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.brief_base) */ {
 public:
  inline brief_base() : brief_base(nullptr) {};
  virtual ~brief_base();

  brief_base(const brief_base& from);
  brief_base(brief_base&& from) noexcept
    : brief_base() {
    *this = ::std::move(from);
  }

  inline brief_base& operator=(const brief_base& from) {
    CopyFrom(from);
    return *this;
  }
  inline brief_base& operator=(brief_base&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const brief_base& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const brief_base* internal_default_instance() {
    return reinterpret_cast<const brief_base*>(
               &_brief_base_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(brief_base& a, brief_base& b) {
    a.Swap(&b);
  }
  inline void Swap(brief_base* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(brief_base* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline brief_base* New() const final {
    return CreateMaybeMessage<brief_base>(nullptr);
  }

  brief_base* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<brief_base>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const brief_base& from);
  void MergeFrom(const brief_base& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(brief_base* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.brief_base";
  }
  protected:
  explicit brief_base(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMnameFieldNumber = 1,
    kMlvFieldNumber = 2,
    kMmoneygoldFieldNumber = 3,
    kMmoneysilverFieldNumber = 4,
    kMvipFieldNumber = 5,
    kMnotalkutcFieldNumber = 6,
    kMcreateutcFieldNumber = 7,
  };
  // string mname = 1;
  bool has_mname() const;
  private:
  bool _internal_has_mname() const;
  public:
  void clear_mname();
  const std::string& mname() const;
  void set_mname(const std::string& value);
  void set_mname(std::string&& value);
  void set_mname(const char* value);
  void set_mname(const char* value, size_t size);
  std::string* mutable_mname();
  std::string* release_mname();
  void set_allocated_mname(std::string* mname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mname(
      std::string* mname);
  private:
  const std::string& _internal_mname() const;
  void _internal_set_mname(const std::string& value);
  std::string* _internal_mutable_mname();
  public:

  // int32 mlv = 2;
  bool has_mlv() const;
  private:
  bool _internal_has_mlv() const;
  public:
  void clear_mlv();
  ::PROTOBUF_NAMESPACE_ID::int32 mlv() const;
  void set_mlv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mlv() const;
  void _internal_set_mlv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mmoneygold = 3;
  bool has_mmoneygold() const;
  private:
  bool _internal_has_mmoneygold() const;
  public:
  void clear_mmoneygold();
  ::PROTOBUF_NAMESPACE_ID::int32 mmoneygold() const;
  void set_mmoneygold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mmoneygold() const;
  void _internal_set_mmoneygold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mmoneysilver = 4;
  bool has_mmoneysilver() const;
  private:
  bool _internal_has_mmoneysilver() const;
  public:
  void clear_mmoneysilver();
  ::PROTOBUF_NAMESPACE_ID::int32 mmoneysilver() const;
  void set_mmoneysilver(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mmoneysilver() const;
  void _internal_set_mmoneysilver(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mvip = 5;
  bool has_mvip() const;
  private:
  bool _internal_has_mvip() const;
  public:
  void clear_mvip();
  ::PROTOBUF_NAMESPACE_ID::int32 mvip() const;
  void set_mvip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mvip() const;
  void _internal_set_mvip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mnotalkutc = 6;
  bool has_mnotalkutc() const;
  private:
  bool _internal_has_mnotalkutc() const;
  public:
  void clear_mnotalkutc();
  ::PROTOBUF_NAMESPACE_ID::int32 mnotalkutc() const;
  void set_mnotalkutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mnotalkutc() const;
  void _internal_set_mnotalkutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mcreateutc = 7;
  bool has_mcreateutc() const;
  private:
  bool _internal_has_mcreateutc() const;
  public:
  void clear_mcreateutc();
  ::PROTOBUF_NAMESPACE_ID::int32 mcreateutc() const;
  void set_mcreateutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mcreateutc() const;
  void _internal_set_mcreateutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.brief_base)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mname_;
  ::PROTOBUF_NAMESPACE_ID::int32 mlv_;
  ::PROTOBUF_NAMESPACE_ID::int32 mmoneygold_;
  ::PROTOBUF_NAMESPACE_ID::int32 mmoneysilver_;
  ::PROTOBUF_NAMESPACE_ID::int32 mvip_;
  ::PROTOBUF_NAMESPACE_ID::int32 mnotalkutc_;
  ::PROTOBUF_NAMESPACE_ID::int32 mcreateutc_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_brief PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_brief) */ {
 public:
  inline db_brief() : db_brief(nullptr) {};
  virtual ~db_brief();

  db_brief(const db_brief& from);
  db_brief(db_brief&& from) noexcept
    : db_brief() {
    *this = ::std::move(from);
  }

  inline db_brief& operator=(const db_brief& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_brief& operator=(db_brief&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_brief& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_brief* internal_default_instance() {
    return reinterpret_cast<const db_brief*>(
               &_db_brief_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(db_brief& a, db_brief& b) {
    a.Swap(&b);
  }
  inline void Swap(db_brief* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_brief* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_brief* New() const final {
    return CreateMaybeMessage<db_brief>(nullptr);
  }

  db_brief* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_brief>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_brief& from);
  void MergeFrom(const db_brief& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_brief* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_brief";
  }
  protected:
  explicit db_brief(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMBaseFieldNumber = 2,
    kMactivityvaluesFieldNumber = 9,
    kMidFieldNumber = 1,
  };
  // .pbdb.brief_base m_base = 2;
  bool has_m_base() const;
  private:
  bool _internal_has_m_base() const;
  public:
  void clear_m_base();
  const ::pbdb::brief_base& m_base() const;
  ::pbdb::brief_base* release_m_base();
  ::pbdb::brief_base* mutable_m_base();
  void set_allocated_m_base(::pbdb::brief_base* m_base);
  private:
  const ::pbdb::brief_base& _internal_m_base() const;
  ::pbdb::brief_base* _internal_mutable_m_base();
  public:
  void unsafe_arena_set_allocated_m_base(
      ::pbdb::brief_base* m_base);
  ::pbdb::brief_base* unsafe_arena_release_m_base();

  // .pbdb.brief_activityvalues mactivityvalues = 9;
  bool has_mactivityvalues() const;
  private:
  bool _internal_has_mactivityvalues() const;
  public:
  void clear_mactivityvalues();
  const ::pbdb::brief_activityvalues& mactivityvalues() const;
  ::pbdb::brief_activityvalues* release_mactivityvalues();
  ::pbdb::brief_activityvalues* mutable_mactivityvalues();
  void set_allocated_mactivityvalues(::pbdb::brief_activityvalues* mactivityvalues);
  private:
  const ::pbdb::brief_activityvalues& _internal_mactivityvalues() const;
  ::pbdb::brief_activityvalues* _internal_mutable_mactivityvalues();
  public:
  void unsafe_arena_set_allocated_mactivityvalues(
      ::pbdb::brief_activityvalues* mactivityvalues);
  ::pbdb::brief_activityvalues* unsafe_arena_release_mactivityvalues();

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_brief)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pbdb::brief_base* m_base_;
  ::pbdb::brief_activityvalues* mactivityvalues_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_role_recharge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_role.recharge) */ {
 public:
  inline db_role_recharge() : db_role_recharge(nullptr) {};
  virtual ~db_role_recharge();

  db_role_recharge(const db_role_recharge& from);
  db_role_recharge(db_role_recharge&& from) noexcept
    : db_role_recharge() {
    *this = ::std::move(from);
  }

  inline db_role_recharge& operator=(const db_role_recharge& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_role_recharge& operator=(db_role_recharge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_role_recharge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_role_recharge* internal_default_instance() {
    return reinterpret_cast<const db_role_recharge*>(
               &_db_role_recharge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(db_role_recharge& a, db_role_recharge& b) {
    a.Swap(&b);
  }
  inline void Swap(db_role_recharge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_role_recharge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_role_recharge* New() const final {
    return CreateMaybeMessage<db_role_recharge>(nullptr);
  }

  db_role_recharge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_role_recharge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_role_recharge& from);
  void MergeFrom(const db_role_recharge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_role_recharge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_role.recharge";
  }
  protected:
  explicit db_role_recharge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMrechargeidFieldNumber = 1,
    kMutcFieldNumber = 2,
  };
  // int32 mrechargeid = 1;
  bool has_mrechargeid() const;
  private:
  bool _internal_has_mrechargeid() const;
  public:
  void clear_mrechargeid();
  ::PROTOBUF_NAMESPACE_ID::int32 mrechargeid() const;
  void set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mrechargeid() const;
  void _internal_set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mutc = 2;
  bool has_mutc() const;
  private:
  bool _internal_has_mutc() const;
  public:
  void clear_mutc();
  ::PROTOBUF_NAMESPACE_ID::int32 mutc() const;
  void set_mutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mutc() const;
  void _internal_set_mutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_role.recharge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mrechargeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mutc_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_role PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_role) */ {
 public:
  inline db_role() : db_role(nullptr) {};
  virtual ~db_role();

  db_role(const db_role& from);
  db_role(db_role&& from) noexcept
    : db_role() {
    *this = ::std::move(from);
  }

  inline db_role& operator=(const db_role& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_role& operator=(db_role&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_role& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_role* internal_default_instance() {
    return reinterpret_cast<const db_role*>(
               &_db_role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(db_role& a, db_role& b) {
    a.Swap(&b);
  }
  inline void Swap(db_role* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_role* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_role* New() const final {
    return CreateMaybeMessage<db_role>(nullptr);
  }

  db_role* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_role>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_role& from);
  void MergeFrom(const db_role& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_role* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_role";
  }
  protected:
  explicit db_role(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef db_role_recharge recharge;

  // accessors -------------------------------------------------------

  enum : int {
    kMrechargeFieldNumber = 2,
    kMidFieldNumber = 1,
  };
  // repeated .pbdb.db_role.recharge mrecharge = 2;
  int mrecharge_size() const;
  private:
  int _internal_mrecharge_size() const;
  public:
  void clear_mrecharge();
  ::pbdb::db_role_recharge* mutable_mrecharge(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_role_recharge >*
      mutable_mrecharge();
  private:
  const ::pbdb::db_role_recharge& _internal_mrecharge(int index) const;
  ::pbdb::db_role_recharge* _internal_add_mrecharge();
  public:
  const ::pbdb::db_role_recharge& mrecharge(int index) const;
  ::pbdb::db_role_recharge* add_mrecharge();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_role_recharge >&
      mrecharge() const;

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_role)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_role_recharge > mrecharge_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.item) */ {
 public:
  inline item() : item(nullptr) {};
  virtual ~item();

  item(const item& from);
  item(item&& from) noexcept
    : item() {
    *this = ::std::move(from);
  }

  inline item& operator=(const item& from) {
    CopyFrom(from);
    return *this;
  }
  inline item& operator=(item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const item* internal_default_instance() {
    return reinterpret_cast<const item*>(
               &_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(item& a, item& b) {
    a.Swap(&b);
  }
  inline void Swap(item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline item* New() const final {
    return CreateMaybeMessage<item>(nullptr);
  }

  item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const item& from);
  void MergeFrom(const item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.item";
  }
  protected:
  explicit item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMidFieldNumber = 1,
    kMtidFieldNumber = 2,
    kMcountFieldNumber = 3,
    kMlvFieldNumber = 4,
    kMstarFieldNumber = 5,
  };
  // int32 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mtid = 2;
  bool has_mtid() const;
  private:
  bool _internal_has_mtid() const;
  public:
  void clear_mtid();
  ::PROTOBUF_NAMESPACE_ID::int32 mtid() const;
  void set_mtid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtid() const;
  void _internal_set_mtid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mcount = 3;
  bool has_mcount() const;
  private:
  bool _internal_has_mcount() const;
  public:
  void clear_mcount();
  ::PROTOBUF_NAMESPACE_ID::int32 mcount() const;
  void set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mcount() const;
  void _internal_set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mlv = 4;
  bool has_mlv() const;
  private:
  bool _internal_has_mlv() const;
  public:
  void clear_mlv();
  ::PROTOBUF_NAMESPACE_ID::int32 mlv() const;
  void set_mlv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mlv() const;
  void _internal_set_mlv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mstar = 5;
  bool has_mstar() const;
  private:
  bool _internal_has_mstar() const;
  public:
  void clear_mstar();
  ::PROTOBUF_NAMESPACE_ID::int32 mstar() const;
  void set_mstar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mstar() const;
  void _internal_set_mstar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 mlv_;
  ::PROTOBUF_NAMESPACE_ID::int32 mstar_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_bag_MitemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_bag_MitemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_bag_MitemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_bag_MitemsEntry_DoNotUse();
  db_bag_MitemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_bag_MitemsEntry_DoNotUse& other);
  static const db_bag_MitemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_bag_MitemsEntry_DoNotUse*>(&_db_bag_MitemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class db_bag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_bag) */ {
 public:
  inline db_bag() : db_bag(nullptr) {};
  virtual ~db_bag();

  db_bag(const db_bag& from);
  db_bag(db_bag&& from) noexcept
    : db_bag() {
    *this = ::std::move(from);
  }

  inline db_bag& operator=(const db_bag& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_bag& operator=(db_bag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_bag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_bag* internal_default_instance() {
    return reinterpret_cast<const db_bag*>(
               &_db_bag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(db_bag& a, db_bag& b) {
    a.Swap(&b);
  }
  inline void Swap(db_bag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_bag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_bag* New() const final {
    return CreateMaybeMessage<db_bag>(nullptr);
  }

  db_bag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_bag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_bag& from);
  void MergeFrom(const db_bag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_bag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_bag";
  }
  protected:
  explicit db_bag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMitemsFieldNumber = 2,
    kMidFieldNumber = 1,
    kMmaxidFieldNumber = 3,
  };
  // map<int32, .pbdb.item> mitems = 2;
  int mitems_size() const;
  private:
  int _internal_mitems_size() const;
  public:
  void clear_mitems();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >&
      _internal_mitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >*
      _internal_mutable_mitems();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >&
      mitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >*
      mutable_mitems();

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 mmaxid = 3;
  bool has_mmaxid() const;
  private:
  bool _internal_has_mmaxid() const;
  public:
  void clear_mmaxid();
  ::PROTOBUF_NAMESPACE_ID::int32 mmaxid() const;
  void set_mmaxid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mmaxid() const;
  void _internal_set_mmaxid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_bag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_bag_MitemsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mitems_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mmaxid_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_keyvalue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_keyvalue) */ {
 public:
  inline db_keyvalue() : db_keyvalue(nullptr) {};
  virtual ~db_keyvalue();

  db_keyvalue(const db_keyvalue& from);
  db_keyvalue(db_keyvalue&& from) noexcept
    : db_keyvalue() {
    *this = ::std::move(from);
  }

  inline db_keyvalue& operator=(const db_keyvalue& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_keyvalue& operator=(db_keyvalue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_keyvalue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_keyvalue* internal_default_instance() {
    return reinterpret_cast<const db_keyvalue*>(
               &_db_keyvalue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(db_keyvalue& a, db_keyvalue& b) {
    a.Swap(&b);
  }
  inline void Swap(db_keyvalue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_keyvalue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_keyvalue* New() const final {
    return CreateMaybeMessage<db_keyvalue>(nullptr);
  }

  db_keyvalue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_keyvalue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_keyvalue& from);
  void MergeFrom(const db_keyvalue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_keyvalue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_keyvalue";
  }
  protected:
  explicit db_keyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef db_keyvalue_ekv ekv;
  static constexpr ekv none =
    db_keyvalue_ekv_none;
  static constexpr ekv account_ban =
    db_keyvalue_ekv_account_ban;
  static constexpr ekv open_server =
    db_keyvalue_ekv_open_server;
  static inline bool ekv_IsValid(int value) {
    return db_keyvalue_ekv_IsValid(value);
  }
  static constexpr ekv ekv_MIN =
    db_keyvalue_ekv_ekv_MIN;
  static constexpr ekv ekv_MAX =
    db_keyvalue_ekv_ekv_MAX;
  static constexpr int ekv_ARRAYSIZE =
    db_keyvalue_ekv_ekv_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ekv_descriptor() {
    return db_keyvalue_ekv_descriptor();
  }
  template<typename T>
  static inline const std::string& ekv_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ekv>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ekv_Name.");
    return db_keyvalue_ekv_Name(enum_t_value);
  }
  static inline bool ekv_Parse(const std::string& name,
      ekv* value) {
    return db_keyvalue_ekv_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMvalueFieldNumber = 2,
    kMidFieldNumber = 1,
  };
  // string mvalue = 2;
  bool has_mvalue() const;
  private:
  bool _internal_has_mvalue() const;
  public:
  void clear_mvalue();
  const std::string& mvalue() const;
  void set_mvalue(const std::string& value);
  void set_mvalue(std::string&& value);
  void set_mvalue(const char* value);
  void set_mvalue(const char* value, size_t size);
  std::string* mutable_mvalue();
  std::string* release_mvalue();
  void set_allocated_mvalue(std::string* mvalue);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mvalue();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mvalue(
      std::string* mvalue);
  private:
  const std::string& _internal_mvalue() const;
  void _internal_set_mvalue(const std::string& value);
  std::string* _internal_mutable_mvalue();
  public:

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_keyvalue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mvalue_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_rolekeyvalue_MdataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_rolekeyvalue_MdataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_rolekeyvalue_MdataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  db_rolekeyvalue_MdataEntry_DoNotUse();
  db_rolekeyvalue_MdataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_rolekeyvalue_MdataEntry_DoNotUse& other);
  static const db_rolekeyvalue_MdataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_rolekeyvalue_MdataEntry_DoNotUse*>(&_db_rolekeyvalue_MdataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pbdb.db_rolekeyvalue.MdataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pbdb.db_rolekeyvalue.MdataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class db_rolekeyvalue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_rolekeyvalue) */ {
 public:
  inline db_rolekeyvalue() : db_rolekeyvalue(nullptr) {};
  virtual ~db_rolekeyvalue();

  db_rolekeyvalue(const db_rolekeyvalue& from);
  db_rolekeyvalue(db_rolekeyvalue&& from) noexcept
    : db_rolekeyvalue() {
    *this = ::std::move(from);
  }

  inline db_rolekeyvalue& operator=(const db_rolekeyvalue& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_rolekeyvalue& operator=(db_rolekeyvalue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_rolekeyvalue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_rolekeyvalue* internal_default_instance() {
    return reinterpret_cast<const db_rolekeyvalue*>(
               &_db_rolekeyvalue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(db_rolekeyvalue& a, db_rolekeyvalue& b) {
    a.Swap(&b);
  }
  inline void Swap(db_rolekeyvalue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_rolekeyvalue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_rolekeyvalue* New() const final {
    return CreateMaybeMessage<db_rolekeyvalue>(nullptr);
  }

  db_rolekeyvalue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_rolekeyvalue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_rolekeyvalue& from);
  void MergeFrom(const db_rolekeyvalue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_rolekeyvalue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_rolekeyvalue";
  }
  protected:
  explicit db_rolekeyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMdataFieldNumber = 2,
    kMidFieldNumber = 1,
  };
  // map<string, string> mdata = 2;
  int mdata_size() const;
  private:
  int _internal_mdata_size() const;
  public:
  void clear_mdata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_mdata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_mdata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      mdata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_mdata();

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_rolekeyvalue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_rolekeyvalue_MdataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > mdata_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class mailitem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.mailitem) */ {
 public:
  inline mailitem() : mailitem(nullptr) {};
  virtual ~mailitem();

  mailitem(const mailitem& from);
  mailitem(mailitem&& from) noexcept
    : mailitem() {
    *this = ::std::move(from);
  }

  inline mailitem& operator=(const mailitem& from) {
    CopyFrom(from);
    return *this;
  }
  inline mailitem& operator=(mailitem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mailitem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mailitem* internal_default_instance() {
    return reinterpret_cast<const mailitem*>(
               &_mailitem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(mailitem& a, mailitem& b) {
    a.Swap(&b);
  }
  inline void Swap(mailitem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mailitem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mailitem* New() const final {
    return CreateMaybeMessage<mailitem>(nullptr);
  }

  mailitem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mailitem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mailitem& from);
  void MergeFrom(const mailitem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mailitem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.mailitem";
  }
  protected:
  explicit mailitem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMitemtidFieldNumber = 1,
    kMcountFieldNumber = 2,
  };
  // int32 mitemtid = 1;
  bool has_mitemtid() const;
  private:
  bool _internal_has_mitemtid() const;
  public:
  void clear_mitemtid();
  ::PROTOBUF_NAMESPACE_ID::int32 mitemtid() const;
  void set_mitemtid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mitemtid() const;
  void _internal_set_mitemtid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mcount = 2;
  bool has_mcount() const;
  private:
  bool _internal_has_mcount() const;
  public:
  void clear_mcount();
  ::PROTOBUF_NAMESPACE_ID::int32 mcount() const;
  void set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mcount() const;
  void _internal_set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.mailitem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mitemtid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mcount_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class mail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.mail) */ {
 public:
  inline mail() : mail(nullptr) {};
  virtual ~mail();

  mail(const mail& from);
  mail(mail&& from) noexcept
    : mail() {
    *this = ::std::move(from);
  }

  inline mail& operator=(const mail& from) {
    CopyFrom(from);
    return *this;
  }
  inline mail& operator=(mail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mail* internal_default_instance() {
    return reinterpret_cast<const mail*>(
               &_mail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(mail& a, mail& b) {
    a.Swap(&b);
  }
  inline void Swap(mail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mail* New() const final {
    return CreateMaybeMessage<mail>(nullptr);
  }

  mail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mail& from);
  void MergeFrom(const mail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.mail";
  }
  protected:
  explicit mail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMitemsFieldNumber = 6,
    kMpramsFieldNumber = 4,
    kMcontentFieldNumber = 5,
    kMidFieldNumber = 1,
    kMcreateutcFieldNumber = 2,
    kMtidFieldNumber = 3,
    kMreadFieldNumber = 7,
    kMdrawFieldNumber = 8,
  };
  // repeated .pbdb.mailitem mitems = 6;
  int mitems_size() const;
  private:
  int _internal_mitems_size() const;
  public:
  void clear_mitems();
  ::pbdb::mailitem* mutable_mitems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::mailitem >*
      mutable_mitems();
  private:
  const ::pbdb::mailitem& _internal_mitems(int index) const;
  ::pbdb::mailitem* _internal_add_mitems();
  public:
  const ::pbdb::mailitem& mitems(int index) const;
  ::pbdb::mailitem* add_mitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::mailitem >&
      mitems() const;

  // string mprams = 4;
  bool has_mprams() const;
  private:
  bool _internal_has_mprams() const;
  public:
  void clear_mprams();
  const std::string& mprams() const;
  void set_mprams(const std::string& value);
  void set_mprams(std::string&& value);
  void set_mprams(const char* value);
  void set_mprams(const char* value, size_t size);
  std::string* mutable_mprams();
  std::string* release_mprams();
  void set_allocated_mprams(std::string* mprams);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mprams();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mprams(
      std::string* mprams);
  private:
  const std::string& _internal_mprams() const;
  void _internal_set_mprams(const std::string& value);
  std::string* _internal_mutable_mprams();
  public:

  // string mcontent = 5;
  bool has_mcontent() const;
  private:
  bool _internal_has_mcontent() const;
  public:
  void clear_mcontent();
  const std::string& mcontent() const;
  void set_mcontent(const std::string& value);
  void set_mcontent(std::string&& value);
  void set_mcontent(const char* value);
  void set_mcontent(const char* value, size_t size);
  std::string* mutable_mcontent();
  std::string* release_mcontent();
  void set_allocated_mcontent(std::string* mcontent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mcontent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mcontent(
      std::string* mcontent);
  private:
  const std::string& _internal_mcontent() const;
  void _internal_set_mcontent(const std::string& value);
  std::string* _internal_mutable_mcontent();
  public:

  // int32 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int32 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mcreateutc = 2;
  bool has_mcreateutc() const;
  private:
  bool _internal_has_mcreateutc() const;
  public:
  void clear_mcreateutc();
  ::PROTOBUF_NAMESPACE_ID::int32 mcreateutc() const;
  void set_mcreateutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mcreateutc() const;
  void _internal_set_mcreateutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mtid = 3;
  bool has_mtid() const;
  private:
  bool _internal_has_mtid() const;
  public:
  void clear_mtid();
  ::PROTOBUF_NAMESPACE_ID::int32 mtid() const;
  void set_mtid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtid() const;
  void _internal_set_mtid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool mread = 7;
  bool has_mread() const;
  private:
  bool _internal_has_mread() const;
  public:
  void clear_mread();
  bool mread() const;
  void set_mread(bool value);
  private:
  bool _internal_mread() const;
  void _internal_set_mread(bool value);
  public:

  // bool mdraw = 8;
  bool has_mdraw() const;
  private:
  bool _internal_has_mdraw() const;
  public:
  void clear_mdraw();
  bool mdraw() const;
  void set_mdraw(bool value);
  private:
  bool _internal_mdraw() const;
  void _internal_set_mdraw(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.mail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::mailitem > mitems_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mprams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mcontent_;
  ::PROTOBUF_NAMESPACE_ID::int32 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mcreateutc_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtid_;
  bool mread_;
  bool mdraw_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_mail_MmailEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_mail_MmailEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_mail_MmailEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_mail_MmailEntry_DoNotUse();
  db_mail_MmailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_mail_MmailEntry_DoNotUse& other);
  static const db_mail_MmailEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_mail_MmailEntry_DoNotUse*>(&_db_mail_MmailEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[16];
  }

  public:
};

// -------------------------------------------------------------------

class db_mail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_mail) */ {
 public:
  inline db_mail() : db_mail(nullptr) {};
  virtual ~db_mail();

  db_mail(const db_mail& from);
  db_mail(db_mail&& from) noexcept
    : db_mail() {
    *this = ::std::move(from);
  }

  inline db_mail& operator=(const db_mail& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_mail& operator=(db_mail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_mail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_mail* internal_default_instance() {
    return reinterpret_cast<const db_mail*>(
               &_db_mail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(db_mail& a, db_mail& b) {
    a.Swap(&b);
  }
  inline void Swap(db_mail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_mail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_mail* New() const final {
    return CreateMaybeMessage<db_mail>(nullptr);
  }

  db_mail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_mail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_mail& from);
  void MergeFrom(const db_mail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_mail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_mail";
  }
  protected:
  explicit db_mail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMmailFieldNumber = 2,
    kMidFieldNumber = 1,
  };
  // map<int32, .pbdb.mail> mmail = 2;
  int mmail_size() const;
  private:
  int _internal_mmail_size() const;
  public:
  void clear_mmail();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
      _internal_mmail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
      _internal_mutable_mmail();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
      mmail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
      mutable_mmail();

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_mail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_mail_MmailEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mmail_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_notice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_notice) */ {
 public:
  inline db_notice() : db_notice(nullptr) {};
  virtual ~db_notice();

  db_notice(const db_notice& from);
  db_notice(db_notice&& from) noexcept
    : db_notice() {
    *this = ::std::move(from);
  }

  inline db_notice& operator=(const db_notice& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_notice& operator=(db_notice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_notice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_notice* internal_default_instance() {
    return reinterpret_cast<const db_notice*>(
               &_db_notice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(db_notice& a, db_notice& b) {
    a.Swap(&b);
  }
  inline void Swap(db_notice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_notice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_notice* New() const final {
    return CreateMaybeMessage<db_notice>(nullptr);
  }

  db_notice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_notice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_notice& from);
  void MergeFrom(const db_notice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_notice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_notice";
  }
  protected:
  explicit db_notice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMnoticeFieldNumber = 2,
    kMidFieldNumber = 1,
    kMstarttimeFieldNumber = 3,
    kMfinishtimeFieldNumber = 4,
  };
  // string mnotice = 2;
  bool has_mnotice() const;
  private:
  bool _internal_has_mnotice() const;
  public:
  void clear_mnotice();
  const std::string& mnotice() const;
  void set_mnotice(const std::string& value);
  void set_mnotice(std::string&& value);
  void set_mnotice(const char* value);
  void set_mnotice(const char* value, size_t size);
  std::string* mutable_mnotice();
  std::string* release_mnotice();
  void set_allocated_mnotice(std::string* mnotice);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mnotice();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mnotice(
      std::string* mnotice);
  private:
  const std::string& _internal_mnotice() const;
  void _internal_set_mnotice(const std::string& value);
  std::string* _internal_mutable_mnotice();
  public:

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 mstarttime = 3;
  bool has_mstarttime() const;
  private:
  bool _internal_has_mstarttime() const;
  public:
  void clear_mstarttime();
  ::PROTOBUF_NAMESPACE_ID::int32 mstarttime() const;
  void set_mstarttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mstarttime() const;
  void _internal_set_mstarttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mfinishtime = 4;
  bool has_mfinishtime() const;
  private:
  bool _internal_has_mfinishtime() const;
  public:
  void clear_mfinishtime();
  ::PROTOBUF_NAMESPACE_ID::int32 mfinishtime() const;
  void set_mfinishtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mfinishtime() const;
  void _internal_set_mfinishtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_notice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mnotice_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mstarttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 mfinishtime_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class rankitem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.rankitem) */ {
 public:
  inline rankitem() : rankitem(nullptr) {};
  virtual ~rankitem();

  rankitem(const rankitem& from);
  rankitem(rankitem&& from) noexcept
    : rankitem() {
    *this = ::std::move(from);
  }

  inline rankitem& operator=(const rankitem& from) {
    CopyFrom(from);
    return *this;
  }
  inline rankitem& operator=(rankitem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rankitem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rankitem* internal_default_instance() {
    return reinterpret_cast<const rankitem*>(
               &_rankitem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(rankitem& a, rankitem& b) {
    a.Swap(&b);
  }
  inline void Swap(rankitem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rankitem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rankitem* New() const final {
    return CreateMaybeMessage<rankitem>(nullptr);
  }

  rankitem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rankitem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rankitem& from);
  void MergeFrom(const rankitem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rankitem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.rankitem";
  }
  protected:
  explicit rankitem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMvalueFieldNumber = 1,
    kMtimeFieldNumber = 2,
  };
  // int64 mvalue = 1;
  bool has_mvalue() const;
  private:
  bool _internal_has_mvalue() const;
  public:
  void clear_mvalue();
  ::PROTOBUF_NAMESPACE_ID::int64 mvalue() const;
  void set_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mvalue() const;
  void _internal_set_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 mtime = 2;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::int32 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.rankitem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtime_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_ranklist_MitemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_ranklist_MitemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_ranklist_MitemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_ranklist_MitemsEntry_DoNotUse();
  db_ranklist_MitemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_ranklist_MitemsEntry_DoNotUse& other);
  static const db_ranklist_MitemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_ranklist_MitemsEntry_DoNotUse*>(&_db_ranklist_MitemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[20];
  }

  public:
};

// -------------------------------------------------------------------

class db_ranklist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_ranklist) */ {
 public:
  inline db_ranklist() : db_ranklist(nullptr) {};
  virtual ~db_ranklist();

  db_ranklist(const db_ranklist& from);
  db_ranklist(db_ranklist&& from) noexcept
    : db_ranklist() {
    *this = ::std::move(from);
  }

  inline db_ranklist& operator=(const db_ranklist& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_ranklist& operator=(db_ranklist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_ranklist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_ranklist* internal_default_instance() {
    return reinterpret_cast<const db_ranklist*>(
               &_db_ranklist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(db_ranklist& a, db_ranklist& b) {
    a.Swap(&b);
  }
  inline void Swap(db_ranklist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_ranklist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_ranklist* New() const final {
    return CreateMaybeMessage<db_ranklist>(nullptr);
  }

  db_ranklist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_ranklist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_ranklist& from);
  void MergeFrom(const db_ranklist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_ranklist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_ranklist";
  }
  protected:
  explicit db_ranklist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMitemsFieldNumber = 2,
    kMidFieldNumber = 1,
  };
  // map<int32, .pbdb.rankitem> mitems = 2;
  int mitems_size() const;
  private:
  int _internal_mitems_size() const;
  public:
  void clear_mitems();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >&
      _internal_mitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >*
      _internal_mutable_mitems();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >&
      mitems() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >*
      mutable_mitems();

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_ranklist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_ranklist_MitemsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mitems_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_activitytimes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_activitytimes) */ {
 public:
  inline db_activitytimes() : db_activitytimes(nullptr) {};
  virtual ~db_activitytimes();

  db_activitytimes(const db_activitytimes& from);
  db_activitytimes(db_activitytimes&& from) noexcept
    : db_activitytimes() {
    *this = ::std::move(from);
  }

  inline db_activitytimes& operator=(const db_activitytimes& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_activitytimes& operator=(db_activitytimes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_activitytimes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_activitytimes* internal_default_instance() {
    return reinterpret_cast<const db_activitytimes*>(
               &_db_activitytimes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(db_activitytimes& a, db_activitytimes& b) {
    a.Swap(&b);
  }
  inline void Swap(db_activitytimes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_activitytimes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_activitytimes* New() const final {
    return CreateMaybeMessage<db_activitytimes>(nullptr);
  }

  db_activitytimes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_activitytimes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_activitytimes& from);
  void MergeFrom(const db_activitytimes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_activitytimes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_activitytimes";
  }
  protected:
  explicit db_activitytimes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMidFieldNumber = 1,
    kMbegFieldNumber = 2,
    kMdurationFieldNumber = 3,
    kMstartFieldNumber = 4,
  };
  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 mbeg = 2;
  bool has_mbeg() const;
  private:
  bool _internal_has_mbeg() const;
  public:
  void clear_mbeg();
  ::PROTOBUF_NAMESPACE_ID::int32 mbeg() const;
  void set_mbeg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mbeg() const;
  void _internal_set_mbeg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mduration = 3;
  bool has_mduration() const;
  private:
  bool _internal_has_mduration() const;
  public:
  void clear_mduration();
  ::PROTOBUF_NAMESPACE_ID::int32 mduration() const;
  void set_mduration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mduration() const;
  void _internal_set_mduration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool mstart = 4;
  bool has_mstart() const;
  private:
  bool _internal_has_mstart() const;
  public:
  void clear_mstart();
  bool mstart() const;
  void set_mstart(bool value);
  private:
  bool _internal_mstart() const;
  void _internal_set_mstart(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_activitytimes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mbeg_;
  ::PROTOBUF_NAMESPACE_ID::int32 mduration_;
  bool mstart_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class activity_task_MopenEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<activity_task_MopenEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<activity_task_MopenEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  activity_task_MopenEntry_DoNotUse();
  activity_task_MopenEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const activity_task_MopenEntry_DoNotUse& other);
  static const activity_task_MopenEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const activity_task_MopenEntry_DoNotUse*>(&_activity_task_MopenEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[23];
  }

  public:
};

// -------------------------------------------------------------------

class activity_task_McloseEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<activity_task_McloseEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<activity_task_McloseEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  activity_task_McloseEntry_DoNotUse();
  activity_task_McloseEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const activity_task_McloseEntry_DoNotUse& other);
  static const activity_task_McloseEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const activity_task_McloseEntry_DoNotUse*>(&_activity_task_McloseEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[24];
  }

  public:
};

// -------------------------------------------------------------------

class activity_task PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.activity_task) */ {
 public:
  inline activity_task() : activity_task(nullptr) {};
  virtual ~activity_task();

  activity_task(const activity_task& from);
  activity_task(activity_task&& from) noexcept
    : activity_task() {
    *this = ::std::move(from);
  }

  inline activity_task& operator=(const activity_task& from) {
    CopyFrom(from);
    return *this;
  }
  inline activity_task& operator=(activity_task&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const activity_task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const activity_task* internal_default_instance() {
    return reinterpret_cast<const activity_task*>(
               &_activity_task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(activity_task& a, activity_task& b) {
    a.Swap(&b);
  }
  inline void Swap(activity_task* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(activity_task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline activity_task* New() const final {
    return CreateMaybeMessage<activity_task>(nullptr);
  }

  activity_task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<activity_task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const activity_task& from);
  void MergeFrom(const activity_task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(activity_task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.activity_task";
  }
  protected:
  explicit activity_task(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMopenFieldNumber = 1,
    kMcloseFieldNumber = 2,
  };
  // map<int32, bool> mopen = 1;
  int mopen_size() const;
  private:
  int _internal_mopen_size() const;
  public:
  void clear_mopen();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      _internal_mopen() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      _internal_mutable_mopen();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      mopen() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      mutable_mopen();

  // map<int32, bool> mclose = 2;
  int mclose_size() const;
  private:
  int _internal_mclose_size() const;
  public:
  void clear_mclose();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      _internal_mclose() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      _internal_mutable_mclose();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      mclose() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      mutable_mclose();

  // @@protoc_insertion_point(class_scope:pbdb.activity_task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      activity_task_MopenEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      0 > mopen_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      activity_task_McloseEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      0 > mclose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class activity_drawcompliance_MrewardEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<activity_drawcompliance_MrewardEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<activity_drawcompliance_MrewardEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  activity_drawcompliance_MrewardEntry_DoNotUse();
  activity_drawcompliance_MrewardEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const activity_drawcompliance_MrewardEntry_DoNotUse& other);
  static const activity_drawcompliance_MrewardEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const activity_drawcompliance_MrewardEntry_DoNotUse*>(&_activity_drawcompliance_MrewardEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[26];
  }

  public:
};

// -------------------------------------------------------------------

class activity_drawcompliance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.activity_drawcompliance) */ {
 public:
  inline activity_drawcompliance() : activity_drawcompliance(nullptr) {};
  virtual ~activity_drawcompliance();

  activity_drawcompliance(const activity_drawcompliance& from);
  activity_drawcompliance(activity_drawcompliance&& from) noexcept
    : activity_drawcompliance() {
    *this = ::std::move(from);
  }

  inline activity_drawcompliance& operator=(const activity_drawcompliance& from) {
    CopyFrom(from);
    return *this;
  }
  inline activity_drawcompliance& operator=(activity_drawcompliance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const activity_drawcompliance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const activity_drawcompliance* internal_default_instance() {
    return reinterpret_cast<const activity_drawcompliance*>(
               &_activity_drawcompliance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(activity_drawcompliance& a, activity_drawcompliance& b) {
    a.Swap(&b);
  }
  inline void Swap(activity_drawcompliance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(activity_drawcompliance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline activity_drawcompliance* New() const final {
    return CreateMaybeMessage<activity_drawcompliance>(nullptr);
  }

  activity_drawcompliance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<activity_drawcompliance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const activity_drawcompliance& from);
  void MergeFrom(const activity_drawcompliance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(activity_drawcompliance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.activity_drawcompliance";
  }
  protected:
  explicit activity_drawcompliance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMrewardFieldNumber = 2,
    kMcountFieldNumber = 1,
  };
  // map<int32, bool> mreward = 2;
  int mreward_size() const;
  private:
  int _internal_mreward_size() const;
  public:
  void clear_mreward();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      _internal_mreward() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      _internal_mutable_mreward();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      mreward() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      mutable_mreward();

  // int32 mcount = 1;
  bool has_mcount() const;
  private:
  bool _internal_has_mcount() const;
  public:
  void clear_mcount();
  ::PROTOBUF_NAMESPACE_ID::int32 mcount() const;
  void set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mcount() const;
  void _internal_set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.activity_drawcompliance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      activity_drawcompliance_MrewardEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      0 > mreward_;
  ::PROTOBUF_NAMESPACE_ID::int32 mcount_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_activity_MtaskEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_activity_MtaskEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_activity_MtaskEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_activity_MtaskEntry_DoNotUse();
  db_activity_MtaskEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_activity_MtaskEntry_DoNotUse& other);
  static const db_activity_MtaskEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_activity_MtaskEntry_DoNotUse*>(&_db_activity_MtaskEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[28];
  }

  public:
};

// -------------------------------------------------------------------

class db_activity_MdrawcomplianceEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_activity_MdrawcomplianceEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_activity_MdrawcomplianceEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_activity_MdrawcomplianceEntry_DoNotUse();
  db_activity_MdrawcomplianceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_activity_MdrawcomplianceEntry_DoNotUse& other);
  static const db_activity_MdrawcomplianceEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_activity_MdrawcomplianceEntry_DoNotUse*>(&_db_activity_MdrawcomplianceEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[29];
  }

  public:
};

// -------------------------------------------------------------------

class db_activity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_activity) */ {
 public:
  inline db_activity() : db_activity(nullptr) {};
  virtual ~db_activity();

  db_activity(const db_activity& from);
  db_activity(db_activity&& from) noexcept
    : db_activity() {
    *this = ::std::move(from);
  }

  inline db_activity& operator=(const db_activity& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_activity& operator=(db_activity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_activity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_activity* internal_default_instance() {
    return reinterpret_cast<const db_activity*>(
               &_db_activity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(db_activity& a, db_activity& b) {
    a.Swap(&b);
  }
  inline void Swap(db_activity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_activity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_activity* New() const final {
    return CreateMaybeMessage<db_activity>(nullptr);
  }

  db_activity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_activity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_activity& from);
  void MergeFrom(const db_activity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_activity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_activity";
  }
  protected:
  explicit db_activity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMtaskFieldNumber = 2,
    kMdrawcomplianceFieldNumber = 3,
    kMidFieldNumber = 1,
  };
  // map<int64, .pbdb.activity_task> mtask = 2;
  int mtask_size() const;
  private:
  int _internal_mtask_size() const;
  public:
  void clear_mtask();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >&
      _internal_mtask() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >*
      _internal_mutable_mtask();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >&
      mtask() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >*
      mutable_mtask();

  // map<int64, .pbdb.activity_drawcompliance> mdrawcompliance = 3;
  int mdrawcompliance_size() const;
  private:
  int _internal_mdrawcompliance_size() const;
  public:
  void clear_mdrawcompliance();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >&
      _internal_mdrawcompliance() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >*
      _internal_mutable_mdrawcompliance();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >&
      mdrawcompliance() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >*
      mutable_mdrawcompliance();

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_activity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_activity_MtaskEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mtask_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_activity_MdrawcomplianceEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mdrawcompliance_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_task_data_schedule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_task.data_schedule) */ {
 public:
  inline db_task_data_schedule() : db_task_data_schedule(nullptr) {};
  virtual ~db_task_data_schedule();

  db_task_data_schedule(const db_task_data_schedule& from);
  db_task_data_schedule(db_task_data_schedule&& from) noexcept
    : db_task_data_schedule() {
    *this = ::std::move(from);
  }

  inline db_task_data_schedule& operator=(const db_task_data_schedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_task_data_schedule& operator=(db_task_data_schedule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_task_data_schedule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_task_data_schedule* internal_default_instance() {
    return reinterpret_cast<const db_task_data_schedule*>(
               &_db_task_data_schedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(db_task_data_schedule& a, db_task_data_schedule& b) {
    a.Swap(&b);
  }
  inline void Swap(db_task_data_schedule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_task_data_schedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_task_data_schedule* New() const final {
    return CreateMaybeMessage<db_task_data_schedule>(nullptr);
  }

  db_task_data_schedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_task_data_schedule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_task_data_schedule& from);
  void MergeFrom(const db_task_data_schedule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_task_data_schedule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_task.data_schedule";
  }
  protected:
  explicit db_task_data_schedule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMtypeFieldNumber = 1,
    kMvalueFieldNumber = 2,
    kMsumintFieldNumber = 3,
  };
  // int32 mtype = 1;
  bool has_mtype() const;
  private:
  bool _internal_has_mtype() const;
  public:
  void clear_mtype();
  ::PROTOBUF_NAMESPACE_ID::int32 mtype() const;
  void set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtype() const;
  void _internal_set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mvalue = 2;
  bool has_mvalue() const;
  private:
  bool _internal_has_mvalue() const;
  public:
  void clear_mvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 mvalue() const;
  void set_mvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mvalue() const;
  void _internal_set_mvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 msumint = 3;
  bool has_msumint() const;
  private:
  bool _internal_has_msumint() const;
  public:
  void clear_msumint();
  ::PROTOBUF_NAMESPACE_ID::int32 msumint() const;
  void set_msumint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msumint() const;
  void _internal_set_msumint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_task.data_schedule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 mvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 msumint_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_task_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_task.data) */ {
 public:
  inline db_task_data() : db_task_data(nullptr) {};
  virtual ~db_task_data();

  db_task_data(const db_task_data& from);
  db_task_data(db_task_data&& from) noexcept
    : db_task_data() {
    *this = ::std::move(from);
  }

  inline db_task_data& operator=(const db_task_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_task_data& operator=(db_task_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_task_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_task_data* internal_default_instance() {
    return reinterpret_cast<const db_task_data*>(
               &_db_task_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(db_task_data& a, db_task_data& b) {
    a.Swap(&b);
  }
  inline void Swap(db_task_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_task_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_task_data* New() const final {
    return CreateMaybeMessage<db_task_data>(nullptr);
  }

  db_task_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_task_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_task_data& from);
  void MergeFrom(const db_task_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_task_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_task.data";
  }
  protected:
  explicit db_task_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMschedulesFieldNumber = 4,
    kMtaskidFieldNumber = 1,
    kMreceiveutcFieldNumber = 2,
    kMfinshutcFieldNumber = 3,
    kMreceiveFieldNumber = 5,
  };
  // repeated .pbdb.db_task.data_schedule mschedules = 4;
  int mschedules_size() const;
  private:
  int _internal_mschedules_size() const;
  public:
  void clear_mschedules();
  ::pbdb::db_task_data_schedule* mutable_mschedules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data_schedule >*
      mutable_mschedules();
  private:
  const ::pbdb::db_task_data_schedule& _internal_mschedules(int index) const;
  ::pbdb::db_task_data_schedule* _internal_add_mschedules();
  public:
  const ::pbdb::db_task_data_schedule& mschedules(int index) const;
  ::pbdb::db_task_data_schedule* add_mschedules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data_schedule >&
      mschedules() const;

  // int32 mtaskid = 1;
  bool has_mtaskid() const;
  private:
  bool _internal_has_mtaskid() const;
  public:
  void clear_mtaskid();
  ::PROTOBUF_NAMESPACE_ID::int32 mtaskid() const;
  void set_mtaskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtaskid() const;
  void _internal_set_mtaskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mreceiveutc = 2;
  bool has_mreceiveutc() const;
  private:
  bool _internal_has_mreceiveutc() const;
  public:
  void clear_mreceiveutc();
  ::PROTOBUF_NAMESPACE_ID::int32 mreceiveutc() const;
  void set_mreceiveutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mreceiveutc() const;
  void _internal_set_mreceiveutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mfinshutc = 3;
  bool has_mfinshutc() const;
  private:
  bool _internal_has_mfinshutc() const;
  public:
  void clear_mfinshutc();
  ::PROTOBUF_NAMESPACE_ID::int32 mfinshutc() const;
  void set_mfinshutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mfinshutc() const;
  void _internal_set_mfinshutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool mreceive = 5;
  bool has_mreceive() const;
  private:
  bool _internal_has_mreceive() const;
  public:
  void clear_mreceive();
  bool mreceive() const;
  void set_mreceive(bool value);
  private:
  bool _internal_mreceive() const;
  void _internal_set_mreceive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_task.data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data_schedule > mschedules_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtaskid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mreceiveutc_;
  ::PROTOBUF_NAMESPACE_ID::int32 mfinshutc_;
  bool mreceive_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_task_complete PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_task.complete) */ {
 public:
  inline db_task_complete() : db_task_complete(nullptr) {};
  virtual ~db_task_complete();

  db_task_complete(const db_task_complete& from);
  db_task_complete(db_task_complete&& from) noexcept
    : db_task_complete() {
    *this = ::std::move(from);
  }

  inline db_task_complete& operator=(const db_task_complete& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_task_complete& operator=(db_task_complete&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_task_complete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_task_complete* internal_default_instance() {
    return reinterpret_cast<const db_task_complete*>(
               &_db_task_complete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(db_task_complete& a, db_task_complete& b) {
    a.Swap(&b);
  }
  inline void Swap(db_task_complete* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_task_complete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_task_complete* New() const final {
    return CreateMaybeMessage<db_task_complete>(nullptr);
  }

  db_task_complete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_task_complete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_task_complete& from);
  void MergeFrom(const db_task_complete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_task_complete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_task.complete";
  }
  protected:
  explicit db_task_complete(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMhistoryFieldNumber = 1,
  };
  // repeated .pbdb.db_task.data mhistory = 1;
  int mhistory_size() const;
  private:
  int _internal_mhistory_size() const;
  public:
  void clear_mhistory();
  ::pbdb::db_task_data* mutable_mhistory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data >*
      mutable_mhistory();
  private:
  const ::pbdb::db_task_data& _internal_mhistory(int index) const;
  ::pbdb::db_task_data* _internal_add_mhistory();
  public:
  const ::pbdb::db_task_data& mhistory(int index) const;
  ::pbdb::db_task_data* add_mhistory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data >&
      mhistory() const;

  // @@protoc_insertion_point(class_scope:pbdb.db_task.complete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data > mhistory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_task_MrundatasEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_task_MrundatasEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_task_MrundatasEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_task_MrundatasEntry_DoNotUse();
  db_task_MrundatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_task_MrundatasEntry_DoNotUse& other);
  static const db_task_MrundatasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_task_MrundatasEntry_DoNotUse*>(&_db_task_MrundatasEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[34];
  }

  public:
};

// -------------------------------------------------------------------

class db_task_McompleteddatasEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_task_McompleteddatasEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_task_McompleteddatasEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_task_McompleteddatasEntry_DoNotUse();
  db_task_McompleteddatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_task_McompleteddatasEntry_DoNotUse& other);
  static const db_task_McompleteddatasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_task_McompleteddatasEntry_DoNotUse*>(&_db_task_McompleteddatasEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[35];
  }

  public:
};

// -------------------------------------------------------------------

class db_task PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_task) */ {
 public:
  inline db_task() : db_task(nullptr) {};
  virtual ~db_task();

  db_task(const db_task& from);
  db_task(db_task&& from) noexcept
    : db_task() {
    *this = ::std::move(from);
  }

  inline db_task& operator=(const db_task& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_task& operator=(db_task&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_task* internal_default_instance() {
    return reinterpret_cast<const db_task*>(
               &_db_task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(db_task& a, db_task& b) {
    a.Swap(&b);
  }
  inline void Swap(db_task* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_task* New() const final {
    return CreateMaybeMessage<db_task>(nullptr);
  }

  db_task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_task& from);
  void MergeFrom(const db_task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_task";
  }
  protected:
  explicit db_task(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef db_task_data_schedule data_schedule;
  typedef db_task_data data;
  typedef db_task_complete complete;

  // accessors -------------------------------------------------------

  enum : int {
    kMrundatasFieldNumber = 2,
    kMcompleteddatasFieldNumber = 3,
    kMidFieldNumber = 1,
  };
  // map<int32, .pbdb.db_task.data> mrundatas = 2;
  int mrundatas_size() const;
  private:
  int _internal_mrundatas_size() const;
  public:
  void clear_mrundatas();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >&
      _internal_mrundatas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >*
      _internal_mutable_mrundatas();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >&
      mrundatas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >*
      mutable_mrundatas();

  // map<int32, .pbdb.db_task.complete> mcompleteddatas = 3;
  int mcompleteddatas_size() const;
  private:
  int _internal_mcompleteddatas_size() const;
  public:
  void clear_mcompleteddatas();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >&
      _internal_mcompleteddatas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >*
      _internal_mutable_mcompleteddatas();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >&
      mcompleteddatas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >*
      mutable_mcompleteddatas();

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_task_MrundatasEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mrundatas_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_task_McompleteddatasEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mcompleteddatas_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_familyer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_familyer) */ {
 public:
  inline db_familyer() : db_familyer(nullptr) {};
  virtual ~db_familyer();

  db_familyer(const db_familyer& from);
  db_familyer(db_familyer&& from) noexcept
    : db_familyer() {
    *this = ::std::move(from);
  }

  inline db_familyer& operator=(const db_familyer& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_familyer& operator=(db_familyer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_familyer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_familyer* internal_default_instance() {
    return reinterpret_cast<const db_familyer*>(
               &_db_familyer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(db_familyer& a, db_familyer& b) {
    a.Swap(&b);
  }
  inline void Swap(db_familyer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_familyer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_familyer* New() const final {
    return CreateMaybeMessage<db_familyer>(nullptr);
  }

  db_familyer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_familyer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_familyer& from);
  void MergeFrom(const db_familyer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_familyer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_familyer";
  }
  protected:
  explicit db_familyer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef db_familyer_eposition eposition;
  static constexpr eposition none =
    db_familyer_eposition_none;
  static constexpr eposition leader =
    db_familyer_eposition_leader;
  static constexpr eposition counsellor =
    db_familyer_eposition_counsellor;
  static constexpr eposition ordinary =
    db_familyer_eposition_ordinary;
  static inline bool eposition_IsValid(int value) {
    return db_familyer_eposition_IsValid(value);
  }
  static constexpr eposition eposition_MIN =
    db_familyer_eposition_eposition_MIN;
  static constexpr eposition eposition_MAX =
    db_familyer_eposition_eposition_MAX;
  static constexpr int eposition_ARRAYSIZE =
    db_familyer_eposition_eposition_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eposition_descriptor() {
    return db_familyer_eposition_descriptor();
  }
  template<typename T>
  static inline const std::string& eposition_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eposition>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eposition_Name.");
    return db_familyer_eposition_Name(enum_t_value);
  }
  static inline bool eposition_Parse(const std::string& name,
      eposition* value) {
    return db_familyer_eposition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMidFieldNumber = 1,
    kMjoinutcFieldNumber = 2,
    kMlastsignutcFieldNumber = 3,
    kMlastleaveutcFieldNumber = 4,
    kMpositionFieldNumber = 5,
  };
  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 mjoinutc = 2;
  bool has_mjoinutc() const;
  private:
  bool _internal_has_mjoinutc() const;
  public:
  void clear_mjoinutc();
  ::PROTOBUF_NAMESPACE_ID::int32 mjoinutc() const;
  void set_mjoinutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mjoinutc() const;
  void _internal_set_mjoinutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mlastsignutc = 3;
  bool has_mlastsignutc() const;
  private:
  bool _internal_has_mlastsignutc() const;
  public:
  void clear_mlastsignutc();
  ::PROTOBUF_NAMESPACE_ID::int32 mlastsignutc() const;
  void set_mlastsignutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mlastsignutc() const;
  void _internal_set_mlastsignutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mlastleaveutc = 4;
  bool has_mlastleaveutc() const;
  private:
  bool _internal_has_mlastleaveutc() const;
  public:
  void clear_mlastleaveutc();
  ::PROTOBUF_NAMESPACE_ID::int32 mlastleaveutc() const;
  void set_mlastleaveutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mlastleaveutc() const;
  void _internal_set_mlastleaveutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .pbdb.db_familyer.eposition mposition = 5;
  bool has_mposition() const;
  private:
  bool _internal_has_mposition() const;
  public:
  void clear_mposition();
  ::pbdb::db_familyer_eposition mposition() const;
  void set_mposition(::pbdb::db_familyer_eposition value);
  private:
  ::pbdb::db_familyer_eposition _internal_mposition() const;
  void _internal_set_mposition(::pbdb::db_familyer_eposition value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_familyer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mjoinutc_;
  ::PROTOBUF_NAMESPACE_ID::int32 mlastsignutc_;
  ::PROTOBUF_NAMESPACE_ID::int32 mlastleaveutc_;
  int mposition_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_family PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_family) */ {
 public:
  inline db_family() : db_family(nullptr) {};
  virtual ~db_family();

  db_family(const db_family& from);
  db_family(db_family&& from) noexcept
    : db_family() {
    *this = ::std::move(from);
  }

  inline db_family& operator=(const db_family& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_family& operator=(db_family&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_family& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_family* internal_default_instance() {
    return reinterpret_cast<const db_family*>(
               &_db_family_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(db_family& a, db_family& b) {
    a.Swap(&b);
  }
  inline void Swap(db_family* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_family* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_family* New() const final {
    return CreateMaybeMessage<db_family>(nullptr);
  }

  db_family* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_family>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_family& from);
  void MergeFrom(const db_family& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_family* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_family";
  }
  protected:
  explicit db_family(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmemberFieldNumber = 7,
    kMapplylistFieldNumber = 8,
    kMnameFieldNumber = 3,
    kMidFieldNumber = 1,
    kMcreateutcFieldNumber = 2,
    kMlvFieldNumber = 5,
    kMleaderFieldNumber = 4,
    kMexpFieldNumber = 6,
  };
  // repeated int64 mmember = 7;
  int mmember_size() const;
  private:
  int _internal_mmember_size() const;
  public:
  void clear_mmember();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mmember(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_mmember() const;
  void _internal_add_mmember(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_mmember();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 mmember(int index) const;
  void set_mmember(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_mmember(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      mmember() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_mmember();

  // repeated int64 mapplylist = 8;
  int mapplylist_size() const;
  private:
  int _internal_mapplylist_size() const;
  public:
  void clear_mapplylist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mapplylist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_mapplylist() const;
  void _internal_add_mapplylist(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_mapplylist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 mapplylist(int index) const;
  void set_mapplylist(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_mapplylist(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      mapplylist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_mapplylist();

  // string mname = 3;
  bool has_mname() const;
  private:
  bool _internal_has_mname() const;
  public:
  void clear_mname();
  const std::string& mname() const;
  void set_mname(const std::string& value);
  void set_mname(std::string&& value);
  void set_mname(const char* value);
  void set_mname(const char* value, size_t size);
  std::string* mutable_mname();
  std::string* release_mname();
  void set_allocated_mname(std::string* mname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mname(
      std::string* mname);
  private:
  const std::string& _internal_mname() const;
  void _internal_set_mname(const std::string& value);
  std::string* _internal_mutable_mname();
  public:

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 mcreateutc = 2;
  bool has_mcreateutc() const;
  private:
  bool _internal_has_mcreateutc() const;
  public:
  void clear_mcreateutc();
  ::PROTOBUF_NAMESPACE_ID::int32 mcreateutc() const;
  void set_mcreateutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mcreateutc() const;
  void _internal_set_mcreateutc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mlv = 5;
  bool has_mlv() const;
  private:
  bool _internal_has_mlv() const;
  public:
  void clear_mlv();
  ::PROTOBUF_NAMESPACE_ID::int32 mlv() const;
  void set_mlv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mlv() const;
  void _internal_set_mlv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 mleader = 4;
  bool has_mleader() const;
  private:
  bool _internal_has_mleader() const;
  public:
  void clear_mleader();
  ::PROTOBUF_NAMESPACE_ID::int64 mleader() const;
  void set_mleader(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mleader() const;
  void _internal_set_mleader(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 mexp = 6;
  bool has_mexp() const;
  private:
  bool _internal_has_mexp() const;
  public:
  void clear_mexp();
  ::PROTOBUF_NAMESPACE_ID::int32 mexp() const;
  void set_mexp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mexp() const;
  void _internal_set_mexp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_family)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > mmember_;
  mutable std::atomic<int> _mmember_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > mapplylist_;
  mutable std::atomic<int> _mapplylist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mname_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mcreateutc_;
  ::PROTOBUF_NAMESPACE_ID::int32 mlv_;
  ::PROTOBUF_NAMESPACE_ID::int64 mleader_;
  ::PROTOBUF_NAMESPACE_ID::int32 mexp_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_friends PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_friends) */ {
 public:
  inline db_friends() : db_friends(nullptr) {};
  virtual ~db_friends();

  db_friends(const db_friends& from);
  db_friends(db_friends&& from) noexcept
    : db_friends() {
    *this = ::std::move(from);
  }

  inline db_friends& operator=(const db_friends& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_friends& operator=(db_friends&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_friends& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_friends* internal_default_instance() {
    return reinterpret_cast<const db_friends*>(
               &_db_friends_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(db_friends& a, db_friends& b) {
    a.Swap(&b);
  }
  inline void Swap(db_friends* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_friends* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_friends* New() const final {
    return CreateMaybeMessage<db_friends>(nullptr);
  }

  db_friends* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_friends>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_friends& from);
  void MergeFrom(const db_friends& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_friends* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_friends";
  }
  protected:
  explicit db_friends(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfriendsFieldNumber = 2,
    kMapplyfriendsFieldNumber = 3,
    kMidFieldNumber = 1,
  };
  // repeated int64 mfriends = 2;
  int mfriends_size() const;
  private:
  int _internal_mfriends_size() const;
  public:
  void clear_mfriends();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mfriends(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_mfriends() const;
  void _internal_add_mfriends(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_mfriends();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 mfriends(int index) const;
  void set_mfriends(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_mfriends(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      mfriends() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_mfriends();

  // repeated int64 mapplyfriends = 3;
  int mapplyfriends_size() const;
  private:
  int _internal_mapplyfriends_size() const;
  public:
  void clear_mapplyfriends();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mapplyfriends(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_mapplyfriends() const;
  void _internal_add_mapplyfriends(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_mapplyfriends();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 mapplyfriends(int index) const;
  void set_mapplyfriends(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_mapplyfriends(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      mapplyfriends() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_mapplyfriends();

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_friends)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > mfriends_;
  mutable std::atomic<int> _mfriends_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > mapplyfriends_;
  mutable std::atomic<int> _mapplyfriends_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class dbcross_test PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.dbcross_test) */ {
 public:
  inline dbcross_test() : dbcross_test(nullptr) {};
  virtual ~dbcross_test();

  dbcross_test(const dbcross_test& from);
  dbcross_test(dbcross_test&& from) noexcept
    : dbcross_test() {
    *this = ::std::move(from);
  }

  inline dbcross_test& operator=(const dbcross_test& from) {
    CopyFrom(from);
    return *this;
  }
  inline dbcross_test& operator=(dbcross_test&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dbcross_test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dbcross_test* internal_default_instance() {
    return reinterpret_cast<const dbcross_test*>(
               &_dbcross_test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(dbcross_test& a, dbcross_test& b) {
    a.Swap(&b);
  }
  inline void Swap(dbcross_test* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dbcross_test* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dbcross_test* New() const final {
    return CreateMaybeMessage<dbcross_test>(nullptr);
  }

  dbcross_test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dbcross_test>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dbcross_test& from);
  void MergeFrom(const dbcross_test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dbcross_test* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.dbcross_test";
  }
  protected:
  explicit dbcross_test(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMvalueFieldNumber = 2,
    kMnameFieldNumber = 1,
  };
  // repeated int64 mvalue = 2;
  int mvalue_size() const;
  private:
  int _internal_mvalue_size() const;
  public:
  void clear_mvalue();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mvalue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_mvalue() const;
  void _internal_add_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_mvalue();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 mvalue(int index) const;
  void set_mvalue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      mvalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_mvalue();

  // string mname = 1;
  bool has_mname() const;
  private:
  bool _internal_has_mname() const;
  public:
  void clear_mname();
  const std::string& mname() const;
  void set_mname(const std::string& value);
  void set_mname(std::string&& value);
  void set_mname(const char* value);
  void set_mname(const char* value, size_t size);
  std::string* mutable_mname();
  std::string* release_mname();
  void set_allocated_mname(std::string* mname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mname(
      std::string* mname);
  private:
  const std::string& _internal_mname() const;
  void _internal_set_mname(const std::string& value);
  std::string* _internal_mutable_mname();
  public:

  // @@protoc_insertion_point(class_scope:pbdb.dbcross_test)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > mvalue_;
  mutable std::atomic<int> _mvalue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mname_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_testlua_luadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_testlua.luadata) */ {
 public:
  inline db_testlua_luadata() : db_testlua_luadata(nullptr) {};
  virtual ~db_testlua_luadata();

  db_testlua_luadata(const db_testlua_luadata& from);
  db_testlua_luadata(db_testlua_luadata&& from) noexcept
    : db_testlua_luadata() {
    *this = ::std::move(from);
  }

  inline db_testlua_luadata& operator=(const db_testlua_luadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_testlua_luadata& operator=(db_testlua_luadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_testlua_luadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_testlua_luadata* internal_default_instance() {
    return reinterpret_cast<const db_testlua_luadata*>(
               &_db_testlua_luadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(db_testlua_luadata& a, db_testlua_luadata& b) {
    a.Swap(&b);
  }
  inline void Swap(db_testlua_luadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_testlua_luadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_testlua_luadata* New() const final {
    return CreateMaybeMessage<db_testlua_luadata>(nullptr);
  }

  db_testlua_luadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_testlua_luadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_testlua_luadata& from);
  void MergeFrom(const db_testlua_luadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_testlua_luadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_testlua.luadata";
  }
  protected:
  explicit db_testlua_luadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMkeyFieldNumber = 1,
    kMvalFieldNumber = 2,
  };
  // string mkey = 1;
  bool has_mkey() const;
  private:
  bool _internal_has_mkey() const;
  public:
  void clear_mkey();
  const std::string& mkey() const;
  void set_mkey(const std::string& value);
  void set_mkey(std::string&& value);
  void set_mkey(const char* value);
  void set_mkey(const char* value, size_t size);
  std::string* mutable_mkey();
  std::string* release_mkey();
  void set_allocated_mkey(std::string* mkey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mkey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mkey(
      std::string* mkey);
  private:
  const std::string& _internal_mkey() const;
  void _internal_set_mkey(const std::string& value);
  std::string* _internal_mutable_mkey();
  public:

  // string mval = 2;
  bool has_mval() const;
  private:
  bool _internal_has_mval() const;
  public:
  void clear_mval();
  const std::string& mval() const;
  void set_mval(const std::string& value);
  void set_mval(std::string&& value);
  void set_mval(const char* value);
  void set_mval(const char* value, size_t size);
  std::string* mutable_mval();
  std::string* release_mval();
  void set_allocated_mval(std::string* mval);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mval();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mval(
      std::string* mval);
  private:
  const std::string& _internal_mval() const;
  void _internal_set_mval(const std::string& value);
  std::string* _internal_mutable_mval();
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_testlua.luadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mval_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class db_testlua_MdatasEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_testlua_MdatasEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<db_testlua_MdatasEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  db_testlua_MdatasEntry_DoNotUse();
  db_testlua_MdatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const db_testlua_MdatasEntry_DoNotUse& other);
  static const db_testlua_MdatasEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const db_testlua_MdatasEntry_DoNotUse*>(&_db_testlua_MdatasEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[42];
  }

  public:
};

// -------------------------------------------------------------------

class db_testlua PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbdb.db_testlua) */ {
 public:
  inline db_testlua() : db_testlua(nullptr) {};
  virtual ~db_testlua();

  db_testlua(const db_testlua& from);
  db_testlua(db_testlua&& from) noexcept
    : db_testlua() {
    *this = ::std::move(from);
  }

  inline db_testlua& operator=(const db_testlua& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_testlua& operator=(db_testlua&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_testlua& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_testlua* internal_default_instance() {
    return reinterpret_cast<const db_testlua*>(
               &_db_testlua_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(db_testlua& a, db_testlua& b) {
    a.Swap(&b);
  }
  inline void Swap(db_testlua* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_testlua* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_testlua* New() const final {
    return CreateMaybeMessage<db_testlua>(nullptr);
  }

  db_testlua* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_testlua>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_testlua& from);
  void MergeFrom(const db_testlua& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_testlua* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbdb.db_testlua";
  }
  protected:
  explicit db_testlua(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef db_testlua_luadata luadata;

  // accessors -------------------------------------------------------

  enum : int {
    kMvalueFieldNumber = 2,
    kMdatasFieldNumber = 3,
    kMidFieldNumber = 1,
  };
  // repeated int64 mvalue = 2;
  int mvalue_size() const;
  private:
  int _internal_mvalue_size() const;
  public:
  void clear_mvalue();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mvalue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_mvalue() const;
  void _internal_add_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_mvalue();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 mvalue(int index) const;
  void set_mvalue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      mvalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_mvalue();

  // map<int32, .pbdb.db_testlua.luadata> mdatas = 3;
  int mdatas_size() const;
  private:
  int _internal_mdatas_size() const;
  public:
  void clear_mdatas();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata >&
      _internal_mdatas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata >*
      _internal_mutable_mdatas();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata >&
      mdatas() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata >*
      mutable_mdatas();

  // int64 mid = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbdb.db_testlua)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > mvalue_;
  mutable std::atomic<int> _mvalue_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      db_testlua_MdatasEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mdatas_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  friend struct ::TableStruct_db_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// db_account

// int64 mid = 1;
inline bool db_account::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_account::has_mid() const {
  return _internal_has_mid();
}
inline void db_account::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_account::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_account::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_account.mid)
  return _internal_mid();
}
inline void db_account::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  mid_ = value;
}
inline void db_account::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_account.mid)
}

// int64 mroleid = 2;
inline bool db_account::_internal_has_mroleid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool db_account::has_mroleid() const {
  return _internal_has_mroleid();
}
inline void db_account::clear_mroleid() {
  mroleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_account::_internal_mroleid() const {
  return mroleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_account::mroleid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_account.mroleid)
  return _internal_mroleid();
}
inline void db_account::_internal_set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  mroleid_ = value;
}
inline void db_account::set_mroleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mroleid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_account.mroleid)
}

// string maccount = 3;
inline bool db_account::_internal_has_maccount() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_account::has_maccount() const {
  return _internal_has_maccount();
}
inline void db_account::clear_maccount() {
  maccount_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& db_account::maccount() const {
  // @@protoc_insertion_point(field_get:pbdb.db_account.maccount)
  return _internal_maccount();
}
inline void db_account::set_maccount(const std::string& value) {
  _internal_set_maccount(value);
  // @@protoc_insertion_point(field_set:pbdb.db_account.maccount)
}
inline std::string* db_account::mutable_maccount() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_account.maccount)
  return _internal_mutable_maccount();
}
inline const std::string& db_account::_internal_maccount() const {
  return maccount_.Get();
}
inline void db_account::_internal_set_maccount(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  maccount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void db_account::set_maccount(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  maccount_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.db_account.maccount)
}
inline void db_account::set_maccount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  maccount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.db_account.maccount)
}
inline void db_account::set_maccount(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  maccount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.db_account.maccount)
}
inline std::string* db_account::_internal_mutable_maccount() {
  _has_bits_[0] |= 0x00000001u;
  return maccount_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* db_account::release_maccount() {
  // @@protoc_insertion_point(field_release:pbdb.db_account.maccount)
  if (!_internal_has_maccount()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return maccount_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_account::set_allocated_maccount(std::string* maccount) {
  if (maccount != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  maccount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maccount,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_account.maccount)
}
inline std::string* db_account::unsafe_arena_release_maccount() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.db_account.maccount)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return maccount_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void db_account::unsafe_arena_set_allocated_maccount(
    std::string* maccount) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (maccount != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  maccount_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      maccount, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_account.maccount)
}

// string mpassworld = 4;
inline bool db_account::_internal_has_mpassworld() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_account::has_mpassworld() const {
  return _internal_has_mpassworld();
}
inline void db_account::clear_mpassworld() {
  mpassworld_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& db_account::mpassworld() const {
  // @@protoc_insertion_point(field_get:pbdb.db_account.mpassworld)
  return _internal_mpassworld();
}
inline void db_account::set_mpassworld(const std::string& value) {
  _internal_set_mpassworld(value);
  // @@protoc_insertion_point(field_set:pbdb.db_account.mpassworld)
}
inline std::string* db_account::mutable_mpassworld() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_account.mpassworld)
  return _internal_mutable_mpassworld();
}
inline const std::string& db_account::_internal_mpassworld() const {
  return mpassworld_.Get();
}
inline void db_account::_internal_set_mpassworld(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mpassworld_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void db_account::set_mpassworld(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mpassworld_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.db_account.mpassworld)
}
inline void db_account::set_mpassworld(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mpassworld_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.db_account.mpassworld)
}
inline void db_account::set_mpassworld(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mpassworld_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.db_account.mpassworld)
}
inline std::string* db_account::_internal_mutable_mpassworld() {
  _has_bits_[0] |= 0x00000002u;
  return mpassworld_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* db_account::release_mpassworld() {
  // @@protoc_insertion_point(field_release:pbdb.db_account.mpassworld)
  if (!_internal_has_mpassworld()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mpassworld_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_account::set_allocated_mpassworld(std::string* mpassworld) {
  if (mpassworld != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mpassworld_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mpassworld,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_account.mpassworld)
}
inline std::string* db_account::unsafe_arena_release_mpassworld() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.db_account.mpassworld)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return mpassworld_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void db_account::unsafe_arena_set_allocated_mpassworld(
    std::string* mpassworld) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mpassworld != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mpassworld_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mpassworld, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_account.mpassworld)
}

// int32 marea = 5;
inline bool db_account::_internal_has_marea() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool db_account::has_marea() const {
  return _internal_has_marea();
}
inline void db_account::clear_marea() {
  marea_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_account::_internal_marea() const {
  return marea_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_account::marea() const {
  // @@protoc_insertion_point(field_get:pbdb.db_account.marea)
  return _internal_marea();
}
inline void db_account::_internal_set_marea(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  marea_ = value;
}
inline void db_account::set_marea(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_marea(value);
  // @@protoc_insertion_point(field_set:pbdb.db_account.marea)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// brief_activityvalues

// map<int32, int32> mactivity_rolelv = 1;
inline int brief_activityvalues::_internal_mactivity_rolelv_size() const {
  return mactivity_rolelv_.size();
}
inline int brief_activityvalues::mactivity_rolelv_size() const {
  return _internal_mactivity_rolelv_size();
}
inline void brief_activityvalues::clear_mactivity_rolelv() {
  mactivity_rolelv_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
brief_activityvalues::_internal_mactivity_rolelv() const {
  return mactivity_rolelv_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
brief_activityvalues::mactivity_rolelv() const {
  // @@protoc_insertion_point(field_map:pbdb.brief_activityvalues.mactivity_rolelv)
  return _internal_mactivity_rolelv();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
brief_activityvalues::_internal_mutable_mactivity_rolelv() {
  return mactivity_rolelv_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
brief_activityvalues::mutable_mactivity_rolelv() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.brief_activityvalues.mactivity_rolelv)
  return _internal_mutable_mactivity_rolelv();
}

// map<int32, int32> mactivity_rolegold = 2;
inline int brief_activityvalues::_internal_mactivity_rolegold_size() const {
  return mactivity_rolegold_.size();
}
inline int brief_activityvalues::mactivity_rolegold_size() const {
  return _internal_mactivity_rolegold_size();
}
inline void brief_activityvalues::clear_mactivity_rolegold() {
  mactivity_rolegold_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
brief_activityvalues::_internal_mactivity_rolegold() const {
  return mactivity_rolegold_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
brief_activityvalues::mactivity_rolegold() const {
  // @@protoc_insertion_point(field_map:pbdb.brief_activityvalues.mactivity_rolegold)
  return _internal_mactivity_rolegold();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
brief_activityvalues::_internal_mutable_mactivity_rolegold() {
  return mactivity_rolegold_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
brief_activityvalues::mutable_mactivity_rolegold() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.brief_activityvalues.mactivity_rolegold)
  return _internal_mutable_mactivity_rolegold();
}

// -------------------------------------------------------------------

// brief_base

// string mname = 1;
inline bool brief_base::_internal_has_mname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool brief_base::has_mname() const {
  return _internal_has_mname();
}
inline void brief_base::clear_mname() {
  mname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& brief_base::mname() const {
  // @@protoc_insertion_point(field_get:pbdb.brief_base.mname)
  return _internal_mname();
}
inline void brief_base::set_mname(const std::string& value) {
  _internal_set_mname(value);
  // @@protoc_insertion_point(field_set:pbdb.brief_base.mname)
}
inline std::string* brief_base::mutable_mname() {
  // @@protoc_insertion_point(field_mutable:pbdb.brief_base.mname)
  return _internal_mutable_mname();
}
inline const std::string& brief_base::_internal_mname() const {
  return mname_.Get();
}
inline void brief_base::_internal_set_mname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void brief_base::set_mname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.brief_base.mname)
}
inline void brief_base::set_mname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.brief_base.mname)
}
inline void brief_base::set_mname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.brief_base.mname)
}
inline std::string* brief_base::_internal_mutable_mname() {
  _has_bits_[0] |= 0x00000001u;
  return mname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* brief_base::release_mname() {
  // @@protoc_insertion_point(field_release:pbdb.brief_base.mname)
  if (!_internal_has_mname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void brief_base::set_allocated_mname(std::string* mname) {
  if (mname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.brief_base.mname)
}
inline std::string* brief_base::unsafe_arena_release_mname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.brief_base.mname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void brief_base::unsafe_arena_set_allocated_mname(
    std::string* mname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.brief_base.mname)
}

// int32 mlv = 2;
inline bool brief_base::_internal_has_mlv() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool brief_base::has_mlv() const {
  return _internal_has_mlv();
}
inline void brief_base::clear_mlv() {
  mlv_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 brief_base::_internal_mlv() const {
  return mlv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 brief_base::mlv() const {
  // @@protoc_insertion_point(field_get:pbdb.brief_base.mlv)
  return _internal_mlv();
}
inline void brief_base::_internal_set_mlv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mlv_ = value;
}
inline void brief_base::set_mlv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mlv(value);
  // @@protoc_insertion_point(field_set:pbdb.brief_base.mlv)
}

// int32 mmoneygold = 3;
inline bool brief_base::_internal_has_mmoneygold() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool brief_base::has_mmoneygold() const {
  return _internal_has_mmoneygold();
}
inline void brief_base::clear_mmoneygold() {
  mmoneygold_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 brief_base::_internal_mmoneygold() const {
  return mmoneygold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 brief_base::mmoneygold() const {
  // @@protoc_insertion_point(field_get:pbdb.brief_base.mmoneygold)
  return _internal_mmoneygold();
}
inline void brief_base::_internal_set_mmoneygold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mmoneygold_ = value;
}
inline void brief_base::set_mmoneygold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mmoneygold(value);
  // @@protoc_insertion_point(field_set:pbdb.brief_base.mmoneygold)
}

// int32 mmoneysilver = 4;
inline bool brief_base::_internal_has_mmoneysilver() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool brief_base::has_mmoneysilver() const {
  return _internal_has_mmoneysilver();
}
inline void brief_base::clear_mmoneysilver() {
  mmoneysilver_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 brief_base::_internal_mmoneysilver() const {
  return mmoneysilver_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 brief_base::mmoneysilver() const {
  // @@protoc_insertion_point(field_get:pbdb.brief_base.mmoneysilver)
  return _internal_mmoneysilver();
}
inline void brief_base::_internal_set_mmoneysilver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mmoneysilver_ = value;
}
inline void brief_base::set_mmoneysilver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mmoneysilver(value);
  // @@protoc_insertion_point(field_set:pbdb.brief_base.mmoneysilver)
}

// int32 mvip = 5;
inline bool brief_base::_internal_has_mvip() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool brief_base::has_mvip() const {
  return _internal_has_mvip();
}
inline void brief_base::clear_mvip() {
  mvip_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 brief_base::_internal_mvip() const {
  return mvip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 brief_base::mvip() const {
  // @@protoc_insertion_point(field_get:pbdb.brief_base.mvip)
  return _internal_mvip();
}
inline void brief_base::_internal_set_mvip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  mvip_ = value;
}
inline void brief_base::set_mvip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mvip(value);
  // @@protoc_insertion_point(field_set:pbdb.brief_base.mvip)
}

// int32 mnotalkutc = 6;
inline bool brief_base::_internal_has_mnotalkutc() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool brief_base::has_mnotalkutc() const {
  return _internal_has_mnotalkutc();
}
inline void brief_base::clear_mnotalkutc() {
  mnotalkutc_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 brief_base::_internal_mnotalkutc() const {
  return mnotalkutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 brief_base::mnotalkutc() const {
  // @@protoc_insertion_point(field_get:pbdb.brief_base.mnotalkutc)
  return _internal_mnotalkutc();
}
inline void brief_base::_internal_set_mnotalkutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  mnotalkutc_ = value;
}
inline void brief_base::set_mnotalkutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mnotalkutc(value);
  // @@protoc_insertion_point(field_set:pbdb.brief_base.mnotalkutc)
}

// int32 mcreateutc = 7;
inline bool brief_base::_internal_has_mcreateutc() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool brief_base::has_mcreateutc() const {
  return _internal_has_mcreateutc();
}
inline void brief_base::clear_mcreateutc() {
  mcreateutc_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 brief_base::_internal_mcreateutc() const {
  return mcreateutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 brief_base::mcreateutc() const {
  // @@protoc_insertion_point(field_get:pbdb.brief_base.mcreateutc)
  return _internal_mcreateutc();
}
inline void brief_base::_internal_set_mcreateutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  mcreateutc_ = value;
}
inline void brief_base::set_mcreateutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mcreateutc(value);
  // @@protoc_insertion_point(field_set:pbdb.brief_base.mcreateutc)
}

// -------------------------------------------------------------------

// db_brief

// int64 mid = 1;
inline bool db_brief::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_brief::has_mid() const {
  return _internal_has_mid();
}
inline void db_brief::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_brief::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_brief::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_brief.mid)
  return _internal_mid();
}
inline void db_brief::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  mid_ = value;
}
inline void db_brief::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_brief.mid)
}

// .pbdb.brief_base m_base = 2;
inline bool db_brief::_internal_has_m_base() const {
  return this != internal_default_instance() && m_base_ != nullptr;
}
inline bool db_brief::has_m_base() const {
  return _internal_has_m_base();
}
inline void db_brief::clear_m_base() {
  if (GetArena() == nullptr && m_base_ != nullptr) {
    delete m_base_;
  }
  m_base_ = nullptr;
}
inline const ::pbdb::brief_base& db_brief::_internal_m_base() const {
  const ::pbdb::brief_base* p = m_base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbdb::brief_base*>(
      &::pbdb::_brief_base_default_instance_);
}
inline const ::pbdb::brief_base& db_brief::m_base() const {
  // @@protoc_insertion_point(field_get:pbdb.db_brief.m_base)
  return _internal_m_base();
}
inline void db_brief::unsafe_arena_set_allocated_m_base(
    ::pbdb::brief_base* m_base) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_base_);
  }
  m_base_ = m_base;
  if (m_base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_brief.m_base)
}
inline ::pbdb::brief_base* db_brief::release_m_base() {
  auto temp = unsafe_arena_release_m_base();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbdb::brief_base* db_brief::unsafe_arena_release_m_base() {
  // @@protoc_insertion_point(field_release:pbdb.db_brief.m_base)
  
  ::pbdb::brief_base* temp = m_base_;
  m_base_ = nullptr;
  return temp;
}
inline ::pbdb::brief_base* db_brief::_internal_mutable_m_base() {
  
  if (m_base_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::brief_base>(GetArena());
    m_base_ = p;
  }
  return m_base_;
}
inline ::pbdb::brief_base* db_brief::mutable_m_base() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_brief.m_base)
  return _internal_mutable_m_base();
}
inline void db_brief::set_allocated_m_base(::pbdb::brief_base* m_base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete m_base_;
  }
  if (m_base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(m_base);
    if (message_arena != submessage_arena) {
      m_base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_base, submessage_arena);
    }
    
  } else {
    
  }
  m_base_ = m_base;
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_brief.m_base)
}

// .pbdb.brief_activityvalues mactivityvalues = 9;
inline bool db_brief::_internal_has_mactivityvalues() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mactivityvalues_ != nullptr);
  return value;
}
inline bool db_brief::has_mactivityvalues() const {
  return _internal_has_mactivityvalues();
}
inline void db_brief::clear_mactivityvalues() {
  if (GetArena() == nullptr && mactivityvalues_ != nullptr) {
    delete mactivityvalues_;
  }
  mactivityvalues_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pbdb::brief_activityvalues& db_brief::_internal_mactivityvalues() const {
  const ::pbdb::brief_activityvalues* p = mactivityvalues_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbdb::brief_activityvalues*>(
      &::pbdb::_brief_activityvalues_default_instance_);
}
inline const ::pbdb::brief_activityvalues& db_brief::mactivityvalues() const {
  // @@protoc_insertion_point(field_get:pbdb.db_brief.mactivityvalues)
  return _internal_mactivityvalues();
}
inline void db_brief::unsafe_arena_set_allocated_mactivityvalues(
    ::pbdb::brief_activityvalues* mactivityvalues) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mactivityvalues_);
  }
  mactivityvalues_ = mactivityvalues;
  if (mactivityvalues) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_brief.mactivityvalues)
}
inline ::pbdb::brief_activityvalues* db_brief::release_mactivityvalues() {
  auto temp = unsafe_arena_release_mactivityvalues();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbdb::brief_activityvalues* db_brief::unsafe_arena_release_mactivityvalues() {
  // @@protoc_insertion_point(field_release:pbdb.db_brief.mactivityvalues)
  _has_bits_[0] &= ~0x00000001u;
  ::pbdb::brief_activityvalues* temp = mactivityvalues_;
  mactivityvalues_ = nullptr;
  return temp;
}
inline ::pbdb::brief_activityvalues* db_brief::_internal_mutable_mactivityvalues() {
  _has_bits_[0] |= 0x00000001u;
  if (mactivityvalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::brief_activityvalues>(GetArena());
    mactivityvalues_ = p;
  }
  return mactivityvalues_;
}
inline ::pbdb::brief_activityvalues* db_brief::mutable_mactivityvalues() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_brief.mactivityvalues)
  return _internal_mutable_mactivityvalues();
}
inline void db_brief::set_allocated_mactivityvalues(::pbdb::brief_activityvalues* mactivityvalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mactivityvalues_;
  }
  if (mactivityvalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mactivityvalues);
    if (message_arena != submessage_arena) {
      mactivityvalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mactivityvalues, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mactivityvalues_ = mactivityvalues;
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_brief.mactivityvalues)
}

// -------------------------------------------------------------------

// db_role_recharge

// int32 mrechargeid = 1;
inline bool db_role_recharge::_internal_has_mrechargeid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_role_recharge::has_mrechargeid() const {
  return _internal_has_mrechargeid();
}
inline void db_role_recharge::clear_mrechargeid() {
  mrechargeid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_role_recharge::_internal_mrechargeid() const {
  return mrechargeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_role_recharge::mrechargeid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_role.recharge.mrechargeid)
  return _internal_mrechargeid();
}
inline void db_role_recharge::_internal_set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mrechargeid_ = value;
}
inline void db_role_recharge::set_mrechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mrechargeid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_role.recharge.mrechargeid)
}

// int32 mutc = 2;
inline bool db_role_recharge::_internal_has_mutc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_role_recharge::has_mutc() const {
  return _internal_has_mutc();
}
inline void db_role_recharge::clear_mutc() {
  mutc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_role_recharge::_internal_mutc() const {
  return mutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_role_recharge::mutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_role.recharge.mutc)
  return _internal_mutc();
}
inline void db_role_recharge::_internal_set_mutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mutc_ = value;
}
inline void db_role_recharge::set_mutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_role.recharge.mutc)
}

// -------------------------------------------------------------------

// db_role

// int64 mid = 1;
inline bool db_role::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_role::has_mid() const {
  return _internal_has_mid();
}
inline void db_role::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_role::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_role::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_role.mid)
  return _internal_mid();
}
inline void db_role::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
}
inline void db_role::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_role.mid)
}

// repeated .pbdb.db_role.recharge mrecharge = 2;
inline int db_role::_internal_mrecharge_size() const {
  return mrecharge_.size();
}
inline int db_role::mrecharge_size() const {
  return _internal_mrecharge_size();
}
inline void db_role::clear_mrecharge() {
  mrecharge_.Clear();
}
inline ::pbdb::db_role_recharge* db_role::mutable_mrecharge(int index) {
  // @@protoc_insertion_point(field_mutable:pbdb.db_role.mrecharge)
  return mrecharge_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_role_recharge >*
db_role::mutable_mrecharge() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_role.mrecharge)
  return &mrecharge_;
}
inline const ::pbdb::db_role_recharge& db_role::_internal_mrecharge(int index) const {
  return mrecharge_.Get(index);
}
inline const ::pbdb::db_role_recharge& db_role::mrecharge(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_role.mrecharge)
  return _internal_mrecharge(index);
}
inline ::pbdb::db_role_recharge* db_role::_internal_add_mrecharge() {
  return mrecharge_.Add();
}
inline ::pbdb::db_role_recharge* db_role::add_mrecharge() {
  // @@protoc_insertion_point(field_add:pbdb.db_role.mrecharge)
  return _internal_add_mrecharge();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_role_recharge >&
db_role::mrecharge() const {
  // @@protoc_insertion_point(field_list:pbdb.db_role.mrecharge)
  return mrecharge_;
}

// -------------------------------------------------------------------

// item

// int32 mid = 1;
inline bool item::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool item::has_mid() const {
  return _internal_has_mid();
}
inline void item::clear_mid() {
  mid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.item.mid)
  return _internal_mid();
}
inline void item::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
}
inline void item::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.item.mid)
}

// int32 mtid = 2;
inline bool item::_internal_has_mtid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool item::has_mtid() const {
  return _internal_has_mtid();
}
inline void item::clear_mtid() {
  mtid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::_internal_mtid() const {
  return mtid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::mtid() const {
  // @@protoc_insertion_point(field_get:pbdb.item.mtid)
  return _internal_mtid();
}
inline void item::_internal_set_mtid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mtid_ = value;
}
inline void item::set_mtid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtid(value);
  // @@protoc_insertion_point(field_set:pbdb.item.mtid)
}

// int32 mcount = 3;
inline bool item::_internal_has_mcount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool item::has_mcount() const {
  return _internal_has_mcount();
}
inline void item::clear_mcount() {
  mcount_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::_internal_mcount() const {
  return mcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::mcount() const {
  // @@protoc_insertion_point(field_get:pbdb.item.mcount)
  return _internal_mcount();
}
inline void item::_internal_set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mcount_ = value;
}
inline void item::set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mcount(value);
  // @@protoc_insertion_point(field_set:pbdb.item.mcount)
}

// int32 mlv = 4;
inline bool item::_internal_has_mlv() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool item::has_mlv() const {
  return _internal_has_mlv();
}
inline void item::clear_mlv() {
  mlv_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::_internal_mlv() const {
  return mlv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::mlv() const {
  // @@protoc_insertion_point(field_get:pbdb.item.mlv)
  return _internal_mlv();
}
inline void item::_internal_set_mlv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mlv_ = value;
}
inline void item::set_mlv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mlv(value);
  // @@protoc_insertion_point(field_set:pbdb.item.mlv)
}

// int32 mstar = 5;
inline bool item::_internal_has_mstar() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool item::has_mstar() const {
  return _internal_has_mstar();
}
inline void item::clear_mstar() {
  mstar_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::_internal_mstar() const {
  return mstar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 item::mstar() const {
  // @@protoc_insertion_point(field_get:pbdb.item.mstar)
  return _internal_mstar();
}
inline void item::_internal_set_mstar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  mstar_ = value;
}
inline void item::set_mstar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mstar(value);
  // @@protoc_insertion_point(field_set:pbdb.item.mstar)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// db_bag

// int64 mid = 1;
inline bool db_bag::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_bag::has_mid() const {
  return _internal_has_mid();
}
inline void db_bag::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_bag::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_bag::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_bag.mid)
  return _internal_mid();
}
inline void db_bag::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
}
inline void db_bag::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_bag.mid)
}

// map<int32, .pbdb.item> mitems = 2;
inline int db_bag::_internal_mitems_size() const {
  return mitems_.size();
}
inline int db_bag::mitems_size() const {
  return _internal_mitems_size();
}
inline void db_bag::clear_mitems() {
  mitems_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >&
db_bag::_internal_mitems() const {
  return mitems_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >&
db_bag::mitems() const {
  // @@protoc_insertion_point(field_map:pbdb.db_bag.mitems)
  return _internal_mitems();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >*
db_bag::_internal_mutable_mitems() {
  return mitems_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >*
db_bag::mutable_mitems() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_bag.mitems)
  return _internal_mutable_mitems();
}

// int32 mmaxid = 3;
inline bool db_bag::_internal_has_mmaxid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_bag::has_mmaxid() const {
  return _internal_has_mmaxid();
}
inline void db_bag::clear_mmaxid() {
  mmaxid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_bag::_internal_mmaxid() const {
  return mmaxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_bag::mmaxid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_bag.mmaxid)
  return _internal_mmaxid();
}
inline void db_bag::_internal_set_mmaxid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mmaxid_ = value;
}
inline void db_bag::set_mmaxid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mmaxid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_bag.mmaxid)
}

// -------------------------------------------------------------------

// db_keyvalue

// int64 mid = 1;
inline bool db_keyvalue::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_keyvalue::has_mid() const {
  return _internal_has_mid();
}
inline void db_keyvalue::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_keyvalue::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_keyvalue::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_keyvalue.mid)
  return _internal_mid();
}
inline void db_keyvalue::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  mid_ = value;
}
inline void db_keyvalue::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_keyvalue.mid)
}

// string mvalue = 2;
inline bool db_keyvalue::_internal_has_mvalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_keyvalue::has_mvalue() const {
  return _internal_has_mvalue();
}
inline void db_keyvalue::clear_mvalue() {
  mvalue_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& db_keyvalue::mvalue() const {
  // @@protoc_insertion_point(field_get:pbdb.db_keyvalue.mvalue)
  return _internal_mvalue();
}
inline void db_keyvalue::set_mvalue(const std::string& value) {
  _internal_set_mvalue(value);
  // @@protoc_insertion_point(field_set:pbdb.db_keyvalue.mvalue)
}
inline std::string* db_keyvalue::mutable_mvalue() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_keyvalue.mvalue)
  return _internal_mutable_mvalue();
}
inline const std::string& db_keyvalue::_internal_mvalue() const {
  return mvalue_.Get();
}
inline void db_keyvalue::_internal_set_mvalue(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void db_keyvalue::set_mvalue(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mvalue_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.db_keyvalue.mvalue)
}
inline void db_keyvalue::set_mvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.db_keyvalue.mvalue)
}
inline void db_keyvalue::set_mvalue(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.db_keyvalue.mvalue)
}
inline std::string* db_keyvalue::_internal_mutable_mvalue() {
  _has_bits_[0] |= 0x00000001u;
  return mvalue_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* db_keyvalue::release_mvalue() {
  // @@protoc_insertion_point(field_release:pbdb.db_keyvalue.mvalue)
  if (!_internal_has_mvalue()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mvalue_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_keyvalue::set_allocated_mvalue(std::string* mvalue) {
  if (mvalue != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_keyvalue.mvalue)
}
inline std::string* db_keyvalue::unsafe_arena_release_mvalue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.db_keyvalue.mvalue)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mvalue_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void db_keyvalue::unsafe_arena_set_allocated_mvalue(
    std::string* mvalue) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mvalue != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mvalue_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mvalue, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_keyvalue.mvalue)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// db_rolekeyvalue

// int64 mid = 1;
inline bool db_rolekeyvalue::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_rolekeyvalue::has_mid() const {
  return _internal_has_mid();
}
inline void db_rolekeyvalue::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_rolekeyvalue::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_rolekeyvalue::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_rolekeyvalue.mid)
  return _internal_mid();
}
inline void db_rolekeyvalue::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
}
inline void db_rolekeyvalue::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_rolekeyvalue.mid)
}

// map<string, string> mdata = 2;
inline int db_rolekeyvalue::_internal_mdata_size() const {
  return mdata_.size();
}
inline int db_rolekeyvalue::mdata_size() const {
  return _internal_mdata_size();
}
inline void db_rolekeyvalue::clear_mdata() {
  mdata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
db_rolekeyvalue::_internal_mdata() const {
  return mdata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
db_rolekeyvalue::mdata() const {
  // @@protoc_insertion_point(field_map:pbdb.db_rolekeyvalue.mdata)
  return _internal_mdata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
db_rolekeyvalue::_internal_mutable_mdata() {
  return mdata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
db_rolekeyvalue::mutable_mdata() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_rolekeyvalue.mdata)
  return _internal_mutable_mdata();
}

// -------------------------------------------------------------------

// mailitem

// int32 mitemtid = 1;
inline bool mailitem::_internal_has_mitemtid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool mailitem::has_mitemtid() const {
  return _internal_has_mitemtid();
}
inline void mailitem::clear_mitemtid() {
  mitemtid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mailitem::_internal_mitemtid() const {
  return mitemtid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mailitem::mitemtid() const {
  // @@protoc_insertion_point(field_get:pbdb.mailitem.mitemtid)
  return _internal_mitemtid();
}
inline void mailitem::_internal_set_mitemtid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mitemtid_ = value;
}
inline void mailitem::set_mitemtid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mitemtid(value);
  // @@protoc_insertion_point(field_set:pbdb.mailitem.mitemtid)
}

// int32 mcount = 2;
inline bool mailitem::_internal_has_mcount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool mailitem::has_mcount() const {
  return _internal_has_mcount();
}
inline void mailitem::clear_mcount() {
  mcount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mailitem::_internal_mcount() const {
  return mcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mailitem::mcount() const {
  // @@protoc_insertion_point(field_get:pbdb.mailitem.mcount)
  return _internal_mcount();
}
inline void mailitem::_internal_set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mcount_ = value;
}
inline void mailitem::set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mcount(value);
  // @@protoc_insertion_point(field_set:pbdb.mailitem.mcount)
}

// -------------------------------------------------------------------

// mail

// int32 mid = 1;
inline bool mail::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool mail::has_mid() const {
  return _internal_has_mid();
}
inline void mail::clear_mid() {
  mid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.mail.mid)
  return _internal_mid();
}
inline void mail::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mid_ = value;
}
inline void mail::set_mid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.mail.mid)
}

// int32 mcreateutc = 2;
inline bool mail::_internal_has_mcreateutc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool mail::has_mcreateutc() const {
  return _internal_has_mcreateutc();
}
inline void mail::clear_mcreateutc() {
  mcreateutc_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail::_internal_mcreateutc() const {
  return mcreateutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail::mcreateutc() const {
  // @@protoc_insertion_point(field_get:pbdb.mail.mcreateutc)
  return _internal_mcreateutc();
}
inline void mail::_internal_set_mcreateutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mcreateutc_ = value;
}
inline void mail::set_mcreateutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mcreateutc(value);
  // @@protoc_insertion_point(field_set:pbdb.mail.mcreateutc)
}

// int32 mtid = 3;
inline bool mail::_internal_has_mtid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool mail::has_mtid() const {
  return _internal_has_mtid();
}
inline void mail::clear_mtid() {
  mtid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail::_internal_mtid() const {
  return mtid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mail::mtid() const {
  // @@protoc_insertion_point(field_get:pbdb.mail.mtid)
  return _internal_mtid();
}
inline void mail::_internal_set_mtid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  mtid_ = value;
}
inline void mail::set_mtid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtid(value);
  // @@protoc_insertion_point(field_set:pbdb.mail.mtid)
}

// string mprams = 4;
inline bool mail::_internal_has_mprams() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool mail::has_mprams() const {
  return _internal_has_mprams();
}
inline void mail::clear_mprams() {
  mprams_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& mail::mprams() const {
  // @@protoc_insertion_point(field_get:pbdb.mail.mprams)
  return _internal_mprams();
}
inline void mail::set_mprams(const std::string& value) {
  _internal_set_mprams(value);
  // @@protoc_insertion_point(field_set:pbdb.mail.mprams)
}
inline std::string* mail::mutable_mprams() {
  // @@protoc_insertion_point(field_mutable:pbdb.mail.mprams)
  return _internal_mutable_mprams();
}
inline const std::string& mail::_internal_mprams() const {
  return mprams_.Get();
}
inline void mail::_internal_set_mprams(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mprams_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void mail::set_mprams(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mprams_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.mail.mprams)
}
inline void mail::set_mprams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mprams_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.mail.mprams)
}
inline void mail::set_mprams(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mprams_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.mail.mprams)
}
inline std::string* mail::_internal_mutable_mprams() {
  _has_bits_[0] |= 0x00000001u;
  return mprams_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* mail::release_mprams() {
  // @@protoc_insertion_point(field_release:pbdb.mail.mprams)
  if (!_internal_has_mprams()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mprams_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mail::set_allocated_mprams(std::string* mprams) {
  if (mprams != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mprams_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mprams,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.mail.mprams)
}
inline std::string* mail::unsafe_arena_release_mprams() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.mail.mprams)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mprams_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void mail::unsafe_arena_set_allocated_mprams(
    std::string* mprams) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mprams != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mprams_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mprams, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.mail.mprams)
}

// string mcontent = 5;
inline bool mail::_internal_has_mcontent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool mail::has_mcontent() const {
  return _internal_has_mcontent();
}
inline void mail::clear_mcontent() {
  mcontent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& mail::mcontent() const {
  // @@protoc_insertion_point(field_get:pbdb.mail.mcontent)
  return _internal_mcontent();
}
inline void mail::set_mcontent(const std::string& value) {
  _internal_set_mcontent(value);
  // @@protoc_insertion_point(field_set:pbdb.mail.mcontent)
}
inline std::string* mail::mutable_mcontent() {
  // @@protoc_insertion_point(field_mutable:pbdb.mail.mcontent)
  return _internal_mutable_mcontent();
}
inline const std::string& mail::_internal_mcontent() const {
  return mcontent_.Get();
}
inline void mail::_internal_set_mcontent(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void mail::set_mcontent(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mcontent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.mail.mcontent)
}
inline void mail::set_mcontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.mail.mcontent)
}
inline void mail::set_mcontent(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.mail.mcontent)
}
inline std::string* mail::_internal_mutable_mcontent() {
  _has_bits_[0] |= 0x00000002u;
  return mcontent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* mail::release_mcontent() {
  // @@protoc_insertion_point(field_release:pbdb.mail.mcontent)
  if (!_internal_has_mcontent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mcontent_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mail::set_allocated_mcontent(std::string* mcontent) {
  if (mcontent != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mcontent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mcontent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.mail.mcontent)
}
inline std::string* mail::unsafe_arena_release_mcontent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.mail.mcontent)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return mcontent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void mail::unsafe_arena_set_allocated_mcontent(
    std::string* mcontent) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mcontent != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mcontent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mcontent, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.mail.mcontent)
}

// repeated .pbdb.mailitem mitems = 6;
inline int mail::_internal_mitems_size() const {
  return mitems_.size();
}
inline int mail::mitems_size() const {
  return _internal_mitems_size();
}
inline void mail::clear_mitems() {
  mitems_.Clear();
}
inline ::pbdb::mailitem* mail::mutable_mitems(int index) {
  // @@protoc_insertion_point(field_mutable:pbdb.mail.mitems)
  return mitems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::mailitem >*
mail::mutable_mitems() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.mail.mitems)
  return &mitems_;
}
inline const ::pbdb::mailitem& mail::_internal_mitems(int index) const {
  return mitems_.Get(index);
}
inline const ::pbdb::mailitem& mail::mitems(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.mail.mitems)
  return _internal_mitems(index);
}
inline ::pbdb::mailitem* mail::_internal_add_mitems() {
  return mitems_.Add();
}
inline ::pbdb::mailitem* mail::add_mitems() {
  // @@protoc_insertion_point(field_add:pbdb.mail.mitems)
  return _internal_add_mitems();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::mailitem >&
mail::mitems() const {
  // @@protoc_insertion_point(field_list:pbdb.mail.mitems)
  return mitems_;
}

// bool mread = 7;
inline bool mail::_internal_has_mread() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool mail::has_mread() const {
  return _internal_has_mread();
}
inline void mail::clear_mread() {
  mread_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool mail::_internal_mread() const {
  return mread_;
}
inline bool mail::mread() const {
  // @@protoc_insertion_point(field_get:pbdb.mail.mread)
  return _internal_mread();
}
inline void mail::_internal_set_mread(bool value) {
  _has_bits_[0] |= 0x00000020u;
  mread_ = value;
}
inline void mail::set_mread(bool value) {
  _internal_set_mread(value);
  // @@protoc_insertion_point(field_set:pbdb.mail.mread)
}

// bool mdraw = 8;
inline bool mail::_internal_has_mdraw() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool mail::has_mdraw() const {
  return _internal_has_mdraw();
}
inline void mail::clear_mdraw() {
  mdraw_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool mail::_internal_mdraw() const {
  return mdraw_;
}
inline bool mail::mdraw() const {
  // @@protoc_insertion_point(field_get:pbdb.mail.mdraw)
  return _internal_mdraw();
}
inline void mail::_internal_set_mdraw(bool value) {
  _has_bits_[0] |= 0x00000040u;
  mdraw_ = value;
}
inline void mail::set_mdraw(bool value) {
  _internal_set_mdraw(value);
  // @@protoc_insertion_point(field_set:pbdb.mail.mdraw)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// db_mail

// int64 mid = 1;
inline bool db_mail::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_mail::has_mid() const {
  return _internal_has_mid();
}
inline void db_mail::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_mail::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_mail::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_mail.mid)
  return _internal_mid();
}
inline void db_mail::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
}
inline void db_mail::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_mail.mid)
}

// map<int32, .pbdb.mail> mmail = 2;
inline int db_mail::_internal_mmail_size() const {
  return mmail_.size();
}
inline int db_mail::mmail_size() const {
  return _internal_mmail_size();
}
inline void db_mail::clear_mmail() {
  mmail_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
db_mail::_internal_mmail() const {
  return mmail_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
db_mail::mmail() const {
  // @@protoc_insertion_point(field_map:pbdb.db_mail.mmail)
  return _internal_mmail();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
db_mail::_internal_mutable_mmail() {
  return mmail_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
db_mail::mutable_mmail() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_mail.mmail)
  return _internal_mutable_mmail();
}

// -------------------------------------------------------------------

// db_notice

// int64 mid = 1;
inline bool db_notice::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_notice::has_mid() const {
  return _internal_has_mid();
}
inline void db_notice::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_notice::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_notice::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_notice.mid)
  return _internal_mid();
}
inline void db_notice::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  mid_ = value;
}
inline void db_notice::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_notice.mid)
}

// string mnotice = 2;
inline bool db_notice::_internal_has_mnotice() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_notice::has_mnotice() const {
  return _internal_has_mnotice();
}
inline void db_notice::clear_mnotice() {
  mnotice_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& db_notice::mnotice() const {
  // @@protoc_insertion_point(field_get:pbdb.db_notice.mnotice)
  return _internal_mnotice();
}
inline void db_notice::set_mnotice(const std::string& value) {
  _internal_set_mnotice(value);
  // @@protoc_insertion_point(field_set:pbdb.db_notice.mnotice)
}
inline std::string* db_notice::mutable_mnotice() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_notice.mnotice)
  return _internal_mutable_mnotice();
}
inline const std::string& db_notice::_internal_mnotice() const {
  return mnotice_.Get();
}
inline void db_notice::_internal_set_mnotice(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mnotice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void db_notice::set_mnotice(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mnotice_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.db_notice.mnotice)
}
inline void db_notice::set_mnotice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mnotice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.db_notice.mnotice)
}
inline void db_notice::set_mnotice(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mnotice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.db_notice.mnotice)
}
inline std::string* db_notice::_internal_mutable_mnotice() {
  _has_bits_[0] |= 0x00000001u;
  return mnotice_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* db_notice::release_mnotice() {
  // @@protoc_insertion_point(field_release:pbdb.db_notice.mnotice)
  if (!_internal_has_mnotice()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mnotice_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_notice::set_allocated_mnotice(std::string* mnotice) {
  if (mnotice != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mnotice_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mnotice,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_notice.mnotice)
}
inline std::string* db_notice::unsafe_arena_release_mnotice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.db_notice.mnotice)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mnotice_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void db_notice::unsafe_arena_set_allocated_mnotice(
    std::string* mnotice) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mnotice != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mnotice_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mnotice, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_notice.mnotice)
}

// int32 mstarttime = 3;
inline bool db_notice::_internal_has_mstarttime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_notice::has_mstarttime() const {
  return _internal_has_mstarttime();
}
inline void db_notice::clear_mstarttime() {
  mstarttime_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_notice::_internal_mstarttime() const {
  return mstarttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_notice::mstarttime() const {
  // @@protoc_insertion_point(field_get:pbdb.db_notice.mstarttime)
  return _internal_mstarttime();
}
inline void db_notice::_internal_set_mstarttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mstarttime_ = value;
}
inline void db_notice::set_mstarttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mstarttime(value);
  // @@protoc_insertion_point(field_set:pbdb.db_notice.mstarttime)
}

// int32 mfinishtime = 4;
inline bool db_notice::_internal_has_mfinishtime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool db_notice::has_mfinishtime() const {
  return _internal_has_mfinishtime();
}
inline void db_notice::clear_mfinishtime() {
  mfinishtime_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_notice::_internal_mfinishtime() const {
  return mfinishtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_notice::mfinishtime() const {
  // @@protoc_insertion_point(field_get:pbdb.db_notice.mfinishtime)
  return _internal_mfinishtime();
}
inline void db_notice::_internal_set_mfinishtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mfinishtime_ = value;
}
inline void db_notice::set_mfinishtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mfinishtime(value);
  // @@protoc_insertion_point(field_set:pbdb.db_notice.mfinishtime)
}

// -------------------------------------------------------------------

// rankitem

// int64 mvalue = 1;
inline bool rankitem::_internal_has_mvalue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool rankitem::has_mvalue() const {
  return _internal_has_mvalue();
}
inline void rankitem::clear_mvalue() {
  mvalue_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 rankitem::_internal_mvalue() const {
  return mvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 rankitem::mvalue() const {
  // @@protoc_insertion_point(field_get:pbdb.rankitem.mvalue)
  return _internal_mvalue();
}
inline void rankitem::_internal_set_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mvalue_ = value;
}
inline void rankitem::set_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mvalue(value);
  // @@protoc_insertion_point(field_set:pbdb.rankitem.mvalue)
}

// int32 mtime = 2;
inline bool rankitem::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool rankitem::has_mtime() const {
  return _internal_has_mtime();
}
inline void rankitem::clear_mtime() {
  mtime_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rankitem::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 rankitem::mtime() const {
  // @@protoc_insertion_point(field_get:pbdb.rankitem.mtime)
  return _internal_mtime();
}
inline void rankitem::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mtime_ = value;
}
inline void rankitem::set_mtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:pbdb.rankitem.mtime)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// db_ranklist

// int64 mid = 1;
inline bool db_ranklist::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_ranklist::has_mid() const {
  return _internal_has_mid();
}
inline void db_ranklist::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_ranklist::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_ranklist::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_ranklist.mid)
  return _internal_mid();
}
inline void db_ranklist::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
}
inline void db_ranklist::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_ranklist.mid)
}

// map<int32, .pbdb.rankitem> mitems = 2;
inline int db_ranklist::_internal_mitems_size() const {
  return mitems_.size();
}
inline int db_ranklist::mitems_size() const {
  return _internal_mitems_size();
}
inline void db_ranklist::clear_mitems() {
  mitems_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >&
db_ranklist::_internal_mitems() const {
  return mitems_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >&
db_ranklist::mitems() const {
  // @@protoc_insertion_point(field_map:pbdb.db_ranklist.mitems)
  return _internal_mitems();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >*
db_ranklist::_internal_mutable_mitems() {
  return mitems_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >*
db_ranklist::mutable_mitems() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_ranklist.mitems)
  return _internal_mutable_mitems();
}

// -------------------------------------------------------------------

// db_activitytimes

// int64 mid = 1;
inline bool db_activitytimes::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_activitytimes::has_mid() const {
  return _internal_has_mid();
}
inline void db_activitytimes::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_activitytimes::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_activitytimes::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_activitytimes.mid)
  return _internal_mid();
}
inline void db_activitytimes::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
}
inline void db_activitytimes::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_activitytimes.mid)
}

// int32 mbeg = 2;
inline bool db_activitytimes::_internal_has_mbeg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_activitytimes::has_mbeg() const {
  return _internal_has_mbeg();
}
inline void db_activitytimes::clear_mbeg() {
  mbeg_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_activitytimes::_internal_mbeg() const {
  return mbeg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_activitytimes::mbeg() const {
  // @@protoc_insertion_point(field_get:pbdb.db_activitytimes.mbeg)
  return _internal_mbeg();
}
inline void db_activitytimes::_internal_set_mbeg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mbeg_ = value;
}
inline void db_activitytimes::set_mbeg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mbeg(value);
  // @@protoc_insertion_point(field_set:pbdb.db_activitytimes.mbeg)
}

// int32 mduration = 3;
inline bool db_activitytimes::_internal_has_mduration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_activitytimes::has_mduration() const {
  return _internal_has_mduration();
}
inline void db_activitytimes::clear_mduration() {
  mduration_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_activitytimes::_internal_mduration() const {
  return mduration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_activitytimes::mduration() const {
  // @@protoc_insertion_point(field_get:pbdb.db_activitytimes.mduration)
  return _internal_mduration();
}
inline void db_activitytimes::_internal_set_mduration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mduration_ = value;
}
inline void db_activitytimes::set_mduration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mduration(value);
  // @@protoc_insertion_point(field_set:pbdb.db_activitytimes.mduration)
}

// bool mstart = 4;
inline bool db_activitytimes::_internal_has_mstart() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool db_activitytimes::has_mstart() const {
  return _internal_has_mstart();
}
inline void db_activitytimes::clear_mstart() {
  mstart_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool db_activitytimes::_internal_mstart() const {
  return mstart_;
}
inline bool db_activitytimes::mstart() const {
  // @@protoc_insertion_point(field_get:pbdb.db_activitytimes.mstart)
  return _internal_mstart();
}
inline void db_activitytimes::_internal_set_mstart(bool value) {
  _has_bits_[0] |= 0x00000008u;
  mstart_ = value;
}
inline void db_activitytimes::set_mstart(bool value) {
  _internal_set_mstart(value);
  // @@protoc_insertion_point(field_set:pbdb.db_activitytimes.mstart)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// activity_task

// map<int32, bool> mopen = 1;
inline int activity_task::_internal_mopen_size() const {
  return mopen_.size();
}
inline int activity_task::mopen_size() const {
  return _internal_mopen_size();
}
inline void activity_task::clear_mopen() {
  mopen_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
activity_task::_internal_mopen() const {
  return mopen_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
activity_task::mopen() const {
  // @@protoc_insertion_point(field_map:pbdb.activity_task.mopen)
  return _internal_mopen();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
activity_task::_internal_mutable_mopen() {
  return mopen_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
activity_task::mutable_mopen() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.activity_task.mopen)
  return _internal_mutable_mopen();
}

// map<int32, bool> mclose = 2;
inline int activity_task::_internal_mclose_size() const {
  return mclose_.size();
}
inline int activity_task::mclose_size() const {
  return _internal_mclose_size();
}
inline void activity_task::clear_mclose() {
  mclose_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
activity_task::_internal_mclose() const {
  return mclose_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
activity_task::mclose() const {
  // @@protoc_insertion_point(field_map:pbdb.activity_task.mclose)
  return _internal_mclose();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
activity_task::_internal_mutable_mclose() {
  return mclose_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
activity_task::mutable_mclose() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.activity_task.mclose)
  return _internal_mutable_mclose();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// activity_drawcompliance

// int32 mcount = 1;
inline bool activity_drawcompliance::_internal_has_mcount() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool activity_drawcompliance::has_mcount() const {
  return _internal_has_mcount();
}
inline void activity_drawcompliance::clear_mcount() {
  mcount_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 activity_drawcompliance::_internal_mcount() const {
  return mcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 activity_drawcompliance::mcount() const {
  // @@protoc_insertion_point(field_get:pbdb.activity_drawcompliance.mcount)
  return _internal_mcount();
}
inline void activity_drawcompliance::_internal_set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mcount_ = value;
}
inline void activity_drawcompliance::set_mcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mcount(value);
  // @@protoc_insertion_point(field_set:pbdb.activity_drawcompliance.mcount)
}

// map<int32, bool> mreward = 2;
inline int activity_drawcompliance::_internal_mreward_size() const {
  return mreward_.size();
}
inline int activity_drawcompliance::mreward_size() const {
  return _internal_mreward_size();
}
inline void activity_drawcompliance::clear_mreward() {
  mreward_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
activity_drawcompliance::_internal_mreward() const {
  return mreward_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
activity_drawcompliance::mreward() const {
  // @@protoc_insertion_point(field_map:pbdb.activity_drawcompliance.mreward)
  return _internal_mreward();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
activity_drawcompliance::_internal_mutable_mreward() {
  return mreward_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
activity_drawcompliance::mutable_mreward() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.activity_drawcompliance.mreward)
  return _internal_mutable_mreward();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// db_activity

// int64 mid = 1;
inline bool db_activity::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_activity::has_mid() const {
  return _internal_has_mid();
}
inline void db_activity::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_activity::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_activity::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_activity.mid)
  return _internal_mid();
}
inline void db_activity::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
}
inline void db_activity::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_activity.mid)
}

// map<int64, .pbdb.activity_task> mtask = 2;
inline int db_activity::_internal_mtask_size() const {
  return mtask_.size();
}
inline int db_activity::mtask_size() const {
  return _internal_mtask_size();
}
inline void db_activity::clear_mtask() {
  mtask_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >&
db_activity::_internal_mtask() const {
  return mtask_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >&
db_activity::mtask() const {
  // @@protoc_insertion_point(field_map:pbdb.db_activity.mtask)
  return _internal_mtask();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >*
db_activity::_internal_mutable_mtask() {
  return mtask_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >*
db_activity::mutable_mtask() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_activity.mtask)
  return _internal_mutable_mtask();
}

// map<int64, .pbdb.activity_drawcompliance> mdrawcompliance = 3;
inline int db_activity::_internal_mdrawcompliance_size() const {
  return mdrawcompliance_.size();
}
inline int db_activity::mdrawcompliance_size() const {
  return _internal_mdrawcompliance_size();
}
inline void db_activity::clear_mdrawcompliance() {
  mdrawcompliance_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >&
db_activity::_internal_mdrawcompliance() const {
  return mdrawcompliance_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >&
db_activity::mdrawcompliance() const {
  // @@protoc_insertion_point(field_map:pbdb.db_activity.mdrawcompliance)
  return _internal_mdrawcompliance();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >*
db_activity::_internal_mutable_mdrawcompliance() {
  return mdrawcompliance_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >*
db_activity::mutable_mdrawcompliance() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_activity.mdrawcompliance)
  return _internal_mutable_mdrawcompliance();
}

// -------------------------------------------------------------------

// db_task_data_schedule

// int32 mtype = 1;
inline bool db_task_data_schedule::_internal_has_mtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_task_data_schedule::has_mtype() const {
  return _internal_has_mtype();
}
inline void db_task_data_schedule::clear_mtype() {
  mtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data_schedule::_internal_mtype() const {
  return mtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data_schedule::mtype() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data_schedule.mtype)
  return _internal_mtype();
}
inline void db_task_data_schedule::_internal_set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mtype_ = value;
}
inline void db_task_data_schedule::set_mtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtype(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.data_schedule.mtype)
}

// int32 mvalue = 2;
inline bool db_task_data_schedule::_internal_has_mvalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_task_data_schedule::has_mvalue() const {
  return _internal_has_mvalue();
}
inline void db_task_data_schedule::clear_mvalue() {
  mvalue_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data_schedule::_internal_mvalue() const {
  return mvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data_schedule::mvalue() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data_schedule.mvalue)
  return _internal_mvalue();
}
inline void db_task_data_schedule::_internal_set_mvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mvalue_ = value;
}
inline void db_task_data_schedule::set_mvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mvalue(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.data_schedule.mvalue)
}

// int32 msumint = 3;
inline bool db_task_data_schedule::_internal_has_msumint() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_task_data_schedule::has_msumint() const {
  return _internal_has_msumint();
}
inline void db_task_data_schedule::clear_msumint() {
  msumint_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data_schedule::_internal_msumint() const {
  return msumint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data_schedule::msumint() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data_schedule.msumint)
  return _internal_msumint();
}
inline void db_task_data_schedule::_internal_set_msumint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  msumint_ = value;
}
inline void db_task_data_schedule::set_msumint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msumint(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.data_schedule.msumint)
}

// -------------------------------------------------------------------

// db_task_data

// int32 mtaskid = 1;
inline bool db_task_data::_internal_has_mtaskid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_task_data::has_mtaskid() const {
  return _internal_has_mtaskid();
}
inline void db_task_data::clear_mtaskid() {
  mtaskid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data::_internal_mtaskid() const {
  return mtaskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data::mtaskid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data.mtaskid)
  return _internal_mtaskid();
}
inline void db_task_data::_internal_set_mtaskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mtaskid_ = value;
}
inline void db_task_data::set_mtaskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtaskid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.data.mtaskid)
}

// int32 mreceiveutc = 2;
inline bool db_task_data::_internal_has_mreceiveutc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_task_data::has_mreceiveutc() const {
  return _internal_has_mreceiveutc();
}
inline void db_task_data::clear_mreceiveutc() {
  mreceiveutc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data::_internal_mreceiveutc() const {
  return mreceiveutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data::mreceiveutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data.mreceiveutc)
  return _internal_mreceiveutc();
}
inline void db_task_data::_internal_set_mreceiveutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mreceiveutc_ = value;
}
inline void db_task_data::set_mreceiveutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mreceiveutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.data.mreceiveutc)
}

// int32 mfinshutc = 3;
inline bool db_task_data::_internal_has_mfinshutc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_task_data::has_mfinshutc() const {
  return _internal_has_mfinshutc();
}
inline void db_task_data::clear_mfinshutc() {
  mfinshutc_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data::_internal_mfinshutc() const {
  return mfinshutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_task_data::mfinshutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data.mfinshutc)
  return _internal_mfinshutc();
}
inline void db_task_data::_internal_set_mfinshutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mfinshutc_ = value;
}
inline void db_task_data::set_mfinshutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mfinshutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.data.mfinshutc)
}

// repeated .pbdb.db_task.data_schedule mschedules = 4;
inline int db_task_data::_internal_mschedules_size() const {
  return mschedules_.size();
}
inline int db_task_data::mschedules_size() const {
  return _internal_mschedules_size();
}
inline void db_task_data::clear_mschedules() {
  mschedules_.Clear();
}
inline ::pbdb::db_task_data_schedule* db_task_data::mutable_mschedules(int index) {
  // @@protoc_insertion_point(field_mutable:pbdb.db_task.data.mschedules)
  return mschedules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data_schedule >*
db_task_data::mutable_mschedules() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_task.data.mschedules)
  return &mschedules_;
}
inline const ::pbdb::db_task_data_schedule& db_task_data::_internal_mschedules(int index) const {
  return mschedules_.Get(index);
}
inline const ::pbdb::db_task_data_schedule& db_task_data::mschedules(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data.mschedules)
  return _internal_mschedules(index);
}
inline ::pbdb::db_task_data_schedule* db_task_data::_internal_add_mschedules() {
  return mschedules_.Add();
}
inline ::pbdb::db_task_data_schedule* db_task_data::add_mschedules() {
  // @@protoc_insertion_point(field_add:pbdb.db_task.data.mschedules)
  return _internal_add_mschedules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data_schedule >&
db_task_data::mschedules() const {
  // @@protoc_insertion_point(field_list:pbdb.db_task.data.mschedules)
  return mschedules_;
}

// bool mreceive = 5;
inline bool db_task_data::_internal_has_mreceive() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool db_task_data::has_mreceive() const {
  return _internal_has_mreceive();
}
inline void db_task_data::clear_mreceive() {
  mreceive_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool db_task_data::_internal_mreceive() const {
  return mreceive_;
}
inline bool db_task_data::mreceive() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.data.mreceive)
  return _internal_mreceive();
}
inline void db_task_data::_internal_set_mreceive(bool value) {
  _has_bits_[0] |= 0x00000008u;
  mreceive_ = value;
}
inline void db_task_data::set_mreceive(bool value) {
  _internal_set_mreceive(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.data.mreceive)
}

// -------------------------------------------------------------------

// db_task_complete

// repeated .pbdb.db_task.data mhistory = 1;
inline int db_task_complete::_internal_mhistory_size() const {
  return mhistory_.size();
}
inline int db_task_complete::mhistory_size() const {
  return _internal_mhistory_size();
}
inline void db_task_complete::clear_mhistory() {
  mhistory_.Clear();
}
inline ::pbdb::db_task_data* db_task_complete::mutable_mhistory(int index) {
  // @@protoc_insertion_point(field_mutable:pbdb.db_task.complete.mhistory)
  return mhistory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data >*
db_task_complete::mutable_mhistory() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_task.complete.mhistory)
  return &mhistory_;
}
inline const ::pbdb::db_task_data& db_task_complete::_internal_mhistory(int index) const {
  return mhistory_.Get(index);
}
inline const ::pbdb::db_task_data& db_task_complete::mhistory(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.complete.mhistory)
  return _internal_mhistory(index);
}
inline ::pbdb::db_task_data* db_task_complete::_internal_add_mhistory() {
  return mhistory_.Add();
}
inline ::pbdb::db_task_data* db_task_complete::add_mhistory() {
  // @@protoc_insertion_point(field_add:pbdb.db_task.complete.mhistory)
  return _internal_add_mhistory();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_task_data >&
db_task_complete::mhistory() const {
  // @@protoc_insertion_point(field_list:pbdb.db_task.complete.mhistory)
  return mhistory_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// db_task

// int64 mid = 1;
inline bool db_task::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_task::has_mid() const {
  return _internal_has_mid();
}
inline void db_task::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_task::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_task::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_task.mid)
  return _internal_mid();
}
inline void db_task::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
}
inline void db_task::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_task.mid)
}

// map<int32, .pbdb.db_task.data> mrundatas = 2;
inline int db_task::_internal_mrundatas_size() const {
  return mrundatas_.size();
}
inline int db_task::mrundatas_size() const {
  return _internal_mrundatas_size();
}
inline void db_task::clear_mrundatas() {
  mrundatas_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >&
db_task::_internal_mrundatas() const {
  return mrundatas_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >&
db_task::mrundatas() const {
  // @@protoc_insertion_point(field_map:pbdb.db_task.mrundatas)
  return _internal_mrundatas();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >*
db_task::_internal_mutable_mrundatas() {
  return mrundatas_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >*
db_task::mutable_mrundatas() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_task.mrundatas)
  return _internal_mutable_mrundatas();
}

// map<int32, .pbdb.db_task.complete> mcompleteddatas = 3;
inline int db_task::_internal_mcompleteddatas_size() const {
  return mcompleteddatas_.size();
}
inline int db_task::mcompleteddatas_size() const {
  return _internal_mcompleteddatas_size();
}
inline void db_task::clear_mcompleteddatas() {
  mcompleteddatas_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >&
db_task::_internal_mcompleteddatas() const {
  return mcompleteddatas_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >&
db_task::mcompleteddatas() const {
  // @@protoc_insertion_point(field_map:pbdb.db_task.mcompleteddatas)
  return _internal_mcompleteddatas();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >*
db_task::_internal_mutable_mcompleteddatas() {
  return mcompleteddatas_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >*
db_task::mutable_mcompleteddatas() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_task.mcompleteddatas)
  return _internal_mutable_mcompleteddatas();
}

// -------------------------------------------------------------------

// db_familyer

// int64 mid = 1;
inline bool db_familyer::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_familyer::has_mid() const {
  return _internal_has_mid();
}
inline void db_familyer::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_familyer::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_familyer::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_familyer.mid)
  return _internal_mid();
}
inline void db_familyer::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
}
inline void db_familyer::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_familyer.mid)
}

// int32 mjoinutc = 2;
inline bool db_familyer::_internal_has_mjoinutc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_familyer::has_mjoinutc() const {
  return _internal_has_mjoinutc();
}
inline void db_familyer::clear_mjoinutc() {
  mjoinutc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_familyer::_internal_mjoinutc() const {
  return mjoinutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_familyer::mjoinutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_familyer.mjoinutc)
  return _internal_mjoinutc();
}
inline void db_familyer::_internal_set_mjoinutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mjoinutc_ = value;
}
inline void db_familyer::set_mjoinutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mjoinutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_familyer.mjoinutc)
}

// int32 mlastsignutc = 3;
inline bool db_familyer::_internal_has_mlastsignutc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_familyer::has_mlastsignutc() const {
  return _internal_has_mlastsignutc();
}
inline void db_familyer::clear_mlastsignutc() {
  mlastsignutc_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_familyer::_internal_mlastsignutc() const {
  return mlastsignutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_familyer::mlastsignutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_familyer.mlastsignutc)
  return _internal_mlastsignutc();
}
inline void db_familyer::_internal_set_mlastsignutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mlastsignutc_ = value;
}
inline void db_familyer::set_mlastsignutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mlastsignutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_familyer.mlastsignutc)
}

// int32 mlastleaveutc = 4;
inline bool db_familyer::_internal_has_mlastleaveutc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool db_familyer::has_mlastleaveutc() const {
  return _internal_has_mlastleaveutc();
}
inline void db_familyer::clear_mlastleaveutc() {
  mlastleaveutc_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_familyer::_internal_mlastleaveutc() const {
  return mlastleaveutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_familyer::mlastleaveutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_familyer.mlastleaveutc)
  return _internal_mlastleaveutc();
}
inline void db_familyer::_internal_set_mlastleaveutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mlastleaveutc_ = value;
}
inline void db_familyer::set_mlastleaveutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mlastleaveutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_familyer.mlastleaveutc)
}

// .pbdb.db_familyer.eposition mposition = 5;
inline bool db_familyer::_internal_has_mposition() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool db_familyer::has_mposition() const {
  return _internal_has_mposition();
}
inline void db_familyer::clear_mposition() {
  mposition_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::pbdb::db_familyer_eposition db_familyer::_internal_mposition() const {
  return static_cast< ::pbdb::db_familyer_eposition >(mposition_);
}
inline ::pbdb::db_familyer_eposition db_familyer::mposition() const {
  // @@protoc_insertion_point(field_get:pbdb.db_familyer.mposition)
  return _internal_mposition();
}
inline void db_familyer::_internal_set_mposition(::pbdb::db_familyer_eposition value) {
  _has_bits_[0] |= 0x00000010u;
  mposition_ = value;
}
inline void db_familyer::set_mposition(::pbdb::db_familyer_eposition value) {
  _internal_set_mposition(value);
  // @@protoc_insertion_point(field_set:pbdb.db_familyer.mposition)
}

// -------------------------------------------------------------------

// db_family

// int64 mid = 1;
inline bool db_family::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_family::has_mid() const {
  return _internal_has_mid();
}
inline void db_family::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.mid)
  return _internal_mid();
}
inline void db_family::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  mid_ = value;
}
inline void db_family::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.mid)
}

// int32 mcreateutc = 2;
inline bool db_family::_internal_has_mcreateutc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool db_family::has_mcreateutc() const {
  return _internal_has_mcreateutc();
}
inline void db_family::clear_mcreateutc() {
  mcreateutc_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_family::_internal_mcreateutc() const {
  return mcreateutc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_family::mcreateutc() const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.mcreateutc)
  return _internal_mcreateutc();
}
inline void db_family::_internal_set_mcreateutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mcreateutc_ = value;
}
inline void db_family::set_mcreateutc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mcreateutc(value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.mcreateutc)
}

// string mname = 3;
inline bool db_family::_internal_has_mname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_family::has_mname() const {
  return _internal_has_mname();
}
inline void db_family::clear_mname() {
  mname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& db_family::mname() const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.mname)
  return _internal_mname();
}
inline void db_family::set_mname(const std::string& value) {
  _internal_set_mname(value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.mname)
}
inline std::string* db_family::mutable_mname() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_family.mname)
  return _internal_mutable_mname();
}
inline const std::string& db_family::_internal_mname() const {
  return mname_.Get();
}
inline void db_family::_internal_set_mname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void db_family::set_mname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.db_family.mname)
}
inline void db_family::set_mname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.db_family.mname)
}
inline void db_family::set_mname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.db_family.mname)
}
inline std::string* db_family::_internal_mutable_mname() {
  _has_bits_[0] |= 0x00000001u;
  return mname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* db_family::release_mname() {
  // @@protoc_insertion_point(field_release:pbdb.db_family.mname)
  if (!_internal_has_mname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_family::set_allocated_mname(std::string* mname) {
  if (mname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_family.mname)
}
inline std::string* db_family::unsafe_arena_release_mname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.db_family.mname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void db_family::unsafe_arena_set_allocated_mname(
    std::string* mname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_family.mname)
}

// int64 mleader = 4;
inline bool db_family::_internal_has_mleader() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool db_family::has_mleader() const {
  return _internal_has_mleader();
}
inline void db_family::clear_mleader() {
  mleader_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::_internal_mleader() const {
  return mleader_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::mleader() const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.mleader)
  return _internal_mleader();
}
inline void db_family::_internal_set_mleader(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  mleader_ = value;
}
inline void db_family::set_mleader(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mleader(value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.mleader)
}

// int32 mlv = 5;
inline bool db_family::_internal_has_mlv() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool db_family::has_mlv() const {
  return _internal_has_mlv();
}
inline void db_family::clear_mlv() {
  mlv_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_family::_internal_mlv() const {
  return mlv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_family::mlv() const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.mlv)
  return _internal_mlv();
}
inline void db_family::_internal_set_mlv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mlv_ = value;
}
inline void db_family::set_mlv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mlv(value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.mlv)
}

// int32 mexp = 6;
inline bool db_family::_internal_has_mexp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool db_family::has_mexp() const {
  return _internal_has_mexp();
}
inline void db_family::clear_mexp() {
  mexp_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_family::_internal_mexp() const {
  return mexp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_family::mexp() const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.mexp)
  return _internal_mexp();
}
inline void db_family::_internal_set_mexp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  mexp_ = value;
}
inline void db_family::set_mexp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mexp(value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.mexp)
}

// repeated int64 mmember = 7;
inline int db_family::_internal_mmember_size() const {
  return mmember_.size();
}
inline int db_family::mmember_size() const {
  return _internal_mmember_size();
}
inline void db_family::clear_mmember() {
  mmember_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::_internal_mmember(int index) const {
  return mmember_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::mmember(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.mmember)
  return _internal_mmember(index);
}
inline void db_family::set_mmember(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  mmember_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.mmember)
}
inline void db_family::_internal_add_mmember(::PROTOBUF_NAMESPACE_ID::int64 value) {
  mmember_.Add(value);
}
inline void db_family::add_mmember(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_mmember(value);
  // @@protoc_insertion_point(field_add:pbdb.db_family.mmember)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_family::_internal_mmember() const {
  return mmember_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_family::mmember() const {
  // @@protoc_insertion_point(field_list:pbdb.db_family.mmember)
  return _internal_mmember();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_family::_internal_mutable_mmember() {
  return &mmember_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_family::mutable_mmember() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_family.mmember)
  return _internal_mutable_mmember();
}

// repeated int64 mapplylist = 8;
inline int db_family::_internal_mapplylist_size() const {
  return mapplylist_.size();
}
inline int db_family::mapplylist_size() const {
  return _internal_mapplylist_size();
}
inline void db_family::clear_mapplylist() {
  mapplylist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::_internal_mapplylist(int index) const {
  return mapplylist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_family::mapplylist(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_family.mapplylist)
  return _internal_mapplylist(index);
}
inline void db_family::set_mapplylist(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  mapplylist_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbdb.db_family.mapplylist)
}
inline void db_family::_internal_add_mapplylist(::PROTOBUF_NAMESPACE_ID::int64 value) {
  mapplylist_.Add(value);
}
inline void db_family::add_mapplylist(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_mapplylist(value);
  // @@protoc_insertion_point(field_add:pbdb.db_family.mapplylist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_family::_internal_mapplylist() const {
  return mapplylist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_family::mapplylist() const {
  // @@protoc_insertion_point(field_list:pbdb.db_family.mapplylist)
  return _internal_mapplylist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_family::_internal_mutable_mapplylist() {
  return &mapplylist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_family::mutable_mapplylist() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_family.mapplylist)
  return _internal_mutable_mapplylist();
}

// -------------------------------------------------------------------

// db_friends

// int64 mid = 1;
inline bool db_friends::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_friends::has_mid() const {
  return _internal_has_mid();
}
inline void db_friends::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_friends::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_friends::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_friends.mid)
  return _internal_mid();
}
inline void db_friends::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
}
inline void db_friends::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_friends.mid)
}

// repeated int64 mfriends = 2;
inline int db_friends::_internal_mfriends_size() const {
  return mfriends_.size();
}
inline int db_friends::mfriends_size() const {
  return _internal_mfriends_size();
}
inline void db_friends::clear_mfriends() {
  mfriends_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_friends::_internal_mfriends(int index) const {
  return mfriends_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_friends::mfriends(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_friends.mfriends)
  return _internal_mfriends(index);
}
inline void db_friends::set_mfriends(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  mfriends_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbdb.db_friends.mfriends)
}
inline void db_friends::_internal_add_mfriends(::PROTOBUF_NAMESPACE_ID::int64 value) {
  mfriends_.Add(value);
}
inline void db_friends::add_mfriends(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_mfriends(value);
  // @@protoc_insertion_point(field_add:pbdb.db_friends.mfriends)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_friends::_internal_mfriends() const {
  return mfriends_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_friends::mfriends() const {
  // @@protoc_insertion_point(field_list:pbdb.db_friends.mfriends)
  return _internal_mfriends();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_friends::_internal_mutable_mfriends() {
  return &mfriends_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_friends::mutable_mfriends() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_friends.mfriends)
  return _internal_mutable_mfriends();
}

// repeated int64 mapplyfriends = 3;
inline int db_friends::_internal_mapplyfriends_size() const {
  return mapplyfriends_.size();
}
inline int db_friends::mapplyfriends_size() const {
  return _internal_mapplyfriends_size();
}
inline void db_friends::clear_mapplyfriends() {
  mapplyfriends_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_friends::_internal_mapplyfriends(int index) const {
  return mapplyfriends_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_friends::mapplyfriends(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_friends.mapplyfriends)
  return _internal_mapplyfriends(index);
}
inline void db_friends::set_mapplyfriends(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  mapplyfriends_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbdb.db_friends.mapplyfriends)
}
inline void db_friends::_internal_add_mapplyfriends(::PROTOBUF_NAMESPACE_ID::int64 value) {
  mapplyfriends_.Add(value);
}
inline void db_friends::add_mapplyfriends(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_mapplyfriends(value);
  // @@protoc_insertion_point(field_add:pbdb.db_friends.mapplyfriends)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_friends::_internal_mapplyfriends() const {
  return mapplyfriends_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_friends::mapplyfriends() const {
  // @@protoc_insertion_point(field_list:pbdb.db_friends.mapplyfriends)
  return _internal_mapplyfriends();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_friends::_internal_mutable_mapplyfriends() {
  return &mapplyfriends_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_friends::mutable_mapplyfriends() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_friends.mapplyfriends)
  return _internal_mutable_mapplyfriends();
}

// -------------------------------------------------------------------

// dbcross_test

// string mname = 1;
inline bool dbcross_test::_internal_has_mname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool dbcross_test::has_mname() const {
  return _internal_has_mname();
}
inline void dbcross_test::clear_mname() {
  mname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& dbcross_test::mname() const {
  // @@protoc_insertion_point(field_get:pbdb.dbcross_test.mname)
  return _internal_mname();
}
inline void dbcross_test::set_mname(const std::string& value) {
  _internal_set_mname(value);
  // @@protoc_insertion_point(field_set:pbdb.dbcross_test.mname)
}
inline std::string* dbcross_test::mutable_mname() {
  // @@protoc_insertion_point(field_mutable:pbdb.dbcross_test.mname)
  return _internal_mutable_mname();
}
inline const std::string& dbcross_test::_internal_mname() const {
  return mname_.Get();
}
inline void dbcross_test::_internal_set_mname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void dbcross_test::set_mname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.dbcross_test.mname)
}
inline void dbcross_test::set_mname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.dbcross_test.mname)
}
inline void dbcross_test::set_mname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.dbcross_test.mname)
}
inline std::string* dbcross_test::_internal_mutable_mname() {
  _has_bits_[0] |= 0x00000001u;
  return mname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* dbcross_test::release_mname() {
  // @@protoc_insertion_point(field_release:pbdb.dbcross_test.mname)
  if (!_internal_has_mname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void dbcross_test::set_allocated_mname(std::string* mname) {
  if (mname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.dbcross_test.mname)
}
inline std::string* dbcross_test::unsafe_arena_release_mname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.dbcross_test.mname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void dbcross_test::unsafe_arena_set_allocated_mname(
    std::string* mname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.dbcross_test.mname)
}

// repeated int64 mvalue = 2;
inline int dbcross_test::_internal_mvalue_size() const {
  return mvalue_.size();
}
inline int dbcross_test::mvalue_size() const {
  return _internal_mvalue_size();
}
inline void dbcross_test::clear_mvalue() {
  mvalue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 dbcross_test::_internal_mvalue(int index) const {
  return mvalue_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 dbcross_test::mvalue(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.dbcross_test.mvalue)
  return _internal_mvalue(index);
}
inline void dbcross_test::set_mvalue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  mvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbdb.dbcross_test.mvalue)
}
inline void dbcross_test::_internal_add_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  mvalue_.Add(value);
}
inline void dbcross_test::add_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_mvalue(value);
  // @@protoc_insertion_point(field_add:pbdb.dbcross_test.mvalue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
dbcross_test::_internal_mvalue() const {
  return mvalue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
dbcross_test::mvalue() const {
  // @@protoc_insertion_point(field_list:pbdb.dbcross_test.mvalue)
  return _internal_mvalue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
dbcross_test::_internal_mutable_mvalue() {
  return &mvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
dbcross_test::mutable_mvalue() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.dbcross_test.mvalue)
  return _internal_mutable_mvalue();
}

// -------------------------------------------------------------------

// db_testlua_luadata

// string mkey = 1;
inline bool db_testlua_luadata::_internal_has_mkey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_testlua_luadata::has_mkey() const {
  return _internal_has_mkey();
}
inline void db_testlua_luadata::clear_mkey() {
  mkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& db_testlua_luadata::mkey() const {
  // @@protoc_insertion_point(field_get:pbdb.db_testlua.luadata.mkey)
  return _internal_mkey();
}
inline void db_testlua_luadata::set_mkey(const std::string& value) {
  _internal_set_mkey(value);
  // @@protoc_insertion_point(field_set:pbdb.db_testlua.luadata.mkey)
}
inline std::string* db_testlua_luadata::mutable_mkey() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_testlua.luadata.mkey)
  return _internal_mutable_mkey();
}
inline const std::string& db_testlua_luadata::_internal_mkey() const {
  return mkey_.Get();
}
inline void db_testlua_luadata::_internal_set_mkey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void db_testlua_luadata::set_mkey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mkey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.db_testlua.luadata.mkey)
}
inline void db_testlua_luadata::set_mkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.db_testlua.luadata.mkey)
}
inline void db_testlua_luadata::set_mkey(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.db_testlua.luadata.mkey)
}
inline std::string* db_testlua_luadata::_internal_mutable_mkey() {
  _has_bits_[0] |= 0x00000001u;
  return mkey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* db_testlua_luadata::release_mkey() {
  // @@protoc_insertion_point(field_release:pbdb.db_testlua.luadata.mkey)
  if (!_internal_has_mkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_testlua_luadata::set_allocated_mkey(std::string* mkey) {
  if (mkey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_testlua.luadata.mkey)
}
inline std::string* db_testlua_luadata::unsafe_arena_release_mkey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.db_testlua.luadata.mkey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return mkey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void db_testlua_luadata::unsafe_arena_set_allocated_mkey(
    std::string* mkey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mkey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mkey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mkey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_testlua.luadata.mkey)
}

// string mval = 2;
inline bool db_testlua_luadata::_internal_has_mval() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool db_testlua_luadata::has_mval() const {
  return _internal_has_mval();
}
inline void db_testlua_luadata::clear_mval() {
  mval_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& db_testlua_luadata::mval() const {
  // @@protoc_insertion_point(field_get:pbdb.db_testlua.luadata.mval)
  return _internal_mval();
}
inline void db_testlua_luadata::set_mval(const std::string& value) {
  _internal_set_mval(value);
  // @@protoc_insertion_point(field_set:pbdb.db_testlua.luadata.mval)
}
inline std::string* db_testlua_luadata::mutable_mval() {
  // @@protoc_insertion_point(field_mutable:pbdb.db_testlua.luadata.mval)
  return _internal_mutable_mval();
}
inline const std::string& db_testlua_luadata::_internal_mval() const {
  return mval_.Get();
}
inline void db_testlua_luadata::_internal_set_mval(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void db_testlua_luadata::set_mval(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mval_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbdb.db_testlua.luadata.mval)
}
inline void db_testlua_luadata::set_mval(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbdb.db_testlua.luadata.mval)
}
inline void db_testlua_luadata::set_mval(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbdb.db_testlua.luadata.mval)
}
inline std::string* db_testlua_luadata::_internal_mutable_mval() {
  _has_bits_[0] |= 0x00000002u;
  return mval_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* db_testlua_luadata::release_mval() {
  // @@protoc_insertion_point(field_release:pbdb.db_testlua.luadata.mval)
  if (!_internal_has_mval()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mval_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_testlua_luadata::set_allocated_mval(std::string* mval) {
  if (mval != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mval_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mval,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbdb.db_testlua.luadata.mval)
}
inline std::string* db_testlua_luadata::unsafe_arena_release_mval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pbdb.db_testlua.luadata.mval)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return mval_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void db_testlua_luadata::unsafe_arena_set_allocated_mval(
    std::string* mval) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mval != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mval_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mval, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbdb.db_testlua.luadata.mval)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// db_testlua

// int64 mid = 1;
inline bool db_testlua::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_testlua::has_mid() const {
  return _internal_has_mid();
}
inline void db_testlua::clear_mid() {
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_testlua::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_testlua::mid() const {
  // @@protoc_insertion_point(field_get:pbdb.db_testlua.mid)
  return _internal_mid();
}
inline void db_testlua::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mid_ = value;
}
inline void db_testlua::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:pbdb.db_testlua.mid)
}

// repeated int64 mvalue = 2;
inline int db_testlua::_internal_mvalue_size() const {
  return mvalue_.size();
}
inline int db_testlua::mvalue_size() const {
  return _internal_mvalue_size();
}
inline void db_testlua::clear_mvalue() {
  mvalue_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_testlua::_internal_mvalue(int index) const {
  return mvalue_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 db_testlua::mvalue(int index) const {
  // @@protoc_insertion_point(field_get:pbdb.db_testlua.mvalue)
  return _internal_mvalue(index);
}
inline void db_testlua::set_mvalue(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  mvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbdb.db_testlua.mvalue)
}
inline void db_testlua::_internal_add_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  mvalue_.Add(value);
}
inline void db_testlua::add_mvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_mvalue(value);
  // @@protoc_insertion_point(field_add:pbdb.db_testlua.mvalue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_testlua::_internal_mvalue() const {
  return mvalue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
db_testlua::mvalue() const {
  // @@protoc_insertion_point(field_list:pbdb.db_testlua.mvalue)
  return _internal_mvalue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_testlua::_internal_mutable_mvalue() {
  return &mvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
db_testlua::mutable_mvalue() {
  // @@protoc_insertion_point(field_mutable_list:pbdb.db_testlua.mvalue)
  return _internal_mutable_mvalue();
}

// map<int32, .pbdb.db_testlua.luadata> mdatas = 3;
inline int db_testlua::_internal_mdatas_size() const {
  return mdatas_.size();
}
inline int db_testlua::mdatas_size() const {
  return _internal_mdatas_size();
}
inline void db_testlua::clear_mdatas() {
  mdatas_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata >&
db_testlua::_internal_mdatas() const {
  return mdatas_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata >&
db_testlua::mdatas() const {
  // @@protoc_insertion_point(field_map:pbdb.db_testlua.mdatas)
  return _internal_mdatas();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata >*
db_testlua::_internal_mutable_mdatas() {
  return mdatas_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata >*
db_testlua::mutable_mdatas() {
  // @@protoc_insertion_point(field_mutable_map:pbdb.db_testlua.mdatas)
  return _internal_mutable_mdatas();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbdb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pbdb::db_keyvalue_ekv> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbdb::db_keyvalue_ekv>() {
  return ::pbdb::db_keyvalue_ekv_descriptor();
}
template <> struct is_proto_enum< ::pbdb::db_familyer_eposition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbdb::db_familyer_eposition>() {
  return ::pbdb::db_familyer_eposition_descriptor();
}
template <> struct is_proto_enum< ::pbdb::ENUM_DB> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbdb::ENUM_DB>() {
  return ::pbdb::ENUM_DB_descriptor();
}
template <> struct is_proto_enum< ::pbdb::eranklist> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbdb::eranklist>() {
  return ::pbdb::eranklist_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_db_2eproto
