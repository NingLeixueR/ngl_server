// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#include "db.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_activity_drawcompliance_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_activity_drawcompliance_MrewardEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_activity_task_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_activity_task_McloseEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_activity_task_MopenEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_brief_activityvalues_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_brief_activityvalues_MactivityRolegoldEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_brief_activityvalues_MactivityRolelvEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_brief_base_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_activity_MdrawcomplianceEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_activity_MtaskEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_bag_MitemsEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_mail_MmailEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_ranklist_MitemsEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_role_recharge_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_rolekeyvalue_MdataEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_task_McompleteddatasEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_task_MrundatasEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_task_complete_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_task_data_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_task_data_schedule_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_testlua_MdatasEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_testlua_luadata_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_item_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mail_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mailitem_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rankitem_db_2eproto;
namespace pbdb {
class db_accountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_account> _instance;
} _db_account_default_instance_;
class brief_activityvalues_MactivityRolelvEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<brief_activityvalues_MactivityRolelvEntry_DoNotUse> _instance;
} _brief_activityvalues_MactivityRolelvEntry_DoNotUse_default_instance_;
class brief_activityvalues_MactivityRolegoldEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<brief_activityvalues_MactivityRolegoldEntry_DoNotUse> _instance;
} _brief_activityvalues_MactivityRolegoldEntry_DoNotUse_default_instance_;
class brief_activityvaluesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<brief_activityvalues> _instance;
} _brief_activityvalues_default_instance_;
class brief_baseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<brief_base> _instance;
} _brief_base_default_instance_;
class db_briefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_brief> _instance;
} _db_brief_default_instance_;
class db_role_rechargeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_role_recharge> _instance;
} _db_role_recharge_default_instance_;
class db_roleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_role> _instance;
} _db_role_default_instance_;
class itemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<item> _instance;
} _item_default_instance_;
class db_bag_MitemsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_bag_MitemsEntry_DoNotUse> _instance;
} _db_bag_MitemsEntry_DoNotUse_default_instance_;
class db_bagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_bag> _instance;
} _db_bag_default_instance_;
class db_keyvalueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_keyvalue> _instance;
} _db_keyvalue_default_instance_;
class db_rolekeyvalue_MdataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_rolekeyvalue_MdataEntry_DoNotUse> _instance;
} _db_rolekeyvalue_MdataEntry_DoNotUse_default_instance_;
class db_rolekeyvalueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_rolekeyvalue> _instance;
} _db_rolekeyvalue_default_instance_;
class mailitemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mailitem> _instance;
} _mailitem_default_instance_;
class mailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mail> _instance;
} _mail_default_instance_;
class db_mail_MmailEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_mail_MmailEntry_DoNotUse> _instance;
} _db_mail_MmailEntry_DoNotUse_default_instance_;
class db_mailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_mail> _instance;
} _db_mail_default_instance_;
class db_noticeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_notice> _instance;
} _db_notice_default_instance_;
class rankitemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rankitem> _instance;
} _rankitem_default_instance_;
class db_ranklist_MitemsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_ranklist_MitemsEntry_DoNotUse> _instance;
} _db_ranklist_MitemsEntry_DoNotUse_default_instance_;
class db_ranklistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_ranklist> _instance;
} _db_ranklist_default_instance_;
class db_activitytimesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_activitytimes> _instance;
} _db_activitytimes_default_instance_;
class activity_task_MopenEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<activity_task_MopenEntry_DoNotUse> _instance;
} _activity_task_MopenEntry_DoNotUse_default_instance_;
class activity_task_McloseEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<activity_task_McloseEntry_DoNotUse> _instance;
} _activity_task_McloseEntry_DoNotUse_default_instance_;
class activity_taskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<activity_task> _instance;
} _activity_task_default_instance_;
class activity_drawcompliance_MrewardEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<activity_drawcompliance_MrewardEntry_DoNotUse> _instance;
} _activity_drawcompliance_MrewardEntry_DoNotUse_default_instance_;
class activity_drawcomplianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<activity_drawcompliance> _instance;
} _activity_drawcompliance_default_instance_;
class db_activity_MtaskEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_activity_MtaskEntry_DoNotUse> _instance;
} _db_activity_MtaskEntry_DoNotUse_default_instance_;
class db_activity_MdrawcomplianceEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_activity_MdrawcomplianceEntry_DoNotUse> _instance;
} _db_activity_MdrawcomplianceEntry_DoNotUse_default_instance_;
class db_activityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_activity> _instance;
} _db_activity_default_instance_;
class db_task_data_scheduleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_task_data_schedule> _instance;
} _db_task_data_schedule_default_instance_;
class db_task_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_task_data> _instance;
} _db_task_data_default_instance_;
class db_task_completeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_task_complete> _instance;
} _db_task_complete_default_instance_;
class db_task_MrundatasEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_task_MrundatasEntry_DoNotUse> _instance;
} _db_task_MrundatasEntry_DoNotUse_default_instance_;
class db_task_McompleteddatasEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_task_McompleteddatasEntry_DoNotUse> _instance;
} _db_task_McompleteddatasEntry_DoNotUse_default_instance_;
class db_taskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_task> _instance;
} _db_task_default_instance_;
class db_familyerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_familyer> _instance;
} _db_familyer_default_instance_;
class db_familyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_family> _instance;
} _db_family_default_instance_;
class db_friendsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_friends> _instance;
} _db_friends_default_instance_;
class dbcross_testDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dbcross_test> _instance;
} _dbcross_test_default_instance_;
class db_testlua_luadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_testlua_luadata> _instance;
} _db_testlua_luadata_default_instance_;
class db_testlua_MdatasEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_testlua_MdatasEntry_DoNotUse> _instance;
} _db_testlua_MdatasEntry_DoNotUse_default_instance_;
class db_testluaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_testlua> _instance;
} _db_testlua_default_instance_;
}  // namespace pbdb
static void InitDefaultsscc_info_activity_drawcompliance_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_activity_drawcompliance_default_instance_;
    new (ptr) ::pbdb::activity_drawcompliance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::activity_drawcompliance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_activity_drawcompliance_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_activity_drawcompliance_db_2eproto}, {
      &scc_info_activity_drawcompliance_MrewardEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_activity_drawcompliance_MrewardEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_activity_drawcompliance_MrewardEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse();
  }
  ::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_activity_drawcompliance_MrewardEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_activity_drawcompliance_MrewardEntry_DoNotUse_db_2eproto}, {}};

static void InitDefaultsscc_info_activity_task_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_activity_task_default_instance_;
    new (ptr) ::pbdb::activity_task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::activity_task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_activity_task_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_activity_task_db_2eproto}, {
      &scc_info_activity_task_MopenEntry_DoNotUse_db_2eproto.base,
      &scc_info_activity_task_McloseEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_activity_task_McloseEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_activity_task_McloseEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::activity_task_McloseEntry_DoNotUse();
  }
  ::pbdb::activity_task_McloseEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_activity_task_McloseEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_activity_task_McloseEntry_DoNotUse_db_2eproto}, {}};

static void InitDefaultsscc_info_activity_task_MopenEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_activity_task_MopenEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::activity_task_MopenEntry_DoNotUse();
  }
  ::pbdb::activity_task_MopenEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_activity_task_MopenEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_activity_task_MopenEntry_DoNotUse_db_2eproto}, {}};

static void InitDefaultsscc_info_brief_activityvalues_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_brief_activityvalues_default_instance_;
    new (ptr) ::pbdb::brief_activityvalues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::brief_activityvalues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_brief_activityvalues_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_brief_activityvalues_db_2eproto}, {
      &scc_info_brief_activityvalues_MactivityRolelvEntry_DoNotUse_db_2eproto.base,
      &scc_info_brief_activityvalues_MactivityRolegoldEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_brief_activityvalues_MactivityRolegoldEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_brief_activityvalues_MactivityRolegoldEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse();
  }
  ::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_brief_activityvalues_MactivityRolegoldEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_brief_activityvalues_MactivityRolegoldEntry_DoNotUse_db_2eproto}, {}};

static void InitDefaultsscc_info_brief_activityvalues_MactivityRolelvEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_brief_activityvalues_MactivityRolelvEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse();
  }
  ::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_brief_activityvalues_MactivityRolelvEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_brief_activityvalues_MactivityRolelvEntry_DoNotUse_db_2eproto}, {}};

static void InitDefaultsscc_info_brief_base_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_brief_base_default_instance_;
    new (ptr) ::pbdb::brief_base();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::brief_base::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_brief_base_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_brief_base_db_2eproto}, {}};

static void InitDefaultsscc_info_db_account_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_account_default_instance_;
    new (ptr) ::pbdb::db_account();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_account::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_account_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_account_db_2eproto}, {}};

static void InitDefaultsscc_info_db_activity_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_activity_default_instance_;
    new (ptr) ::pbdb::db_activity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_activity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_db_activity_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_db_activity_db_2eproto}, {
      &scc_info_db_activity_MtaskEntry_DoNotUse_db_2eproto.base,
      &scc_info_db_activity_MdrawcomplianceEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_db_activity_MdrawcomplianceEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_activity_MdrawcomplianceEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse();
  }
  ::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_activity_MdrawcomplianceEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_activity_MdrawcomplianceEntry_DoNotUse_db_2eproto}, {
      &scc_info_activity_drawcompliance_db_2eproto.base,}};

static void InitDefaultsscc_info_db_activity_MtaskEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_activity_MtaskEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_activity_MtaskEntry_DoNotUse();
  }
  ::pbdb::db_activity_MtaskEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_activity_MtaskEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_activity_MtaskEntry_DoNotUse_db_2eproto}, {
      &scc_info_activity_task_db_2eproto.base,}};

static void InitDefaultsscc_info_db_activitytimes_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_activitytimes_default_instance_;
    new (ptr) ::pbdb::db_activitytimes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_activitytimes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_activitytimes_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_activitytimes_db_2eproto}, {}};

static void InitDefaultsscc_info_db_bag_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_bag_default_instance_;
    new (ptr) ::pbdb::db_bag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_bag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_bag_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_bag_db_2eproto}, {
      &scc_info_db_bag_MitemsEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_db_bag_MitemsEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_bag_MitemsEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_bag_MitemsEntry_DoNotUse();
  }
  ::pbdb::db_bag_MitemsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_bag_MitemsEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_bag_MitemsEntry_DoNotUse_db_2eproto}, {
      &scc_info_item_db_2eproto.base,}};

static void InitDefaultsscc_info_db_brief_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_brief_default_instance_;
    new (ptr) ::pbdb::db_brief();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_brief::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_db_brief_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_db_brief_db_2eproto}, {
      &scc_info_brief_base_db_2eproto.base,
      &scc_info_brief_activityvalues_db_2eproto.base,}};

static void InitDefaultsscc_info_db_family_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_family_default_instance_;
    new (ptr) ::pbdb::db_family();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_family::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_family_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_family_db_2eproto}, {}};

static void InitDefaultsscc_info_db_familyer_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_familyer_default_instance_;
    new (ptr) ::pbdb::db_familyer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_familyer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_familyer_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_familyer_db_2eproto}, {}};

static void InitDefaultsscc_info_db_friends_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_friends_default_instance_;
    new (ptr) ::pbdb::db_friends();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_friends::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_friends_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_friends_db_2eproto}, {}};

static void InitDefaultsscc_info_db_keyvalue_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_keyvalue_default_instance_;
    new (ptr) ::pbdb::db_keyvalue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_keyvalue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_keyvalue_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_keyvalue_db_2eproto}, {}};

static void InitDefaultsscc_info_db_mail_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_mail_default_instance_;
    new (ptr) ::pbdb::db_mail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_mail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_mail_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_mail_db_2eproto}, {
      &scc_info_db_mail_MmailEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_db_mail_MmailEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_mail_MmailEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_mail_MmailEntry_DoNotUse();
  }
  ::pbdb::db_mail_MmailEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_mail_MmailEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_mail_MmailEntry_DoNotUse_db_2eproto}, {
      &scc_info_mail_db_2eproto.base,}};

static void InitDefaultsscc_info_db_notice_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_notice_default_instance_;
    new (ptr) ::pbdb::db_notice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_notice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_notice_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_notice_db_2eproto}, {}};

static void InitDefaultsscc_info_db_ranklist_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_ranklist_default_instance_;
    new (ptr) ::pbdb::db_ranklist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_ranklist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_ranklist_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_ranklist_db_2eproto}, {
      &scc_info_db_ranklist_MitemsEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_db_ranklist_MitemsEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_ranklist_MitemsEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_ranklist_MitemsEntry_DoNotUse();
  }
  ::pbdb::db_ranklist_MitemsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_ranklist_MitemsEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_ranklist_MitemsEntry_DoNotUse_db_2eproto}, {
      &scc_info_rankitem_db_2eproto.base,}};

static void InitDefaultsscc_info_db_role_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_role_default_instance_;
    new (ptr) ::pbdb::db_role();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_role::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_role_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_role_db_2eproto}, {
      &scc_info_db_role_recharge_db_2eproto.base,}};

static void InitDefaultsscc_info_db_role_recharge_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_role_recharge_default_instance_;
    new (ptr) ::pbdb::db_role_recharge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_role_recharge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_role_recharge_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_role_recharge_db_2eproto}, {}};

static void InitDefaultsscc_info_db_rolekeyvalue_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_rolekeyvalue_default_instance_;
    new (ptr) ::pbdb::db_rolekeyvalue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_rolekeyvalue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_rolekeyvalue_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_rolekeyvalue_db_2eproto}, {
      &scc_info_db_rolekeyvalue_MdataEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_db_rolekeyvalue_MdataEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_rolekeyvalue_MdataEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse();
  }
  ::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_rolekeyvalue_MdataEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_rolekeyvalue_MdataEntry_DoNotUse_db_2eproto}, {}};

static void InitDefaultsscc_info_db_task_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_task_default_instance_;
    new (ptr) ::pbdb::db_task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_db_task_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_db_task_db_2eproto}, {
      &scc_info_db_task_MrundatasEntry_DoNotUse_db_2eproto.base,
      &scc_info_db_task_McompleteddatasEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_db_task_McompleteddatasEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_task_McompleteddatasEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_task_McompleteddatasEntry_DoNotUse();
  }
  ::pbdb::db_task_McompleteddatasEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_task_McompleteddatasEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_task_McompleteddatasEntry_DoNotUse_db_2eproto}, {
      &scc_info_db_task_complete_db_2eproto.base,}};

static void InitDefaultsscc_info_db_task_MrundatasEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_task_MrundatasEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_task_MrundatasEntry_DoNotUse();
  }
  ::pbdb::db_task_MrundatasEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_task_MrundatasEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_task_MrundatasEntry_DoNotUse_db_2eproto}, {
      &scc_info_db_task_data_db_2eproto.base,}};

static void InitDefaultsscc_info_db_task_complete_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_task_complete_default_instance_;
    new (ptr) ::pbdb::db_task_complete();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_task_complete::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_task_complete_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_task_complete_db_2eproto}, {
      &scc_info_db_task_data_db_2eproto.base,}};

static void InitDefaultsscc_info_db_task_data_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_task_data_default_instance_;
    new (ptr) ::pbdb::db_task_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_task_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_task_data_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_task_data_db_2eproto}, {
      &scc_info_db_task_data_schedule_db_2eproto.base,}};

static void InitDefaultsscc_info_db_task_data_schedule_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_task_data_schedule_default_instance_;
    new (ptr) ::pbdb::db_task_data_schedule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_task_data_schedule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_task_data_schedule_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_task_data_schedule_db_2eproto}, {}};

static void InitDefaultsscc_info_db_testlua_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_testlua_default_instance_;
    new (ptr) ::pbdb::db_testlua();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_testlua::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_testlua_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_testlua_db_2eproto}, {
      &scc_info_db_testlua_MdatasEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_db_testlua_MdatasEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_testlua_MdatasEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_testlua_MdatasEntry_DoNotUse();
  }
  ::pbdb::db_testlua_MdatasEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_testlua_MdatasEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_testlua_MdatasEntry_DoNotUse_db_2eproto}, {
      &scc_info_db_testlua_luadata_db_2eproto.base,}};

static void InitDefaultsscc_info_db_testlua_luadata_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_testlua_luadata_default_instance_;
    new (ptr) ::pbdb::db_testlua_luadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_testlua_luadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_testlua_luadata_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_testlua_luadata_db_2eproto}, {}};

static void InitDefaultsscc_info_dbcross_test_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_dbcross_test_default_instance_;
    new (ptr) ::pbdb::dbcross_test();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::dbcross_test::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_dbcross_test_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_dbcross_test_db_2eproto}, {}};

static void InitDefaultsscc_info_item_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_item_default_instance_;
    new (ptr) ::pbdb::item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_item_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_item_db_2eproto}, {}};

static void InitDefaultsscc_info_mail_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_mail_default_instance_;
    new (ptr) ::pbdb::mail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::mail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mail_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_mail_db_2eproto}, {
      &scc_info_mailitem_db_2eproto.base,}};

static void InitDefaultsscc_info_mailitem_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_mailitem_default_instance_;
    new (ptr) ::pbdb::mailitem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::mailitem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mailitem_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_mailitem_db_2eproto}, {}};

static void InitDefaultsscc_info_rankitem_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_rankitem_default_instance_;
    new (ptr) ::pbdb::rankitem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::rankitem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rankitem_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_rankitem_db_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_db_2eproto[44];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_db_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_db_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_db_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, mroleid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, maccount_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, mpassworld_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, marea_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues, mactivity_rolelv_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues, mactivity_rolegold_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_base, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_base, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_base, mname_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_base, mlv_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_base, mmoneygold_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_base, mmoneysilver_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_base, mvip_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_base, mnotalkutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_base, mcreateutc_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, m_base_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, mactivityvalues_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role_recharge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role_recharge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role_recharge, mrechargeid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role_recharge, mutc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role, mrecharge_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::item, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, mtid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, mcount_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, mlv_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, mstar_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag_MitemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag_MitemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag_MitemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag_MitemsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, mitems_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, mmaxid_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_keyvalue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_keyvalue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_keyvalue, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_keyvalue, mvalue_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue, mdata_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::mailitem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mailitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::mailitem, mitemtid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mailitem, mcount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, mcreateutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, mtid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, mprams_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, mcontent_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, mitems_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, mread_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, mdraw_),
  2,
  3,
  4,
  0,
  1,
  ~0u,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail_MmailEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail_MmailEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail_MmailEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail_MmailEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail, mmail_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, mnotice_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, mstarttime_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, mfinishtime_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbdb::rankitem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::rankitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::rankitem, mvalue_),
  PROTOBUF_FIELD_OFFSET(::pbdb::rankitem, mtime_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist_MitemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist_MitemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist_MitemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist_MitemsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist, mitems_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activitytimes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activitytimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activitytimes, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activitytimes, mbeg_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activitytimes, mduration_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activitytimes, mstart_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_MopenEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_MopenEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_MopenEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_MopenEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_McloseEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_McloseEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_McloseEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_McloseEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task, mopen_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task, mclose_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance, mcount_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance, mreward_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MtaskEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MtaskEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MtaskEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MtaskEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, mtask_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, mdrawcompliance_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, mtype_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, mvalue_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, msumint_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, mtaskid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, mreceiveutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, mfinshutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, mschedules_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, mreceive_),
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_complete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_complete, mhistory_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MrundatasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MrundatasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MrundatasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MrundatasEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_McompleteddatasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_McompleteddatasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_McompleteddatasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_McompleteddatasEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, mrundatas_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, mcompleteddatas_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, mjoinutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, mlastsignutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, mlastleaveutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, mposition_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, mcreateutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, mname_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, mleader_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, mlv_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, mexp_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, mmember_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, mapplylist_),
  1,
  2,
  0,
  4,
  3,
  5,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, mfriends_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, mapplyfriends_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::dbcross_test, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::dbcross_test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::dbcross_test, mname_),
  PROTOBUF_FIELD_OFFSET(::pbdb::dbcross_test, mvalue_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_luadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_luadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_luadata, mkey_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_luadata, mval_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_MdatasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_MdatasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_MdatasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_MdatasEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua, mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua, mvalue_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua, mdatas_),
  0,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::pbdb::db_account)},
  { 15, 22, sizeof(::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse)},
  { 24, 31, sizeof(::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse)},
  { 33, -1, sizeof(::pbdb::brief_activityvalues)},
  { 40, 52, sizeof(::pbdb::brief_base)},
  { 59, 67, sizeof(::pbdb::db_brief)},
  { 70, 77, sizeof(::pbdb::db_role_recharge)},
  { 79, 86, sizeof(::pbdb::db_role)},
  { 88, 98, sizeof(::pbdb::item)},
  { 103, 110, sizeof(::pbdb::db_bag_MitemsEntry_DoNotUse)},
  { 112, 120, sizeof(::pbdb::db_bag)},
  { 123, 130, sizeof(::pbdb::db_keyvalue)},
  { 132, 139, sizeof(::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse)},
  { 141, 148, sizeof(::pbdb::db_rolekeyvalue)},
  { 150, 157, sizeof(::pbdb::mailitem)},
  { 159, 172, sizeof(::pbdb::mail)},
  { 180, 187, sizeof(::pbdb::db_mail_MmailEntry_DoNotUse)},
  { 189, 196, sizeof(::pbdb::db_mail)},
  { 198, 207, sizeof(::pbdb::db_notice)},
  { 211, 218, sizeof(::pbdb::rankitem)},
  { 220, 227, sizeof(::pbdb::db_ranklist_MitemsEntry_DoNotUse)},
  { 229, 236, sizeof(::pbdb::db_ranklist)},
  { 238, 247, sizeof(::pbdb::db_activitytimes)},
  { 251, 258, sizeof(::pbdb::activity_task_MopenEntry_DoNotUse)},
  { 260, 267, sizeof(::pbdb::activity_task_McloseEntry_DoNotUse)},
  { 269, -1, sizeof(::pbdb::activity_task)},
  { 276, 283, sizeof(::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse)},
  { 285, 292, sizeof(::pbdb::activity_drawcompliance)},
  { 294, 301, sizeof(::pbdb::db_activity_MtaskEntry_DoNotUse)},
  { 303, 310, sizeof(::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse)},
  { 312, 320, sizeof(::pbdb::db_activity)},
  { 323, 331, sizeof(::pbdb::db_task_data_schedule)},
  { 334, 344, sizeof(::pbdb::db_task_data)},
  { 349, -1, sizeof(::pbdb::db_task_complete)},
  { 355, 362, sizeof(::pbdb::db_task_MrundatasEntry_DoNotUse)},
  { 364, 371, sizeof(::pbdb::db_task_McompleteddatasEntry_DoNotUse)},
  { 373, 381, sizeof(::pbdb::db_task)},
  { 384, 394, sizeof(::pbdb::db_familyer)},
  { 399, 412, sizeof(::pbdb::db_family)},
  { 420, 428, sizeof(::pbdb::db_friends)},
  { 431, 438, sizeof(::pbdb::dbcross_test)},
  { 440, 447, sizeof(::pbdb::db_testlua_luadata)},
  { 449, 456, sizeof(::pbdb::db_testlua_MdatasEntry_DoNotUse)},
  { 458, 466, sizeof(::pbdb::db_testlua)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_brief_activityvalues_MactivityRolelvEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_brief_activityvalues_MactivityRolegoldEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_brief_activityvalues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_brief_base_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_brief_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_role_recharge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_role_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_bag_MitemsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_bag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_keyvalue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_rolekeyvalue_MdataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_rolekeyvalue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_mailitem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_mail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_mail_MmailEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_mail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_notice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_rankitem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_ranklist_MitemsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_ranklist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_activitytimes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_activity_task_MopenEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_activity_task_McloseEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_activity_task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_activity_drawcompliance_MrewardEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_activity_drawcompliance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_activity_MtaskEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_activity_MdrawcomplianceEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_activity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_task_data_schedule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_task_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_task_complete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_task_MrundatasEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_task_McompleteddatasEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_familyer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_family_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_friends_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_dbcross_test_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_testlua_luadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_testlua_MdatasEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_testlua_default_instance_),
};

const char descriptor_table_protodef_db_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010db.proto\022\004pbdb\"\262\001\n\ndb_account\022\020\n\003mid\030\001"
  " \001(\003H\000\210\001\001\022\024\n\007mroleid\030\002 \001(\003H\001\210\001\001\022\025\n\010macco"
  "unt\030\003 \001(\tH\002\210\001\001\022\027\n\nmpassworld\030\004 \001(\tH\003\210\001\001\022"
  "\022\n\005marea\030\005 \001(\005H\004\210\001\001B\006\n\004_midB\n\n\010_mroleidB"
  "\013\n\t_maccountB\r\n\013_mpassworldB\010\n\006_marea\"\242\002"
  "\n\024brief_activityvalues\022I\n\020mactivity_role"
  "lv\030\001 \003(\0132/.pbdb.brief_activityvalues.Mac"
  "tivityRolelvEntry\022M\n\022mactivity_rolegold\030"
  "\002 \003(\01321.pbdb.brief_activityvalues.Mactiv"
  "ityRolegoldEntry\0326\n\024MactivityRolelvEntry"
  "\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\0328\n\026Mact"
  "ivityRolegoldEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value"
  "\030\002 \001(\005:\0028\001\"\204\002\n\nbrief_base\022\022\n\005mname\030\001 \001(\t"
  "H\000\210\001\001\022\020\n\003mlv\030\002 \001(\005H\001\210\001\001\022\027\n\nmmoneygold\030\003 "
  "\001(\005H\002\210\001\001\022\031\n\014mmoneysilver\030\004 \001(\005H\003\210\001\001\022\021\n\004m"
  "vip\030\005 \001(\005H\004\210\001\001\022\027\n\nmnotalkutc\030\006 \001(\005H\005\210\001\001\022"
  "\027\n\nmcreateutc\030\007 \001(\005H\006\210\001\001B\010\n\006_mnameB\006\n\004_m"
  "lvB\r\n\013_mmoneygoldB\017\n\r_mmoneysilverB\007\n\005_m"
  "vipB\r\n\013_mnotalkutcB\r\n\013_mcreateutc\"\224\001\n\010db"
  "_brief\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022 \n\006m_base\030\002 \001(\013"
  "2\020.pbdb.brief_base\0228\n\017mactivityvalues\030\t "
  "\001(\0132\032.pbdb.brief_activityvaluesH\001\210\001\001B\006\n\004"
  "_midB\022\n\020_mactivityvalues\"\240\001\n\007db_role\022\020\n\003"
  "mid\030\001 \001(\003H\000\210\001\001\022)\n\tmrecharge\030\002 \003(\0132\026.pbdb"
  ".db_role.recharge\032P\n\010recharge\022\030\n\013mrechar"
  "geid\030\001 \001(\005H\000\210\001\001\022\021\n\004mutc\030\002 \001(\005H\001\210\001\001B\016\n\014_m"
  "rechargeidB\007\n\005_mutcB\006\n\004_mid\"\224\001\n\004item\022\020\n\003"
  "mid\030\001 \001(\005H\000\210\001\001\022\021\n\004mtid\030\002 \001(\005H\001\210\001\001\022\023\n\006mco"
  "unt\030\003 \001(\005H\002\210\001\001\022\020\n\003mlv\030\004 \001(\005H\003\210\001\001\022\022\n\005msta"
  "r\030\005 \001(\005H\004\210\001\001B\006\n\004_midB\007\n\005_mtidB\t\n\007_mcount"
  "B\006\n\004_mlvB\010\n\006_mstar\"\247\001\n\006db_bag\022\020\n\003mid\030\001 \001"
  "(\003H\000\210\001\001\022(\n\006mitems\030\002 \003(\0132\030.pbdb.db_bag.Mi"
  "temsEntry\022\023\n\006mmaxid\030\003 \001(\005H\001\210\001\001\0329\n\013Mitems"
  "Entry\022\013\n\003key\030\001 \001(\005\022\031\n\005value\030\002 \001(\0132\n.pbdb"
  ".item:\0028\001B\006\n\004_midB\t\n\007_mmaxid\"z\n\013db_keyva"
  "lue\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022\023\n\006mvalue\030\002 \001(\tH\001\210"
  "\001\001\"1\n\003ekv\022\010\n\004none\020\000\022\017\n\013account_ban\020\001\022\017\n\013"
  "open_server\020\002B\006\n\004_midB\t\n\007_mvalue\"\212\001\n\017db_"
  "rolekeyvalue\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022/\n\005mdata\030"
  "\002 \003(\0132 .pbdb.db_rolekeyvalue.MdataEntry\032"
  ",\n\nMdataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\t:\0028\001B\006\n\004_mid\"N\n\010mailitem\022\025\n\010mitemtid\030\001 "
  "\001(\005H\000\210\001\001\022\023\n\006mcount\030\002 \001(\005H\001\210\001\001B\013\n\t_mitemt"
  "idB\t\n\007_mcount\"\204\002\n\004mail\022\020\n\003mid\030\001 \001(\005H\000\210\001\001"
  "\022\027\n\nmcreateutc\030\002 \001(\005H\001\210\001\001\022\021\n\004mtid\030\003 \001(\005H"
  "\002\210\001\001\022\023\n\006mprams\030\004 \001(\tH\003\210\001\001\022\025\n\010mcontent\030\005 "
  "\001(\tH\004\210\001\001\022\036\n\006mitems\030\006 \003(\0132\016.pbdb.mailitem"
  "\022\022\n\005mread\030\007 \001(\010H\005\210\001\001\022\022\n\005mdraw\030\010 \001(\010H\006\210\001\001"
  "B\006\n\004_midB\r\n\013_mcreateutcB\007\n\005_mtidB\t\n\007_mpr"
  "amsB\013\n\t_mcontentB\010\n\006_mreadB\010\n\006_mdraw\"\206\001\n"
  "\007db_mail\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022\'\n\005mmail\030\002 \003("
  "\0132\030.pbdb.db_mail.MmailEntry\0328\n\nMmailEntr"
  "y\022\013\n\003key\030\001 \001(\005\022\031\n\005value\030\002 \001(\0132\n.pbdb.mai"
  "l:\0028\001B\006\n\004_mid\"\231\001\n\tdb_notice\022\020\n\003mid\030\001 \001(\003"
  "H\000\210\001\001\022\024\n\007mnotice\030\002 \001(\tH\001\210\001\001\022\027\n\nmstarttim"
  "e\030\003 \001(\005H\002\210\001\001\022\030\n\013mfinishtime\030\004 \001(\005H\003\210\001\001B\006"
  "\n\004_midB\n\n\010_mnoticeB\r\n\013_mstarttimeB\016\n\014_mf"
  "inishtime\"H\n\010rankitem\022\023\n\006mvalue\030\001 \001(\003H\000\210"
  "\001\001\022\022\n\005mtime\030\002 \001(\005H\001\210\001\001B\t\n\007_mvalueB\010\n\006_mt"
  "ime\"\225\001\n\013db_ranklist\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022-\n"
  "\006mitems\030\002 \003(\0132\035.pbdb.db_ranklist.MitemsE"
  "ntry\032=\n\013MitemsEntry\022\013\n\003key\030\001 \001(\005\022\035\n\005valu"
  "e\030\002 \001(\0132\016.pbdb.rankitem:\0028\001B\006\n\004_mid\"\216\001\n\020"
  "db_activitytimes\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022\021\n\004mb"
  "eg\030\002 \001(\005H\001\210\001\001\022\026\n\tmduration\030\003 \001(\005H\002\210\001\001\022\023\n"
  "\006mstart\030\004 \001(\010H\003\210\001\001B\006\n\004_midB\007\n\005_mbegB\014\n\n_"
  "mdurationB\t\n\007_mstart\"\314\001\n\ractivity_task\022-"
  "\n\005mopen\030\001 \003(\0132\036.pbdb.activity_task.Mopen"
  "Entry\022/\n\006mclose\030\002 \003(\0132\037.pbdb.activity_ta"
  "sk.McloseEntry\032,\n\nMopenEntry\022\013\n\003key\030\001 \001("
  "\005\022\r\n\005value\030\002 \001(\010:\0028\001\032-\n\013McloseEntry\022\013\n\003k"
  "ey\030\001 \001(\005\022\r\n\005value\030\002 \001(\010:\0028\001\"\246\001\n\027activity"
  "_drawcompliance\022\023\n\006mcount\030\001 \001(\005H\000\210\001\001\022;\n\007"
  "mreward\030\002 \003(\0132*.pbdb.activity_drawcompli"
  "ance.MrewardEntry\032.\n\014MrewardEntry\022\013\n\003key"
  "\030\001 \001(\005\022\r\n\005value\030\002 \001(\010:\0028\001B\t\n\007_mcount\"\257\002\n"
  "\013db_activity\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022+\n\005mtask\030"
  "\002 \003(\0132\034.pbdb.db_activity.MtaskEntry\022\?\n\017m"
  "drawcompliance\030\003 \003(\0132&.pbdb.db_activity."
  "MdrawcomplianceEntry\032A\n\nMtaskEntry\022\013\n\003ke"
  "y\030\001 \001(\003\022\"\n\005value\030\002 \001(\0132\023.pbdb.activity_t"
  "ask:\0028\001\032U\n\024MdrawcomplianceEntry\022\013\n\003key\030\001"
  " \001(\003\022,\n\005value\030\002 \001(\0132\035.pbdb.activity_draw"
  "compliance:\0028\001B\006\n\004_mid\"\232\005\n\007db_task\022\020\n\003mi"
  "d\030\001 \001(\003H\000\210\001\001\022/\n\tmrundatas\030\002 \003(\0132\034.pbdb.d"
  "b_task.MrundatasEntry\022;\n\017mcompleteddatas"
  "\030\003 \003(\0132\".pbdb.db_task.McompleteddatasEnt"
  "ry\032o\n\rdata_schedule\022\022\n\005mtype\030\001 \001(\005H\000\210\001\001\022"
  "\023\n\006mvalue\030\002 \001(\005H\001\210\001\001\022\024\n\007msumint\030\003 \001(\005H\002\210"
  "\001\001B\010\n\006_mtypeB\t\n\007_mvalueB\n\n\010_msumint\032\315\001\n\004"
  "data\022\024\n\007mtaskid\030\001 \001(\005H\000\210\001\001\022\030\n\013mreceiveut"
  "c\030\002 \001(\005H\001\210\001\001\022\026\n\tmfinshutc\030\003 \001(\005H\002\210\001\001\022/\n\n"
  "mschedules\030\004 \003(\0132\033.pbdb.db_task.data_sch"
  "edule\022\025\n\010mreceive\030\005 \001(\010H\003\210\001\001B\n\n\010_mtaskid"
  "B\016\n\014_mreceiveutcB\014\n\n_mfinshutcB\013\n\t_mrece"
  "ive\0320\n\010complete\022$\n\010mhistory\030\001 \003(\0132\022.pbdb"
  ".db_task.data\032D\n\016MrundatasEntry\022\013\n\003key\030\001"
  " \001(\005\022!\n\005value\030\002 \001(\0132\022.pbdb.db_task.data:"
  "\0028\001\032N\n\024McompleteddatasEntry\022\013\n\003key\030\001 \001(\005"
  "\022%\n\005value\030\002 \001(\0132\026.pbdb.db_task.complete:"
  "\0028\001B\006\n\004_mid\"\251\002\n\013db_familyer\022\020\n\003mid\030\001 \001(\003"
  "H\000\210\001\001\022\025\n\010mjoinutc\030\002 \001(\005H\001\210\001\001\022\031\n\014mlastsig"
  "nutc\030\003 \001(\005H\002\210\001\001\022\032\n\rmlastleaveutc\030\004 \001(\005H\003"
  "\210\001\001\0223\n\tmposition\030\005 \001(\0162\033.pbdb.db_familye"
  "r.epositionH\004\210\001\001\"\?\n\teposition\022\010\n\004none\020\000\022"
  "\n\n\006leader\020\001\022\016\n\ncounsellor\020\002\022\014\n\010ordinary\020"
  "\003B\006\n\004_midB\013\n\t_mjoinutcB\017\n\r_mlastsignutcB"
  "\020\n\016_mlastleaveutcB\014\n\n_mposition\"\350\001\n\tdb_f"
  "amily\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022\027\n\nmcreateutc\030\002 "
  "\001(\005H\001\210\001\001\022\022\n\005mname\030\003 \001(\tH\002\210\001\001\022\024\n\007mleader\030"
  "\004 \001(\003H\003\210\001\001\022\020\n\003mlv\030\005 \001(\005H\004\210\001\001\022\021\n\004mexp\030\006 \001"
  "(\005H\005\210\001\001\022\017\n\007mmember\030\007 \003(\003\022\022\n\nmapplylist\030\010"
  " \003(\003B\006\n\004_midB\r\n\013_mcreateutcB\010\n\006_mnameB\n\n"
  "\010_mleaderB\006\n\004_mlvB\007\n\005_mexp\"O\n\ndb_friends"
  "\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022\020\n\010mfriends\030\002 \003(\003\022\025\n\r"
  "mapplyfriends\030\003 \003(\003B\006\n\004_mid\"<\n\014dbcross_t"
  "est\022\022\n\005mname\030\001 \001(\tH\000\210\001\001\022\016\n\006mvalue\030\002 \003(\003B"
  "\010\n\006_mname\"\360\001\n\ndb_testlua\022\020\n\003mid\030\001 \001(\003H\000\210"
  "\001\001\022\016\n\006mvalue\030\002 \003(\003\022,\n\006mdatas\030\003 \003(\0132\034.pbd"
  "b.db_testlua.MdatasEntry\032A\n\007luadata\022\021\n\004m"
  "key\030\001 \001(\tH\000\210\001\001\022\021\n\004mval\030\002 \001(\tH\001\210\001\001B\007\n\005_mk"
  "eyB\007\n\005_mval\032G\n\013MdatasEntry\022\013\n\003key\030\001 \001(\005\022"
  "\'\n\005value\030\002 \001(\0132\030.pbdb.db_testlua.luadata"
  ":\0028\001B\006\n\004_mid*\235\003\n\007ENUM_DB\022\023\n\017ENUM_DB_ACCO"
  "UNT\020\000\022\020\n\014ENUM_DB_ROLE\020\001\022\021\n\rENUM_DB_BRIEF"
  "\020\002\022\017\n\013ENUM_DB_BAG\020\003\022\024\n\020ENUM_DB_KEYVALUE\020"
  "\004\022\020\n\014ENUM_DB_MAIL\020\005\022\022\n\016ENUM_DB_NOTICE\020\006\022"
  "\024\n\020ENUM_DB_RANKLIST\020\007\022\024\n\020ENUM_DB_ACTIVIT"
  "Y\020\010\022\031\n\025ENUM_DB_ACTIVITYTIMES\020\t\022\020\n\014ENUM_D"
  "B_TASK\020\n\022\030\n\024ENUM_DB_ROLEKEYVALUE\020\013\022\022\n\016EN"
  "UM_DB_FAMILY\020\014\022\024\n\020ENUM_DB_FAMILYER\020\r\022\023\n\017"
  "ENUM_DB_FRIENDS\020\016\022\023\n\017ENUM_DB_TESTLUA\020\017\022\021"
  "\n\rENUM_DB_COUNT\020\020\022\026\n\021ENUM_DBCROSS_TEST\020\351"
  "\007\022\031\n\014ENUM_DB_FAIL\020\377\377\377\377\377\377\377\377\377\001*d\n\teranklis"
  "t\022\022\n\016eranklist_null\020\000\022\006\n\002lv\020\001\022\010\n\004gold\020\002\022"
  "\t\n\005count\020\003\022\021\n\013activity_lv\020\300\204=\022\023\n\ractivit"
  "y_gold\020\200\211zb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_db_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_db_2eproto_sccs[44] = {
  &scc_info_activity_drawcompliance_db_2eproto.base,
  &scc_info_activity_drawcompliance_MrewardEntry_DoNotUse_db_2eproto.base,
  &scc_info_activity_task_db_2eproto.base,
  &scc_info_activity_task_McloseEntry_DoNotUse_db_2eproto.base,
  &scc_info_activity_task_MopenEntry_DoNotUse_db_2eproto.base,
  &scc_info_brief_activityvalues_db_2eproto.base,
  &scc_info_brief_activityvalues_MactivityRolegoldEntry_DoNotUse_db_2eproto.base,
  &scc_info_brief_activityvalues_MactivityRolelvEntry_DoNotUse_db_2eproto.base,
  &scc_info_brief_base_db_2eproto.base,
  &scc_info_db_account_db_2eproto.base,
  &scc_info_db_activity_db_2eproto.base,
  &scc_info_db_activity_MdrawcomplianceEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_activity_MtaskEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_activitytimes_db_2eproto.base,
  &scc_info_db_bag_db_2eproto.base,
  &scc_info_db_bag_MitemsEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_brief_db_2eproto.base,
  &scc_info_db_family_db_2eproto.base,
  &scc_info_db_familyer_db_2eproto.base,
  &scc_info_db_friends_db_2eproto.base,
  &scc_info_db_keyvalue_db_2eproto.base,
  &scc_info_db_mail_db_2eproto.base,
  &scc_info_db_mail_MmailEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_notice_db_2eproto.base,
  &scc_info_db_ranklist_db_2eproto.base,
  &scc_info_db_ranklist_MitemsEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_role_db_2eproto.base,
  &scc_info_db_role_recharge_db_2eproto.base,
  &scc_info_db_rolekeyvalue_db_2eproto.base,
  &scc_info_db_rolekeyvalue_MdataEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_task_db_2eproto.base,
  &scc_info_db_task_McompleteddatasEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_task_MrundatasEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_task_complete_db_2eproto.base,
  &scc_info_db_task_data_db_2eproto.base,
  &scc_info_db_task_data_schedule_db_2eproto.base,
  &scc_info_db_testlua_db_2eproto.base,
  &scc_info_db_testlua_MdatasEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_testlua_luadata_db_2eproto.base,
  &scc_info_dbcross_test_db_2eproto.base,
  &scc_info_item_db_2eproto.base,
  &scc_info_mail_db_2eproto.base,
  &scc_info_mailitem_db_2eproto.base,
  &scc_info_rankitem_db_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_db_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_2eproto = {
  false, false, descriptor_table_protodef_db_2eproto, "db.proto", 5458,
  &descriptor_table_db_2eproto_once, descriptor_table_db_2eproto_sccs, descriptor_table_db_2eproto_deps, 44, 0,
  schemas, file_default_instances, TableStruct_db_2eproto::offsets,
  file_level_metadata_db_2eproto, 44, file_level_enum_descriptors_db_2eproto, file_level_service_descriptors_db_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_db_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_db_2eproto)), true);
namespace pbdb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* db_keyvalue_ekv_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[0];
}
bool db_keyvalue_ekv_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr db_keyvalue_ekv db_keyvalue::none;
constexpr db_keyvalue_ekv db_keyvalue::account_ban;
constexpr db_keyvalue_ekv db_keyvalue::open_server;
constexpr db_keyvalue_ekv db_keyvalue::ekv_MIN;
constexpr db_keyvalue_ekv db_keyvalue::ekv_MAX;
constexpr int db_keyvalue::ekv_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* db_familyer_eposition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[1];
}
bool db_familyer_eposition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr db_familyer_eposition db_familyer::none;
constexpr db_familyer_eposition db_familyer::leader;
constexpr db_familyer_eposition db_familyer::counsellor;
constexpr db_familyer_eposition db_familyer::ordinary;
constexpr db_familyer_eposition db_familyer::eposition_MIN;
constexpr db_familyer_eposition db_familyer::eposition_MAX;
constexpr int db_familyer::eposition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_DB_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[2];
}
bool ENUM_DB_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 1001:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eranklist_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[3];
}
bool eranklist_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 1000000:
    case 2000000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void db_account::InitAsDefaultInstance() {
}
class db_account::_Internal {
 public:
  using HasBits = decltype(std::declval<db_account>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maccount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mpassworld(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_marea(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

db_account::db_account(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_account)
}
db_account::db_account(const db_account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  maccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_maccount()) {
    maccount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_maccount(),
      GetArena());
  }
  mpassworld_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mpassworld()) {
    mpassworld_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mpassworld(),
      GetArena());
  }
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&marea_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(marea_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_account)
}

void db_account::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_account_db_2eproto.base);
  maccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mpassworld_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marea_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(marea_));
}

db_account::~db_account() {
  // @@protoc_insertion_point(destructor:pbdb.db_account)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_account::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  maccount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mpassworld_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_account::ArenaDtor(void* object) {
  db_account* _this = reinterpret_cast< db_account* >(object);
  (void)_this;
}
void db_account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_account& db_account::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_account_db_2eproto.base);
  return *internal_default_instance();
}


void db_account::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      maccount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mpassworld_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&marea_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(marea_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mroleid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mroleid(&has_bits);
          mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maccount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_maccount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.db_account.maccount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mpassworld = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mpassworld();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.db_account.mpassworld"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 marea = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_marea(&has_bits);
          marea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // int64 mroleid = 2;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_mroleid(), target);
  }

  // string maccount = 3;
  if (_internal_has_maccount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maccount().data(), static_cast<int>(this->_internal_maccount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_account.maccount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_maccount(), target);
  }

  // string mpassworld = 4;
  if (_internal_has_mpassworld()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mpassworld().data(), static_cast<int>(this->_internal_mpassworld().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_account.mpassworld");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mpassworld(), target);
  }

  // int32 marea = 5;
  if (_internal_has_marea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_marea(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_account)
  return target;
}

size_t db_account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // string maccount = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_maccount());
    }

    // string mpassworld = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mpassworld());
    }

    // int64 mid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mid());
    }

    // int64 mroleid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mroleid());
    }

    // int32 marea = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_marea());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_account::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_account)
  GOOGLE_DCHECK_NE(&from, this);
  const db_account* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_account)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_account)
    MergeFrom(*source);
  }
}

void db_account::MergeFrom(const db_account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_maccount(from._internal_maccount());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mpassworld(from._internal_mpassworld());
    }
    if (cached_has_bits & 0x00000004u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000008u) {
      mroleid_ = from.mroleid_;
    }
    if (cached_has_bits & 0x00000010u) {
      marea_ = from.marea_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_account::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_account::CopyFrom(const db_account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_account::IsInitialized() const {
  return true;
}

void db_account::InternalSwap(db_account* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  maccount_.Swap(&other->maccount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mpassworld_.Swap(&other->mpassworld_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_account, marea_)
      + sizeof(db_account::marea_)
      - PROTOBUF_FIELD_OFFSET(db_account, mid_)>(
          reinterpret_cast<char*>(&mid_),
          reinterpret_cast<char*>(&other->mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_account::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

brief_activityvalues_MactivityRolelvEntry_DoNotUse::brief_activityvalues_MactivityRolelvEntry_DoNotUse() {}
brief_activityvalues_MactivityRolelvEntry_DoNotUse::brief_activityvalues_MactivityRolelvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void brief_activityvalues_MactivityRolelvEntry_DoNotUse::MergeFrom(const brief_activityvalues_MactivityRolelvEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata brief_activityvalues_MactivityRolelvEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void brief_activityvalues_MactivityRolelvEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

brief_activityvalues_MactivityRolegoldEntry_DoNotUse::brief_activityvalues_MactivityRolegoldEntry_DoNotUse() {}
brief_activityvalues_MactivityRolegoldEntry_DoNotUse::brief_activityvalues_MactivityRolegoldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void brief_activityvalues_MactivityRolegoldEntry_DoNotUse::MergeFrom(const brief_activityvalues_MactivityRolegoldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata brief_activityvalues_MactivityRolegoldEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void brief_activityvalues_MactivityRolegoldEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void brief_activityvalues::InitAsDefaultInstance() {
}
class brief_activityvalues::_Internal {
 public:
};

brief_activityvalues::brief_activityvalues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mactivity_rolelv_(arena),
  mactivity_rolegold_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.brief_activityvalues)
}
brief_activityvalues::brief_activityvalues(const brief_activityvalues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mactivity_rolelv_.MergeFrom(from.mactivity_rolelv_);
  mactivity_rolegold_.MergeFrom(from.mactivity_rolegold_);
  // @@protoc_insertion_point(copy_constructor:pbdb.brief_activityvalues)
}

void brief_activityvalues::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_brief_activityvalues_db_2eproto.base);
}

brief_activityvalues::~brief_activityvalues() {
  // @@protoc_insertion_point(destructor:pbdb.brief_activityvalues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void brief_activityvalues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void brief_activityvalues::ArenaDtor(void* object) {
  brief_activityvalues* _this = reinterpret_cast< brief_activityvalues* >(object);
  (void)_this;
}
void brief_activityvalues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void brief_activityvalues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const brief_activityvalues& brief_activityvalues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_brief_activityvalues_db_2eproto.base);
  return *internal_default_instance();
}


void brief_activityvalues::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.brief_activityvalues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mactivity_rolelv_.Clear();
  mactivity_rolegold_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* brief_activityvalues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, int32> mactivity_rolelv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mactivity_rolelv_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, int32> mactivity_rolegold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mactivity_rolegold_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* brief_activityvalues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.brief_activityvalues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> mactivity_rolelv = 1;
  if (!this->_internal_mactivity_rolelv().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mactivity_rolelv().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mactivity_rolelv().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_mactivity_rolelv().begin();
          it != this->_internal_mactivity_rolelv().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = brief_activityvalues_MactivityRolelvEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_mactivity_rolelv().begin();
          it != this->_internal_mactivity_rolelv().end(); ++it) {
        target = brief_activityvalues_MactivityRolelvEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, int32> mactivity_rolegold = 2;
  if (!this->_internal_mactivity_rolegold().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mactivity_rolegold().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mactivity_rolegold().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_mactivity_rolegold().begin();
          it != this->_internal_mactivity_rolegold().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = brief_activityvalues_MactivityRolegoldEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_mactivity_rolegold().begin();
          it != this->_internal_mactivity_rolegold().end(); ++it) {
        target = brief_activityvalues_MactivityRolegoldEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.brief_activityvalues)
  return target;
}

size_t brief_activityvalues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.brief_activityvalues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> mactivity_rolelv = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mactivity_rolelv_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_mactivity_rolelv().begin();
      it != this->_internal_mactivity_rolelv().end(); ++it) {
    total_size += brief_activityvalues_MactivityRolelvEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, int32> mactivity_rolegold = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mactivity_rolegold_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_mactivity_rolegold().begin();
      it != this->_internal_mactivity_rolegold().end(); ++it) {
    total_size += brief_activityvalues_MactivityRolegoldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void brief_activityvalues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.brief_activityvalues)
  GOOGLE_DCHECK_NE(&from, this);
  const brief_activityvalues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<brief_activityvalues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.brief_activityvalues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.brief_activityvalues)
    MergeFrom(*source);
  }
}

void brief_activityvalues::MergeFrom(const brief_activityvalues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.brief_activityvalues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mactivity_rolelv_.MergeFrom(from.mactivity_rolelv_);
  mactivity_rolegold_.MergeFrom(from.mactivity_rolegold_);
}

void brief_activityvalues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.brief_activityvalues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void brief_activityvalues::CopyFrom(const brief_activityvalues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.brief_activityvalues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool brief_activityvalues::IsInitialized() const {
  return true;
}

void brief_activityvalues::InternalSwap(brief_activityvalues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mactivity_rolelv_.Swap(&other->mactivity_rolelv_);
  mactivity_rolegold_.Swap(&other->mactivity_rolegold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata brief_activityvalues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void brief_base::InitAsDefaultInstance() {
}
class brief_base::_Internal {
 public:
  using HasBits = decltype(std::declval<brief_base>()._has_bits_);
  static void set_has_mname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mlv(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mmoneygold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mmoneysilver(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mvip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mnotalkutc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mcreateutc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

brief_base::brief_base(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.brief_base)
}
brief_base::brief_base(const brief_base& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mname()) {
    mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mname(),
      GetArena());
  }
  ::memcpy(&mlv_, &from.mlv_,
    static_cast<size_t>(reinterpret_cast<char*>(&mcreateutc_) -
    reinterpret_cast<char*>(&mlv_)) + sizeof(mcreateutc_));
  // @@protoc_insertion_point(copy_constructor:pbdb.brief_base)
}

void brief_base::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_brief_base_db_2eproto.base);
  mname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mlv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mcreateutc_) -
      reinterpret_cast<char*>(&mlv_)) + sizeof(mcreateutc_));
}

brief_base::~brief_base() {
  // @@protoc_insertion_point(destructor:pbdb.brief_base)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void brief_base::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void brief_base::ArenaDtor(void* object) {
  brief_base* _this = reinterpret_cast< brief_base* >(object);
  (void)_this;
}
void brief_base::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void brief_base::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const brief_base& brief_base::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_brief_base_db_2eproto.base);
  return *internal_default_instance();
}


void brief_base::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.brief_base)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mname_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&mlv_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mcreateutc_) -
        reinterpret_cast<char*>(&mlv_)) + sizeof(mcreateutc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* brief_base::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.brief_base.mname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mlv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mlv(&has_bits);
          mlv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mmoneygold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mmoneygold(&has_bits);
          mmoneygold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mmoneysilver = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mmoneysilver(&has_bits);
          mmoneysilver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mvip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mvip(&has_bits);
          mvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mnotalkutc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mnotalkutc(&has_bits);
          mnotalkutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mcreateutc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mcreateutc(&has_bits);
          mcreateutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* brief_base::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.brief_base)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mname = 1;
  if (_internal_has_mname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mname().data(), static_cast<int>(this->_internal_mname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.brief_base.mname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mname(), target);
  }

  // int32 mlv = 2;
  if (_internal_has_mlv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mlv(), target);
  }

  // int32 mmoneygold = 3;
  if (_internal_has_mmoneygold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mmoneygold(), target);
  }

  // int32 mmoneysilver = 4;
  if (_internal_has_mmoneysilver()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mmoneysilver(), target);
  }

  // int32 mvip = 5;
  if (_internal_has_mvip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mvip(), target);
  }

  // int32 mnotalkutc = 6;
  if (_internal_has_mnotalkutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_mnotalkutc(), target);
  }

  // int32 mcreateutc = 7;
  if (_internal_has_mcreateutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_mcreateutc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.brief_base)
  return target;
}

size_t brief_base::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.brief_base)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // string mname = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mname());
    }

    // int32 mlv = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mlv());
    }

    // int32 mmoneygold = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mmoneygold());
    }

    // int32 mmoneysilver = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mmoneysilver());
    }

    // int32 mvip = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mvip());
    }

    // int32 mnotalkutc = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mnotalkutc());
    }

    // int32 mcreateutc = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mcreateutc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void brief_base::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.brief_base)
  GOOGLE_DCHECK_NE(&from, this);
  const brief_base* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<brief_base>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.brief_base)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.brief_base)
    MergeFrom(*source);
  }
}

void brief_base::MergeFrom(const brief_base& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.brief_base)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mname(from._internal_mname());
    }
    if (cached_has_bits & 0x00000002u) {
      mlv_ = from.mlv_;
    }
    if (cached_has_bits & 0x00000004u) {
      mmoneygold_ = from.mmoneygold_;
    }
    if (cached_has_bits & 0x00000008u) {
      mmoneysilver_ = from.mmoneysilver_;
    }
    if (cached_has_bits & 0x00000010u) {
      mvip_ = from.mvip_;
    }
    if (cached_has_bits & 0x00000020u) {
      mnotalkutc_ = from.mnotalkutc_;
    }
    if (cached_has_bits & 0x00000040u) {
      mcreateutc_ = from.mcreateutc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void brief_base::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.brief_base)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void brief_base::CopyFrom(const brief_base& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.brief_base)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool brief_base::IsInitialized() const {
  return true;
}

void brief_base::InternalSwap(brief_base* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mname_.Swap(&other->mname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(brief_base, mcreateutc_)
      + sizeof(brief_base::mcreateutc_)
      - PROTOBUF_FIELD_OFFSET(brief_base, mlv_)>(
          reinterpret_cast<char*>(&mlv_),
          reinterpret_cast<char*>(&other->mlv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata brief_base::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_brief::InitAsDefaultInstance() {
  ::pbdb::_db_brief_default_instance_._instance.get_mutable()->m_base_ = const_cast< ::pbdb::brief_base*>(
      ::pbdb::brief_base::internal_default_instance());
  ::pbdb::_db_brief_default_instance_._instance.get_mutable()->mactivityvalues_ = const_cast< ::pbdb::brief_activityvalues*>(
      ::pbdb::brief_activityvalues::internal_default_instance());
}
class db_brief::_Internal {
 public:
  using HasBits = decltype(std::declval<db_brief>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbdb::brief_base& m_base(const db_brief* msg);
  static const ::pbdb::brief_activityvalues& mactivityvalues(const db_brief* msg);
  static void set_has_mactivityvalues(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pbdb::brief_base&
db_brief::_Internal::m_base(const db_brief* msg) {
  return *msg->m_base_;
}
const ::pbdb::brief_activityvalues&
db_brief::_Internal::mactivityvalues(const db_brief* msg) {
  return *msg->mactivityvalues_;
}
db_brief::db_brief(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_brief)
}
db_brief::db_brief(const db_brief& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_base()) {
    m_base_ = new ::pbdb::brief_base(*from.m_base_);
  } else {
    m_base_ = nullptr;
  }
  if (from._internal_has_mactivityvalues()) {
    mactivityvalues_ = new ::pbdb::brief_activityvalues(*from.mactivityvalues_);
  } else {
    mactivityvalues_ = nullptr;
  }
  mid_ = from.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_brief)
}

void db_brief::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_brief_db_2eproto.base);
  ::memset(&m_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mid_) -
      reinterpret_cast<char*>(&m_base_)) + sizeof(mid_));
}

db_brief::~db_brief() {
  // @@protoc_insertion_point(destructor:pbdb.db_brief)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_brief::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete m_base_;
  if (this != internal_default_instance()) delete mactivityvalues_;
}

void db_brief::ArenaDtor(void* object) {
  db_brief* _this = reinterpret_cast< db_brief* >(object);
  (void)_this;
}
void db_brief::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_brief::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_brief& db_brief::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_brief_db_2eproto.base);
  return *internal_default_instance();
}


void db_brief::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_brief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && m_base_ != nullptr) {
    delete m_base_;
  }
  m_base_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && mactivityvalues_ != nullptr) {
      delete mactivityvalues_;
    }
    mactivityvalues_ = nullptr;
  }
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_brief::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbdb.brief_base m_base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbdb.brief_activityvalues mactivityvalues = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mactivityvalues(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_brief::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_brief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // .pbdb.brief_base m_base = 2;
  if (this->has_m_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::m_base(this), target, stream);
  }

  // .pbdb.brief_activityvalues mactivityvalues = 9;
  if (_internal_has_mactivityvalues()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::mactivityvalues(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_brief)
  return target;
}

size_t db_brief::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_brief)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pbdb.brief_base m_base = 2;
  if (this->has_m_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_base_);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .pbdb.brief_activityvalues mactivityvalues = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mactivityvalues_);
    }

    // int64 mid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_brief::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_brief)
  GOOGLE_DCHECK_NE(&from, this);
  const db_brief* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_brief>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_brief)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_brief)
    MergeFrom(*source);
  }
}

void db_brief::MergeFrom(const db_brief& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_brief)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_m_base()) {
    _internal_mutable_m_base()->::pbdb::brief_base::MergeFrom(from._internal_m_base());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mactivityvalues()->::pbdb::brief_activityvalues::MergeFrom(from._internal_mactivityvalues());
    }
    if (cached_has_bits & 0x00000002u) {
      mid_ = from.mid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_brief::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_brief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_brief::CopyFrom(const db_brief& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_brief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_brief::IsInitialized() const {
  return true;
}

void db_brief::InternalSwap(db_brief* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_brief, mid_)
      + sizeof(db_brief::mid_)
      - PROTOBUF_FIELD_OFFSET(db_brief, m_base_)>(
          reinterpret_cast<char*>(&m_base_),
          reinterpret_cast<char*>(&other->m_base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_brief::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_role_recharge::InitAsDefaultInstance() {
}
class db_role_recharge::_Internal {
 public:
  using HasBits = decltype(std::declval<db_role_recharge>()._has_bits_);
  static void set_has_mrechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mutc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

db_role_recharge::db_role_recharge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_role.recharge)
}
db_role_recharge::db_role_recharge(const db_role_recharge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mrechargeid_, &from.mrechargeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mutc_) -
    reinterpret_cast<char*>(&mrechargeid_)) + sizeof(mutc_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_role.recharge)
}

void db_role_recharge::SharedCtor() {
  ::memset(&mrechargeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mutc_) -
      reinterpret_cast<char*>(&mrechargeid_)) + sizeof(mutc_));
}

db_role_recharge::~db_role_recharge() {
  // @@protoc_insertion_point(destructor:pbdb.db_role.recharge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_role_recharge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_role_recharge::ArenaDtor(void* object) {
  db_role_recharge* _this = reinterpret_cast< db_role_recharge* >(object);
  (void)_this;
}
void db_role_recharge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_role_recharge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_role_recharge& db_role_recharge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_role_recharge_db_2eproto.base);
  return *internal_default_instance();
}


void db_role_recharge::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_role.recharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mrechargeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mutc_) -
        reinterpret_cast<char*>(&mrechargeid_)) + sizeof(mutc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_role_recharge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mrechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mrechargeid(&has_bits);
          mrechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mutc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mutc(&has_bits);
          mutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_role_recharge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_role.recharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mrechargeid = 1;
  if (_internal_has_mrechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mrechargeid(), target);
  }

  // int32 mutc = 2;
  if (_internal_has_mutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mutc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_role.recharge)
  return target;
}

size_t db_role_recharge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_role.recharge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 mrechargeid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mrechargeid());
    }

    // int32 mutc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mutc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_role_recharge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_role.recharge)
  GOOGLE_DCHECK_NE(&from, this);
  const db_role_recharge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_role_recharge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_role.recharge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_role.recharge)
    MergeFrom(*source);
  }
}

void db_role_recharge::MergeFrom(const db_role_recharge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_role.recharge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mrechargeid_ = from.mrechargeid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mutc_ = from.mutc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_role_recharge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_role.recharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_recharge::CopyFrom(const db_role_recharge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_role.recharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_recharge::IsInitialized() const {
  return true;
}

void db_role_recharge::InternalSwap(db_role_recharge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_role_recharge, mutc_)
      + sizeof(db_role_recharge::mutc_)
      - PROTOBUF_FIELD_OFFSET(db_role_recharge, mrechargeid_)>(
          reinterpret_cast<char*>(&mrechargeid_),
          reinterpret_cast<char*>(&other->mrechargeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_role_recharge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_role::InitAsDefaultInstance() {
}
class db_role::_Internal {
 public:
  using HasBits = decltype(std::declval<db_role>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_role::db_role(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mrecharge_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_role)
}
db_role::db_role(const db_role& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mrecharge_(from.mrecharge_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mid_ = from.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_role)
}

void db_role::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_role_db_2eproto.base);
  mid_ = PROTOBUF_LONGLONG(0);
}

db_role::~db_role() {
  // @@protoc_insertion_point(destructor:pbdb.db_role)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_role::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_role::ArenaDtor(void* object) {
  db_role* _this = reinterpret_cast< db_role* >(object);
  (void)_this;
}
void db_role::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_role::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_role& db_role::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_role_db_2eproto.base);
  return *internal_default_instance();
}


void db_role::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_role)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mrecharge_.Clear();
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_role::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbdb.db_role.recharge mrecharge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mrecharge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_role::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_role)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // repeated .pbdb.db_role.recharge mrecharge = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mrecharge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mrecharge(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_role)
  return target;
}

size_t db_role::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_role)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_role.recharge mrecharge = 2;
  total_size += 1UL * this->_internal_mrecharge_size();
  for (const auto& msg : this->mrecharge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 mid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_role::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_role)
  GOOGLE_DCHECK_NE(&from, this);
  const db_role* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_role>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_role)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_role)
    MergeFrom(*source);
  }
}

void db_role::MergeFrom(const db_role& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_role)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mrecharge_.MergeFrom(from.mrecharge_);
  if (from._internal_has_mid()) {
    _internal_set_mid(from._internal_mid());
  }
}

void db_role::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role::CopyFrom(const db_role& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role::IsInitialized() const {
  return true;
}

void db_role::InternalSwap(db_role* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mrecharge_.InternalSwap(&other->mrecharge_);
  swap(mid_, other->mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_role::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void item::InitAsDefaultInstance() {
}
class item::_Internal {
 public:
  using HasBits = decltype(std::declval<item>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mtid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mlv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mstar(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

item::item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.item)
}
item::item(const item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstar_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(mstar_));
  // @@protoc_insertion_point(copy_constructor:pbdb.item)
}

void item::SharedCtor() {
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstar_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(mstar_));
}

item::~item() {
  // @@protoc_insertion_point(destructor:pbdb.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void item::ArenaDtor(void* object) {
  item* _this = reinterpret_cast< item* >(object);
  (void)_this;
}
void item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const item& item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_item_db_2eproto.base);
  return *internal_default_instance();
}


void item::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstar_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(mstar_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mtid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mtid(&has_bits);
          mtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mcount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mcount(&has_bits);
          mcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mlv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mlv(&has_bits);
          mlv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mstar = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mstar(&has_bits);
          mstar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mid(), target);
  }

  // int32 mtid = 2;
  if (_internal_has_mtid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mtid(), target);
  }

  // int32 mcount = 3;
  if (_internal_has_mcount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mcount(), target);
  }

  // int32 mlv = 4;
  if (_internal_has_mlv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mlv(), target);
  }

  // int32 mstar = 5;
  if (_internal_has_mstar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mstar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.item)
  return target;
}

size_t item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // int32 mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mid());
    }

    // int32 mtid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mtid());
    }

    // int32 mcount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mcount());
    }

    // int32 mlv = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mlv());
    }

    // int32 mstar = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mstar());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.item)
  GOOGLE_DCHECK_NE(&from, this);
  const item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.item)
    MergeFrom(*source);
  }
}

void item::MergeFrom(const item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mtid_ = from.mtid_;
    }
    if (cached_has_bits & 0x00000004u) {
      mcount_ = from.mcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      mlv_ = from.mlv_;
    }
    if (cached_has_bits & 0x00000010u) {
      mstar_ = from.mstar_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item::CopyFrom(const item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item::IsInitialized() const {
  return true;
}

void item::InternalSwap(item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(item, mstar_)
      + sizeof(item::mstar_)
      - PROTOBUF_FIELD_OFFSET(item, mid_)>(
          reinterpret_cast<char*>(&mid_),
          reinterpret_cast<char*>(&other->mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

db_bag_MitemsEntry_DoNotUse::db_bag_MitemsEntry_DoNotUse() {}
db_bag_MitemsEntry_DoNotUse::db_bag_MitemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_bag_MitemsEntry_DoNotUse::MergeFrom(const db_bag_MitemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_bag_MitemsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_bag_MitemsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void db_bag::InitAsDefaultInstance() {
}
class db_bag::_Internal {
 public:
  using HasBits = decltype(std::declval<db_bag>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mmaxid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

db_bag::db_bag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mitems_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_bag)
}
db_bag::db_bag(const db_bag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mitems_.MergeFrom(from.mitems_);
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mmaxid_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(mmaxid_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_bag)
}

void db_bag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_bag_db_2eproto.base);
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mmaxid_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(mmaxid_));
}

db_bag::~db_bag() {
  // @@protoc_insertion_point(destructor:pbdb.db_bag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_bag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_bag::ArenaDtor(void* object) {
  db_bag* _this = reinterpret_cast< db_bag* >(object);
  (void)_this;
}
void db_bag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_bag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_bag& db_bag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_bag_db_2eproto.base);
  return *internal_default_instance();
}


void db_bag::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_bag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mitems_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mmaxid_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(mmaxid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_bag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .pbdb.item> mitems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mitems_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 mmaxid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mmaxid(&has_bits);
          mmaxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_bag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_bag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // map<int32, .pbdb.item> mitems = 2;
  if (!this->_internal_mitems().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mitems().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mitems().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >::const_iterator
          it = this->_internal_mitems().begin();
          it != this->_internal_mitems().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_bag_MitemsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >::const_iterator
          it = this->_internal_mitems().begin();
          it != this->_internal_mitems().end(); ++it) {
        target = db_bag_MitemsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // int32 mmaxid = 3;
  if (_internal_has_mmaxid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mmaxid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_bag)
  return target;
}

size_t db_bag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_bag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.item> mitems = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mitems_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >::const_iterator
      it = this->_internal_mitems().begin();
      it != this->_internal_mitems().end(); ++it) {
    total_size += db_bag_MitemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mid());
    }

    // int32 mmaxid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mmaxid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_bag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_bag)
  GOOGLE_DCHECK_NE(&from, this);
  const db_bag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_bag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_bag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_bag)
    MergeFrom(*source);
  }
}

void db_bag::MergeFrom(const db_bag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_bag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mitems_.MergeFrom(from.mitems_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mmaxid_ = from.mmaxid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_bag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_bag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_bag::CopyFrom(const db_bag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_bag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_bag::IsInitialized() const {
  return true;
}

void db_bag::InternalSwap(db_bag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mitems_.Swap(&other->mitems_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_bag, mmaxid_)
      + sizeof(db_bag::mmaxid_)
      - PROTOBUF_FIELD_OFFSET(db_bag, mid_)>(
          reinterpret_cast<char*>(&mid_),
          reinterpret_cast<char*>(&other->mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_bag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_keyvalue::InitAsDefaultInstance() {
}
class db_keyvalue::_Internal {
 public:
  using HasBits = decltype(std::declval<db_keyvalue>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_keyvalue::db_keyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_keyvalue)
}
db_keyvalue::db_keyvalue(const db_keyvalue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mvalue()) {
    mvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mvalue(),
      GetArena());
  }
  mid_ = from.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_keyvalue)
}

void db_keyvalue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_keyvalue_db_2eproto.base);
  mvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mid_ = PROTOBUF_LONGLONG(0);
}

db_keyvalue::~db_keyvalue() {
  // @@protoc_insertion_point(destructor:pbdb.db_keyvalue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_keyvalue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_keyvalue::ArenaDtor(void* object) {
  db_keyvalue* _this = reinterpret_cast< db_keyvalue* >(object);
  (void)_this;
}
void db_keyvalue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_keyvalue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_keyvalue& db_keyvalue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_keyvalue_db_2eproto.base);
  return *internal_default_instance();
}


void db_keyvalue::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_keyvalue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mvalue_.ClearNonDefaultToEmpty();
  }
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_keyvalue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mvalue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.db_keyvalue.mvalue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_keyvalue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_keyvalue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // string mvalue = 2;
  if (_internal_has_mvalue()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mvalue().data(), static_cast<int>(this->_internal_mvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_keyvalue.mvalue");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_keyvalue)
  return target;
}

size_t db_keyvalue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_keyvalue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string mvalue = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mvalue());
    }

    // int64 mid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_keyvalue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_keyvalue)
  GOOGLE_DCHECK_NE(&from, this);
  const db_keyvalue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_keyvalue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_keyvalue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_keyvalue)
    MergeFrom(*source);
  }
}

void db_keyvalue::MergeFrom(const db_keyvalue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_keyvalue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mvalue(from._internal_mvalue());
    }
    if (cached_has_bits & 0x00000002u) {
      mid_ = from.mid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_keyvalue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_keyvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_keyvalue::CopyFrom(const db_keyvalue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_keyvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_keyvalue::IsInitialized() const {
  return true;
}

void db_keyvalue::InternalSwap(db_keyvalue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mvalue_.Swap(&other->mvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mid_, other->mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_keyvalue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

db_rolekeyvalue_MdataEntry_DoNotUse::db_rolekeyvalue_MdataEntry_DoNotUse() {}
db_rolekeyvalue_MdataEntry_DoNotUse::db_rolekeyvalue_MdataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_rolekeyvalue_MdataEntry_DoNotUse::MergeFrom(const db_rolekeyvalue_MdataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_rolekeyvalue_MdataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_rolekeyvalue_MdataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void db_rolekeyvalue::InitAsDefaultInstance() {
}
class db_rolekeyvalue::_Internal {
 public:
  using HasBits = decltype(std::declval<db_rolekeyvalue>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_rolekeyvalue::db_rolekeyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mdata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_rolekeyvalue)
}
db_rolekeyvalue::db_rolekeyvalue(const db_rolekeyvalue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mdata_.MergeFrom(from.mdata_);
  mid_ = from.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_rolekeyvalue)
}

void db_rolekeyvalue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_rolekeyvalue_db_2eproto.base);
  mid_ = PROTOBUF_LONGLONG(0);
}

db_rolekeyvalue::~db_rolekeyvalue() {
  // @@protoc_insertion_point(destructor:pbdb.db_rolekeyvalue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_rolekeyvalue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_rolekeyvalue::ArenaDtor(void* object) {
  db_rolekeyvalue* _this = reinterpret_cast< db_rolekeyvalue* >(object);
  (void)_this;
}
void db_rolekeyvalue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_rolekeyvalue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_rolekeyvalue& db_rolekeyvalue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_rolekeyvalue_db_2eproto.base);
  return *internal_default_instance();
}


void db_rolekeyvalue::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_rolekeyvalue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mdata_.Clear();
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_rolekeyvalue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> mdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mdata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_rolekeyvalue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_rolekeyvalue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // map<string, string> mdata = 2;
  if (!this->_internal_mdata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pbdb.db_rolekeyvalue.MdataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pbdb.db_rolekeyvalue.MdataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mdata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mdata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_mdata().begin();
          it != this->_internal_mdata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_rolekeyvalue_MdataEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_mdata().begin();
          it != this->_internal_mdata().end(); ++it) {
        target = db_rolekeyvalue_MdataEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_rolekeyvalue)
  return target;
}

size_t db_rolekeyvalue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_rolekeyvalue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> mdata = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mdata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_mdata().begin();
      it != this->_internal_mdata().end(); ++it) {
    total_size += db_rolekeyvalue_MdataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 mid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_rolekeyvalue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_rolekeyvalue)
  GOOGLE_DCHECK_NE(&from, this);
  const db_rolekeyvalue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_rolekeyvalue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_rolekeyvalue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_rolekeyvalue)
    MergeFrom(*source);
  }
}

void db_rolekeyvalue::MergeFrom(const db_rolekeyvalue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_rolekeyvalue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mdata_.MergeFrom(from.mdata_);
  if (from._internal_has_mid()) {
    _internal_set_mid(from._internal_mid());
  }
}

void db_rolekeyvalue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_rolekeyvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_rolekeyvalue::CopyFrom(const db_rolekeyvalue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_rolekeyvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_rolekeyvalue::IsInitialized() const {
  return true;
}

void db_rolekeyvalue::InternalSwap(db_rolekeyvalue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mdata_.Swap(&other->mdata_);
  swap(mid_, other->mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_rolekeyvalue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mailitem::InitAsDefaultInstance() {
}
class mailitem::_Internal {
 public:
  using HasBits = decltype(std::declval<mailitem>()._has_bits_);
  static void set_has_mitemtid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

mailitem::mailitem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.mailitem)
}
mailitem::mailitem(const mailitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mitemtid_, &from.mitemtid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mcount_) -
    reinterpret_cast<char*>(&mitemtid_)) + sizeof(mcount_));
  // @@protoc_insertion_point(copy_constructor:pbdb.mailitem)
}

void mailitem::SharedCtor() {
  ::memset(&mitemtid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mcount_) -
      reinterpret_cast<char*>(&mitemtid_)) + sizeof(mcount_));
}

mailitem::~mailitem() {
  // @@protoc_insertion_point(destructor:pbdb.mailitem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mailitem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void mailitem::ArenaDtor(void* object) {
  mailitem* _this = reinterpret_cast< mailitem* >(object);
  (void)_this;
}
void mailitem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mailitem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mailitem& mailitem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mailitem_db_2eproto.base);
  return *internal_default_instance();
}


void mailitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.mailitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mitemtid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mcount_) -
        reinterpret_cast<char*>(&mitemtid_)) + sizeof(mcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mailitem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mitemtid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mitemtid(&has_bits);
          mitemtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mcount(&has_bits);
          mcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mailitem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.mailitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mitemtid = 1;
  if (_internal_has_mitemtid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mitemtid(), target);
  }

  // int32 mcount = 2;
  if (_internal_has_mcount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.mailitem)
  return target;
}

size_t mailitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.mailitem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 mitemtid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mitemtid());
    }

    // int32 mcount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mailitem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.mailitem)
  GOOGLE_DCHECK_NE(&from, this);
  const mailitem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mailitem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.mailitem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.mailitem)
    MergeFrom(*source);
  }
}

void mailitem::MergeFrom(const mailitem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.mailitem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mitemtid_ = from.mitemtid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mcount_ = from.mcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void mailitem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.mailitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mailitem::CopyFrom(const mailitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.mailitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mailitem::IsInitialized() const {
  return true;
}

void mailitem::InternalSwap(mailitem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mailitem, mcount_)
      + sizeof(mailitem::mcount_)
      - PROTOBUF_FIELD_OFFSET(mailitem, mitemtid_)>(
          reinterpret_cast<char*>(&mitemtid_),
          reinterpret_cast<char*>(&other->mitemtid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mailitem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mail::InitAsDefaultInstance() {
}
class mail::_Internal {
 public:
  using HasBits = decltype(std::declval<mail>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mcreateutc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mtid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mprams(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mcontent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mread(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mdraw(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

mail::mail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mitems_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.mail)
}
mail::mail(const mail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mitems_(from.mitems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mprams_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mprams()) {
    mprams_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mprams(),
      GetArena());
  }
  mcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mcontent()) {
    mcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mcontent(),
      GetArena());
  }
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mdraw_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(mdraw_));
  // @@protoc_insertion_point(copy_constructor:pbdb.mail)
}

void mail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_mail_db_2eproto.base);
  mprams_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mdraw_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(mdraw_));
}

mail::~mail() {
  // @@protoc_insertion_point(destructor:pbdb.mail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mprams_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mcontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mail::ArenaDtor(void* object) {
  mail* _this = reinterpret_cast< mail* >(object);
  (void)_this;
}
void mail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mail& mail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mail_db_2eproto.base);
  return *internal_default_instance();
}


void mail::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.mail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mitems_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mprams_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mcontent_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mdraw_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(mdraw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mcreateutc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mcreateutc(&has_bits);
          mcreateutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mtid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mtid(&has_bits);
          mtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mprams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mprams();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.mail.mprams"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mcontent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_mcontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.mail.mcontent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbdb.mailitem mitems = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool mread = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mread(&has_bits);
          mread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mdraw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_mdraw(&has_bits);
          mdraw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.mail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mid(), target);
  }

  // int32 mcreateutc = 2;
  if (_internal_has_mcreateutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mcreateutc(), target);
  }

  // int32 mtid = 3;
  if (_internal_has_mtid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mtid(), target);
  }

  // string mprams = 4;
  if (_internal_has_mprams()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mprams().data(), static_cast<int>(this->_internal_mprams().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.mail.mprams");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mprams(), target);
  }

  // string mcontent = 5;
  if (_internal_has_mcontent()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcontent().data(), static_cast<int>(this->_internal_mcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.mail.mcontent");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mcontent(), target);
  }

  // repeated .pbdb.mailitem mitems = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mitems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_mitems(i), target, stream);
  }

  // bool mread = 7;
  if (_internal_has_mread()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_mread(), target);
  }

  // bool mdraw = 8;
  if (_internal_has_mdraw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_mdraw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.mail)
  return target;
}

size_t mail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.mail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.mailitem mitems = 6;
  total_size += 1UL * this->_internal_mitems_size();
  for (const auto& msg : this->mitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // string mprams = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mprams());
    }

    // string mcontent = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mcontent());
    }

    // int32 mid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mid());
    }

    // int32 mcreateutc = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mcreateutc());
    }

    // int32 mtid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mtid());
    }

    // bool mread = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // bool mdraw = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.mail)
  GOOGLE_DCHECK_NE(&from, this);
  const mail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.mail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.mail)
    MergeFrom(*source);
  }
}

void mail::MergeFrom(const mail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.mail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mitems_.MergeFrom(from.mitems_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mprams(from._internal_mprams());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mcontent(from._internal_mcontent());
    }
    if (cached_has_bits & 0x00000004u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000008u) {
      mcreateutc_ = from.mcreateutc_;
    }
    if (cached_has_bits & 0x00000010u) {
      mtid_ = from.mtid_;
    }
    if (cached_has_bits & 0x00000020u) {
      mread_ = from.mread_;
    }
    if (cached_has_bits & 0x00000040u) {
      mdraw_ = from.mdraw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void mail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail::CopyFrom(const mail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail::IsInitialized() const {
  return true;
}

void mail::InternalSwap(mail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mitems_.InternalSwap(&other->mitems_);
  mprams_.Swap(&other->mprams_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mcontent_.Swap(&other->mcontent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mail, mdraw_)
      + sizeof(mail::mdraw_)
      - PROTOBUF_FIELD_OFFSET(mail, mid_)>(
          reinterpret_cast<char*>(&mid_),
          reinterpret_cast<char*>(&other->mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

db_mail_MmailEntry_DoNotUse::db_mail_MmailEntry_DoNotUse() {}
db_mail_MmailEntry_DoNotUse::db_mail_MmailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_mail_MmailEntry_DoNotUse::MergeFrom(const db_mail_MmailEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_mail_MmailEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_mail_MmailEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void db_mail::InitAsDefaultInstance() {
}
class db_mail::_Internal {
 public:
  using HasBits = decltype(std::declval<db_mail>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_mail::db_mail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mmail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_mail)
}
db_mail::db_mail(const db_mail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mmail_.MergeFrom(from.mmail_);
  mid_ = from.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_mail)
}

void db_mail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_mail_db_2eproto.base);
  mid_ = PROTOBUF_LONGLONG(0);
}

db_mail::~db_mail() {
  // @@protoc_insertion_point(destructor:pbdb.db_mail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_mail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_mail::ArenaDtor(void* object) {
  db_mail* _this = reinterpret_cast< db_mail* >(object);
  (void)_this;
}
void db_mail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_mail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_mail& db_mail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_mail_db_2eproto.base);
  return *internal_default_instance();
}


void db_mail::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_mail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mmail_.Clear();
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_mail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .pbdb.mail> mmail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mmail_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_mail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_mail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // map<int32, .pbdb.mail> mmail = 2;
  if (!this->_internal_mmail().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mmail().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mmail().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_iterator
          it = this->_internal_mmail().begin();
          it != this->_internal_mmail().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_mail_MmailEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_iterator
          it = this->_internal_mmail().begin();
          it != this->_internal_mmail().end(); ++it) {
        target = db_mail_MmailEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_mail)
  return target;
}

size_t db_mail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_mail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.mail> mmail = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mmail_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_iterator
      it = this->_internal_mmail().begin();
      it != this->_internal_mmail().end(); ++it) {
    total_size += db_mail_MmailEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 mid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_mail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_mail)
  GOOGLE_DCHECK_NE(&from, this);
  const db_mail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_mail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_mail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_mail)
    MergeFrom(*source);
  }
}

void db_mail::MergeFrom(const db_mail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_mail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mmail_.MergeFrom(from.mmail_);
  if (from._internal_has_mid()) {
    _internal_set_mid(from._internal_mid());
  }
}

void db_mail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_mail::CopyFrom(const db_mail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_mail::IsInitialized() const {
  return true;
}

void db_mail::InternalSwap(db_mail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mmail_.Swap(&other->mmail_);
  swap(mid_, other->mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_mail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_notice::InitAsDefaultInstance() {
}
class db_notice::_Internal {
 public:
  using HasBits = decltype(std::declval<db_notice>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mnotice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstarttime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mfinishtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

db_notice::db_notice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_notice)
}
db_notice::db_notice(const db_notice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mnotice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mnotice()) {
    mnotice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mnotice(),
      GetArena());
  }
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mfinishtime_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(mfinishtime_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_notice)
}

void db_notice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_notice_db_2eproto.base);
  mnotice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mfinishtime_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(mfinishtime_));
}

db_notice::~db_notice() {
  // @@protoc_insertion_point(destructor:pbdb.db_notice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_notice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mnotice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_notice::ArenaDtor(void* object) {
  db_notice* _this = reinterpret_cast< db_notice* >(object);
  (void)_this;
}
void db_notice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_notice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_notice& db_notice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_notice_db_2eproto.base);
  return *internal_default_instance();
}


void db_notice::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_notice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mnotice_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mfinishtime_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(mfinishtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_notice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mnotice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mnotice();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.db_notice.mnotice"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mstarttime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mstarttime(&has_bits);
          mstarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mfinishtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mfinishtime(&has_bits);
          mfinishtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_notice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_notice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // string mnotice = 2;
  if (_internal_has_mnotice()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mnotice().data(), static_cast<int>(this->_internal_mnotice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_notice.mnotice");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mnotice(), target);
  }

  // int32 mstarttime = 3;
  if (_internal_has_mstarttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mstarttime(), target);
  }

  // int32 mfinishtime = 4;
  if (_internal_has_mfinishtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mfinishtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_notice)
  return target;
}

size_t db_notice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_notice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // string mnotice = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mnotice());
    }

    // int64 mid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mid());
    }

    // int32 mstarttime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mstarttime());
    }

    // int32 mfinishtime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mfinishtime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_notice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_notice)
  GOOGLE_DCHECK_NE(&from, this);
  const db_notice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_notice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_notice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_notice)
    MergeFrom(*source);
  }
}

void db_notice::MergeFrom(const db_notice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_notice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mnotice(from._internal_mnotice());
    }
    if (cached_has_bits & 0x00000002u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000004u) {
      mstarttime_ = from.mstarttime_;
    }
    if (cached_has_bits & 0x00000008u) {
      mfinishtime_ = from.mfinishtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_notice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_notice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_notice::CopyFrom(const db_notice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_notice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_notice::IsInitialized() const {
  return true;
}

void db_notice::InternalSwap(db_notice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mnotice_.Swap(&other->mnotice_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_notice, mfinishtime_)
      + sizeof(db_notice::mfinishtime_)
      - PROTOBUF_FIELD_OFFSET(db_notice, mid_)>(
          reinterpret_cast<char*>(&mid_),
          reinterpret_cast<char*>(&other->mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_notice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void rankitem::InitAsDefaultInstance() {
}
class rankitem::_Internal {
 public:
  using HasBits = decltype(std::declval<rankitem>()._has_bits_);
  static void set_has_mvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

rankitem::rankitem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.rankitem)
}
rankitem::rankitem(const rankitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mvalue_, &from.mvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&mtime_) -
    reinterpret_cast<char*>(&mvalue_)) + sizeof(mtime_));
  // @@protoc_insertion_point(copy_constructor:pbdb.rankitem)
}

void rankitem::SharedCtor() {
  ::memset(&mvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mtime_) -
      reinterpret_cast<char*>(&mvalue_)) + sizeof(mtime_));
}

rankitem::~rankitem() {
  // @@protoc_insertion_point(destructor:pbdb.rankitem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void rankitem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void rankitem::ArenaDtor(void* object) {
  rankitem* _this = reinterpret_cast< rankitem* >(object);
  (void)_this;
}
void rankitem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void rankitem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rankitem& rankitem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rankitem_db_2eproto.base);
  return *internal_default_instance();
}


void rankitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.rankitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mtime_) -
        reinterpret_cast<char*>(&mvalue_)) + sizeof(mtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rankitem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mvalue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mvalue(&has_bits);
          mvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mtime(&has_bits);
          mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rankitem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.rankitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mvalue = 1;
  if (_internal_has_mvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mvalue(), target);
  }

  // int32 mtime = 2;
  if (_internal_has_mtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.rankitem)
  return target;
}

size_t rankitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.rankitem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 mvalue = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mvalue());
    }

    // int32 mtime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mtime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rankitem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.rankitem)
  GOOGLE_DCHECK_NE(&from, this);
  const rankitem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rankitem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.rankitem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.rankitem)
    MergeFrom(*source);
  }
}

void rankitem::MergeFrom(const rankitem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.rankitem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mvalue_ = from.mvalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      mtime_ = from.mtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rankitem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.rankitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rankitem::CopyFrom(const rankitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.rankitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rankitem::IsInitialized() const {
  return true;
}

void rankitem::InternalSwap(rankitem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(rankitem, mtime_)
      + sizeof(rankitem::mtime_)
      - PROTOBUF_FIELD_OFFSET(rankitem, mvalue_)>(
          reinterpret_cast<char*>(&mvalue_),
          reinterpret_cast<char*>(&other->mvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata rankitem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

db_ranklist_MitemsEntry_DoNotUse::db_ranklist_MitemsEntry_DoNotUse() {}
db_ranklist_MitemsEntry_DoNotUse::db_ranklist_MitemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_ranklist_MitemsEntry_DoNotUse::MergeFrom(const db_ranklist_MitemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_ranklist_MitemsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_ranklist_MitemsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void db_ranklist::InitAsDefaultInstance() {
}
class db_ranklist::_Internal {
 public:
  using HasBits = decltype(std::declval<db_ranklist>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_ranklist::db_ranklist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mitems_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_ranklist)
}
db_ranklist::db_ranklist(const db_ranklist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mitems_.MergeFrom(from.mitems_);
  mid_ = from.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_ranklist)
}

void db_ranklist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_ranklist_db_2eproto.base);
  mid_ = PROTOBUF_LONGLONG(0);
}

db_ranklist::~db_ranklist() {
  // @@protoc_insertion_point(destructor:pbdb.db_ranklist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_ranklist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_ranklist::ArenaDtor(void* object) {
  db_ranklist* _this = reinterpret_cast< db_ranklist* >(object);
  (void)_this;
}
void db_ranklist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_ranklist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_ranklist& db_ranklist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_ranklist_db_2eproto.base);
  return *internal_default_instance();
}


void db_ranklist::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_ranklist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mitems_.Clear();
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_ranklist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .pbdb.rankitem> mitems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mitems_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_ranklist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_ranklist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // map<int32, .pbdb.rankitem> mitems = 2;
  if (!this->_internal_mitems().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mitems().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mitems().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >::const_iterator
          it = this->_internal_mitems().begin();
          it != this->_internal_mitems().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_ranklist_MitemsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >::const_iterator
          it = this->_internal_mitems().begin();
          it != this->_internal_mitems().end(); ++it) {
        target = db_ranklist_MitemsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_ranklist)
  return target;
}

size_t db_ranklist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_ranklist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.rankitem> mitems = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mitems_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >::const_iterator
      it = this->_internal_mitems().begin();
      it != this->_internal_mitems().end(); ++it) {
    total_size += db_ranklist_MitemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 mid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_ranklist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_ranklist)
  GOOGLE_DCHECK_NE(&from, this);
  const db_ranklist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_ranklist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_ranklist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_ranklist)
    MergeFrom(*source);
  }
}

void db_ranklist::MergeFrom(const db_ranklist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_ranklist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mitems_.MergeFrom(from.mitems_);
  if (from._internal_has_mid()) {
    _internal_set_mid(from._internal_mid());
  }
}

void db_ranklist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_ranklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ranklist::CopyFrom(const db_ranklist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_ranklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ranklist::IsInitialized() const {
  return true;
}

void db_ranklist::InternalSwap(db_ranklist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mitems_.Swap(&other->mitems_);
  swap(mid_, other->mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_ranklist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_activitytimes::InitAsDefaultInstance() {
}
class db_activitytimes::_Internal {
 public:
  using HasBits = decltype(std::declval<db_activitytimes>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mbeg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mduration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mstart(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

db_activitytimes::db_activitytimes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_activitytimes)
}
db_activitytimes::db_activitytimes(const db_activitytimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstart_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(mstart_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_activitytimes)
}

void db_activitytimes::SharedCtor() {
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstart_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(mstart_));
}

db_activitytimes::~db_activitytimes() {
  // @@protoc_insertion_point(destructor:pbdb.db_activitytimes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_activitytimes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_activitytimes::ArenaDtor(void* object) {
  db_activitytimes* _this = reinterpret_cast< db_activitytimes* >(object);
  (void)_this;
}
void db_activitytimes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_activitytimes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_activitytimes& db_activitytimes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_activitytimes_db_2eproto.base);
  return *internal_default_instance();
}


void db_activitytimes::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_activitytimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstart_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(mstart_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_activitytimes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mbeg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mbeg(&has_bits);
          mbeg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mduration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mduration(&has_bits);
          mduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mstart = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mstart(&has_bits);
          mstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_activitytimes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_activitytimes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // int32 mbeg = 2;
  if (_internal_has_mbeg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mbeg(), target);
  }

  // int32 mduration = 3;
  if (_internal_has_mduration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mduration(), target);
  }

  // bool mstart = 4;
  if (_internal_has_mstart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_mstart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_activitytimes)
  return target;
}

size_t db_activitytimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_activitytimes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // int64 mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mid());
    }

    // int32 mbeg = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mbeg());
    }

    // int32 mduration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mduration());
    }

    // bool mstart = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_activitytimes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_activitytimes)
  GOOGLE_DCHECK_NE(&from, this);
  const db_activitytimes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_activitytimes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_activitytimes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_activitytimes)
    MergeFrom(*source);
  }
}

void db_activitytimes::MergeFrom(const db_activitytimes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_activitytimes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mbeg_ = from.mbeg_;
    }
    if (cached_has_bits & 0x00000004u) {
      mduration_ = from.mduration_;
    }
    if (cached_has_bits & 0x00000008u) {
      mstart_ = from.mstart_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_activitytimes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_activitytimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_activitytimes::CopyFrom(const db_activitytimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_activitytimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_activitytimes::IsInitialized() const {
  return true;
}

void db_activitytimes::InternalSwap(db_activitytimes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_activitytimes, mstart_)
      + sizeof(db_activitytimes::mstart_)
      - PROTOBUF_FIELD_OFFSET(db_activitytimes, mid_)>(
          reinterpret_cast<char*>(&mid_),
          reinterpret_cast<char*>(&other->mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_activitytimes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

activity_task_MopenEntry_DoNotUse::activity_task_MopenEntry_DoNotUse() {}
activity_task_MopenEntry_DoNotUse::activity_task_MopenEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void activity_task_MopenEntry_DoNotUse::MergeFrom(const activity_task_MopenEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata activity_task_MopenEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void activity_task_MopenEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

activity_task_McloseEntry_DoNotUse::activity_task_McloseEntry_DoNotUse() {}
activity_task_McloseEntry_DoNotUse::activity_task_McloseEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void activity_task_McloseEntry_DoNotUse::MergeFrom(const activity_task_McloseEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata activity_task_McloseEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void activity_task_McloseEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void activity_task::InitAsDefaultInstance() {
}
class activity_task::_Internal {
 public:
};

activity_task::activity_task(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mopen_(arena),
  mclose_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.activity_task)
}
activity_task::activity_task(const activity_task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mopen_.MergeFrom(from.mopen_);
  mclose_.MergeFrom(from.mclose_);
  // @@protoc_insertion_point(copy_constructor:pbdb.activity_task)
}

void activity_task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_activity_task_db_2eproto.base);
}

activity_task::~activity_task() {
  // @@protoc_insertion_point(destructor:pbdb.activity_task)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void activity_task::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void activity_task::ArenaDtor(void* object) {
  activity_task* _this = reinterpret_cast< activity_task* >(object);
  (void)_this;
}
void activity_task::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void activity_task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const activity_task& activity_task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_activity_task_db_2eproto.base);
  return *internal_default_instance();
}


void activity_task::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.activity_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mopen_.Clear();
  mclose_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* activity_task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, bool> mopen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mopen_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, bool> mclose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mclose_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* activity_task::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.activity_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, bool> mopen = 1;
  if (!this->_internal_mopen().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mopen().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mopen().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
          it = this->_internal_mopen().begin();
          it != this->_internal_mopen().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = activity_task_MopenEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
          it = this->_internal_mopen().begin();
          it != this->_internal_mopen().end(); ++it) {
        target = activity_task_MopenEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, bool> mclose = 2;
  if (!this->_internal_mclose().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mclose().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mclose().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
          it = this->_internal_mclose().begin();
          it != this->_internal_mclose().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = activity_task_McloseEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
          it = this->_internal_mclose().begin();
          it != this->_internal_mclose().end(); ++it) {
        target = activity_task_McloseEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.activity_task)
  return target;
}

size_t activity_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.activity_task)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bool> mopen = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mopen_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
      it = this->_internal_mopen().begin();
      it != this->_internal_mopen().end(); ++it) {
    total_size += activity_task_MopenEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, bool> mclose = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mclose_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
      it = this->_internal_mclose().begin();
      it != this->_internal_mclose().end(); ++it) {
    total_size += activity_task_McloseEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void activity_task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.activity_task)
  GOOGLE_DCHECK_NE(&from, this);
  const activity_task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<activity_task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.activity_task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.activity_task)
    MergeFrom(*source);
  }
}

void activity_task::MergeFrom(const activity_task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.activity_task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mopen_.MergeFrom(from.mopen_);
  mclose_.MergeFrom(from.mclose_);
}

void activity_task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.activity_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_task::CopyFrom(const activity_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.activity_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_task::IsInitialized() const {
  return true;
}

void activity_task::InternalSwap(activity_task* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mopen_.Swap(&other->mopen_);
  mclose_.Swap(&other->mclose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata activity_task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

activity_drawcompliance_MrewardEntry_DoNotUse::activity_drawcompliance_MrewardEntry_DoNotUse() {}
activity_drawcompliance_MrewardEntry_DoNotUse::activity_drawcompliance_MrewardEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void activity_drawcompliance_MrewardEntry_DoNotUse::MergeFrom(const activity_drawcompliance_MrewardEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata activity_drawcompliance_MrewardEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void activity_drawcompliance_MrewardEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void activity_drawcompliance::InitAsDefaultInstance() {
}
class activity_drawcompliance::_Internal {
 public:
  using HasBits = decltype(std::declval<activity_drawcompliance>()._has_bits_);
  static void set_has_mcount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

activity_drawcompliance::activity_drawcompliance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mreward_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.activity_drawcompliance)
}
activity_drawcompliance::activity_drawcompliance(const activity_drawcompliance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mreward_.MergeFrom(from.mreward_);
  mcount_ = from.mcount_;
  // @@protoc_insertion_point(copy_constructor:pbdb.activity_drawcompliance)
}

void activity_drawcompliance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_activity_drawcompliance_db_2eproto.base);
  mcount_ = 0;
}

activity_drawcompliance::~activity_drawcompliance() {
  // @@protoc_insertion_point(destructor:pbdb.activity_drawcompliance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void activity_drawcompliance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void activity_drawcompliance::ArenaDtor(void* object) {
  activity_drawcompliance* _this = reinterpret_cast< activity_drawcompliance* >(object);
  (void)_this;
}
void activity_drawcompliance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void activity_drawcompliance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const activity_drawcompliance& activity_drawcompliance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_activity_drawcompliance_db_2eproto.base);
  return *internal_default_instance();
}


void activity_drawcompliance::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.activity_drawcompliance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mreward_.Clear();
  mcount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* activity_drawcompliance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mcount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mcount(&has_bits);
          mcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, bool> mreward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mreward_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* activity_drawcompliance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.activity_drawcompliance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mcount = 1;
  if (_internal_has_mcount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mcount(), target);
  }

  // map<int32, bool> mreward = 2;
  if (!this->_internal_mreward().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mreward().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mreward().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
          it = this->_internal_mreward().begin();
          it != this->_internal_mreward().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = activity_drawcompliance_MrewardEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
          it = this->_internal_mreward().begin();
          it != this->_internal_mreward().end(); ++it) {
        target = activity_drawcompliance_MrewardEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.activity_drawcompliance)
  return target;
}

size_t activity_drawcompliance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.activity_drawcompliance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bool> mreward = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mreward_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
      it = this->_internal_mreward().begin();
      it != this->_internal_mreward().end(); ++it) {
    total_size += activity_drawcompliance_MrewardEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 mcount = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void activity_drawcompliance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.activity_drawcompliance)
  GOOGLE_DCHECK_NE(&from, this);
  const activity_drawcompliance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<activity_drawcompliance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.activity_drawcompliance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.activity_drawcompliance)
    MergeFrom(*source);
  }
}

void activity_drawcompliance::MergeFrom(const activity_drawcompliance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.activity_drawcompliance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mreward_.MergeFrom(from.mreward_);
  if (from._internal_has_mcount()) {
    _internal_set_mcount(from._internal_mcount());
  }
}

void activity_drawcompliance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.activity_drawcompliance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void activity_drawcompliance::CopyFrom(const activity_drawcompliance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.activity_drawcompliance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_drawcompliance::IsInitialized() const {
  return true;
}

void activity_drawcompliance::InternalSwap(activity_drawcompliance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mreward_.Swap(&other->mreward_);
  swap(mcount_, other->mcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata activity_drawcompliance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

db_activity_MtaskEntry_DoNotUse::db_activity_MtaskEntry_DoNotUse() {}
db_activity_MtaskEntry_DoNotUse::db_activity_MtaskEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_activity_MtaskEntry_DoNotUse::MergeFrom(const db_activity_MtaskEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_activity_MtaskEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_activity_MtaskEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

db_activity_MdrawcomplianceEntry_DoNotUse::db_activity_MdrawcomplianceEntry_DoNotUse() {}
db_activity_MdrawcomplianceEntry_DoNotUse::db_activity_MdrawcomplianceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_activity_MdrawcomplianceEntry_DoNotUse::MergeFrom(const db_activity_MdrawcomplianceEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_activity_MdrawcomplianceEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_activity_MdrawcomplianceEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void db_activity::InitAsDefaultInstance() {
}
class db_activity::_Internal {
 public:
  using HasBits = decltype(std::declval<db_activity>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_activity::db_activity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mtask_(arena),
  mdrawcompliance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_activity)
}
db_activity::db_activity(const db_activity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mtask_.MergeFrom(from.mtask_);
  mdrawcompliance_.MergeFrom(from.mdrawcompliance_);
  mid_ = from.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_activity)
}

void db_activity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_activity_db_2eproto.base);
  mid_ = PROTOBUF_LONGLONG(0);
}

db_activity::~db_activity() {
  // @@protoc_insertion_point(destructor:pbdb.db_activity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_activity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_activity::ArenaDtor(void* object) {
  db_activity* _this = reinterpret_cast< db_activity* >(object);
  (void)_this;
}
void db_activity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_activity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_activity& db_activity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_activity_db_2eproto.base);
  return *internal_default_instance();
}


void db_activity::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_activity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mtask_.Clear();
  mdrawcompliance_.Clear();
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_activity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int64, .pbdb.activity_task> mtask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mtask_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int64, .pbdb.activity_drawcompliance> mdrawcompliance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mdrawcompliance_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_activity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_activity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // map<int64, .pbdb.activity_task> mtask = 2;
  if (!this->_internal_mtask().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mtask().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mtask().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >::const_iterator
          it = this->_internal_mtask().begin();
          it != this->_internal_mtask().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_activity_MtaskEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >::const_iterator
          it = this->_internal_mtask().begin();
          it != this->_internal_mtask().end(); ++it) {
        target = db_activity_MtaskEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // map<int64, .pbdb.activity_drawcompliance> mdrawcompliance = 3;
  if (!this->_internal_mdrawcompliance().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mdrawcompliance().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mdrawcompliance().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >::const_iterator
          it = this->_internal_mdrawcompliance().begin();
          it != this->_internal_mdrawcompliance().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_activity_MdrawcomplianceEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >::const_iterator
          it = this->_internal_mdrawcompliance().begin();
          it != this->_internal_mdrawcompliance().end(); ++it) {
        target = db_activity_MdrawcomplianceEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_activity)
  return target;
}

size_t db_activity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_activity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .pbdb.activity_task> mtask = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mtask_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_task >::const_iterator
      it = this->_internal_mtask().begin();
      it != this->_internal_mtask().end(); ++it) {
    total_size += db_activity_MtaskEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, .pbdb.activity_drawcompliance> mdrawcompliance = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mdrawcompliance_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::activity_drawcompliance >::const_iterator
      it = this->_internal_mdrawcompliance().begin();
      it != this->_internal_mdrawcompliance().end(); ++it) {
    total_size += db_activity_MdrawcomplianceEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 mid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_activity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_activity)
  GOOGLE_DCHECK_NE(&from, this);
  const db_activity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_activity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_activity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_activity)
    MergeFrom(*source);
  }
}

void db_activity::MergeFrom(const db_activity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_activity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mtask_.MergeFrom(from.mtask_);
  mdrawcompliance_.MergeFrom(from.mdrawcompliance_);
  if (from._internal_has_mid()) {
    _internal_set_mid(from._internal_mid());
  }
}

void db_activity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_activity::CopyFrom(const db_activity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_activity::IsInitialized() const {
  return true;
}

void db_activity::InternalSwap(db_activity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mtask_.Swap(&other->mtask_);
  mdrawcompliance_.Swap(&other->mdrawcompliance_);
  swap(mid_, other->mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_activity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_task_data_schedule::InitAsDefaultInstance() {
}
class db_task_data_schedule::_Internal {
 public:
  using HasBits = decltype(std::declval<db_task_data_schedule>()._has_bits_);
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msumint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

db_task_data_schedule::db_task_data_schedule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_task.data_schedule)
}
db_task_data_schedule::db_task_data_schedule(const db_task_data_schedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mtype_, &from.mtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&msumint_) -
    reinterpret_cast<char*>(&mtype_)) + sizeof(msumint_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_task.data_schedule)
}

void db_task_data_schedule::SharedCtor() {
  ::memset(&mtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msumint_) -
      reinterpret_cast<char*>(&mtype_)) + sizeof(msumint_));
}

db_task_data_schedule::~db_task_data_schedule() {
  // @@protoc_insertion_point(destructor:pbdb.db_task.data_schedule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_task_data_schedule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_task_data_schedule::ArenaDtor(void* object) {
  db_task_data_schedule* _this = reinterpret_cast< db_task_data_schedule* >(object);
  (void)_this;
}
void db_task_data_schedule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_task_data_schedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_task_data_schedule& db_task_data_schedule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_task_data_schedule_db_2eproto.base);
  return *internal_default_instance();
}


void db_task_data_schedule::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_task.data_schedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msumint_) -
        reinterpret_cast<char*>(&mtype_)) + sizeof(msumint_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_task_data_schedule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mtype(&has_bits);
          mtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mvalue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mvalue(&has_bits);
          mvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msumint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_msumint(&has_bits);
          msumint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_task_data_schedule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_task.data_schedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mtype = 1;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtype(), target);
  }

  // int32 mvalue = 2;
  if (_internal_has_mvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mvalue(), target);
  }

  // int32 msumint = 3;
  if (_internal_has_msumint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_msumint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_task.data_schedule)
  return target;
}

size_t db_task_data_schedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_task.data_schedule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // int32 mtype = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mtype());
    }

    // int32 mvalue = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mvalue());
    }

    // int32 msumint = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_msumint());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_task_data_schedule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_task.data_schedule)
  GOOGLE_DCHECK_NE(&from, this);
  const db_task_data_schedule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_task_data_schedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_task.data_schedule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_task.data_schedule)
    MergeFrom(*source);
  }
}

void db_task_data_schedule::MergeFrom(const db_task_data_schedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_task.data_schedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mtype_ = from.mtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      mvalue_ = from.mvalue_;
    }
    if (cached_has_bits & 0x00000004u) {
      msumint_ = from.msumint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_task_data_schedule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_task.data_schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_data_schedule::CopyFrom(const db_task_data_schedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_task.data_schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_data_schedule::IsInitialized() const {
  return true;
}

void db_task_data_schedule::InternalSwap(db_task_data_schedule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_task_data_schedule, msumint_)
      + sizeof(db_task_data_schedule::msumint_)
      - PROTOBUF_FIELD_OFFSET(db_task_data_schedule, mtype_)>(
          reinterpret_cast<char*>(&mtype_),
          reinterpret_cast<char*>(&other->mtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_task_data_schedule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_task_data::InitAsDefaultInstance() {
}
class db_task_data::_Internal {
 public:
  using HasBits = decltype(std::declval<db_task_data>()._has_bits_);
  static void set_has_mtaskid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mreceiveutc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mfinshutc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mreceive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

db_task_data::db_task_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mschedules_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_task.data)
}
db_task_data::db_task_data(const db_task_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mschedules_(from.mschedules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mtaskid_, &from.mtaskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mreceive_) -
    reinterpret_cast<char*>(&mtaskid_)) + sizeof(mreceive_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_task.data)
}

void db_task_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_task_data_db_2eproto.base);
  ::memset(&mtaskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mreceive_) -
      reinterpret_cast<char*>(&mtaskid_)) + sizeof(mreceive_));
}

db_task_data::~db_task_data() {
  // @@protoc_insertion_point(destructor:pbdb.db_task.data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_task_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_task_data::ArenaDtor(void* object) {
  db_task_data* _this = reinterpret_cast< db_task_data* >(object);
  (void)_this;
}
void db_task_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_task_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_task_data& db_task_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_task_data_db_2eproto.base);
  return *internal_default_instance();
}


void db_task_data::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_task.data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mschedules_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&mtaskid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mreceive_) -
        reinterpret_cast<char*>(&mtaskid_)) + sizeof(mreceive_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_task_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mtaskid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mtaskid(&has_bits);
          mtaskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mreceiveutc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mreceiveutc(&has_bits);
          mreceiveutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mfinshutc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mfinshutc(&has_bits);
          mfinshutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbdb.db_task.data_schedule mschedules = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mschedules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool mreceive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mreceive(&has_bits);
          mreceive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_task_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_task.data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mtaskid = 1;
  if (_internal_has_mtaskid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtaskid(), target);
  }

  // int32 mreceiveutc = 2;
  if (_internal_has_mreceiveutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mreceiveutc(), target);
  }

  // int32 mfinshutc = 3;
  if (_internal_has_mfinshutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mfinshutc(), target);
  }

  // repeated .pbdb.db_task.data_schedule mschedules = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mschedules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_mschedules(i), target, stream);
  }

  // bool mreceive = 5;
  if (_internal_has_mreceive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_mreceive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_task.data)
  return target;
}

size_t db_task_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_task.data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_task.data_schedule mschedules = 4;
  total_size += 1UL * this->_internal_mschedules_size();
  for (const auto& msg : this->mschedules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // int32 mtaskid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mtaskid());
    }

    // int32 mreceiveutc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mreceiveutc());
    }

    // int32 mfinshutc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mfinshutc());
    }

    // bool mreceive = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_task_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_task.data)
  GOOGLE_DCHECK_NE(&from, this);
  const db_task_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_task_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_task.data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_task.data)
    MergeFrom(*source);
  }
}

void db_task_data::MergeFrom(const db_task_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_task.data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mschedules_.MergeFrom(from.mschedules_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mtaskid_ = from.mtaskid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mreceiveutc_ = from.mreceiveutc_;
    }
    if (cached_has_bits & 0x00000004u) {
      mfinshutc_ = from.mfinshutc_;
    }
    if (cached_has_bits & 0x00000008u) {
      mreceive_ = from.mreceive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_task_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_task.data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_data::CopyFrom(const db_task_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_task.data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_data::IsInitialized() const {
  return true;
}

void db_task_data::InternalSwap(db_task_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mschedules_.InternalSwap(&other->mschedules_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_task_data, mreceive_)
      + sizeof(db_task_data::mreceive_)
      - PROTOBUF_FIELD_OFFSET(db_task_data, mtaskid_)>(
          reinterpret_cast<char*>(&mtaskid_),
          reinterpret_cast<char*>(&other->mtaskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_task_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_task_complete::InitAsDefaultInstance() {
}
class db_task_complete::_Internal {
 public:
};

db_task_complete::db_task_complete(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mhistory_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_task.complete)
}
db_task_complete::db_task_complete(const db_task_complete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mhistory_(from.mhistory_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbdb.db_task.complete)
}

void db_task_complete::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_task_complete_db_2eproto.base);
}

db_task_complete::~db_task_complete() {
  // @@protoc_insertion_point(destructor:pbdb.db_task.complete)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_task_complete::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_task_complete::ArenaDtor(void* object) {
  db_task_complete* _this = reinterpret_cast< db_task_complete* >(object);
  (void)_this;
}
void db_task_complete::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_task_complete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_task_complete& db_task_complete::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_task_complete_db_2eproto.base);
  return *internal_default_instance();
}


void db_task_complete::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_task.complete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mhistory_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_task_complete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pbdb.db_task.data mhistory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mhistory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_task_complete::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_task.complete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbdb.db_task.data mhistory = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mhistory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mhistory(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_task.complete)
  return target;
}

size_t db_task_complete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_task.complete)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_task.data mhistory = 1;
  total_size += 1UL * this->_internal_mhistory_size();
  for (const auto& msg : this->mhistory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_task_complete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_task.complete)
  GOOGLE_DCHECK_NE(&from, this);
  const db_task_complete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_task_complete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_task.complete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_task.complete)
    MergeFrom(*source);
  }
}

void db_task_complete::MergeFrom(const db_task_complete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_task.complete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mhistory_.MergeFrom(from.mhistory_);
}

void db_task_complete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_task.complete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_complete::CopyFrom(const db_task_complete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_task.complete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_complete::IsInitialized() const {
  return true;
}

void db_task_complete::InternalSwap(db_task_complete* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mhistory_.InternalSwap(&other->mhistory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_task_complete::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

db_task_MrundatasEntry_DoNotUse::db_task_MrundatasEntry_DoNotUse() {}
db_task_MrundatasEntry_DoNotUse::db_task_MrundatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_task_MrundatasEntry_DoNotUse::MergeFrom(const db_task_MrundatasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_task_MrundatasEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_task_MrundatasEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

db_task_McompleteddatasEntry_DoNotUse::db_task_McompleteddatasEntry_DoNotUse() {}
db_task_McompleteddatasEntry_DoNotUse::db_task_McompleteddatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_task_McompleteddatasEntry_DoNotUse::MergeFrom(const db_task_McompleteddatasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_task_McompleteddatasEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_task_McompleteddatasEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void db_task::InitAsDefaultInstance() {
}
class db_task::_Internal {
 public:
  using HasBits = decltype(std::declval<db_task>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_task::db_task(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mrundatas_(arena),
  mcompleteddatas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_task)
}
db_task::db_task(const db_task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mrundatas_.MergeFrom(from.mrundatas_);
  mcompleteddatas_.MergeFrom(from.mcompleteddatas_);
  mid_ = from.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_task)
}

void db_task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_task_db_2eproto.base);
  mid_ = PROTOBUF_LONGLONG(0);
}

db_task::~db_task() {
  // @@protoc_insertion_point(destructor:pbdb.db_task)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_task::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_task::ArenaDtor(void* object) {
  db_task* _this = reinterpret_cast< db_task* >(object);
  (void)_this;
}
void db_task::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_task& db_task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_task_db_2eproto.base);
  return *internal_default_instance();
}


void db_task::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mrundatas_.Clear();
  mcompleteddatas_.Clear();
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .pbdb.db_task.data> mrundatas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mrundatas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .pbdb.db_task.complete> mcompleteddatas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mcompleteddatas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_task::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // map<int32, .pbdb.db_task.data> mrundatas = 2;
  if (!this->_internal_mrundatas().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mrundatas().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mrundatas().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::const_iterator
          it = this->_internal_mrundatas().begin();
          it != this->_internal_mrundatas().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_task_MrundatasEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::const_iterator
          it = this->_internal_mrundatas().begin();
          it != this->_internal_mrundatas().end(); ++it) {
        target = db_task_MrundatasEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .pbdb.db_task.complete> mcompleteddatas = 3;
  if (!this->_internal_mcompleteddatas().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mcompleteddatas().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mcompleteddatas().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >::const_iterator
          it = this->_internal_mcompleteddatas().begin();
          it != this->_internal_mcompleteddatas().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_task_McompleteddatasEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >::const_iterator
          it = this->_internal_mcompleteddatas().begin();
          it != this->_internal_mcompleteddatas().end(); ++it) {
        target = db_task_McompleteddatasEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_task)
  return target;
}

size_t db_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_task)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.db_task.data> mrundatas = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mrundatas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::const_iterator
      it = this->_internal_mrundatas().begin();
      it != this->_internal_mrundatas().end(); ++it) {
    total_size += db_task_MrundatasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .pbdb.db_task.complete> mcompleteddatas = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mcompleteddatas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_complete >::const_iterator
      it = this->_internal_mcompleteddatas().begin();
      it != this->_internal_mcompleteddatas().end(); ++it) {
    total_size += db_task_McompleteddatasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 mid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_task)
  GOOGLE_DCHECK_NE(&from, this);
  const db_task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_task)
    MergeFrom(*source);
  }
}

void db_task::MergeFrom(const db_task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mrundatas_.MergeFrom(from.mrundatas_);
  mcompleteddatas_.MergeFrom(from.mcompleteddatas_);
  if (from._internal_has_mid()) {
    _internal_set_mid(from._internal_mid());
  }
}

void db_task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task::CopyFrom(const db_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task::IsInitialized() const {
  return true;
}

void db_task::InternalSwap(db_task* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mrundatas_.Swap(&other->mrundatas_);
  mcompleteddatas_.Swap(&other->mcompleteddatas_);
  swap(mid_, other->mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_familyer::InitAsDefaultInstance() {
}
class db_familyer::_Internal {
 public:
  using HasBits = decltype(std::declval<db_familyer>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mjoinutc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mlastsignutc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mlastleaveutc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mposition(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

db_familyer::db_familyer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_familyer)
}
db_familyer::db_familyer(const db_familyer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mposition_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(mposition_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_familyer)
}

void db_familyer::SharedCtor() {
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mposition_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(mposition_));
}

db_familyer::~db_familyer() {
  // @@protoc_insertion_point(destructor:pbdb.db_familyer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_familyer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_familyer::ArenaDtor(void* object) {
  db_familyer* _this = reinterpret_cast< db_familyer* >(object);
  (void)_this;
}
void db_familyer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_familyer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_familyer& db_familyer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_familyer_db_2eproto.base);
  return *internal_default_instance();
}


void db_familyer::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_familyer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mposition_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(mposition_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_familyer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mjoinutc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mjoinutc(&has_bits);
          mjoinutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mlastsignutc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mlastsignutc(&has_bits);
          mlastsignutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mlastleaveutc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mlastleaveutc(&has_bits);
          mlastleaveutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbdb.db_familyer.eposition mposition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mposition(static_cast<::pbdb::db_familyer_eposition>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_familyer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_familyer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // int32 mjoinutc = 2;
  if (_internal_has_mjoinutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mjoinutc(), target);
  }

  // int32 mlastsignutc = 3;
  if (_internal_has_mlastsignutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mlastsignutc(), target);
  }

  // int32 mlastleaveutc = 4;
  if (_internal_has_mlastleaveutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mlastleaveutc(), target);
  }

  // .pbdb.db_familyer.eposition mposition = 5;
  if (_internal_has_mposition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mposition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_familyer)
  return target;
}

size_t db_familyer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_familyer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // int64 mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mid());
    }

    // int32 mjoinutc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mjoinutc());
    }

    // int32 mlastsignutc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mlastsignutc());
    }

    // int32 mlastleaveutc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mlastleaveutc());
    }

    // .pbdb.db_familyer.eposition mposition = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mposition());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_familyer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_familyer)
  GOOGLE_DCHECK_NE(&from, this);
  const db_familyer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_familyer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_familyer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_familyer)
    MergeFrom(*source);
  }
}

void db_familyer::MergeFrom(const db_familyer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_familyer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mjoinutc_ = from.mjoinutc_;
    }
    if (cached_has_bits & 0x00000004u) {
      mlastsignutc_ = from.mlastsignutc_;
    }
    if (cached_has_bits & 0x00000008u) {
      mlastleaveutc_ = from.mlastleaveutc_;
    }
    if (cached_has_bits & 0x00000010u) {
      mposition_ = from.mposition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_familyer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_familyer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_familyer::CopyFrom(const db_familyer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_familyer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_familyer::IsInitialized() const {
  return true;
}

void db_familyer::InternalSwap(db_familyer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_familyer, mposition_)
      + sizeof(db_familyer::mposition_)
      - PROTOBUF_FIELD_OFFSET(db_familyer, mid_)>(
          reinterpret_cast<char*>(&mid_),
          reinterpret_cast<char*>(&other->mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_familyer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_family::InitAsDefaultInstance() {
}
class db_family::_Internal {
 public:
  using HasBits = decltype(std::declval<db_family>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mcreateutc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mleader(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mlv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mexp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

db_family::db_family(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mmember_(arena),
  mapplylist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_family)
}
db_family::db_family(const db_family& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mmember_(from.mmember_),
      mapplylist_(from.mapplylist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mname()) {
    mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mname(),
      GetArena());
  }
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mexp_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(mexp_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_family)
}

void db_family::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_family_db_2eproto.base);
  mname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mexp_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(mexp_));
}

db_family::~db_family() {
  // @@protoc_insertion_point(destructor:pbdb.db_family)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_family::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_family::ArenaDtor(void* object) {
  db_family* _this = reinterpret_cast< db_family* >(object);
  (void)_this;
}
void db_family::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_family::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_family& db_family::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_family_db_2eproto.base);
  return *internal_default_instance();
}


void db_family::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_family)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mmember_.Clear();
  mapplylist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mname_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mexp_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(mexp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_family::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mcreateutc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mcreateutc(&has_bits);
          mcreateutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.db_family.mname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mleader = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mleader(&has_bits);
          mleader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mlv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mlv(&has_bits);
          mlv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mexp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mexp(&has_bits);
          mexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 mmember = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_mmember(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_mmember(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 mapplylist = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_mapplylist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_mapplylist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_family::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_family)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // int32 mcreateutc = 2;
  if (_internal_has_mcreateutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mcreateutc(), target);
  }

  // string mname = 3;
  if (_internal_has_mname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mname().data(), static_cast<int>(this->_internal_mname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_family.mname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mname(), target);
  }

  // int64 mleader = 4;
  if (_internal_has_mleader()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_mleader(), target);
  }

  // int32 mlv = 5;
  if (_internal_has_mlv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mlv(), target);
  }

  // int32 mexp = 6;
  if (_internal_has_mexp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_mexp(), target);
  }

  // repeated int64 mmember = 7;
  {
    int byte_size = _mmember_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_mmember(), byte_size, target);
    }
  }

  // repeated int64 mapplylist = 8;
  {
    int byte_size = _mapplylist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_mapplylist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_family)
  return target;
}

size_t db_family::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_family)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 mmember = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->mmember_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mmember_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 mapplylist = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->mapplylist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mapplylist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // string mname = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mname());
    }

    // int64 mid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mid());
    }

    // int32 mcreateutc = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mcreateutc());
    }

    // int32 mlv = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mlv());
    }

    // int64 mleader = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mleader());
    }

    // int32 mexp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mexp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_family::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_family)
  GOOGLE_DCHECK_NE(&from, this);
  const db_family* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_family>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_family)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_family)
    MergeFrom(*source);
  }
}

void db_family::MergeFrom(const db_family& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_family)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mmember_.MergeFrom(from.mmember_);
  mapplylist_.MergeFrom(from.mapplylist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mname(from._internal_mname());
    }
    if (cached_has_bits & 0x00000002u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000004u) {
      mcreateutc_ = from.mcreateutc_;
    }
    if (cached_has_bits & 0x00000008u) {
      mlv_ = from.mlv_;
    }
    if (cached_has_bits & 0x00000010u) {
      mleader_ = from.mleader_;
    }
    if (cached_has_bits & 0x00000020u) {
      mexp_ = from.mexp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_family::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_family)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_family::CopyFrom(const db_family& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_family)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_family::IsInitialized() const {
  return true;
}

void db_family::InternalSwap(db_family* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mmember_.InternalSwap(&other->mmember_);
  mapplylist_.InternalSwap(&other->mapplylist_);
  mname_.Swap(&other->mname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_family, mexp_)
      + sizeof(db_family::mexp_)
      - PROTOBUF_FIELD_OFFSET(db_family, mid_)>(
          reinterpret_cast<char*>(&mid_),
          reinterpret_cast<char*>(&other->mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_family::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_friends::InitAsDefaultInstance() {
}
class db_friends::_Internal {
 public:
  using HasBits = decltype(std::declval<db_friends>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_friends::db_friends(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mfriends_(arena),
  mapplyfriends_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_friends)
}
db_friends::db_friends(const db_friends& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mfriends_(from.mfriends_),
      mapplyfriends_(from.mapplyfriends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mid_ = from.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_friends)
}

void db_friends::SharedCtor() {
  mid_ = PROTOBUF_LONGLONG(0);
}

db_friends::~db_friends() {
  // @@protoc_insertion_point(destructor:pbdb.db_friends)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_friends::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_friends::ArenaDtor(void* object) {
  db_friends* _this = reinterpret_cast< db_friends* >(object);
  (void)_this;
}
void db_friends::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_friends::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_friends& db_friends::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_friends_db_2eproto.base);
  return *internal_default_instance();
}


void db_friends::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_friends)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mfriends_.Clear();
  mapplyfriends_.Clear();
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_friends::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 mfriends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_mfriends(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_mfriends(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 mapplyfriends = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_mapplyfriends(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_mapplyfriends(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_friends::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_friends)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // repeated int64 mfriends = 2;
  {
    int byte_size = _mfriends_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_mfriends(), byte_size, target);
    }
  }

  // repeated int64 mapplyfriends = 3;
  {
    int byte_size = _mapplyfriends_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_mapplyfriends(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_friends)
  return target;
}

size_t db_friends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_friends)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 mfriends = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->mfriends_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mfriends_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 mapplyfriends = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->mapplyfriends_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mapplyfriends_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 mid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_friends::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_friends)
  GOOGLE_DCHECK_NE(&from, this);
  const db_friends* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_friends>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_friends)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_friends)
    MergeFrom(*source);
  }
}

void db_friends::MergeFrom(const db_friends& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_friends)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mfriends_.MergeFrom(from.mfriends_);
  mapplyfriends_.MergeFrom(from.mapplyfriends_);
  if (from._internal_has_mid()) {
    _internal_set_mid(from._internal_mid());
  }
}

void db_friends::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_friends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_friends::CopyFrom(const db_friends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_friends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_friends::IsInitialized() const {
  return true;
}

void db_friends::InternalSwap(db_friends* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mfriends_.InternalSwap(&other->mfriends_);
  mapplyfriends_.InternalSwap(&other->mapplyfriends_);
  swap(mid_, other->mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_friends::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void dbcross_test::InitAsDefaultInstance() {
}
class dbcross_test::_Internal {
 public:
  using HasBits = decltype(std::declval<dbcross_test>()._has_bits_);
  static void set_has_mname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

dbcross_test::dbcross_test(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mvalue_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.dbcross_test)
}
dbcross_test::dbcross_test(const dbcross_test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mvalue_(from.mvalue_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mname()) {
    mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mname(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pbdb.dbcross_test)
}

void dbcross_test::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dbcross_test_db_2eproto.base);
  mname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

dbcross_test::~dbcross_test() {
  // @@protoc_insertion_point(destructor:pbdb.dbcross_test)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dbcross_test::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void dbcross_test::ArenaDtor(void* object) {
  dbcross_test* _this = reinterpret_cast< dbcross_test* >(object);
  (void)_this;
}
void dbcross_test::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dbcross_test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dbcross_test& dbcross_test::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dbcross_test_db_2eproto.base);
  return *internal_default_instance();
}


void dbcross_test::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.dbcross_test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mvalue_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mname_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dbcross_test::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.dbcross_test.mname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 mvalue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_mvalue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_mvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dbcross_test::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.dbcross_test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mname = 1;
  if (_internal_has_mname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mname().data(), static_cast<int>(this->_internal_mname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.dbcross_test.mname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mname(), target);
  }

  // repeated int64 mvalue = 2;
  {
    int byte_size = _mvalue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_mvalue(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.dbcross_test)
  return target;
}

size_t dbcross_test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.dbcross_test)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 mvalue = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->mvalue_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mvalue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string mname = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dbcross_test::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.dbcross_test)
  GOOGLE_DCHECK_NE(&from, this);
  const dbcross_test* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dbcross_test>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.dbcross_test)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.dbcross_test)
    MergeFrom(*source);
  }
}

void dbcross_test::MergeFrom(const dbcross_test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.dbcross_test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mvalue_.MergeFrom(from.mvalue_);
  if (from._internal_has_mname()) {
    _internal_set_mname(from._internal_mname());
  }
}

void dbcross_test::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.dbcross_test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbcross_test::CopyFrom(const dbcross_test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.dbcross_test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbcross_test::IsInitialized() const {
  return true;
}

void dbcross_test::InternalSwap(dbcross_test* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mvalue_.InternalSwap(&other->mvalue_);
  mname_.Swap(&other->mname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata dbcross_test::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_testlua_luadata::InitAsDefaultInstance() {
}
class db_testlua_luadata::_Internal {
 public:
  using HasBits = decltype(std::declval<db_testlua_luadata>()._has_bits_);
  static void set_has_mkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mval(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

db_testlua_luadata::db_testlua_luadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_testlua.luadata)
}
db_testlua_luadata::db_testlua_luadata(const db_testlua_luadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mkey()) {
    mkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mkey(),
      GetArena());
  }
  mval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mval()) {
    mval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mval(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pbdb.db_testlua.luadata)
}

void db_testlua_luadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_testlua_luadata_db_2eproto.base);
  mkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

db_testlua_luadata::~db_testlua_luadata() {
  // @@protoc_insertion_point(destructor:pbdb.db_testlua.luadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_testlua_luadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_testlua_luadata::ArenaDtor(void* object) {
  db_testlua_luadata* _this = reinterpret_cast< db_testlua_luadata* >(object);
  (void)_this;
}
void db_testlua_luadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_testlua_luadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_testlua_luadata& db_testlua_luadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_testlua_luadata_db_2eproto.base);
  return *internal_default_instance();
}


void db_testlua_luadata::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_testlua.luadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mval_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_testlua_luadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.db_testlua.luadata.mkey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mval();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.db_testlua.luadata.mval"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_testlua_luadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_testlua.luadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mkey = 1;
  if (_internal_has_mkey()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mkey().data(), static_cast<int>(this->_internal_mkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_testlua.luadata.mkey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mkey(), target);
  }

  // string mval = 2;
  if (_internal_has_mval()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mval().data(), static_cast<int>(this->_internal_mval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_testlua.luadata.mval");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_testlua.luadata)
  return target;
}

size_t db_testlua_luadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_testlua.luadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string mkey = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mkey());
    }

    // string mval = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mval());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_testlua_luadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_testlua.luadata)
  GOOGLE_DCHECK_NE(&from, this);
  const db_testlua_luadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_testlua_luadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_testlua.luadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_testlua.luadata)
    MergeFrom(*source);
  }
}

void db_testlua_luadata::MergeFrom(const db_testlua_luadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_testlua.luadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mkey(from._internal_mkey());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mval(from._internal_mval());
    }
  }
}

void db_testlua_luadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_testlua.luadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_testlua_luadata::CopyFrom(const db_testlua_luadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_testlua.luadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_testlua_luadata::IsInitialized() const {
  return true;
}

void db_testlua_luadata::InternalSwap(db_testlua_luadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mkey_.Swap(&other->mkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mval_.Swap(&other->mval_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata db_testlua_luadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

db_testlua_MdatasEntry_DoNotUse::db_testlua_MdatasEntry_DoNotUse() {}
db_testlua_MdatasEntry_DoNotUse::db_testlua_MdatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_testlua_MdatasEntry_DoNotUse::MergeFrom(const db_testlua_MdatasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_testlua_MdatasEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_testlua_MdatasEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void db_testlua::InitAsDefaultInstance() {
}
class db_testlua::_Internal {
 public:
  using HasBits = decltype(std::declval<db_testlua>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_testlua::db_testlua(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mvalue_(arena),
  mdatas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_testlua)
}
db_testlua::db_testlua(const db_testlua& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mvalue_(from.mvalue_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mdatas_.MergeFrom(from.mdatas_);
  mid_ = from.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_testlua)
}

void db_testlua::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_testlua_db_2eproto.base);
  mid_ = PROTOBUF_LONGLONG(0);
}

db_testlua::~db_testlua() {
  // @@protoc_insertion_point(destructor:pbdb.db_testlua)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_testlua::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_testlua::ArenaDtor(void* object) {
  db_testlua* _this = reinterpret_cast< db_testlua* >(object);
  (void)_this;
}
void db_testlua::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_testlua::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_testlua& db_testlua::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_testlua_db_2eproto.base);
  return *internal_default_instance();
}


void db_testlua::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_testlua)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mvalue_.Clear();
  mdatas_.Clear();
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_testlua::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 mvalue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_mvalue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_mvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .pbdb.db_testlua.luadata> mdatas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mdatas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_testlua::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_testlua)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // repeated int64 mvalue = 2;
  {
    int byte_size = _mvalue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_mvalue(), byte_size, target);
    }
  }

  // map<int32, .pbdb.db_testlua.luadata> mdatas = 3;
  if (!this->_internal_mdatas().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mdatas().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mdatas().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata >::const_iterator
          it = this->_internal_mdatas().begin();
          it != this->_internal_mdatas().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_testlua_MdatasEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata >::const_iterator
          it = this->_internal_mdatas().begin();
          it != this->_internal_mdatas().end(); ++it) {
        target = db_testlua_MdatasEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_testlua)
  return target;
}

size_t db_testlua::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_testlua)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 mvalue = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->mvalue_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mvalue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int32, .pbdb.db_testlua.luadata> mdatas = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mdatas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_testlua_luadata >::const_iterator
      it = this->_internal_mdatas().begin();
      it != this->_internal_mdatas().end(); ++it) {
    total_size += db_testlua_MdatasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 mid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_testlua::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_testlua)
  GOOGLE_DCHECK_NE(&from, this);
  const db_testlua* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_testlua>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_testlua)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_testlua)
    MergeFrom(*source);
  }
}

void db_testlua::MergeFrom(const db_testlua& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_testlua)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mvalue_.MergeFrom(from.mvalue_);
  mdatas_.MergeFrom(from.mdatas_);
  if (from._internal_has_mid()) {
    _internal_set_mid(from._internal_mid());
  }
}

void db_testlua::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_testlua)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_testlua::CopyFrom(const db_testlua& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_testlua)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_testlua::IsInitialized() const {
  return true;
}

void db_testlua::InternalSwap(db_testlua* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mvalue_.InternalSwap(&other->mvalue_);
  mdatas_.Swap(&other->mdatas_);
  swap(mid_, other->mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_testlua::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pbdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbdb::db_account* Arena::CreateMaybeMessage< ::pbdb::db_account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_account >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::brief_activityvalues* Arena::CreateMaybeMessage< ::pbdb::brief_activityvalues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::brief_activityvalues >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::brief_base* Arena::CreateMaybeMessage< ::pbdb::brief_base >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::brief_base >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_brief* Arena::CreateMaybeMessage< ::pbdb::db_brief >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_brief >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_role_recharge* Arena::CreateMaybeMessage< ::pbdb::db_role_recharge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_role_recharge >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_role* Arena::CreateMaybeMessage< ::pbdb::db_role >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_role >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::item* Arena::CreateMaybeMessage< ::pbdb::item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::item >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_bag_MitemsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_bag_MitemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_bag_MitemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_bag* Arena::CreateMaybeMessage< ::pbdb::db_bag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_bag >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_keyvalue* Arena::CreateMaybeMessage< ::pbdb::db_keyvalue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_keyvalue >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_rolekeyvalue* Arena::CreateMaybeMessage< ::pbdb::db_rolekeyvalue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_rolekeyvalue >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::mailitem* Arena::CreateMaybeMessage< ::pbdb::mailitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::mailitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::mail* Arena::CreateMaybeMessage< ::pbdb::mail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::mail >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_mail_MmailEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_mail_MmailEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_mail_MmailEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_mail* Arena::CreateMaybeMessage< ::pbdb::db_mail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_mail >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_notice* Arena::CreateMaybeMessage< ::pbdb::db_notice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_notice >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::rankitem* Arena::CreateMaybeMessage< ::pbdb::rankitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::rankitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_ranklist_MitemsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_ranklist_MitemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_ranklist_MitemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_ranklist* Arena::CreateMaybeMessage< ::pbdb::db_ranklist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_ranklist >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_activitytimes* Arena::CreateMaybeMessage< ::pbdb::db_activitytimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_activitytimes >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::activity_task_MopenEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::activity_task_MopenEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::activity_task_MopenEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::activity_task_McloseEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::activity_task_McloseEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::activity_task_McloseEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::activity_task* Arena::CreateMaybeMessage< ::pbdb::activity_task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::activity_task >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::activity_drawcompliance* Arena::CreateMaybeMessage< ::pbdb::activity_drawcompliance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::activity_drawcompliance >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_activity_MtaskEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_activity_MtaskEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_activity_MtaskEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_activity* Arena::CreateMaybeMessage< ::pbdb::db_activity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_activity >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task_data_schedule* Arena::CreateMaybeMessage< ::pbdb::db_task_data_schedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task_data_schedule >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task_data* Arena::CreateMaybeMessage< ::pbdb::db_task_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task_data >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task_complete* Arena::CreateMaybeMessage< ::pbdb::db_task_complete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task_complete >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task_MrundatasEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_task_MrundatasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task_MrundatasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task_McompleteddatasEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_task_McompleteddatasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task_McompleteddatasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task* Arena::CreateMaybeMessage< ::pbdb::db_task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_familyer* Arena::CreateMaybeMessage< ::pbdb::db_familyer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_familyer >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_family* Arena::CreateMaybeMessage< ::pbdb::db_family >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_family >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_friends* Arena::CreateMaybeMessage< ::pbdb::db_friends >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_friends >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::dbcross_test* Arena::CreateMaybeMessage< ::pbdb::dbcross_test >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::dbcross_test >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_testlua_luadata* Arena::CreateMaybeMessage< ::pbdb::db_testlua_luadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_testlua_luadata >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_testlua_MdatasEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_testlua_MdatasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_testlua_MdatasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_testlua* Arena::CreateMaybeMessage< ::pbdb::db_testlua >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_testlua >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
