// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#include "db.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pbdb {
PROTOBUF_CONSTEXPR db_account::db_account(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.maccount_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mpassworld_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mid_)*/int64_t{0}
  , /*decltype(_impl_.mroleid_)*/int64_t{0}
  , /*decltype(_impl_.marea_)*/0} {}
struct db_accountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_accountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_accountDefaultTypeInternal() {}
  union {
    db_account _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_accountDefaultTypeInternal _db_account_default_instance_;
PROTOBUF_CONSTEXPR brief_activityvalues_MactivityRolelvEntry_DoNotUse::brief_activityvalues_MactivityRolelvEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct brief_activityvalues_MactivityRolelvEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR brief_activityvalues_MactivityRolelvEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~brief_activityvalues_MactivityRolelvEntry_DoNotUseDefaultTypeInternal() {}
  union {
    brief_activityvalues_MactivityRolelvEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 brief_activityvalues_MactivityRolelvEntry_DoNotUseDefaultTypeInternal _brief_activityvalues_MactivityRolelvEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR brief_activityvalues_MactivityRolegoldEntry_DoNotUse::brief_activityvalues_MactivityRolegoldEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct brief_activityvalues_MactivityRolegoldEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR brief_activityvalues_MactivityRolegoldEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~brief_activityvalues_MactivityRolegoldEntry_DoNotUseDefaultTypeInternal() {}
  union {
    brief_activityvalues_MactivityRolegoldEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 brief_activityvalues_MactivityRolegoldEntry_DoNotUseDefaultTypeInternal _brief_activityvalues_MactivityRolegoldEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR brief_activityvalues::brief_activityvalues(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mactivity_rolelv_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mactivity_rolegold_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct brief_activityvaluesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR brief_activityvaluesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~brief_activityvaluesDefaultTypeInternal() {}
  union {
    brief_activityvalues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 brief_activityvaluesDefaultTypeInternal _brief_activityvalues_default_instance_;
PROTOBUF_CONSTEXPR db_brief::db_brief(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mactivityvalues_)*/nullptr
  , /*decltype(_impl_.mid_)*/int64_t{0}
  , /*decltype(_impl_.mlv_)*/0
  , /*decltype(_impl_.mmoneygold_)*/0
  , /*decltype(_impl_.mmoneysilver_)*/0
  , /*decltype(_impl_.mvip_)*/0
  , /*decltype(_impl_.mnotalkutc_)*/0
  , /*decltype(_impl_.mcreateutc_)*/0} {}
struct db_briefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_briefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_briefDefaultTypeInternal() {}
  union {
    db_brief _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_briefDefaultTypeInternal _db_brief_default_instance_;
PROTOBUF_CONSTEXPR db_role_recharge::db_role_recharge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mrechargeid_)*/0
  , /*decltype(_impl_.mutc_)*/0} {}
struct db_role_rechargeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_role_rechargeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_role_rechargeDefaultTypeInternal() {}
  union {
    db_role_recharge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_role_rechargeDefaultTypeInternal _db_role_recharge_default_instance_;
PROTOBUF_CONSTEXPR db_role::db_role(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mrecharge_)*/{}
  , /*decltype(_impl_.mid_)*/int64_t{0}} {}
struct db_roleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_roleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_roleDefaultTypeInternal() {}
  union {
    db_role _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_roleDefaultTypeInternal _db_role_default_instance_;
PROTOBUF_CONSTEXPR item::item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mid_)*/0
  , /*decltype(_impl_.mtid_)*/0
  , /*decltype(_impl_.mcount_)*/0
  , /*decltype(_impl_.mlv_)*/0
  , /*decltype(_impl_.mstar_)*/0} {}
struct itemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR itemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~itemDefaultTypeInternal() {}
  union {
    item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 itemDefaultTypeInternal _item_default_instance_;
PROTOBUF_CONSTEXPR db_bag_MitemsEntry_DoNotUse::db_bag_MitemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct db_bag_MitemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_bag_MitemsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_bag_MitemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    db_bag_MitemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_bag_MitemsEntry_DoNotUseDefaultTypeInternal _db_bag_MitemsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR db_bag::db_bag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mitems_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mid_)*/int64_t{0}
  , /*decltype(_impl_.mmaxid_)*/0} {}
struct db_bagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_bagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_bagDefaultTypeInternal() {}
  union {
    db_bag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_bagDefaultTypeInternal _db_bag_default_instance_;
PROTOBUF_CONSTEXPR db_keyvalue::db_keyvalue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mvalue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mid_)*/int64_t{0}} {}
struct db_keyvalueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_keyvalueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_keyvalueDefaultTypeInternal() {}
  union {
    db_keyvalue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_keyvalueDefaultTypeInternal _db_keyvalue_default_instance_;
PROTOBUF_CONSTEXPR db_rolekeyvalue_MdataEntry_DoNotUse::db_rolekeyvalue_MdataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct db_rolekeyvalue_MdataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_rolekeyvalue_MdataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_rolekeyvalue_MdataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    db_rolekeyvalue_MdataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_rolekeyvalue_MdataEntry_DoNotUseDefaultTypeInternal _db_rolekeyvalue_MdataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR db_rolekeyvalue::db_rolekeyvalue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mdata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mid_)*/int64_t{0}} {}
struct db_rolekeyvalueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_rolekeyvalueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_rolekeyvalueDefaultTypeInternal() {}
  union {
    db_rolekeyvalue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_rolekeyvalueDefaultTypeInternal _db_rolekeyvalue_default_instance_;
PROTOBUF_CONSTEXPR mailitem::mailitem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mitemtid_)*/0
  , /*decltype(_impl_.mcount_)*/0} {}
struct mailitemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mailitemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mailitemDefaultTypeInternal() {}
  union {
    mailitem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mailitemDefaultTypeInternal _mailitem_default_instance_;
PROTOBUF_CONSTEXPR mail::mail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mitems_)*/{}
  , /*decltype(_impl_.mprams_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mcontent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mid_)*/0
  , /*decltype(_impl_.mcreateutc_)*/0
  , /*decltype(_impl_.mtid_)*/0
  , /*decltype(_impl_.mread_)*/false
  , /*decltype(_impl_.mdraw_)*/false} {}
struct mailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mailDefaultTypeInternal() {}
  union {
    mail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mailDefaultTypeInternal _mail_default_instance_;
PROTOBUF_CONSTEXPR db_mail_MmailEntry_DoNotUse::db_mail_MmailEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct db_mail_MmailEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_mail_MmailEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_mail_MmailEntry_DoNotUseDefaultTypeInternal() {}
  union {
    db_mail_MmailEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_mail_MmailEntry_DoNotUseDefaultTypeInternal _db_mail_MmailEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR db_mail::db_mail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mmail_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mid_)*/int64_t{0}} {}
struct db_mailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_mailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_mailDefaultTypeInternal() {}
  union {
    db_mail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_mailDefaultTypeInternal _db_mail_default_instance_;
PROTOBUF_CONSTEXPR db_notice::db_notice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mnotice_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mid_)*/int64_t{0}
  , /*decltype(_impl_.mstarttime_)*/0
  , /*decltype(_impl_.mfinishtime_)*/0} {}
struct db_noticeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_noticeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_noticeDefaultTypeInternal() {}
  union {
    db_notice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_noticeDefaultTypeInternal _db_notice_default_instance_;
PROTOBUF_CONSTEXPR rankitem::rankitem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mvalue_)*/int64_t{0}
  , /*decltype(_impl_.mtime_)*/0} {}
struct rankitemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR rankitemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~rankitemDefaultTypeInternal() {}
  union {
    rankitem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 rankitemDefaultTypeInternal _rankitem_default_instance_;
PROTOBUF_CONSTEXPR db_ranklist_MitemsEntry_DoNotUse::db_ranklist_MitemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct db_ranklist_MitemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_ranklist_MitemsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_ranklist_MitemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    db_ranklist_MitemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_ranklist_MitemsEntry_DoNotUseDefaultTypeInternal _db_ranklist_MitemsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR db_ranklist::db_ranklist(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mitems_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mid_)*/int64_t{0}} {}
struct db_ranklistDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_ranklistDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_ranklistDefaultTypeInternal() {}
  union {
    db_ranklist _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_ranklistDefaultTypeInternal _db_ranklist_default_instance_;
PROTOBUF_CONSTEXPR db_activitytimes::db_activitytimes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mid_)*/int64_t{0}
  , /*decltype(_impl_.mbeg_)*/0
  , /*decltype(_impl_.mduration_)*/0
  , /*decltype(_impl_.mstart_)*/false} {}
struct db_activitytimesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_activitytimesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_activitytimesDefaultTypeInternal() {}
  union {
    db_activitytimes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_activitytimesDefaultTypeInternal _db_activitytimes_default_instance_;
PROTOBUF_CONSTEXPR activity_task_MopenEntry_DoNotUse::activity_task_MopenEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct activity_task_MopenEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR activity_task_MopenEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~activity_task_MopenEntry_DoNotUseDefaultTypeInternal() {}
  union {
    activity_task_MopenEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 activity_task_MopenEntry_DoNotUseDefaultTypeInternal _activity_task_MopenEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR activity_task_McloseEntry_DoNotUse::activity_task_McloseEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct activity_task_McloseEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR activity_task_McloseEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~activity_task_McloseEntry_DoNotUseDefaultTypeInternal() {}
  union {
    activity_task_McloseEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 activity_task_McloseEntry_DoNotUseDefaultTypeInternal _activity_task_McloseEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR activity_task::activity_task(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mopen_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mclose_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct activity_taskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR activity_taskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~activity_taskDefaultTypeInternal() {}
  union {
    activity_task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 activity_taskDefaultTypeInternal _activity_task_default_instance_;
PROTOBUF_CONSTEXPR activity_drawcompliance_MrewardEntry_DoNotUse::activity_drawcompliance_MrewardEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct activity_drawcompliance_MrewardEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR activity_drawcompliance_MrewardEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~activity_drawcompliance_MrewardEntry_DoNotUseDefaultTypeInternal() {}
  union {
    activity_drawcompliance_MrewardEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 activity_drawcompliance_MrewardEntry_DoNotUseDefaultTypeInternal _activity_drawcompliance_MrewardEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR activity_drawcompliance::activity_drawcompliance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mreward_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mcount_)*/0} {}
struct activity_drawcomplianceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR activity_drawcomplianceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~activity_drawcomplianceDefaultTypeInternal() {}
  union {
    activity_drawcompliance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 activity_drawcomplianceDefaultTypeInternal _activity_drawcompliance_default_instance_;
PROTOBUF_CONSTEXPR db_activity_MtaskEntry_DoNotUse::db_activity_MtaskEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct db_activity_MtaskEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_activity_MtaskEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_activity_MtaskEntry_DoNotUseDefaultTypeInternal() {}
  union {
    db_activity_MtaskEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_activity_MtaskEntry_DoNotUseDefaultTypeInternal _db_activity_MtaskEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR db_activity_MdrawcomplianceEntry_DoNotUse::db_activity_MdrawcomplianceEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct db_activity_MdrawcomplianceEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_activity_MdrawcomplianceEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_activity_MdrawcomplianceEntry_DoNotUseDefaultTypeInternal() {}
  union {
    db_activity_MdrawcomplianceEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_activity_MdrawcomplianceEntry_DoNotUseDefaultTypeInternal _db_activity_MdrawcomplianceEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR db_activity::db_activity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mtask_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mdrawcompliance_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mid_)*/int64_t{0}} {}
struct db_activityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_activityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_activityDefaultTypeInternal() {}
  union {
    db_activity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_activityDefaultTypeInternal _db_activity_default_instance_;
PROTOBUF_CONSTEXPR db_task_data_schedule::db_task_data_schedule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mtype_)*/0
  , /*decltype(_impl_.mvalue_)*/0
  , /*decltype(_impl_.msumint_)*/0} {}
struct db_task_data_scheduleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_task_data_scheduleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_task_data_scheduleDefaultTypeInternal() {}
  union {
    db_task_data_schedule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_task_data_scheduleDefaultTypeInternal _db_task_data_schedule_default_instance_;
PROTOBUF_CONSTEXPR db_task_data::db_task_data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mschedules_)*/{}
  , /*decltype(_impl_.mtaskid_)*/0
  , /*decltype(_impl_.mreceiveutc_)*/0
  , /*decltype(_impl_.mfinshutc_)*/0
  , /*decltype(_impl_.mreceive_)*/false} {}
struct db_task_dataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_task_dataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_task_dataDefaultTypeInternal() {}
  union {
    db_task_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_task_dataDefaultTypeInternal _db_task_data_default_instance_;
PROTOBUF_CONSTEXPR db_task_complete::db_task_complete(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mhistory_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct db_task_completeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_task_completeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_task_completeDefaultTypeInternal() {}
  union {
    db_task_complete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_task_completeDefaultTypeInternal _db_task_complete_default_instance_;
PROTOBUF_CONSTEXPR db_task_MrundatasEntry_DoNotUse::db_task_MrundatasEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct db_task_MrundatasEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_task_MrundatasEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_task_MrundatasEntry_DoNotUseDefaultTypeInternal() {}
  union {
    db_task_MrundatasEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_task_MrundatasEntry_DoNotUseDefaultTypeInternal _db_task_MrundatasEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR db_task_McompleteddatasEntry_DoNotUse::db_task_McompleteddatasEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct db_task_McompleteddatasEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_task_McompleteddatasEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_task_McompleteddatasEntry_DoNotUseDefaultTypeInternal() {}
  union {
    db_task_McompleteddatasEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_task_McompleteddatasEntry_DoNotUseDefaultTypeInternal _db_task_McompleteddatasEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR db_task::db_task(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mrundatas_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mcompleteddatas_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mid_)*/int64_t{0}} {}
struct db_taskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_taskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_taskDefaultTypeInternal() {}
  union {
    db_task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_taskDefaultTypeInternal _db_task_default_instance_;
PROTOBUF_CONSTEXPR db_familyer::db_familyer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mid_)*/int64_t{0}
  , /*decltype(_impl_.mjoinutc_)*/0
  , /*decltype(_impl_.mlastsignutc_)*/0
  , /*decltype(_impl_.mlastleaveutc_)*/0
  , /*decltype(_impl_.mposition_)*/0} {}
struct db_familyerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_familyerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_familyerDefaultTypeInternal() {}
  union {
    db_familyer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_familyerDefaultTypeInternal _db_familyer_default_instance_;
PROTOBUF_CONSTEXPR db_family::db_family(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mmember_)*/{}
  , /*decltype(_impl_._mmember_cached_byte_size_)*/{0}
  , /*decltype(_impl_.mapplylist_)*/{}
  , /*decltype(_impl_._mapplylist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.mname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mid_)*/int64_t{0}
  , /*decltype(_impl_.mcreateutc_)*/0
  , /*decltype(_impl_.mlv_)*/0
  , /*decltype(_impl_.mleader_)*/int64_t{0}
  , /*decltype(_impl_.mexp_)*/0} {}
struct db_familyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_familyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_familyDefaultTypeInternal() {}
  union {
    db_family _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_familyDefaultTypeInternal _db_family_default_instance_;
PROTOBUF_CONSTEXPR db_friends::db_friends(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mfriends_)*/{}
  , /*decltype(_impl_._mfriends_cached_byte_size_)*/{0}
  , /*decltype(_impl_.mapplyfriends_)*/{}
  , /*decltype(_impl_._mapplyfriends_cached_byte_size_)*/{0}
  , /*decltype(_impl_.mid_)*/int64_t{0}} {}
struct db_friendsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_friendsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_friendsDefaultTypeInternal() {}
  union {
    db_friends _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_friendsDefaultTypeInternal _db_friends_default_instance_;
PROTOBUF_CONSTEXPR dbcross_test::dbcross_test(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mvalue_)*/{}
  , /*decltype(_impl_._mvalue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.mname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct dbcross_testDefaultTypeInternal {
  PROTOBUF_CONSTEXPR dbcross_testDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~dbcross_testDefaultTypeInternal() {}
  union {
    dbcross_test _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 dbcross_testDefaultTypeInternal _dbcross_test_default_instance_;
PROTOBUF_CONSTEXPR db_testlua_luadata::db_testlua_luadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mval_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct db_testlua_luadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_testlua_luadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_testlua_luadataDefaultTypeInternal() {}
  union {
    db_testlua_luadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_testlua_luadataDefaultTypeInternal _db_testlua_luadata_default_instance_;
PROTOBUF_CONSTEXPR db_testlua_MdatasEntry_DoNotUse::db_testlua_MdatasEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct db_testlua_MdatasEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_testlua_MdatasEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_testlua_MdatasEntry_DoNotUseDefaultTypeInternal() {}
  union {
    db_testlua_MdatasEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_testlua_MdatasEntry_DoNotUseDefaultTypeInternal _db_testlua_MdatasEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR db_testlua::db_testlua(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mvalue_)*/{}
  , /*decltype(_impl_._mvalue_cached_byte_size_)*/{0}
  , /*decltype(_impl_.mdatas_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mid_)*/int64_t{0}} {}
struct db_testluaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR db_testluaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~db_testluaDefaultTypeInternal() {}
  union {
    db_testlua _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 db_testluaDefaultTypeInternal _db_testlua_default_instance_;
}  // namespace pbdb
static ::_pb::Metadata file_level_metadata_db_2eproto[43];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_db_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_db_2eproto = nullptr;

const uint32_t TableStruct_db_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, _impl_.mroleid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, _impl_.maccount_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, _impl_.mpassworld_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, _impl_.marea_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues, _impl_.mactivity_rolelv_),
  PROTOBUF_FIELD_OFFSET(::pbdb::brief_activityvalues, _impl_.mactivity_rolegold_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _impl_.mname_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _impl_.mlv_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _impl_.mmoneygold_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _impl_.mmoneysilver_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _impl_.mvip_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _impl_.mnotalkutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _impl_.mcreateutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _impl_.mactivityvalues_),
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role_recharge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role_recharge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role_recharge, _impl_.mrechargeid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role_recharge, _impl_.mutc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role, _impl_.mrecharge_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::item, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, _impl_.mtid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, _impl_.mcount_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, _impl_.mlv_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, _impl_.mstar_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag_MitemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag_MitemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag_MitemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag_MitemsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, _impl_.mitems_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, _impl_.mmaxid_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_keyvalue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_keyvalue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_keyvalue, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_keyvalue, _impl_.mvalue_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue, _impl_.mdata_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::mailitem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mailitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::mailitem, _impl_.mitemtid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mailitem, _impl_.mcount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, _impl_.mcreateutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, _impl_.mtid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, _impl_.mprams_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, _impl_.mcontent_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, _impl_.mitems_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, _impl_.mread_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, _impl_.mdraw_),
  2,
  3,
  4,
  0,
  1,
  ~0u,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail_MmailEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail_MmailEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail_MmailEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail_MmailEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail, _impl_.mmail_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, _impl_.mnotice_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, _impl_.mstarttime_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, _impl_.mfinishtime_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbdb::rankitem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::rankitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::rankitem, _impl_.mvalue_),
  PROTOBUF_FIELD_OFFSET(::pbdb::rankitem, _impl_.mtime_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist_MitemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist_MitemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist_MitemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist_MitemsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist, _impl_.mitems_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activitytimes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activitytimes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activitytimes, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activitytimes, _impl_.mbeg_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activitytimes, _impl_.mduration_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activitytimes, _impl_.mstart_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_MopenEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_MopenEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_MopenEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_MopenEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_McloseEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_McloseEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_McloseEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task_McloseEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task, _impl_.mopen_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_task, _impl_.mclose_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance, _impl_.mcount_),
  PROTOBUF_FIELD_OFFSET(::pbdb::activity_drawcompliance, _impl_.mreward_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MtaskEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MtaskEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MtaskEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MtaskEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, _impl_.mtask_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, _impl_.mdrawcompliance_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, _impl_.mtype_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, _impl_.mvalue_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, _impl_.msumint_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, _impl_.mtaskid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, _impl_.mreceiveutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, _impl_.mfinshutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, _impl_.mschedules_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, _impl_.mreceive_),
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_complete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_complete, _impl_.mhistory_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MrundatasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MrundatasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MrundatasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MrundatasEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_McompleteddatasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_McompleteddatasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_McompleteddatasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_McompleteddatasEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, _impl_.mrundatas_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, _impl_.mcompleteddatas_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, _impl_.mjoinutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, _impl_.mlastsignutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, _impl_.mlastleaveutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, _impl_.mposition_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, _impl_.mcreateutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, _impl_.mname_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, _impl_.mleader_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, _impl_.mlv_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, _impl_.mexp_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, _impl_.mmember_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, _impl_.mapplylist_),
  1,
  2,
  0,
  4,
  3,
  5,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, _impl_.mfriends_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, _impl_.mapplyfriends_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::dbcross_test, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::dbcross_test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::dbcross_test, _impl_.mname_),
  PROTOBUF_FIELD_OFFSET(::pbdb::dbcross_test, _impl_.mvalue_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_luadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_luadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_luadata, _impl_.mkey_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_luadata, _impl_.mval_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_MdatasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_MdatasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_MdatasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua_MdatasEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua, _impl_.mvalue_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_testlua, _impl_.mdatas_),
  0,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::pbdb::db_account)},
  { 16, 24, -1, sizeof(::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse)},
  { 26, 34, -1, sizeof(::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse)},
  { 36, -1, -1, sizeof(::pbdb::brief_activityvalues)},
  { 44, 59, -1, sizeof(::pbdb::db_brief)},
  { 68, 76, -1, sizeof(::pbdb::db_role_recharge)},
  { 78, 86, -1, sizeof(::pbdb::db_role)},
  { 88, 99, -1, sizeof(::pbdb::item)},
  { 104, 112, -1, sizeof(::pbdb::db_bag_MitemsEntry_DoNotUse)},
  { 114, 123, -1, sizeof(::pbdb::db_bag)},
  { 126, 134, -1, sizeof(::pbdb::db_keyvalue)},
  { 136, 144, -1, sizeof(::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse)},
  { 146, 154, -1, sizeof(::pbdb::db_rolekeyvalue)},
  { 156, 164, -1, sizeof(::pbdb::mailitem)},
  { 166, 180, -1, sizeof(::pbdb::mail)},
  { 188, 196, -1, sizeof(::pbdb::db_mail_MmailEntry_DoNotUse)},
  { 198, 206, -1, sizeof(::pbdb::db_mail)},
  { 208, 218, -1, sizeof(::pbdb::db_notice)},
  { 222, 230, -1, sizeof(::pbdb::rankitem)},
  { 232, 240, -1, sizeof(::pbdb::db_ranklist_MitemsEntry_DoNotUse)},
  { 242, 250, -1, sizeof(::pbdb::db_ranklist)},
  { 252, 262, -1, sizeof(::pbdb::db_activitytimes)},
  { 266, 274, -1, sizeof(::pbdb::activity_task_MopenEntry_DoNotUse)},
  { 276, 284, -1, sizeof(::pbdb::activity_task_McloseEntry_DoNotUse)},
  { 286, -1, -1, sizeof(::pbdb::activity_task)},
  { 294, 302, -1, sizeof(::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse)},
  { 304, 312, -1, sizeof(::pbdb::activity_drawcompliance)},
  { 314, 322, -1, sizeof(::pbdb::db_activity_MtaskEntry_DoNotUse)},
  { 324, 332, -1, sizeof(::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse)},
  { 334, 343, -1, sizeof(::pbdb::db_activity)},
  { 346, 355, -1, sizeof(::pbdb::db_task_data_schedule)},
  { 358, 369, -1, sizeof(::pbdb::db_task_data)},
  { 374, -1, -1, sizeof(::pbdb::db_task_complete)},
  { 381, 389, -1, sizeof(::pbdb::db_task_MrundatasEntry_DoNotUse)},
  { 391, 399, -1, sizeof(::pbdb::db_task_McompleteddatasEntry_DoNotUse)},
  { 401, 410, -1, sizeof(::pbdb::db_task)},
  { 413, 424, -1, sizeof(::pbdb::db_familyer)},
  { 429, 443, -1, sizeof(::pbdb::db_family)},
  { 451, 460, -1, sizeof(::pbdb::db_friends)},
  { 463, 471, -1, sizeof(::pbdb::dbcross_test)},
  { 473, 481, -1, sizeof(::pbdb::db_testlua_luadata)},
  { 483, 491, -1, sizeof(::pbdb::db_testlua_MdatasEntry_DoNotUse)},
  { 493, 502, -1, sizeof(::pbdb::db_testlua)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pbdb::_db_account_default_instance_._instance,
  &::pbdb::_brief_activityvalues_MactivityRolelvEntry_DoNotUse_default_instance_._instance,
  &::pbdb::_brief_activityvalues_MactivityRolegoldEntry_DoNotUse_default_instance_._instance,
  &::pbdb::_brief_activityvalues_default_instance_._instance,
  &::pbdb::_db_brief_default_instance_._instance,
  &::pbdb::_db_role_recharge_default_instance_._instance,
  &::pbdb::_db_role_default_instance_._instance,
  &::pbdb::_item_default_instance_._instance,
  &::pbdb::_db_bag_MitemsEntry_DoNotUse_default_instance_._instance,
  &::pbdb::_db_bag_default_instance_._instance,
  &::pbdb::_db_keyvalue_default_instance_._instance,
  &::pbdb::_db_rolekeyvalue_MdataEntry_DoNotUse_default_instance_._instance,
  &::pbdb::_db_rolekeyvalue_default_instance_._instance,
  &::pbdb::_mailitem_default_instance_._instance,
  &::pbdb::_mail_default_instance_._instance,
  &::pbdb::_db_mail_MmailEntry_DoNotUse_default_instance_._instance,
  &::pbdb::_db_mail_default_instance_._instance,
  &::pbdb::_db_notice_default_instance_._instance,
  &::pbdb::_rankitem_default_instance_._instance,
  &::pbdb::_db_ranklist_MitemsEntry_DoNotUse_default_instance_._instance,
  &::pbdb::_db_ranklist_default_instance_._instance,
  &::pbdb::_db_activitytimes_default_instance_._instance,
  &::pbdb::_activity_task_MopenEntry_DoNotUse_default_instance_._instance,
  &::pbdb::_activity_task_McloseEntry_DoNotUse_default_instance_._instance,
  &::pbdb::_activity_task_default_instance_._instance,
  &::pbdb::_activity_drawcompliance_MrewardEntry_DoNotUse_default_instance_._instance,
  &::pbdb::_activity_drawcompliance_default_instance_._instance,
  &::pbdb::_db_activity_MtaskEntry_DoNotUse_default_instance_._instance,
  &::pbdb::_db_activity_MdrawcomplianceEntry_DoNotUse_default_instance_._instance,
  &::pbdb::_db_activity_default_instance_._instance,
  &::pbdb::_db_task_data_schedule_default_instance_._instance,
  &::pbdb::_db_task_data_default_instance_._instance,
  &::pbdb::_db_task_complete_default_instance_._instance,
  &::pbdb::_db_task_MrundatasEntry_DoNotUse_default_instance_._instance,
  &::pbdb::_db_task_McompleteddatasEntry_DoNotUse_default_instance_._instance,
  &::pbdb::_db_task_default_instance_._instance,
  &::pbdb::_db_familyer_default_instance_._instance,
  &::pbdb::_db_family_default_instance_._instance,
  &::pbdb::_db_friends_default_instance_._instance,
  &::pbdb::_dbcross_test_default_instance_._instance,
  &::pbdb::_db_testlua_luadata_default_instance_._instance,
  &::pbdb::_db_testlua_MdatasEntry_DoNotUse_default_instance_._instance,
  &::pbdb::_db_testlua_default_instance_._instance,
};

const char descriptor_table_protodef_db_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010db.proto\022\004pbdb\"\262\001\n\ndb_account\022\020\n\003mid\030\001"
  " \001(\003H\000\210\001\001\022\024\n\007mroleid\030\002 \001(\003H\001\210\001\001\022\025\n\010macco"
  "unt\030\003 \001(\tH\002\210\001\001\022\027\n\nmpassworld\030\004 \001(\tH\003\210\001\001\022"
  "\022\n\005marea\030\005 \001(\005H\004\210\001\001B\006\n\004_midB\n\n\010_mroleidB"
  "\013\n\t_maccountB\r\n\013_mpassworldB\010\n\006_marea\"\242\002"
  "\n\024brief_activityvalues\022I\n\020mactivity_role"
  "lv\030\001 \003(\0132/.pbdb.brief_activityvalues.Mac"
  "tivityRolelvEntry\022M\n\022mactivity_rolegold\030"
  "\002 \003(\01321.pbdb.brief_activityvalues.Mactiv"
  "ityRolegoldEntry\0326\n\024MactivityRolelvEntry"
  "\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\0328\n\026Mact"
  "ivityRolegoldEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value"
  "\030\002 \001(\005:\0028\001\"\352\002\n\010db_brief\022\020\n\003mid\030\001 \001(\003H\000\210\001"
  "\001\022\022\n\005mname\030\002 \001(\tH\001\210\001\001\022\020\n\003mlv\030\003 \001(\005H\002\210\001\001\022"
  "\027\n\nmmoneygold\030\004 \001(\005H\003\210\001\001\022\031\n\014mmoneysilver"
  "\030\005 \001(\005H\004\210\001\001\022\021\n\004mvip\030\006 \001(\005H\005\210\001\001\022\027\n\nmnotal"
  "kutc\030\007 \001(\005H\006\210\001\001\022\027\n\nmcreateutc\030\010 \001(\005H\007\210\001\001"
  "\0228\n\017mactivityvalues\030\t \001(\0132\032.pbdb.brief_a"
  "ctivityvaluesH\010\210\001\001B\006\n\004_midB\010\n\006_mnameB\006\n\004"
  "_mlvB\r\n\013_mmoneygoldB\017\n\r_mmoneysilverB\007\n\005"
  "_mvipB\r\n\013_mnotalkutcB\r\n\013_mcreateutcB\022\n\020_"
  "mactivityvalues\"\240\001\n\007db_role\022\020\n\003mid\030\001 \001(\003"
  "H\000\210\001\001\022)\n\tmrecharge\030\002 \003(\0132\026.pbdb.db_role."
  "recharge\032P\n\010recharge\022\030\n\013mrechargeid\030\001 \001("
  "\005H\000\210\001\001\022\021\n\004mutc\030\002 \001(\005H\001\210\001\001B\016\n\014_mrechargei"
  "dB\007\n\005_mutcB\006\n\004_mid\"\224\001\n\004item\022\020\n\003mid\030\001 \001(\005"
  "H\000\210\001\001\022\021\n\004mtid\030\002 \001(\005H\001\210\001\001\022\023\n\006mcount\030\003 \001(\005"
  "H\002\210\001\001\022\020\n\003mlv\030\004 \001(\005H\003\210\001\001\022\022\n\005mstar\030\005 \001(\005H\004"
  "\210\001\001B\006\n\004_midB\007\n\005_mtidB\t\n\007_mcountB\006\n\004_mlvB"
  "\010\n\006_mstar\"\247\001\n\006db_bag\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022("
  "\n\006mitems\030\002 \003(\0132\030.pbdb.db_bag.MitemsEntry"
  "\022\023\n\006mmaxid\030\003 \001(\005H\001\210\001\001\0329\n\013MitemsEntry\022\013\n\003"
  "key\030\001 \001(\005\022\031\n\005value\030\002 \001(\0132\n.pbdb.item:\0028\001"
  "B\006\n\004_midB\t\n\007_mmaxid\"z\n\013db_keyvalue\022\020\n\003mi"
  "d\030\001 \001(\003H\000\210\001\001\022\023\n\006mvalue\030\002 \001(\tH\001\210\001\001\"1\n\003ekv"
  "\022\010\n\004none\020\000\022\017\n\013account_ban\020\001\022\017\n\013open_serv"
  "er\020\002B\006\n\004_midB\t\n\007_mvalue\"\212\001\n\017db_rolekeyva"
  "lue\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022/\n\005mdata\030\002 \003(\0132 .p"
  "bdb.db_rolekeyvalue.MdataEntry\032,\n\nMdataE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\006\n\004"
  "_mid\"N\n\010mailitem\022\025\n\010mitemtid\030\001 \001(\005H\000\210\001\001\022"
  "\023\n\006mcount\030\002 \001(\005H\001\210\001\001B\013\n\t_mitemtidB\t\n\007_mc"
  "ount\"\204\002\n\004mail\022\020\n\003mid\030\001 \001(\005H\000\210\001\001\022\027\n\nmcrea"
  "teutc\030\002 \001(\005H\001\210\001\001\022\021\n\004mtid\030\003 \001(\005H\002\210\001\001\022\023\n\006m"
  "prams\030\004 \001(\tH\003\210\001\001\022\025\n\010mcontent\030\005 \001(\tH\004\210\001\001\022"
  "\036\n\006mitems\030\006 \003(\0132\016.pbdb.mailitem\022\022\n\005mread"
  "\030\007 \001(\010H\005\210\001\001\022\022\n\005mdraw\030\010 \001(\010H\006\210\001\001B\006\n\004_midB"
  "\r\n\013_mcreateutcB\007\n\005_mtidB\t\n\007_mpramsB\013\n\t_m"
  "contentB\010\n\006_mreadB\010\n\006_mdraw\"\206\001\n\007db_mail\022"
  "\020\n\003mid\030\001 \001(\003H\000\210\001\001\022\'\n\005mmail\030\002 \003(\0132\030.pbdb."
  "db_mail.MmailEntry\0328\n\nMmailEntry\022\013\n\003key\030"
  "\001 \001(\005\022\031\n\005value\030\002 \001(\0132\n.pbdb.mail:\0028\001B\006\n\004"
  "_mid\"\231\001\n\tdb_notice\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022\024\n\007"
  "mnotice\030\002 \001(\tH\001\210\001\001\022\027\n\nmstarttime\030\003 \001(\005H\002"
  "\210\001\001\022\030\n\013mfinishtime\030\004 \001(\005H\003\210\001\001B\006\n\004_midB\n\n"
  "\010_mnoticeB\r\n\013_mstarttimeB\016\n\014_mfinishtime"
  "\"H\n\010rankitem\022\023\n\006mvalue\030\001 \001(\003H\000\210\001\001\022\022\n\005mti"
  "me\030\002 \001(\005H\001\210\001\001B\t\n\007_mvalueB\010\n\006_mtime\"\225\001\n\013d"
  "b_ranklist\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022-\n\006mitems\030\002"
  " \003(\0132\035.pbdb.db_ranklist.MitemsEntry\032=\n\013M"
  "itemsEntry\022\013\n\003key\030\001 \001(\005\022\035\n\005value\030\002 \001(\0132\016"
  ".pbdb.rankitem:\0028\001B\006\n\004_mid\"\216\001\n\020db_activi"
  "tytimes\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022\021\n\004mbeg\030\002 \001(\005H"
  "\001\210\001\001\022\026\n\tmduration\030\003 \001(\005H\002\210\001\001\022\023\n\006mstart\030\004"
  " \001(\010H\003\210\001\001B\006\n\004_midB\007\n\005_mbegB\014\n\n_mduration"
  "B\t\n\007_mstart\"\314\001\n\ractivity_task\022-\n\005mopen\030\001"
  " \003(\0132\036.pbdb.activity_task.MopenEntry\022/\n\006"
  "mclose\030\002 \003(\0132\037.pbdb.activity_task.Mclose"
  "Entry\032,\n\nMopenEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005valu"
  "e\030\002 \001(\010:\0028\001\032-\n\013McloseEntry\022\013\n\003key\030\001 \001(\005\022"
  "\r\n\005value\030\002 \001(\010:\0028\001\"\246\001\n\027activity_drawcomp"
  "liance\022\023\n\006mcount\030\001 \001(\005H\000\210\001\001\022;\n\007mreward\030\002"
  " \003(\0132*.pbdb.activity_drawcompliance.Mrew"
  "ardEntry\032.\n\014MrewardEntry\022\013\n\003key\030\001 \001(\005\022\r\n"
  "\005value\030\002 \001(\010:\0028\001B\t\n\007_mcount\"\257\002\n\013db_activ"
  "ity\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022+\n\005mtask\030\002 \003(\0132\034.p"
  "bdb.db_activity.MtaskEntry\022\?\n\017mdrawcompl"
  "iance\030\003 \003(\0132&.pbdb.db_activity.Mdrawcomp"
  "lianceEntry\032A\n\nMtaskEntry\022\013\n\003key\030\001 \001(\003\022\""
  "\n\005value\030\002 \001(\0132\023.pbdb.activity_task:\0028\001\032U"
  "\n\024MdrawcomplianceEntry\022\013\n\003key\030\001 \001(\003\022,\n\005v"
  "alue\030\002 \001(\0132\035.pbdb.activity_drawcomplianc"
  "e:\0028\001B\006\n\004_mid\"\232\005\n\007db_task\022\020\n\003mid\030\001 \001(\003H\000"
  "\210\001\001\022/\n\tmrundatas\030\002 \003(\0132\034.pbdb.db_task.Mr"
  "undatasEntry\022;\n\017mcompleteddatas\030\003 \003(\0132\"."
  "pbdb.db_task.McompleteddatasEntry\032o\n\rdat"
  "a_schedule\022\022\n\005mtype\030\001 \001(\005H\000\210\001\001\022\023\n\006mvalue"
  "\030\002 \001(\005H\001\210\001\001\022\024\n\007msumint\030\003 \001(\005H\002\210\001\001B\010\n\006_mt"
  "ypeB\t\n\007_mvalueB\n\n\010_msumint\032\315\001\n\004data\022\024\n\007m"
  "taskid\030\001 \001(\005H\000\210\001\001\022\030\n\013mreceiveutc\030\002 \001(\005H\001"
  "\210\001\001\022\026\n\tmfinshutc\030\003 \001(\005H\002\210\001\001\022/\n\nmschedule"
  "s\030\004 \003(\0132\033.pbdb.db_task.data_schedule\022\025\n\010"
  "mreceive\030\005 \001(\010H\003\210\001\001B\n\n\010_mtaskidB\016\n\014_mrec"
  "eiveutcB\014\n\n_mfinshutcB\013\n\t_mreceive\0320\n\010co"
  "mplete\022$\n\010mhistory\030\001 \003(\0132\022.pbdb.db_task."
  "data\032D\n\016MrundatasEntry\022\013\n\003key\030\001 \001(\005\022!\n\005v"
  "alue\030\002 \001(\0132\022.pbdb.db_task.data:\0028\001\032N\n\024Mc"
  "ompleteddatasEntry\022\013\n\003key\030\001 \001(\005\022%\n\005value"
  "\030\002 \001(\0132\026.pbdb.db_task.complete:\0028\001B\006\n\004_m"
  "id\"\251\002\n\013db_familyer\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022\025\n\010"
  "mjoinutc\030\002 \001(\005H\001\210\001\001\022\031\n\014mlastsignutc\030\003 \001("
  "\005H\002\210\001\001\022\032\n\rmlastleaveutc\030\004 \001(\005H\003\210\001\001\0223\n\tmp"
  "osition\030\005 \001(\0162\033.pbdb.db_familyer.epositi"
  "onH\004\210\001\001\"\?\n\teposition\022\010\n\004none\020\000\022\n\n\006leader"
  "\020\001\022\016\n\ncounsellor\020\002\022\014\n\010ordinary\020\003B\006\n\004_mid"
  "B\013\n\t_mjoinutcB\017\n\r_mlastsignutcB\020\n\016_mlast"
  "leaveutcB\014\n\n_mposition\"\350\001\n\tdb_family\022\020\n\003"
  "mid\030\001 \001(\003H\000\210\001\001\022\027\n\nmcreateutc\030\002 \001(\005H\001\210\001\001\022"
  "\022\n\005mname\030\003 \001(\tH\002\210\001\001\022\024\n\007mleader\030\004 \001(\003H\003\210\001"
  "\001\022\020\n\003mlv\030\005 \001(\005H\004\210\001\001\022\021\n\004mexp\030\006 \001(\005H\005\210\001\001\022\017"
  "\n\007mmember\030\007 \003(\003\022\022\n\nmapplylist\030\010 \003(\003B\006\n\004_"
  "midB\r\n\013_mcreateutcB\010\n\006_mnameB\n\n\010_mleader"
  "B\006\n\004_mlvB\007\n\005_mexp\"O\n\ndb_friends\022\020\n\003mid\030\001"
  " \001(\003H\000\210\001\001\022\020\n\010mfriends\030\002 \003(\003\022\025\n\rmapplyfri"
  "ends\030\003 \003(\003B\006\n\004_mid\"<\n\014dbcross_test\022\022\n\005mn"
  "ame\030\001 \001(\tH\000\210\001\001\022\016\n\006mvalue\030\002 \003(\003B\010\n\006_mname"
  "\"\360\001\n\ndb_testlua\022\020\n\003mid\030\001 \001(\003H\000\210\001\001\022\016\n\006mva"
  "lue\030\002 \003(\003\022,\n\006mdatas\030\003 \003(\0132\034.pbdb.db_test"
  "lua.MdatasEntry\032A\n\007luadata\022\021\n\004mkey\030\001 \001(\t"
  "H\000\210\001\001\022\021\n\004mval\030\002 \001(\tH\001\210\001\001B\007\n\005_mkeyB\007\n\005_mv"
  "al\032G\n\013MdatasEntry\022\013\n\003key\030\001 \001(\005\022\'\n\005value\030"
  "\002 \001(\0132\030.pbdb.db_testlua.luadata:\0028\001B\006\n\004_"
  "mid*\235\003\n\007ENUM_DB\022\023\n\017ENUM_DB_ACCOUNT\020\000\022\020\n\014"
  "ENUM_DB_ROLE\020\001\022\021\n\rENUM_DB_BRIEF\020\002\022\017\n\013ENU"
  "M_DB_BAG\020\003\022\024\n\020ENUM_DB_KEYVALUE\020\004\022\020\n\014ENUM"
  "_DB_MAIL\020\005\022\022\n\016ENUM_DB_NOTICE\020\006\022\024\n\020ENUM_D"
  "B_RANKLIST\020\007\022\024\n\020ENUM_DB_ACTIVITY\020\010\022\031\n\025EN"
  "UM_DB_ACTIVITYTIMES\020\t\022\020\n\014ENUM_DB_TASK\020\n\022"
  "\030\n\024ENUM_DB_ROLEKEYVALUE\020\013\022\022\n\016ENUM_DB_FAM"
  "ILY\020\014\022\024\n\020ENUM_DB_FAMILYER\020\r\022\023\n\017ENUM_DB_F"
  "RIENDS\020\016\022\023\n\017ENUM_DB_TESTLUA\020\017\022\021\n\rENUM_DB"
  "_COUNT\020\020\022\026\n\021ENUM_DBCROSS_TEST\020\351\007\022\031\n\014ENUM"
  "_DB_FAIL\020\377\377\377\377\377\377\377\377\377\001*d\n\teranklist\022\022\n\016eran"
  "klist_null\020\000\022\006\n\002lv\020\001\022\010\n\004gold\020\002\022\t\n\005count\020"
  "\003\022\021\n\013activity_lv\020\300\204=\022\023\n\ractivity_gold\020\200\211"
  "zb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_db_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_db_2eproto = {
    false, false, 5409, descriptor_table_protodef_db_2eproto,
    "db.proto",
    &descriptor_table_db_2eproto_once, nullptr, 0, 43,
    schemas, file_default_instances, TableStruct_db_2eproto::offsets,
    file_level_metadata_db_2eproto, file_level_enum_descriptors_db_2eproto,
    file_level_service_descriptors_db_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_db_2eproto_getter() {
  return &descriptor_table_db_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_db_2eproto(&descriptor_table_db_2eproto);
namespace pbdb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* db_keyvalue_ekv_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[0];
}
bool db_keyvalue_ekv_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr db_keyvalue_ekv db_keyvalue::none;
constexpr db_keyvalue_ekv db_keyvalue::account_ban;
constexpr db_keyvalue_ekv db_keyvalue::open_server;
constexpr db_keyvalue_ekv db_keyvalue::ekv_MIN;
constexpr db_keyvalue_ekv db_keyvalue::ekv_MAX;
constexpr int db_keyvalue::ekv_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* db_familyer_eposition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[1];
}
bool db_familyer_eposition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr db_familyer_eposition db_familyer::none;
constexpr db_familyer_eposition db_familyer::leader;
constexpr db_familyer_eposition db_familyer::counsellor;
constexpr db_familyer_eposition db_familyer::ordinary;
constexpr db_familyer_eposition db_familyer::eposition_MIN;
constexpr db_familyer_eposition db_familyer::eposition_MAX;
constexpr int db_familyer::eposition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_DB_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[2];
}
bool ENUM_DB_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 1001:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eranklist_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[3];
}
bool eranklist_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 1000000:
    case 2000000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class db_account::_Internal {
 public:
  using HasBits = decltype(std::declval<db_account>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maccount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mpassworld(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_marea(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

db_account::db_account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_account)
}
db_account::db_account(const db_account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_account* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.maccount_){}
    , decltype(_impl_.mpassworld_){}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.mroleid_){}
    , decltype(_impl_.marea_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.maccount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maccount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_maccount()) {
    _this->_impl_.maccount_.Set(from._internal_maccount(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mpassworld_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mpassworld_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mpassworld()) {
    _this->_impl_.mpassworld_.Set(from._internal_mpassworld(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mid_, &from._impl_.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.marea_) -
    reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.marea_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_account)
}

inline void db_account::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.maccount_){}
    , decltype(_impl_.mpassworld_){}
    , decltype(_impl_.mid_){int64_t{0}}
    , decltype(_impl_.mroleid_){int64_t{0}}
    , decltype(_impl_.marea_){0}
  };
  _impl_.maccount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maccount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mpassworld_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mpassworld_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

db_account::~db_account() {
  // @@protoc_insertion_point(destructor:pbdb.db_account)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void db_account::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.maccount_.Destroy();
  _impl_.mpassworld_.Destroy();
}

void db_account::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_account::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_account)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.maccount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mpassworld_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.marea_) -
        reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.marea_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_account::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 mroleid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mroleid(&has_bits);
          _impl_.mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string maccount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_maccount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbdb.db_account.maccount"));
        } else
          goto handle_unusual;
        continue;
      // optional string mpassworld = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mpassworld();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbdb.db_account.mpassworld"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 marea = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_marea(&has_bits);
          _impl_.marea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_account::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_account)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // optional int64 mroleid = 2;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_mroleid(), target);
  }

  // optional string maccount = 3;
  if (_internal_has_maccount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maccount().data(), static_cast<int>(this->_internal_maccount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_account.maccount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_maccount(), target);
  }

  // optional string mpassworld = 4;
  if (_internal_has_mpassworld()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mpassworld().data(), static_cast<int>(this->_internal_mpassworld().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_account.mpassworld");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mpassworld(), target);
  }

  // optional int32 marea = 5;
  if (_internal_has_marea()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_marea(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_account)
  return target;
}

size_t db_account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_account)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string maccount = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_maccount());
    }

    // optional string mpassworld = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mpassworld());
    }

    // optional int64 mid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
    }

    // optional int64 mroleid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mroleid());
    }

    // optional int32 marea = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_marea());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_account::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_account::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_account::GetClassData() const { return &_class_data_; }


void db_account::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_account*>(&to_msg);
  auto& from = static_cast<const db_account&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_account)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_maccount(from._internal_maccount());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mpassworld(from._internal_mpassworld());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mroleid_ = from._impl_.mroleid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.marea_ = from._impl_.marea_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_account::CopyFrom(const db_account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_account::IsInitialized() const {
  return true;
}

void db_account::InternalSwap(db_account* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.maccount_, lhs_arena,
      &other->_impl_.maccount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mpassworld_, lhs_arena,
      &other->_impl_.mpassworld_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_account, _impl_.marea_)
      + sizeof(db_account::_impl_.marea_)
      - PROTOBUF_FIELD_OFFSET(db_account, _impl_.mid_)>(
          reinterpret_cast<char*>(&_impl_.mid_),
          reinterpret_cast<char*>(&other->_impl_.mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_account::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[0]);
}

// ===================================================================

brief_activityvalues_MactivityRolelvEntry_DoNotUse::brief_activityvalues_MactivityRolelvEntry_DoNotUse() {}
brief_activityvalues_MactivityRolelvEntry_DoNotUse::brief_activityvalues_MactivityRolelvEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void brief_activityvalues_MactivityRolelvEntry_DoNotUse::MergeFrom(const brief_activityvalues_MactivityRolelvEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata brief_activityvalues_MactivityRolelvEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[1]);
}

// ===================================================================

brief_activityvalues_MactivityRolegoldEntry_DoNotUse::brief_activityvalues_MactivityRolegoldEntry_DoNotUse() {}
brief_activityvalues_MactivityRolegoldEntry_DoNotUse::brief_activityvalues_MactivityRolegoldEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void brief_activityvalues_MactivityRolegoldEntry_DoNotUse::MergeFrom(const brief_activityvalues_MactivityRolegoldEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata brief_activityvalues_MactivityRolegoldEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[2]);
}

// ===================================================================

class brief_activityvalues::_Internal {
 public:
};

brief_activityvalues::brief_activityvalues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &brief_activityvalues::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbdb.brief_activityvalues)
}
brief_activityvalues::brief_activityvalues(const brief_activityvalues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  brief_activityvalues* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.mactivity_rolelv_)*/{}
    , /*decltype(_impl_.mactivity_rolegold_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mactivity_rolelv_.MergeFrom(from._impl_.mactivity_rolelv_);
  _this->_impl_.mactivity_rolegold_.MergeFrom(from._impl_.mactivity_rolegold_);
  // @@protoc_insertion_point(copy_constructor:pbdb.brief_activityvalues)
}

inline void brief_activityvalues::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.mactivity_rolelv_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.mactivity_rolegold_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

brief_activityvalues::~brief_activityvalues() {
  // @@protoc_insertion_point(destructor:pbdb.brief_activityvalues)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void brief_activityvalues::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mactivity_rolelv_.Destruct();
  _impl_.mactivity_rolelv_.~MapField();
  _impl_.mactivity_rolegold_.Destruct();
  _impl_.mactivity_rolegold_.~MapField();
}

void brief_activityvalues::ArenaDtor(void* object) {
  brief_activityvalues* _this = reinterpret_cast< brief_activityvalues* >(object);
  _this->_impl_.mactivity_rolelv_.Destruct();
  _this->_impl_.mactivity_rolegold_.Destruct();
}
void brief_activityvalues::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void brief_activityvalues::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.brief_activityvalues)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mactivity_rolelv_.Clear();
  _impl_.mactivity_rolegold_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* brief_activityvalues::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, int32> mactivity_rolelv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mactivity_rolelv_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, int32> mactivity_rolegold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mactivity_rolegold_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* brief_activityvalues::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.brief_activityvalues)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> mactivity_rolelv = 1;
  if (!this->_internal_mactivity_rolelv().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = brief_activityvalues_MactivityRolelvEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mactivity_rolelv();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, int32> mactivity_rolegold = 2;
  if (!this->_internal_mactivity_rolegold().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = brief_activityvalues_MactivityRolegoldEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mactivity_rolegold();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.brief_activityvalues)
  return target;
}

size_t brief_activityvalues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.brief_activityvalues)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> mactivity_rolelv = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mactivity_rolelv_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_mactivity_rolelv().begin();
      it != this->_internal_mactivity_rolelv().end(); ++it) {
    total_size += brief_activityvalues_MactivityRolelvEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, int32> mactivity_rolegold = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mactivity_rolegold_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_mactivity_rolegold().begin();
      it != this->_internal_mactivity_rolegold().end(); ++it) {
    total_size += brief_activityvalues_MactivityRolegoldEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData brief_activityvalues::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    brief_activityvalues::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*brief_activityvalues::GetClassData() const { return &_class_data_; }


void brief_activityvalues::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<brief_activityvalues*>(&to_msg);
  auto& from = static_cast<const brief_activityvalues&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.brief_activityvalues)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mactivity_rolelv_.MergeFrom(from._impl_.mactivity_rolelv_);
  _this->_impl_.mactivity_rolegold_.MergeFrom(from._impl_.mactivity_rolegold_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void brief_activityvalues::CopyFrom(const brief_activityvalues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.brief_activityvalues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool brief_activityvalues::IsInitialized() const {
  return true;
}

void brief_activityvalues::InternalSwap(brief_activityvalues* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mactivity_rolelv_.InternalSwap(&other->_impl_.mactivity_rolelv_);
  _impl_.mactivity_rolegold_.InternalSwap(&other->_impl_.mactivity_rolegold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata brief_activityvalues::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[3]);
}

// ===================================================================

class db_brief::_Internal {
 public:
  using HasBits = decltype(std::declval<db_brief>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mlv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mmoneygold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mmoneysilver(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mvip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mnotalkutc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mcreateutc(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::pbdb::brief_activityvalues& mactivityvalues(const db_brief* msg);
  static void set_has_mactivityvalues(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pbdb::brief_activityvalues&
db_brief::_Internal::mactivityvalues(const db_brief* msg) {
  return *msg->_impl_.mactivityvalues_;
}
db_brief::db_brief(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_brief)
}
db_brief::db_brief(const db_brief& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_brief* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mname_){}
    , decltype(_impl_.mactivityvalues_){nullptr}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.mlv_){}
    , decltype(_impl_.mmoneygold_){}
    , decltype(_impl_.mmoneysilver_){}
    , decltype(_impl_.mvip_){}
    , decltype(_impl_.mnotalkutc_){}
    , decltype(_impl_.mcreateutc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mname()) {
    _this->_impl_.mname_.Set(from._internal_mname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_mactivityvalues()) {
    _this->_impl_.mactivityvalues_ = new ::pbdb::brief_activityvalues(*from._impl_.mactivityvalues_);
  }
  ::memcpy(&_impl_.mid_, &from._impl_.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mcreateutc_) -
    reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mcreateutc_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_brief)
}

inline void db_brief::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mname_){}
    , decltype(_impl_.mactivityvalues_){nullptr}
    , decltype(_impl_.mid_){int64_t{0}}
    , decltype(_impl_.mlv_){0}
    , decltype(_impl_.mmoneygold_){0}
    , decltype(_impl_.mmoneysilver_){0}
    , decltype(_impl_.mvip_){0}
    , decltype(_impl_.mnotalkutc_){0}
    , decltype(_impl_.mcreateutc_){0}
  };
  _impl_.mname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

db_brief::~db_brief() {
  // @@protoc_insertion_point(destructor:pbdb.db_brief)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void db_brief::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.mactivityvalues_;
}

void db_brief::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_brief::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_brief)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.mname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.mactivityvalues_ != nullptr);
      _impl_.mactivityvalues_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mnotalkutc_) -
        reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mnotalkutc_));
  }
  _impl_.mcreateutc_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_brief::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbdb.db_brief.mname"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 mlv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mlv(&has_bits);
          _impl_.mlv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mmoneygold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mmoneygold(&has_bits);
          _impl_.mmoneygold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mmoneysilver = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mmoneysilver(&has_bits);
          _impl_.mmoneysilver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mvip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_mvip(&has_bits);
          _impl_.mvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mnotalkutc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_mnotalkutc(&has_bits);
          _impl_.mnotalkutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mcreateutc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_mcreateutc(&has_bits);
          _impl_.mcreateutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbdb.brief_activityvalues mactivityvalues = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mactivityvalues(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_brief::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_brief)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // optional string mname = 2;
  if (_internal_has_mname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mname().data(), static_cast<int>(this->_internal_mname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_brief.mname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mname(), target);
  }

  // optional int32 mlv = 3;
  if (_internal_has_mlv()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mlv(), target);
  }

  // optional int32 mmoneygold = 4;
  if (_internal_has_mmoneygold()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mmoneygold(), target);
  }

  // optional int32 mmoneysilver = 5;
  if (_internal_has_mmoneysilver()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mmoneysilver(), target);
  }

  // optional int32 mvip = 6;
  if (_internal_has_mvip()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_mvip(), target);
  }

  // optional int32 mnotalkutc = 7;
  if (_internal_has_mnotalkutc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_mnotalkutc(), target);
  }

  // optional int32 mcreateutc = 8;
  if (_internal_has_mcreateutc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_mcreateutc(), target);
  }

  // optional .pbdb.brief_activityvalues mactivityvalues = 9;
  if (_internal_has_mactivityvalues()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::mactivityvalues(this),
        _Internal::mactivityvalues(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_brief)
  return target;
}

size_t db_brief::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_brief)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string mname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mname());
    }

    // optional .pbdb.brief_activityvalues mactivityvalues = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mactivityvalues_);
    }

    // optional int64 mid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
    }

    // optional int32 mlv = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mlv());
    }

    // optional int32 mmoneygold = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mmoneygold());
    }

    // optional int32 mmoneysilver = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mmoneysilver());
    }

    // optional int32 mvip = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mvip());
    }

    // optional int32 mnotalkutc = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mnotalkutc());
    }

  }
  // optional int32 mcreateutc = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mcreateutc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_brief::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_brief::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_brief::GetClassData() const { return &_class_data_; }


void db_brief::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_brief*>(&to_msg);
  auto& from = static_cast<const db_brief&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_brief)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mname(from._internal_mname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_mactivityvalues()->::pbdb::brief_activityvalues::MergeFrom(
          from._internal_mactivityvalues());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mlv_ = from._impl_.mlv_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.mmoneygold_ = from._impl_.mmoneygold_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.mmoneysilver_ = from._impl_.mmoneysilver_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.mvip_ = from._impl_.mvip_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.mnotalkutc_ = from._impl_.mnotalkutc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_mcreateutc(from._internal_mcreateutc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_brief::CopyFrom(const db_brief& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_brief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_brief::IsInitialized() const {
  return true;
}

void db_brief::InternalSwap(db_brief* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mname_, lhs_arena,
      &other->_impl_.mname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_brief, _impl_.mcreateutc_)
      + sizeof(db_brief::_impl_.mcreateutc_)
      - PROTOBUF_FIELD_OFFSET(db_brief, _impl_.mactivityvalues_)>(
          reinterpret_cast<char*>(&_impl_.mactivityvalues_),
          reinterpret_cast<char*>(&other->_impl_.mactivityvalues_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_brief::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[4]);
}

// ===================================================================

class db_role_recharge::_Internal {
 public:
  using HasBits = decltype(std::declval<db_role_recharge>()._impl_._has_bits_);
  static void set_has_mrechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mutc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

db_role_recharge::db_role_recharge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_role.recharge)
}
db_role_recharge::db_role_recharge(const db_role_recharge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_role_recharge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mrechargeid_){}
    , decltype(_impl_.mutc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mrechargeid_, &from._impl_.mrechargeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mutc_) -
    reinterpret_cast<char*>(&_impl_.mrechargeid_)) + sizeof(_impl_.mutc_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_role.recharge)
}

inline void db_role_recharge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mrechargeid_){0}
    , decltype(_impl_.mutc_){0}
  };
}

db_role_recharge::~db_role_recharge() {
  // @@protoc_insertion_point(destructor:pbdb.db_role.recharge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void db_role_recharge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void db_role_recharge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_role_recharge::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_role.recharge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mrechargeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mutc_) -
        reinterpret_cast<char*>(&_impl_.mrechargeid_)) + sizeof(_impl_.mutc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_role_recharge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mrechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mrechargeid(&has_bits);
          _impl_.mrechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mutc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mutc(&has_bits);
          _impl_.mutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_role_recharge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_role.recharge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mrechargeid = 1;
  if (_internal_has_mrechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mrechargeid(), target);
  }

  // optional int32 mutc = 2;
  if (_internal_has_mutc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mutc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_role.recharge)
  return target;
}

size_t db_role_recharge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_role.recharge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 mrechargeid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mrechargeid());
    }

    // optional int32 mutc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mutc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_role_recharge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_role_recharge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_role_recharge::GetClassData() const { return &_class_data_; }


void db_role_recharge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_role_recharge*>(&to_msg);
  auto& from = static_cast<const db_role_recharge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_role.recharge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mrechargeid_ = from._impl_.mrechargeid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mutc_ = from._impl_.mutc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_role_recharge::CopyFrom(const db_role_recharge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_role.recharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_recharge::IsInitialized() const {
  return true;
}

void db_role_recharge::InternalSwap(db_role_recharge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_role_recharge, _impl_.mutc_)
      + sizeof(db_role_recharge::_impl_.mutc_)
      - PROTOBUF_FIELD_OFFSET(db_role_recharge, _impl_.mrechargeid_)>(
          reinterpret_cast<char*>(&_impl_.mrechargeid_),
          reinterpret_cast<char*>(&other->_impl_.mrechargeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_role_recharge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[5]);
}

// ===================================================================

class db_role::_Internal {
 public:
  using HasBits = decltype(std::declval<db_role>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_role::db_role(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_role)
}
db_role::db_role(const db_role& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_role* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mrecharge_){from._impl_.mrecharge_}
    , decltype(_impl_.mid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mid_ = from._impl_.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_role)
}

inline void db_role::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mrecharge_){arena}
    , decltype(_impl_.mid_){int64_t{0}}
  };
}

db_role::~db_role() {
  // @@protoc_insertion_point(destructor:pbdb.db_role)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void db_role::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mrecharge_.~RepeatedPtrField();
}

void db_role::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_role::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_role)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mrecharge_.Clear();
  _impl_.mid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_role::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbdb.db_role.recharge mrecharge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mrecharge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_role::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_role)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // repeated .pbdb.db_role.recharge mrecharge = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mrecharge_size()); i < n; i++) {
    const auto& repfield = this->_internal_mrecharge(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_role)
  return target;
}

size_t db_role::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_role)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_role.recharge mrecharge = 2;
  total_size += 1UL * this->_internal_mrecharge_size();
  for (const auto& msg : this->_impl_.mrecharge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int64 mid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_role::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_role::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_role::GetClassData() const { return &_class_data_; }


void db_role::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_role*>(&to_msg);
  auto& from = static_cast<const db_role&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_role)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mrecharge_.MergeFrom(from._impl_.mrecharge_);
  if (from._internal_has_mid()) {
    _this->_internal_set_mid(from._internal_mid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_role::CopyFrom(const db_role& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role::IsInitialized() const {
  return true;
}

void db_role::InternalSwap(db_role* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mrecharge_.InternalSwap(&other->_impl_.mrecharge_);
  swap(_impl_.mid_, other->_impl_.mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_role::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[6]);
}

// ===================================================================

class item::_Internal {
 public:
  using HasBits = decltype(std::declval<item>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mtid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mlv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mstar(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

item::item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.item)
}
item::item(const item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.mtid_){}
    , decltype(_impl_.mcount_){}
    , decltype(_impl_.mlv_){}
    , decltype(_impl_.mstar_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mid_, &from._impl_.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstar_) -
    reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mstar_));
  // @@protoc_insertion_point(copy_constructor:pbdb.item)
}

inline void item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mid_){0}
    , decltype(_impl_.mtid_){0}
    , decltype(_impl_.mcount_){0}
    , decltype(_impl_.mlv_){0}
    , decltype(_impl_.mstar_){0}
  };
}

item::~item() {
  // @@protoc_insertion_point(destructor:pbdb.item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void item::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstar_) -
        reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mstar_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mtid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mtid(&has_bits);
          _impl_.mtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mcount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mcount(&has_bits);
          _impl_.mcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mlv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mlv(&has_bits);
          _impl_.mlv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mstar = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mstar(&has_bits);
          _impl_.mstar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mid(), target);
  }

  // optional int32 mtid = 2;
  if (_internal_has_mtid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mtid(), target);
  }

  // optional int32 mcount = 3;
  if (_internal_has_mcount()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mcount(), target);
  }

  // optional int32 mlv = 4;
  if (_internal_has_mlv()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mlv(), target);
  }

  // optional int32 mstar = 5;
  if (_internal_has_mstar()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mstar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.item)
  return target;
}

size_t item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mid());
    }

    // optional int32 mtid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mtid());
    }

    // optional int32 mcount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mcount());
    }

    // optional int32 mlv = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mlv());
    }

    // optional int32 mstar = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mstar());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*item::GetClassData() const { return &_class_data_; }


void item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<item*>(&to_msg);
  auto& from = static_cast<const item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mtid_ = from._impl_.mtid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mcount_ = from._impl_.mcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mlv_ = from._impl_.mlv_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.mstar_ = from._impl_.mstar_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void item::CopyFrom(const item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item::IsInitialized() const {
  return true;
}

void item::InternalSwap(item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(item, _impl_.mstar_)
      + sizeof(item::_impl_.mstar_)
      - PROTOBUF_FIELD_OFFSET(item, _impl_.mid_)>(
          reinterpret_cast<char*>(&_impl_.mid_),
          reinterpret_cast<char*>(&other->_impl_.mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[7]);
}

// ===================================================================

db_bag_MitemsEntry_DoNotUse::db_bag_MitemsEntry_DoNotUse() {}
db_bag_MitemsEntry_DoNotUse::db_bag_MitemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_bag_MitemsEntry_DoNotUse::MergeFrom(const db_bag_MitemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_bag_MitemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[8]);
}

// ===================================================================

class db_bag::_Internal {
 public:
  using HasBits = decltype(std::declval<db_bag>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mmaxid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

db_bag::db_bag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &db_bag::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbdb.db_bag)
}
db_bag::db_bag(const db_bag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_bag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mitems_)*/{}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.mmaxid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mitems_.MergeFrom(from._impl_.mitems_);
  ::memcpy(&_impl_.mid_, &from._impl_.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mmaxid_) -
    reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mmaxid_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_bag)
}

inline void db_bag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mitems_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.mid_){int64_t{0}}
    , decltype(_impl_.mmaxid_){0}
  };
}

db_bag::~db_bag() {
  // @@protoc_insertion_point(destructor:pbdb.db_bag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void db_bag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mitems_.Destruct();
  _impl_.mitems_.~MapField();
}

void db_bag::ArenaDtor(void* object) {
  db_bag* _this = reinterpret_cast< db_bag* >(object);
  _this->_impl_.mitems_.Destruct();
}
void db_bag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_bag::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_bag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mitems_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mmaxid_) -
        reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mmaxid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_bag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .pbdb.item> mitems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mitems_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 mmaxid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mmaxid(&has_bits);
          _impl_.mmaxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_bag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_bag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // map<int32, .pbdb.item> mitems = 2;
  if (!this->_internal_mitems().empty()) {
    using MapType = ::_pb::Map<int32_t, ::pbdb::item>;
    using WireHelper = db_bag_MitemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mitems();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // optional int32 mmaxid = 3;
  if (_internal_has_mmaxid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mmaxid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_bag)
  return target;
}

size_t db_bag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_bag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.item> mitems = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mitems_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::pbdb::item >::const_iterator
      it = this->_internal_mitems().begin();
      it != this->_internal_mitems().end(); ++it) {
    total_size += db_bag_MitemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
    }

    // optional int32 mmaxid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mmaxid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_bag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_bag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_bag::GetClassData() const { return &_class_data_; }


void db_bag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_bag*>(&to_msg);
  auto& from = static_cast<const db_bag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_bag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mitems_.MergeFrom(from._impl_.mitems_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mmaxid_ = from._impl_.mmaxid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_bag::CopyFrom(const db_bag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_bag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_bag::IsInitialized() const {
  return true;
}

void db_bag::InternalSwap(db_bag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mitems_.InternalSwap(&other->_impl_.mitems_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_bag, _impl_.mmaxid_)
      + sizeof(db_bag::_impl_.mmaxid_)
      - PROTOBUF_FIELD_OFFSET(db_bag, _impl_.mid_)>(
          reinterpret_cast<char*>(&_impl_.mid_),
          reinterpret_cast<char*>(&other->_impl_.mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_bag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[9]);
}

// ===================================================================

class db_keyvalue::_Internal {
 public:
  using HasBits = decltype(std::declval<db_keyvalue>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_keyvalue::db_keyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_keyvalue)
}
db_keyvalue::db_keyvalue(const db_keyvalue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_keyvalue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mvalue_){}
    , decltype(_impl_.mid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mvalue()) {
    _this->_impl_.mvalue_.Set(from._internal_mvalue(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mid_ = from._impl_.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_keyvalue)
}

inline void db_keyvalue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mvalue_){}
    , decltype(_impl_.mid_){int64_t{0}}
  };
  _impl_.mvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

db_keyvalue::~db_keyvalue() {
  // @@protoc_insertion_point(destructor:pbdb.db_keyvalue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void db_keyvalue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mvalue_.Destroy();
}

void db_keyvalue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_keyvalue::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_keyvalue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mvalue_.ClearNonDefaultToEmpty();
  }
  _impl_.mid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_keyvalue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mvalue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbdb.db_keyvalue.mvalue"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_keyvalue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_keyvalue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // optional string mvalue = 2;
  if (_internal_has_mvalue()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mvalue().data(), static_cast<int>(this->_internal_mvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_keyvalue.mvalue");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_keyvalue)
  return target;
}

size_t db_keyvalue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_keyvalue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string mvalue = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mvalue());
    }

    // optional int64 mid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_keyvalue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_keyvalue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_keyvalue::GetClassData() const { return &_class_data_; }


void db_keyvalue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_keyvalue*>(&to_msg);
  auto& from = static_cast<const db_keyvalue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_keyvalue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mvalue(from._internal_mvalue());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_keyvalue::CopyFrom(const db_keyvalue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_keyvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_keyvalue::IsInitialized() const {
  return true;
}

void db_keyvalue::InternalSwap(db_keyvalue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mvalue_, lhs_arena,
      &other->_impl_.mvalue_, rhs_arena
  );
  swap(_impl_.mid_, other->_impl_.mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_keyvalue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[10]);
}

// ===================================================================

db_rolekeyvalue_MdataEntry_DoNotUse::db_rolekeyvalue_MdataEntry_DoNotUse() {}
db_rolekeyvalue_MdataEntry_DoNotUse::db_rolekeyvalue_MdataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_rolekeyvalue_MdataEntry_DoNotUse::MergeFrom(const db_rolekeyvalue_MdataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_rolekeyvalue_MdataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[11]);
}

// ===================================================================

class db_rolekeyvalue::_Internal {
 public:
  using HasBits = decltype(std::declval<db_rolekeyvalue>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_rolekeyvalue::db_rolekeyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &db_rolekeyvalue::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbdb.db_rolekeyvalue)
}
db_rolekeyvalue::db_rolekeyvalue(const db_rolekeyvalue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_rolekeyvalue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mdata_)*/{}
    , decltype(_impl_.mid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mdata_.MergeFrom(from._impl_.mdata_);
  _this->_impl_.mid_ = from._impl_.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_rolekeyvalue)
}

inline void db_rolekeyvalue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mdata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.mid_){int64_t{0}}
  };
}

db_rolekeyvalue::~db_rolekeyvalue() {
  // @@protoc_insertion_point(destructor:pbdb.db_rolekeyvalue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void db_rolekeyvalue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mdata_.Destruct();
  _impl_.mdata_.~MapField();
}

void db_rolekeyvalue::ArenaDtor(void* object) {
  db_rolekeyvalue* _this = reinterpret_cast< db_rolekeyvalue* >(object);
  _this->_impl_.mdata_.Destruct();
}
void db_rolekeyvalue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_rolekeyvalue::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_rolekeyvalue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mdata_.Clear();
  _impl_.mid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_rolekeyvalue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> mdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mdata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_rolekeyvalue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_rolekeyvalue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // map<string, string> mdata = 2;
  if (!this->_internal_mdata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = db_rolekeyvalue_MdataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mdata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "pbdb.db_rolekeyvalue.MdataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "pbdb.db_rolekeyvalue.MdataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_rolekeyvalue)
  return target;
}

size_t db_rolekeyvalue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_rolekeyvalue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> mdata = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mdata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_mdata().begin();
      it != this->_internal_mdata().end(); ++it) {
    total_size += db_rolekeyvalue_MdataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional int64 mid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_rolekeyvalue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_rolekeyvalue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_rolekeyvalue::GetClassData() const { return &_class_data_; }


void db_rolekeyvalue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_rolekeyvalue*>(&to_msg);
  auto& from = static_cast<const db_rolekeyvalue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_rolekeyvalue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mdata_.MergeFrom(from._impl_.mdata_);
  if (from._internal_has_mid()) {
    _this->_internal_set_mid(from._internal_mid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_rolekeyvalue::CopyFrom(const db_rolekeyvalue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_rolekeyvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_rolekeyvalue::IsInitialized() const {
  return true;
}

void db_rolekeyvalue::InternalSwap(db_rolekeyvalue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mdata_.InternalSwap(&other->_impl_.mdata_);
  swap(_impl_.mid_, other->_impl_.mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_rolekeyvalue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[12]);
}

// ===================================================================

class mailitem::_Internal {
 public:
  using HasBits = decltype(std::declval<mailitem>()._impl_._has_bits_);
  static void set_has_mitemtid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

mailitem::mailitem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.mailitem)
}
mailitem::mailitem(const mailitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mailitem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mitemtid_){}
    , decltype(_impl_.mcount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mitemtid_, &from._impl_.mitemtid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mcount_) -
    reinterpret_cast<char*>(&_impl_.mitemtid_)) + sizeof(_impl_.mcount_));
  // @@protoc_insertion_point(copy_constructor:pbdb.mailitem)
}

inline void mailitem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mitemtid_){0}
    , decltype(_impl_.mcount_){0}
  };
}

mailitem::~mailitem() {
  // @@protoc_insertion_point(destructor:pbdb.mailitem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mailitem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void mailitem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mailitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.mailitem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mitemtid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mcount_) -
        reinterpret_cast<char*>(&_impl_.mitemtid_)) + sizeof(_impl_.mcount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mailitem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mitemtid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mitemtid(&has_bits);
          _impl_.mitemtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mcount(&has_bits);
          _impl_.mcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mailitem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.mailitem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mitemtid = 1;
  if (_internal_has_mitemtid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mitemtid(), target);
  }

  // optional int32 mcount = 2;
  if (_internal_has_mcount()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.mailitem)
  return target;
}

size_t mailitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.mailitem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 mitemtid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mitemtid());
    }

    // optional int32 mcount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mcount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mailitem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mailitem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mailitem::GetClassData() const { return &_class_data_; }


void mailitem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mailitem*>(&to_msg);
  auto& from = static_cast<const mailitem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.mailitem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mitemtid_ = from._impl_.mitemtid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mcount_ = from._impl_.mcount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mailitem::CopyFrom(const mailitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.mailitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mailitem::IsInitialized() const {
  return true;
}

void mailitem::InternalSwap(mailitem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mailitem, _impl_.mcount_)
      + sizeof(mailitem::_impl_.mcount_)
      - PROTOBUF_FIELD_OFFSET(mailitem, _impl_.mitemtid_)>(
          reinterpret_cast<char*>(&_impl_.mitemtid_),
          reinterpret_cast<char*>(&other->_impl_.mitemtid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mailitem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[13]);
}

// ===================================================================

class mail::_Internal {
 public:
  using HasBits = decltype(std::declval<mail>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mcreateutc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mtid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mprams(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mcontent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mread(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mdraw(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

mail::mail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.mail)
}
mail::mail(const mail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mitems_){from._impl_.mitems_}
    , decltype(_impl_.mprams_){}
    , decltype(_impl_.mcontent_){}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.mcreateutc_){}
    , decltype(_impl_.mtid_){}
    , decltype(_impl_.mread_){}
    , decltype(_impl_.mdraw_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mprams_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mprams_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mprams()) {
    _this->_impl_.mprams_.Set(from._internal_mprams(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mcontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mcontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mcontent()) {
    _this->_impl_.mcontent_.Set(from._internal_mcontent(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mid_, &from._impl_.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mdraw_) -
    reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mdraw_));
  // @@protoc_insertion_point(copy_constructor:pbdb.mail)
}

inline void mail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mitems_){arena}
    , decltype(_impl_.mprams_){}
    , decltype(_impl_.mcontent_){}
    , decltype(_impl_.mid_){0}
    , decltype(_impl_.mcreateutc_){0}
    , decltype(_impl_.mtid_){0}
    , decltype(_impl_.mread_){false}
    , decltype(_impl_.mdraw_){false}
  };
  _impl_.mprams_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mprams_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mcontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mcontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

mail::~mail() {
  // @@protoc_insertion_point(destructor:pbdb.mail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mitems_.~RepeatedPtrField();
  _impl_.mprams_.Destroy();
  _impl_.mcontent_.Destroy();
}

void mail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mail::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.mail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mitems_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.mprams_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mcontent_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mdraw_) -
        reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mdraw_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mcreateutc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mcreateutc(&has_bits);
          _impl_.mcreateutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mtid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mtid(&has_bits);
          _impl_.mtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mprams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mprams();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbdb.mail.mprams"));
        } else
          goto handle_unusual;
        continue;
      // optional string mcontent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mcontent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbdb.mail.mcontent"));
        } else
          goto handle_unusual;
        continue;
      // repeated .pbdb.mailitem mitems = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool mread = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_mread(&has_bits);
          _impl_.mread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mdraw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_mdraw(&has_bits);
          _impl_.mdraw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.mail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mid(), target);
  }

  // optional int32 mcreateutc = 2;
  if (_internal_has_mcreateutc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mcreateutc(), target);
  }

  // optional int32 mtid = 3;
  if (_internal_has_mtid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mtid(), target);
  }

  // optional string mprams = 4;
  if (_internal_has_mprams()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mprams().data(), static_cast<int>(this->_internal_mprams().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.mail.mprams");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mprams(), target);
  }

  // optional string mcontent = 5;
  if (_internal_has_mcontent()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcontent().data(), static_cast<int>(this->_internal_mcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.mail.mcontent");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mcontent(), target);
  }

  // repeated .pbdb.mailitem mitems = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mitems_size()); i < n; i++) {
    const auto& repfield = this->_internal_mitems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool mread = 7;
  if (_internal_has_mread()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_mread(), target);
  }

  // optional bool mdraw = 8;
  if (_internal_has_mdraw()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_mdraw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.mail)
  return target;
}

size_t mail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.mail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.mailitem mitems = 6;
  total_size += 1UL * this->_internal_mitems_size();
  for (const auto& msg : this->_impl_.mitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string mprams = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mprams());
    }

    // optional string mcontent = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mcontent());
    }

    // optional int32 mid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mid());
    }

    // optional int32 mcreateutc = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mcreateutc());
    }

    // optional int32 mtid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mtid());
    }

    // optional bool mread = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool mdraw = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mail::GetClassData() const { return &_class_data_; }


void mail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mail*>(&to_msg);
  auto& from = static_cast<const mail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.mail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mitems_.MergeFrom(from._impl_.mitems_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mprams(from._internal_mprams());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mcontent(from._internal_mcontent());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mcreateutc_ = from._impl_.mcreateutc_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.mtid_ = from._impl_.mtid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.mread_ = from._impl_.mread_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.mdraw_ = from._impl_.mdraw_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mail::CopyFrom(const mail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail::IsInitialized() const {
  return true;
}

void mail::InternalSwap(mail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mitems_.InternalSwap(&other->_impl_.mitems_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mprams_, lhs_arena,
      &other->_impl_.mprams_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mcontent_, lhs_arena,
      &other->_impl_.mcontent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mail, _impl_.mdraw_)
      + sizeof(mail::_impl_.mdraw_)
      - PROTOBUF_FIELD_OFFSET(mail, _impl_.mid_)>(
          reinterpret_cast<char*>(&_impl_.mid_),
          reinterpret_cast<char*>(&other->_impl_.mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[14]);
}

// ===================================================================

db_mail_MmailEntry_DoNotUse::db_mail_MmailEntry_DoNotUse() {}
db_mail_MmailEntry_DoNotUse::db_mail_MmailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_mail_MmailEntry_DoNotUse::MergeFrom(const db_mail_MmailEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_mail_MmailEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[15]);
}

// ===================================================================

class db_mail::_Internal {
 public:
  using HasBits = decltype(std::declval<db_mail>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_mail::db_mail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &db_mail::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbdb.db_mail)
}
db_mail::db_mail(const db_mail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_mail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mmail_)*/{}
    , decltype(_impl_.mid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mmail_.MergeFrom(from._impl_.mmail_);
  _this->_impl_.mid_ = from._impl_.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_mail)
}

inline void db_mail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mmail_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.mid_){int64_t{0}}
  };
}

db_mail::~db_mail() {
  // @@protoc_insertion_point(destructor:pbdb.db_mail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void db_mail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mmail_.Destruct();
  _impl_.mmail_.~MapField();
}

void db_mail::ArenaDtor(void* object) {
  db_mail* _this = reinterpret_cast< db_mail* >(object);
  _this->_impl_.mmail_.Destruct();
}
void db_mail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_mail::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_mail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mmail_.Clear();
  _impl_.mid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_mail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .pbdb.mail> mmail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mmail_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_mail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_mail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // map<int32, .pbdb.mail> mmail = 2;
  if (!this->_internal_mmail().empty()) {
    using MapType = ::_pb::Map<int32_t, ::pbdb::mail>;
    using WireHelper = db_mail_MmailEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mmail();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_mail)
  return target;
}

size_t db_mail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_mail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.mail> mmail = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mmail_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::pbdb::mail >::const_iterator
      it = this->_internal_mmail().begin();
      it != this->_internal_mmail().end(); ++it) {
    total_size += db_mail_MmailEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional int64 mid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_mail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_mail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_mail::GetClassData() const { return &_class_data_; }


void db_mail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_mail*>(&to_msg);
  auto& from = static_cast<const db_mail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_mail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mmail_.MergeFrom(from._impl_.mmail_);
  if (from._internal_has_mid()) {
    _this->_internal_set_mid(from._internal_mid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_mail::CopyFrom(const db_mail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_mail::IsInitialized() const {
  return true;
}

void db_mail::InternalSwap(db_mail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mmail_.InternalSwap(&other->_impl_.mmail_);
  swap(_impl_.mid_, other->_impl_.mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_mail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[16]);
}

// ===================================================================

class db_notice::_Internal {
 public:
  using HasBits = decltype(std::declval<db_notice>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mnotice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstarttime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mfinishtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

db_notice::db_notice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_notice)
}
db_notice::db_notice(const db_notice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_notice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mnotice_){}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.mstarttime_){}
    , decltype(_impl_.mfinishtime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mnotice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mnotice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mnotice()) {
    _this->_impl_.mnotice_.Set(from._internal_mnotice(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mid_, &from._impl_.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mfinishtime_) -
    reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mfinishtime_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_notice)
}

inline void db_notice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mnotice_){}
    , decltype(_impl_.mid_){int64_t{0}}
    , decltype(_impl_.mstarttime_){0}
    , decltype(_impl_.mfinishtime_){0}
  };
  _impl_.mnotice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mnotice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

db_notice::~db_notice() {
  // @@protoc_insertion_point(destructor:pbdb.db_notice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void db_notice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mnotice_.Destroy();
}

void db_notice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_notice::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_notice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mnotice_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mfinishtime_) -
        reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mfinishtime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_notice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mnotice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mnotice();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbdb.db_notice.mnotice"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 mstarttime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mstarttime(&has_bits);
          _impl_.mstarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mfinishtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mfinishtime(&has_bits);
          _impl_.mfinishtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_notice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_notice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // optional string mnotice = 2;
  if (_internal_has_mnotice()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mnotice().data(), static_cast<int>(this->_internal_mnotice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_notice.mnotice");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mnotice(), target);
  }

  // optional int32 mstarttime = 3;
  if (_internal_has_mstarttime()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mstarttime(), target);
  }

  // optional int32 mfinishtime = 4;
  if (_internal_has_mfinishtime()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mfinishtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_notice)
  return target;
}

size_t db_notice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_notice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string mnotice = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mnotice());
    }

    // optional int64 mid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
    }

    // optional int32 mstarttime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mstarttime());
    }

    // optional int32 mfinishtime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mfinishtime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_notice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_notice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_notice::GetClassData() const { return &_class_data_; }


void db_notice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_notice*>(&to_msg);
  auto& from = static_cast<const db_notice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_notice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mnotice(from._internal_mnotice());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mstarttime_ = from._impl_.mstarttime_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mfinishtime_ = from._impl_.mfinishtime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_notice::CopyFrom(const db_notice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_notice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_notice::IsInitialized() const {
  return true;
}

void db_notice::InternalSwap(db_notice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mnotice_, lhs_arena,
      &other->_impl_.mnotice_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_notice, _impl_.mfinishtime_)
      + sizeof(db_notice::_impl_.mfinishtime_)
      - PROTOBUF_FIELD_OFFSET(db_notice, _impl_.mid_)>(
          reinterpret_cast<char*>(&_impl_.mid_),
          reinterpret_cast<char*>(&other->_impl_.mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_notice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[17]);
}

// ===================================================================

class rankitem::_Internal {
 public:
  using HasBits = decltype(std::declval<rankitem>()._impl_._has_bits_);
  static void set_has_mvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

rankitem::rankitem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.rankitem)
}
rankitem::rankitem(const rankitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  rankitem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mvalue_){}
    , decltype(_impl_.mtime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mvalue_, &from._impl_.mvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mtime_) -
    reinterpret_cast<char*>(&_impl_.mvalue_)) + sizeof(_impl_.mtime_));
  // @@protoc_insertion_point(copy_constructor:pbdb.rankitem)
}

inline void rankitem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mvalue_){int64_t{0}}
    , decltype(_impl_.mtime_){0}
  };
}

rankitem::~rankitem() {
  // @@protoc_insertion_point(destructor:pbdb.rankitem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void rankitem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void rankitem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void rankitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.rankitem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mtime_) -
        reinterpret_cast<char*>(&_impl_.mvalue_)) + sizeof(_impl_.mtime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rankitem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mvalue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mvalue(&has_bits);
          _impl_.mvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mtime(&has_bits);
          _impl_.mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* rankitem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.rankitem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mvalue = 1;
  if (_internal_has_mvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mvalue(), target);
  }

  // optional int32 mtime = 2;
  if (_internal_has_mtime()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.rankitem)
  return target;
}

size_t rankitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.rankitem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 mvalue = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mvalue());
    }

    // optional int32 mtime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mtime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData rankitem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    rankitem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*rankitem::GetClassData() const { return &_class_data_; }


void rankitem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<rankitem*>(&to_msg);
  auto& from = static_cast<const rankitem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.rankitem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mvalue_ = from._impl_.mvalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mtime_ = from._impl_.mtime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void rankitem::CopyFrom(const rankitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.rankitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rankitem::IsInitialized() const {
  return true;
}

void rankitem::InternalSwap(rankitem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(rankitem, _impl_.mtime_)
      + sizeof(rankitem::_impl_.mtime_)
      - PROTOBUF_FIELD_OFFSET(rankitem, _impl_.mvalue_)>(
          reinterpret_cast<char*>(&_impl_.mvalue_),
          reinterpret_cast<char*>(&other->_impl_.mvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata rankitem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[18]);
}

// ===================================================================

db_ranklist_MitemsEntry_DoNotUse::db_ranklist_MitemsEntry_DoNotUse() {}
db_ranklist_MitemsEntry_DoNotUse::db_ranklist_MitemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_ranklist_MitemsEntry_DoNotUse::MergeFrom(const db_ranklist_MitemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_ranklist_MitemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[19]);
}

// ===================================================================

class db_ranklist::_Internal {
 public:
  using HasBits = decltype(std::declval<db_ranklist>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_ranklist::db_ranklist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &db_ranklist::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbdb.db_ranklist)
}
db_ranklist::db_ranklist(const db_ranklist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_ranklist* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mitems_)*/{}
    , decltype(_impl_.mid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mitems_.MergeFrom(from._impl_.mitems_);
  _this->_impl_.mid_ = from._impl_.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_ranklist)
}

inline void db_ranklist::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mitems_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.mid_){int64_t{0}}
  };
}

db_ranklist::~db_ranklist() {
  // @@protoc_insertion_point(destructor:pbdb.db_ranklist)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void db_ranklist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mitems_.Destruct();
  _impl_.mitems_.~MapField();
}

void db_ranklist::ArenaDtor(void* object) {
  db_ranklist* _this = reinterpret_cast< db_ranklist* >(object);
  _this->_impl_.mitems_.Destruct();
}
void db_ranklist::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_ranklist::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_ranklist)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mitems_.Clear();
  _impl_.mid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_ranklist::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .pbdb.rankitem> mitems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mitems_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_ranklist::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_ranklist)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // map<int32, .pbdb.rankitem> mitems = 2;
  if (!this->_internal_mitems().empty()) {
    using MapType = ::_pb::Map<int32_t, ::pbdb::rankitem>;
    using WireHelper = db_ranklist_MitemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mitems();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_ranklist)
  return target;
}

size_t db_ranklist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_ranklist)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.rankitem> mitems = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mitems_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::pbdb::rankitem >::const_iterator
      it = this->_internal_mitems().begin();
      it != this->_internal_mitems().end(); ++it) {
    total_size += db_ranklist_MitemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional int64 mid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_ranklist::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_ranklist::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_ranklist::GetClassData() const { return &_class_data_; }


void db_ranklist::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_ranklist*>(&to_msg);
  auto& from = static_cast<const db_ranklist&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_ranklist)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mitems_.MergeFrom(from._impl_.mitems_);
  if (from._internal_has_mid()) {
    _this->_internal_set_mid(from._internal_mid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_ranklist::CopyFrom(const db_ranklist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_ranklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ranklist::IsInitialized() const {
  return true;
}

void db_ranklist::InternalSwap(db_ranklist* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mitems_.InternalSwap(&other->_impl_.mitems_);
  swap(_impl_.mid_, other->_impl_.mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_ranklist::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[20]);
}

// ===================================================================

class db_activitytimes::_Internal {
 public:
  using HasBits = decltype(std::declval<db_activitytimes>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mbeg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mduration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mstart(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

db_activitytimes::db_activitytimes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_activitytimes)
}
db_activitytimes::db_activitytimes(const db_activitytimes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_activitytimes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.mbeg_){}
    , decltype(_impl_.mduration_){}
    , decltype(_impl_.mstart_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mid_, &from._impl_.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstart_) -
    reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mstart_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_activitytimes)
}

inline void db_activitytimes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mid_){int64_t{0}}
    , decltype(_impl_.mbeg_){0}
    , decltype(_impl_.mduration_){0}
    , decltype(_impl_.mstart_){false}
  };
}

db_activitytimes::~db_activitytimes() {
  // @@protoc_insertion_point(destructor:pbdb.db_activitytimes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void db_activitytimes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void db_activitytimes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_activitytimes::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_activitytimes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstart_) -
        reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mstart_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_activitytimes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mbeg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mbeg(&has_bits);
          _impl_.mbeg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mduration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mduration(&has_bits);
          _impl_.mduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mstart = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mstart(&has_bits);
          _impl_.mstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_activitytimes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_activitytimes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // optional int32 mbeg = 2;
  if (_internal_has_mbeg()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mbeg(), target);
  }

  // optional int32 mduration = 3;
  if (_internal_has_mduration()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mduration(), target);
  }

  // optional bool mstart = 4;
  if (_internal_has_mstart()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_mstart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_activitytimes)
  return target;
}

size_t db_activitytimes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_activitytimes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
    }

    // optional int32 mbeg = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mbeg());
    }

    // optional int32 mduration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mduration());
    }

    // optional bool mstart = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_activitytimes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_activitytimes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_activitytimes::GetClassData() const { return &_class_data_; }


void db_activitytimes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_activitytimes*>(&to_msg);
  auto& from = static_cast<const db_activitytimes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_activitytimes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mbeg_ = from._impl_.mbeg_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mduration_ = from._impl_.mduration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mstart_ = from._impl_.mstart_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_activitytimes::CopyFrom(const db_activitytimes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_activitytimes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_activitytimes::IsInitialized() const {
  return true;
}

void db_activitytimes::InternalSwap(db_activitytimes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_activitytimes, _impl_.mstart_)
      + sizeof(db_activitytimes::_impl_.mstart_)
      - PROTOBUF_FIELD_OFFSET(db_activitytimes, _impl_.mid_)>(
          reinterpret_cast<char*>(&_impl_.mid_),
          reinterpret_cast<char*>(&other->_impl_.mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_activitytimes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[21]);
}

// ===================================================================

activity_task_MopenEntry_DoNotUse::activity_task_MopenEntry_DoNotUse() {}
activity_task_MopenEntry_DoNotUse::activity_task_MopenEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void activity_task_MopenEntry_DoNotUse::MergeFrom(const activity_task_MopenEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata activity_task_MopenEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[22]);
}

// ===================================================================

activity_task_McloseEntry_DoNotUse::activity_task_McloseEntry_DoNotUse() {}
activity_task_McloseEntry_DoNotUse::activity_task_McloseEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void activity_task_McloseEntry_DoNotUse::MergeFrom(const activity_task_McloseEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata activity_task_McloseEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[23]);
}

// ===================================================================

class activity_task::_Internal {
 public:
};

activity_task::activity_task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &activity_task::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbdb.activity_task)
}
activity_task::activity_task(const activity_task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  activity_task* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.mopen_)*/{}
    , /*decltype(_impl_.mclose_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mopen_.MergeFrom(from._impl_.mopen_);
  _this->_impl_.mclose_.MergeFrom(from._impl_.mclose_);
  // @@protoc_insertion_point(copy_constructor:pbdb.activity_task)
}

inline void activity_task::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.mopen_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.mclose_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

activity_task::~activity_task() {
  // @@protoc_insertion_point(destructor:pbdb.activity_task)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void activity_task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mopen_.Destruct();
  _impl_.mopen_.~MapField();
  _impl_.mclose_.Destruct();
  _impl_.mclose_.~MapField();
}

void activity_task::ArenaDtor(void* object) {
  activity_task* _this = reinterpret_cast< activity_task* >(object);
  _this->_impl_.mopen_.Destruct();
  _this->_impl_.mclose_.Destruct();
}
void activity_task::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void activity_task::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.activity_task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mopen_.Clear();
  _impl_.mclose_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* activity_task::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, bool> mopen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mopen_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, bool> mclose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mclose_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* activity_task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.activity_task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, bool> mopen = 1;
  if (!this->_internal_mopen().empty()) {
    using MapType = ::_pb::Map<int32_t, bool>;
    using WireHelper = activity_task_MopenEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mopen();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, bool> mclose = 2;
  if (!this->_internal_mclose().empty()) {
    using MapType = ::_pb::Map<int32_t, bool>;
    using WireHelper = activity_task_McloseEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mclose();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.activity_task)
  return target;
}

size_t activity_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.activity_task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bool> mopen = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mopen_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_iterator
      it = this->_internal_mopen().begin();
      it != this->_internal_mopen().end(); ++it) {
    total_size += activity_task_MopenEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, bool> mclose = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mclose_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_iterator
      it = this->_internal_mclose().begin();
      it != this->_internal_mclose().end(); ++it) {
    total_size += activity_task_McloseEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData activity_task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    activity_task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*activity_task::GetClassData() const { return &_class_data_; }


void activity_task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<activity_task*>(&to_msg);
  auto& from = static_cast<const activity_task&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.activity_task)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mopen_.MergeFrom(from._impl_.mopen_);
  _this->_impl_.mclose_.MergeFrom(from._impl_.mclose_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void activity_task::CopyFrom(const activity_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.activity_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_task::IsInitialized() const {
  return true;
}

void activity_task::InternalSwap(activity_task* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mopen_.InternalSwap(&other->_impl_.mopen_);
  _impl_.mclose_.InternalSwap(&other->_impl_.mclose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata activity_task::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[24]);
}

// ===================================================================

activity_drawcompliance_MrewardEntry_DoNotUse::activity_drawcompliance_MrewardEntry_DoNotUse() {}
activity_drawcompliance_MrewardEntry_DoNotUse::activity_drawcompliance_MrewardEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void activity_drawcompliance_MrewardEntry_DoNotUse::MergeFrom(const activity_drawcompliance_MrewardEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata activity_drawcompliance_MrewardEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[25]);
}

// ===================================================================

class activity_drawcompliance::_Internal {
 public:
  using HasBits = decltype(std::declval<activity_drawcompliance>()._impl_._has_bits_);
  static void set_has_mcount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

activity_drawcompliance::activity_drawcompliance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &activity_drawcompliance::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbdb.activity_drawcompliance)
}
activity_drawcompliance::activity_drawcompliance(const activity_drawcompliance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  activity_drawcompliance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mreward_)*/{}
    , decltype(_impl_.mcount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mreward_.MergeFrom(from._impl_.mreward_);
  _this->_impl_.mcount_ = from._impl_.mcount_;
  // @@protoc_insertion_point(copy_constructor:pbdb.activity_drawcompliance)
}

inline void activity_drawcompliance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mreward_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.mcount_){0}
  };
}

activity_drawcompliance::~activity_drawcompliance() {
  // @@protoc_insertion_point(destructor:pbdb.activity_drawcompliance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void activity_drawcompliance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mreward_.Destruct();
  _impl_.mreward_.~MapField();
}

void activity_drawcompliance::ArenaDtor(void* object) {
  activity_drawcompliance* _this = reinterpret_cast< activity_drawcompliance* >(object);
  _this->_impl_.mreward_.Destruct();
}
void activity_drawcompliance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void activity_drawcompliance::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.activity_drawcompliance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mreward_.Clear();
  _impl_.mcount_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* activity_drawcompliance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mcount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mcount(&has_bits);
          _impl_.mcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, bool> mreward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mreward_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* activity_drawcompliance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.activity_drawcompliance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mcount = 1;
  if (_internal_has_mcount()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mcount(), target);
  }

  // map<int32, bool> mreward = 2;
  if (!this->_internal_mreward().empty()) {
    using MapType = ::_pb::Map<int32_t, bool>;
    using WireHelper = activity_drawcompliance_MrewardEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mreward();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.activity_drawcompliance)
  return target;
}

size_t activity_drawcompliance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.activity_drawcompliance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bool> mreward = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mreward_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_iterator
      it = this->_internal_mreward().begin();
      it != this->_internal_mreward().end(); ++it) {
    total_size += activity_drawcompliance_MrewardEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional int32 mcount = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData activity_drawcompliance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    activity_drawcompliance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*activity_drawcompliance::GetClassData() const { return &_class_data_; }


void activity_drawcompliance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<activity_drawcompliance*>(&to_msg);
  auto& from = static_cast<const activity_drawcompliance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.activity_drawcompliance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mreward_.MergeFrom(from._impl_.mreward_);
  if (from._internal_has_mcount()) {
    _this->_internal_set_mcount(from._internal_mcount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void activity_drawcompliance::CopyFrom(const activity_drawcompliance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.activity_drawcompliance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool activity_drawcompliance::IsInitialized() const {
  return true;
}

void activity_drawcompliance::InternalSwap(activity_drawcompliance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mreward_.InternalSwap(&other->_impl_.mreward_);
  swap(_impl_.mcount_, other->_impl_.mcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata activity_drawcompliance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[26]);
}

// ===================================================================

db_activity_MtaskEntry_DoNotUse::db_activity_MtaskEntry_DoNotUse() {}
db_activity_MtaskEntry_DoNotUse::db_activity_MtaskEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_activity_MtaskEntry_DoNotUse::MergeFrom(const db_activity_MtaskEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_activity_MtaskEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[27]);
}

// ===================================================================

db_activity_MdrawcomplianceEntry_DoNotUse::db_activity_MdrawcomplianceEntry_DoNotUse() {}
db_activity_MdrawcomplianceEntry_DoNotUse::db_activity_MdrawcomplianceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_activity_MdrawcomplianceEntry_DoNotUse::MergeFrom(const db_activity_MdrawcomplianceEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_activity_MdrawcomplianceEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[28]);
}

// ===================================================================

class db_activity::_Internal {
 public:
  using HasBits = decltype(std::declval<db_activity>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_activity::db_activity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &db_activity::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbdb.db_activity)
}
db_activity::db_activity(const db_activity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_activity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mtask_)*/{}
    , /*decltype(_impl_.mdrawcompliance_)*/{}
    , decltype(_impl_.mid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mtask_.MergeFrom(from._impl_.mtask_);
  _this->_impl_.mdrawcompliance_.MergeFrom(from._impl_.mdrawcompliance_);
  _this->_impl_.mid_ = from._impl_.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_activity)
}

inline void db_activity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mtask_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.mdrawcompliance_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.mid_){int64_t{0}}
  };
}

db_activity::~db_activity() {
  // @@protoc_insertion_point(destructor:pbdb.db_activity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void db_activity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mtask_.Destruct();
  _impl_.mtask_.~MapField();
  _impl_.mdrawcompliance_.Destruct();
  _impl_.mdrawcompliance_.~MapField();
}

void db_activity::ArenaDtor(void* object) {
  db_activity* _this = reinterpret_cast< db_activity* >(object);
  _this->_impl_.mtask_.Destruct();
  _this->_impl_.mdrawcompliance_.Destruct();
}
void db_activity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_activity::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_activity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mtask_.Clear();
  _impl_.mdrawcompliance_.Clear();
  _impl_.mid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_activity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int64, .pbdb.activity_task> mtask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mtask_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int64, .pbdb.activity_drawcompliance> mdrawcompliance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mdrawcompliance_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_activity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_activity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // map<int64, .pbdb.activity_task> mtask = 2;
  if (!this->_internal_mtask().empty()) {
    using MapType = ::_pb::Map<int64_t, ::pbdb::activity_task>;
    using WireHelper = db_activity_MtaskEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mtask();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int64, .pbdb.activity_drawcompliance> mdrawcompliance = 3;
  if (!this->_internal_mdrawcompliance().empty()) {
    using MapType = ::_pb::Map<int64_t, ::pbdb::activity_drawcompliance>;
    using WireHelper = db_activity_MdrawcomplianceEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mdrawcompliance();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_activity)
  return target;
}

size_t db_activity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_activity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .pbdb.activity_task> mtask = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mtask_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::pbdb::activity_task >::const_iterator
      it = this->_internal_mtask().begin();
      it != this->_internal_mtask().end(); ++it) {
    total_size += db_activity_MtaskEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, .pbdb.activity_drawcompliance> mdrawcompliance = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mdrawcompliance_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::pbdb::activity_drawcompliance >::const_iterator
      it = this->_internal_mdrawcompliance().begin();
      it != this->_internal_mdrawcompliance().end(); ++it) {
    total_size += db_activity_MdrawcomplianceEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional int64 mid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_activity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_activity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_activity::GetClassData() const { return &_class_data_; }


void db_activity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_activity*>(&to_msg);
  auto& from = static_cast<const db_activity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_activity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mtask_.MergeFrom(from._impl_.mtask_);
  _this->_impl_.mdrawcompliance_.MergeFrom(from._impl_.mdrawcompliance_);
  if (from._internal_has_mid()) {
    _this->_internal_set_mid(from._internal_mid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_activity::CopyFrom(const db_activity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_activity::IsInitialized() const {
  return true;
}

void db_activity::InternalSwap(db_activity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mtask_.InternalSwap(&other->_impl_.mtask_);
  _impl_.mdrawcompliance_.InternalSwap(&other->_impl_.mdrawcompliance_);
  swap(_impl_.mid_, other->_impl_.mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_activity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[29]);
}

// ===================================================================

class db_task_data_schedule::_Internal {
 public:
  using HasBits = decltype(std::declval<db_task_data_schedule>()._impl_._has_bits_);
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msumint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

db_task_data_schedule::db_task_data_schedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_task.data_schedule)
}
db_task_data_schedule::db_task_data_schedule(const db_task_data_schedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_task_data_schedule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mtype_){}
    , decltype(_impl_.mvalue_){}
    , decltype(_impl_.msumint_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mtype_, &from._impl_.mtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msumint_) -
    reinterpret_cast<char*>(&_impl_.mtype_)) + sizeof(_impl_.msumint_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_task.data_schedule)
}

inline void db_task_data_schedule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mtype_){0}
    , decltype(_impl_.mvalue_){0}
    , decltype(_impl_.msumint_){0}
  };
}

db_task_data_schedule::~db_task_data_schedule() {
  // @@protoc_insertion_point(destructor:pbdb.db_task.data_schedule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void db_task_data_schedule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void db_task_data_schedule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_task_data_schedule::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_task.data_schedule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.mtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.msumint_) -
        reinterpret_cast<char*>(&_impl_.mtype_)) + sizeof(_impl_.msumint_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_task_data_schedule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mtype(&has_bits);
          _impl_.mtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mvalue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mvalue(&has_bits);
          _impl_.mvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 msumint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_msumint(&has_bits);
          _impl_.msumint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_task_data_schedule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_task.data_schedule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mtype = 1;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtype(), target);
  }

  // optional int32 mvalue = 2;
  if (_internal_has_mvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mvalue(), target);
  }

  // optional int32 msumint = 3;
  if (_internal_has_msumint()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_msumint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_task.data_schedule)
  return target;
}

size_t db_task_data_schedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_task.data_schedule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 mtype = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mtype());
    }

    // optional int32 mvalue = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mvalue());
    }

    // optional int32 msumint = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msumint());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_task_data_schedule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_task_data_schedule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_task_data_schedule::GetClassData() const { return &_class_data_; }


void db_task_data_schedule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_task_data_schedule*>(&to_msg);
  auto& from = static_cast<const db_task_data_schedule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_task.data_schedule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mtype_ = from._impl_.mtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mvalue_ = from._impl_.mvalue_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.msumint_ = from._impl_.msumint_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_task_data_schedule::CopyFrom(const db_task_data_schedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_task.data_schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_data_schedule::IsInitialized() const {
  return true;
}

void db_task_data_schedule::InternalSwap(db_task_data_schedule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_task_data_schedule, _impl_.msumint_)
      + sizeof(db_task_data_schedule::_impl_.msumint_)
      - PROTOBUF_FIELD_OFFSET(db_task_data_schedule, _impl_.mtype_)>(
          reinterpret_cast<char*>(&_impl_.mtype_),
          reinterpret_cast<char*>(&other->_impl_.mtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_task_data_schedule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[30]);
}

// ===================================================================

class db_task_data::_Internal {
 public:
  using HasBits = decltype(std::declval<db_task_data>()._impl_._has_bits_);
  static void set_has_mtaskid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mreceiveutc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mfinshutc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mreceive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

db_task_data::db_task_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_task.data)
}
db_task_data::db_task_data(const db_task_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_task_data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mschedules_){from._impl_.mschedules_}
    , decltype(_impl_.mtaskid_){}
    , decltype(_impl_.mreceiveutc_){}
    , decltype(_impl_.mfinshutc_){}
    , decltype(_impl_.mreceive_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mtaskid_, &from._impl_.mtaskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mreceive_) -
    reinterpret_cast<char*>(&_impl_.mtaskid_)) + sizeof(_impl_.mreceive_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_task.data)
}

inline void db_task_data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mschedules_){arena}
    , decltype(_impl_.mtaskid_){0}
    , decltype(_impl_.mreceiveutc_){0}
    , decltype(_impl_.mfinshutc_){0}
    , decltype(_impl_.mreceive_){false}
  };
}

db_task_data::~db_task_data() {
  // @@protoc_insertion_point(destructor:pbdb.db_task.data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void db_task_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mschedules_.~RepeatedPtrField();
}

void db_task_data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_task_data::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_task.data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mschedules_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.mtaskid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mreceive_) -
        reinterpret_cast<char*>(&_impl_.mtaskid_)) + sizeof(_impl_.mreceive_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_task_data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mtaskid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mtaskid(&has_bits);
          _impl_.mtaskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mreceiveutc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mreceiveutc(&has_bits);
          _impl_.mreceiveutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mfinshutc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mfinshutc(&has_bits);
          _impl_.mfinshutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbdb.db_task.data_schedule mschedules = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mschedules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool mreceive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mreceive(&has_bits);
          _impl_.mreceive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_task_data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_task.data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mtaskid = 1;
  if (_internal_has_mtaskid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtaskid(), target);
  }

  // optional int32 mreceiveutc = 2;
  if (_internal_has_mreceiveutc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mreceiveutc(), target);
  }

  // optional int32 mfinshutc = 3;
  if (_internal_has_mfinshutc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mfinshutc(), target);
  }

  // repeated .pbdb.db_task.data_schedule mschedules = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mschedules_size()); i < n; i++) {
    const auto& repfield = this->_internal_mschedules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool mreceive = 5;
  if (_internal_has_mreceive()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_mreceive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_task.data)
  return target;
}

size_t db_task_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_task.data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_task.data_schedule mschedules = 4;
  total_size += 1UL * this->_internal_mschedules_size();
  for (const auto& msg : this->_impl_.mschedules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 mtaskid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mtaskid());
    }

    // optional int32 mreceiveutc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mreceiveutc());
    }

    // optional int32 mfinshutc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mfinshutc());
    }

    // optional bool mreceive = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_task_data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_task_data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_task_data::GetClassData() const { return &_class_data_; }


void db_task_data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_task_data*>(&to_msg);
  auto& from = static_cast<const db_task_data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_task.data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mschedules_.MergeFrom(from._impl_.mschedules_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mtaskid_ = from._impl_.mtaskid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mreceiveutc_ = from._impl_.mreceiveutc_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mfinshutc_ = from._impl_.mfinshutc_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mreceive_ = from._impl_.mreceive_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_task_data::CopyFrom(const db_task_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_task.data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_data::IsInitialized() const {
  return true;
}

void db_task_data::InternalSwap(db_task_data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mschedules_.InternalSwap(&other->_impl_.mschedules_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_task_data, _impl_.mreceive_)
      + sizeof(db_task_data::_impl_.mreceive_)
      - PROTOBUF_FIELD_OFFSET(db_task_data, _impl_.mtaskid_)>(
          reinterpret_cast<char*>(&_impl_.mtaskid_),
          reinterpret_cast<char*>(&other->_impl_.mtaskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_task_data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[31]);
}

// ===================================================================

class db_task_complete::_Internal {
 public:
};

db_task_complete::db_task_complete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_task.complete)
}
db_task_complete::db_task_complete(const db_task_complete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_task_complete* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mhistory_){from._impl_.mhistory_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbdb.db_task.complete)
}

inline void db_task_complete::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mhistory_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

db_task_complete::~db_task_complete() {
  // @@protoc_insertion_point(destructor:pbdb.db_task.complete)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void db_task_complete::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mhistory_.~RepeatedPtrField();
}

void db_task_complete::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_task_complete::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_task.complete)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mhistory_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_task_complete::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pbdb.db_task.data mhistory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mhistory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_task_complete::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_task.complete)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbdb.db_task.data mhistory = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mhistory_size()); i < n; i++) {
    const auto& repfield = this->_internal_mhistory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_task.complete)
  return target;
}

size_t db_task_complete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_task.complete)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_task.data mhistory = 1;
  total_size += 1UL * this->_internal_mhistory_size();
  for (const auto& msg : this->_impl_.mhistory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_task_complete::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_task_complete::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_task_complete::GetClassData() const { return &_class_data_; }


void db_task_complete::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_task_complete*>(&to_msg);
  auto& from = static_cast<const db_task_complete&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_task.complete)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mhistory_.MergeFrom(from._impl_.mhistory_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_task_complete::CopyFrom(const db_task_complete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_task.complete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_complete::IsInitialized() const {
  return true;
}

void db_task_complete::InternalSwap(db_task_complete* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mhistory_.InternalSwap(&other->_impl_.mhistory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_task_complete::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[32]);
}

// ===================================================================

db_task_MrundatasEntry_DoNotUse::db_task_MrundatasEntry_DoNotUse() {}
db_task_MrundatasEntry_DoNotUse::db_task_MrundatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_task_MrundatasEntry_DoNotUse::MergeFrom(const db_task_MrundatasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_task_MrundatasEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[33]);
}

// ===================================================================

db_task_McompleteddatasEntry_DoNotUse::db_task_McompleteddatasEntry_DoNotUse() {}
db_task_McompleteddatasEntry_DoNotUse::db_task_McompleteddatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_task_McompleteddatasEntry_DoNotUse::MergeFrom(const db_task_McompleteddatasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_task_McompleteddatasEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[34]);
}

// ===================================================================

class db_task::_Internal {
 public:
  using HasBits = decltype(std::declval<db_task>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_task::db_task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &db_task::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbdb.db_task)
}
db_task::db_task(const db_task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_task* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mrundatas_)*/{}
    , /*decltype(_impl_.mcompleteddatas_)*/{}
    , decltype(_impl_.mid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mrundatas_.MergeFrom(from._impl_.mrundatas_);
  _this->_impl_.mcompleteddatas_.MergeFrom(from._impl_.mcompleteddatas_);
  _this->_impl_.mid_ = from._impl_.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_task)
}

inline void db_task::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mrundatas_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.mcompleteddatas_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.mid_){int64_t{0}}
  };
}

db_task::~db_task() {
  // @@protoc_insertion_point(destructor:pbdb.db_task)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void db_task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mrundatas_.Destruct();
  _impl_.mrundatas_.~MapField();
  _impl_.mcompleteddatas_.Destruct();
  _impl_.mcompleteddatas_.~MapField();
}

void db_task::ArenaDtor(void* object) {
  db_task* _this = reinterpret_cast< db_task* >(object);
  _this->_impl_.mrundatas_.Destruct();
  _this->_impl_.mcompleteddatas_.Destruct();
}
void db_task::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_task::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mrundatas_.Clear();
  _impl_.mcompleteddatas_.Clear();
  _impl_.mid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_task::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .pbdb.db_task.data> mrundatas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mrundatas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .pbdb.db_task.complete> mcompleteddatas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mcompleteddatas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // map<int32, .pbdb.db_task.data> mrundatas = 2;
  if (!this->_internal_mrundatas().empty()) {
    using MapType = ::_pb::Map<int32_t, ::pbdb::db_task_data>;
    using WireHelper = db_task_MrundatasEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mrundatas();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .pbdb.db_task.complete> mcompleteddatas = 3;
  if (!this->_internal_mcompleteddatas().empty()) {
    using MapType = ::_pb::Map<int32_t, ::pbdb::db_task_complete>;
    using WireHelper = db_task_McompleteddatasEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mcompleteddatas();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_task)
  return target;
}

size_t db_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.db_task.data> mrundatas = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mrundatas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::pbdb::db_task_data >::const_iterator
      it = this->_internal_mrundatas().begin();
      it != this->_internal_mrundatas().end(); ++it) {
    total_size += db_task_MrundatasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .pbdb.db_task.complete> mcompleteddatas = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mcompleteddatas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::pbdb::db_task_complete >::const_iterator
      it = this->_internal_mcompleteddatas().begin();
      it != this->_internal_mcompleteddatas().end(); ++it) {
    total_size += db_task_McompleteddatasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional int64 mid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_task::GetClassData() const { return &_class_data_; }


void db_task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_task*>(&to_msg);
  auto& from = static_cast<const db_task&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_task)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mrundatas_.MergeFrom(from._impl_.mrundatas_);
  _this->_impl_.mcompleteddatas_.MergeFrom(from._impl_.mcompleteddatas_);
  if (from._internal_has_mid()) {
    _this->_internal_set_mid(from._internal_mid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_task::CopyFrom(const db_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task::IsInitialized() const {
  return true;
}

void db_task::InternalSwap(db_task* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mrundatas_.InternalSwap(&other->_impl_.mrundatas_);
  _impl_.mcompleteddatas_.InternalSwap(&other->_impl_.mcompleteddatas_);
  swap(_impl_.mid_, other->_impl_.mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_task::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[35]);
}

// ===================================================================

class db_familyer::_Internal {
 public:
  using HasBits = decltype(std::declval<db_familyer>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mjoinutc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mlastsignutc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mlastleaveutc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mposition(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

db_familyer::db_familyer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_familyer)
}
db_familyer::db_familyer(const db_familyer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_familyer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.mjoinutc_){}
    , decltype(_impl_.mlastsignutc_){}
    , decltype(_impl_.mlastleaveutc_){}
    , decltype(_impl_.mposition_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mid_, &from._impl_.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mposition_) -
    reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mposition_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_familyer)
}

inline void db_familyer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mid_){int64_t{0}}
    , decltype(_impl_.mjoinutc_){0}
    , decltype(_impl_.mlastsignutc_){0}
    , decltype(_impl_.mlastleaveutc_){0}
    , decltype(_impl_.mposition_){0}
  };
}

db_familyer::~db_familyer() {
  // @@protoc_insertion_point(destructor:pbdb.db_familyer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void db_familyer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void db_familyer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_familyer::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_familyer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mposition_) -
        reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mposition_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_familyer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mjoinutc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mjoinutc(&has_bits);
          _impl_.mjoinutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mlastsignutc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mlastsignutc(&has_bits);
          _impl_.mlastsignutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mlastleaveutc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mlastleaveutc(&has_bits);
          _impl_.mlastleaveutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbdb.db_familyer.eposition mposition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mposition(static_cast<::pbdb::db_familyer_eposition>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_familyer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_familyer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // optional int32 mjoinutc = 2;
  if (_internal_has_mjoinutc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mjoinutc(), target);
  }

  // optional int32 mlastsignutc = 3;
  if (_internal_has_mlastsignutc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mlastsignutc(), target);
  }

  // optional int32 mlastleaveutc = 4;
  if (_internal_has_mlastleaveutc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mlastleaveutc(), target);
  }

  // optional .pbdb.db_familyer.eposition mposition = 5;
  if (_internal_has_mposition()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mposition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_familyer)
  return target;
}

size_t db_familyer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_familyer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
    }

    // optional int32 mjoinutc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mjoinutc());
    }

    // optional int32 mlastsignutc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mlastsignutc());
    }

    // optional int32 mlastleaveutc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mlastleaveutc());
    }

    // optional .pbdb.db_familyer.eposition mposition = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mposition());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_familyer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_familyer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_familyer::GetClassData() const { return &_class_data_; }


void db_familyer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_familyer*>(&to_msg);
  auto& from = static_cast<const db_familyer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_familyer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mjoinutc_ = from._impl_.mjoinutc_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mlastsignutc_ = from._impl_.mlastsignutc_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mlastleaveutc_ = from._impl_.mlastleaveutc_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.mposition_ = from._impl_.mposition_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_familyer::CopyFrom(const db_familyer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_familyer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_familyer::IsInitialized() const {
  return true;
}

void db_familyer::InternalSwap(db_familyer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_familyer, _impl_.mposition_)
      + sizeof(db_familyer::_impl_.mposition_)
      - PROTOBUF_FIELD_OFFSET(db_familyer, _impl_.mid_)>(
          reinterpret_cast<char*>(&_impl_.mid_),
          reinterpret_cast<char*>(&other->_impl_.mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_familyer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[36]);
}

// ===================================================================

class db_family::_Internal {
 public:
  using HasBits = decltype(std::declval<db_family>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mcreateutc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mleader(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mlv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mexp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

db_family::db_family(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_family)
}
db_family::db_family(const db_family& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_family* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmember_){from._impl_.mmember_}
    , /*decltype(_impl_._mmember_cached_byte_size_)*/{0}
    , decltype(_impl_.mapplylist_){from._impl_.mapplylist_}
    , /*decltype(_impl_._mapplylist_cached_byte_size_)*/{0}
    , decltype(_impl_.mname_){}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.mcreateutc_){}
    , decltype(_impl_.mlv_){}
    , decltype(_impl_.mleader_){}
    , decltype(_impl_.mexp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mname()) {
    _this->_impl_.mname_.Set(from._internal_mname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mid_, &from._impl_.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mexp_) -
    reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mexp_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_family)
}

inline void db_family::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmember_){arena}
    , /*decltype(_impl_._mmember_cached_byte_size_)*/{0}
    , decltype(_impl_.mapplylist_){arena}
    , /*decltype(_impl_._mapplylist_cached_byte_size_)*/{0}
    , decltype(_impl_.mname_){}
    , decltype(_impl_.mid_){int64_t{0}}
    , decltype(_impl_.mcreateutc_){0}
    , decltype(_impl_.mlv_){0}
    , decltype(_impl_.mleader_){int64_t{0}}
    , decltype(_impl_.mexp_){0}
  };
  _impl_.mname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

db_family::~db_family() {
  // @@protoc_insertion_point(destructor:pbdb.db_family)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void db_family::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mmember_.~RepeatedField();
  _impl_.mapplylist_.~RepeatedField();
  _impl_.mname_.Destroy();
}

void db_family::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_family::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_family)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mmember_.Clear();
  _impl_.mapplylist_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mname_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mexp_) -
        reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mexp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_family::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mcreateutc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mcreateutc(&has_bits);
          _impl_.mcreateutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbdb.db_family.mname"));
        } else
          goto handle_unusual;
        continue;
      // optional int64 mleader = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mleader(&has_bits);
          _impl_.mleader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mlv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mlv(&has_bits);
          _impl_.mlv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mexp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_mexp(&has_bits);
          _impl_.mexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 mmember = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_mmember(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_mmember(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 mapplylist = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_mapplylist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_mapplylist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_family::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_family)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // optional int32 mcreateutc = 2;
  if (_internal_has_mcreateutc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mcreateutc(), target);
  }

  // optional string mname = 3;
  if (_internal_has_mname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mname().data(), static_cast<int>(this->_internal_mname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_family.mname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mname(), target);
  }

  // optional int64 mleader = 4;
  if (_internal_has_mleader()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_mleader(), target);
  }

  // optional int32 mlv = 5;
  if (_internal_has_mlv()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mlv(), target);
  }

  // optional int32 mexp = 6;
  if (_internal_has_mexp()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_mexp(), target);
  }

  // repeated int64 mmember = 7;
  {
    int byte_size = _impl_._mmember_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_mmember(), byte_size, target);
    }
  }

  // repeated int64 mapplylist = 8;
  {
    int byte_size = _impl_._mapplylist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_mapplylist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_family)
  return target;
}

size_t db_family::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_family)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 mmember = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.mmember_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._mmember_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 mapplylist = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.mapplylist_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._mapplylist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string mname = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mname());
    }

    // optional int64 mid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
    }

    // optional int32 mcreateutc = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mcreateutc());
    }

    // optional int32 mlv = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mlv());
    }

    // optional int64 mleader = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mleader());
    }

    // optional int32 mexp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mexp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_family::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_family::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_family::GetClassData() const { return &_class_data_; }


void db_family::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_family*>(&to_msg);
  auto& from = static_cast<const db_family&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_family)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mmember_.MergeFrom(from._impl_.mmember_);
  _this->_impl_.mapplylist_.MergeFrom(from._impl_.mapplylist_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mname(from._internal_mname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mcreateutc_ = from._impl_.mcreateutc_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mlv_ = from._impl_.mlv_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.mleader_ = from._impl_.mleader_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.mexp_ = from._impl_.mexp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_family::CopyFrom(const db_family& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_family)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_family::IsInitialized() const {
  return true;
}

void db_family::InternalSwap(db_family* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mmember_.InternalSwap(&other->_impl_.mmember_);
  _impl_.mapplylist_.InternalSwap(&other->_impl_.mapplylist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mname_, lhs_arena,
      &other->_impl_.mname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_family, _impl_.mexp_)
      + sizeof(db_family::_impl_.mexp_)
      - PROTOBUF_FIELD_OFFSET(db_family, _impl_.mid_)>(
          reinterpret_cast<char*>(&_impl_.mid_),
          reinterpret_cast<char*>(&other->_impl_.mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_family::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[37]);
}

// ===================================================================

class db_friends::_Internal {
 public:
  using HasBits = decltype(std::declval<db_friends>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_friends::db_friends(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_friends)
}
db_friends::db_friends(const db_friends& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_friends* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfriends_){from._impl_.mfriends_}
    , /*decltype(_impl_._mfriends_cached_byte_size_)*/{0}
    , decltype(_impl_.mapplyfriends_){from._impl_.mapplyfriends_}
    , /*decltype(_impl_._mapplyfriends_cached_byte_size_)*/{0}
    , decltype(_impl_.mid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mid_ = from._impl_.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_friends)
}

inline void db_friends::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfriends_){arena}
    , /*decltype(_impl_._mfriends_cached_byte_size_)*/{0}
    , decltype(_impl_.mapplyfriends_){arena}
    , /*decltype(_impl_._mapplyfriends_cached_byte_size_)*/{0}
    , decltype(_impl_.mid_){int64_t{0}}
  };
}

db_friends::~db_friends() {
  // @@protoc_insertion_point(destructor:pbdb.db_friends)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void db_friends::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mfriends_.~RepeatedField();
  _impl_.mapplyfriends_.~RepeatedField();
}

void db_friends::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_friends::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_friends)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mfriends_.Clear();
  _impl_.mapplyfriends_.Clear();
  _impl_.mid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_friends::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 mfriends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_mfriends(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_mfriends(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 mapplyfriends = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_mapplyfriends(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_mapplyfriends(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_friends::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_friends)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // repeated int64 mfriends = 2;
  {
    int byte_size = _impl_._mfriends_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_mfriends(), byte_size, target);
    }
  }

  // repeated int64 mapplyfriends = 3;
  {
    int byte_size = _impl_._mapplyfriends_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_mapplyfriends(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_friends)
  return target;
}

size_t db_friends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_friends)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 mfriends = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.mfriends_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._mfriends_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 mapplyfriends = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.mapplyfriends_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._mapplyfriends_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional int64 mid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_friends::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_friends::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_friends::GetClassData() const { return &_class_data_; }


void db_friends::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_friends*>(&to_msg);
  auto& from = static_cast<const db_friends&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_friends)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mfriends_.MergeFrom(from._impl_.mfriends_);
  _this->_impl_.mapplyfriends_.MergeFrom(from._impl_.mapplyfriends_);
  if (from._internal_has_mid()) {
    _this->_internal_set_mid(from._internal_mid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_friends::CopyFrom(const db_friends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_friends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_friends::IsInitialized() const {
  return true;
}

void db_friends::InternalSwap(db_friends* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mfriends_.InternalSwap(&other->_impl_.mfriends_);
  _impl_.mapplyfriends_.InternalSwap(&other->_impl_.mapplyfriends_);
  swap(_impl_.mid_, other->_impl_.mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_friends::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[38]);
}

// ===================================================================

class dbcross_test::_Internal {
 public:
  using HasBits = decltype(std::declval<dbcross_test>()._impl_._has_bits_);
  static void set_has_mname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

dbcross_test::dbcross_test(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.dbcross_test)
}
dbcross_test::dbcross_test(const dbcross_test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  dbcross_test* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mvalue_){from._impl_.mvalue_}
    , /*decltype(_impl_._mvalue_cached_byte_size_)*/{0}
    , decltype(_impl_.mname_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mname()) {
    _this->_impl_.mname_.Set(from._internal_mname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbdb.dbcross_test)
}

inline void dbcross_test::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mvalue_){arena}
    , /*decltype(_impl_._mvalue_cached_byte_size_)*/{0}
    , decltype(_impl_.mname_){}
  };
  _impl_.mname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

dbcross_test::~dbcross_test() {
  // @@protoc_insertion_point(destructor:pbdb.dbcross_test)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void dbcross_test::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mvalue_.~RepeatedField();
  _impl_.mname_.Destroy();
}

void dbcross_test::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void dbcross_test::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.dbcross_test)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mvalue_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mname_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dbcross_test::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string mname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbdb.dbcross_test.mname"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 mvalue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_mvalue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_mvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* dbcross_test::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.dbcross_test)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string mname = 1;
  if (_internal_has_mname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mname().data(), static_cast<int>(this->_internal_mname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.dbcross_test.mname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mname(), target);
  }

  // repeated int64 mvalue = 2;
  {
    int byte_size = _impl_._mvalue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_mvalue(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.dbcross_test)
  return target;
}

size_t dbcross_test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.dbcross_test)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 mvalue = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.mvalue_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._mvalue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional string mname = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData dbcross_test::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    dbcross_test::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*dbcross_test::GetClassData() const { return &_class_data_; }


void dbcross_test::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<dbcross_test*>(&to_msg);
  auto& from = static_cast<const dbcross_test&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.dbcross_test)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mvalue_.MergeFrom(from._impl_.mvalue_);
  if (from._internal_has_mname()) {
    _this->_internal_set_mname(from._internal_mname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void dbcross_test::CopyFrom(const dbcross_test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.dbcross_test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbcross_test::IsInitialized() const {
  return true;
}

void dbcross_test::InternalSwap(dbcross_test* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mvalue_.InternalSwap(&other->_impl_.mvalue_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mname_, lhs_arena,
      &other->_impl_.mname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata dbcross_test::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[39]);
}

// ===================================================================

class db_testlua_luadata::_Internal {
 public:
  using HasBits = decltype(std::declval<db_testlua_luadata>()._impl_._has_bits_);
  static void set_has_mkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mval(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

db_testlua_luadata::db_testlua_luadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_testlua.luadata)
}
db_testlua_luadata::db_testlua_luadata(const db_testlua_luadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_testlua_luadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mkey_){}
    , decltype(_impl_.mval_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mkey()) {
    _this->_impl_.mkey_.Set(from._internal_mkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mval_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mval()) {
    _this->_impl_.mval_.Set(from._internal_mval(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbdb.db_testlua.luadata)
}

inline void db_testlua_luadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mkey_){}
    , decltype(_impl_.mval_){}
  };
  _impl_.mkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mval_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

db_testlua_luadata::~db_testlua_luadata() {
  // @@protoc_insertion_point(destructor:pbdb.db_testlua.luadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void db_testlua_luadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mkey_.Destroy();
  _impl_.mval_.Destroy();
}

void db_testlua_luadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_testlua_luadata::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_testlua.luadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.mkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mval_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_testlua_luadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string mkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbdb.db_testlua.luadata.mkey"));
        } else
          goto handle_unusual;
        continue;
      // optional string mval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mval();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbdb.db_testlua.luadata.mval"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_testlua_luadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_testlua.luadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string mkey = 1;
  if (_internal_has_mkey()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mkey().data(), static_cast<int>(this->_internal_mkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_testlua.luadata.mkey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mkey(), target);
  }

  // optional string mval = 2;
  if (_internal_has_mval()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mval().data(), static_cast<int>(this->_internal_mval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_testlua.luadata.mval");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_testlua.luadata)
  return target;
}

size_t db_testlua_luadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_testlua.luadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string mkey = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mkey());
    }

    // optional string mval = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mval());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_testlua_luadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_testlua_luadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_testlua_luadata::GetClassData() const { return &_class_data_; }


void db_testlua_luadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_testlua_luadata*>(&to_msg);
  auto& from = static_cast<const db_testlua_luadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_testlua.luadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mkey(from._internal_mkey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mval(from._internal_mval());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_testlua_luadata::CopyFrom(const db_testlua_luadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_testlua.luadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_testlua_luadata::IsInitialized() const {
  return true;
}

void db_testlua_luadata::InternalSwap(db_testlua_luadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mkey_, lhs_arena,
      &other->_impl_.mkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mval_, lhs_arena,
      &other->_impl_.mval_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata db_testlua_luadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[40]);
}

// ===================================================================

db_testlua_MdatasEntry_DoNotUse::db_testlua_MdatasEntry_DoNotUse() {}
db_testlua_MdatasEntry_DoNotUse::db_testlua_MdatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_testlua_MdatasEntry_DoNotUse::MergeFrom(const db_testlua_MdatasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_testlua_MdatasEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[41]);
}

// ===================================================================

class db_testlua::_Internal {
 public:
  using HasBits = decltype(std::declval<db_testlua>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_testlua::db_testlua(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &db_testlua::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbdb.db_testlua)
}
db_testlua::db_testlua(const db_testlua& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  db_testlua* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mvalue_){from._impl_.mvalue_}
    , /*decltype(_impl_._mvalue_cached_byte_size_)*/{0}
    , /*decltype(_impl_.mdatas_)*/{}
    , decltype(_impl_.mid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mdatas_.MergeFrom(from._impl_.mdatas_);
  _this->_impl_.mid_ = from._impl_.mid_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_testlua)
}

inline void db_testlua::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mvalue_){arena}
    , /*decltype(_impl_._mvalue_cached_byte_size_)*/{0}
    , /*decltype(_impl_.mdatas_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.mid_){int64_t{0}}
  };
}

db_testlua::~db_testlua() {
  // @@protoc_insertion_point(destructor:pbdb.db_testlua)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void db_testlua::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mvalue_.~RepeatedField();
  _impl_.mdatas_.Destruct();
  _impl_.mdatas_.~MapField();
}

void db_testlua::ArenaDtor(void* object) {
  db_testlua* _this = reinterpret_cast< db_testlua* >(object);
  _this->_impl_.mdatas_.Destruct();
}
void db_testlua::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void db_testlua::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_testlua)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mvalue_.Clear();
  _impl_.mdatas_.Clear();
  _impl_.mid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_testlua::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 mvalue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_mvalue(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_mvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .pbdb.db_testlua.luadata> mdatas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mdatas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* db_testlua::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_testlua)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // repeated int64 mvalue = 2;
  {
    int byte_size = _impl_._mvalue_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_mvalue(), byte_size, target);
    }
  }

  // map<int32, .pbdb.db_testlua.luadata> mdatas = 3;
  if (!this->_internal_mdatas().empty()) {
    using MapType = ::_pb::Map<int32_t, ::pbdb::db_testlua_luadata>;
    using WireHelper = db_testlua_MdatasEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mdatas();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_testlua)
  return target;
}

size_t db_testlua::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_testlua)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 mvalue = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.mvalue_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._mvalue_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int32, .pbdb.db_testlua.luadata> mdatas = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mdatas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::pbdb::db_testlua_luadata >::const_iterator
      it = this->_internal_mdatas().begin();
      it != this->_internal_mdatas().end(); ++it) {
    total_size += db_testlua_MdatasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional int64 mid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData db_testlua::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    db_testlua::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*db_testlua::GetClassData() const { return &_class_data_; }


void db_testlua::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<db_testlua*>(&to_msg);
  auto& from = static_cast<const db_testlua&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_testlua)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mvalue_.MergeFrom(from._impl_.mvalue_);
  _this->_impl_.mdatas_.MergeFrom(from._impl_.mdatas_);
  if (from._internal_has_mid()) {
    _this->_internal_set_mid(from._internal_mid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void db_testlua::CopyFrom(const db_testlua& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_testlua)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_testlua::IsInitialized() const {
  return true;
}

void db_testlua::InternalSwap(db_testlua* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mvalue_.InternalSwap(&other->_impl_.mvalue_);
  _impl_.mdatas_.InternalSwap(&other->_impl_.mdatas_);
  swap(_impl_.mid_, other->_impl_.mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_testlua::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2eproto_getter, &descriptor_table_db_2eproto_once,
      file_level_metadata_db_2eproto[42]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pbdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbdb::db_account*
Arena::CreateMaybeMessage< ::pbdb::db_account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_account >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::brief_activityvalues_MactivityRolelvEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::brief_activityvalues_MactivityRolegoldEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::brief_activityvalues*
Arena::CreateMaybeMessage< ::pbdb::brief_activityvalues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::brief_activityvalues >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_brief*
Arena::CreateMaybeMessage< ::pbdb::db_brief >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_brief >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_role_recharge*
Arena::CreateMaybeMessage< ::pbdb::db_role_recharge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_role_recharge >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_role*
Arena::CreateMaybeMessage< ::pbdb::db_role >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_role >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::item*
Arena::CreateMaybeMessage< ::pbdb::item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::item >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_bag_MitemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbdb::db_bag_MitemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_bag_MitemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_bag*
Arena::CreateMaybeMessage< ::pbdb::db_bag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_bag >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_keyvalue*
Arena::CreateMaybeMessage< ::pbdb::db_keyvalue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_keyvalue >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_rolekeyvalue_MdataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_rolekeyvalue*
Arena::CreateMaybeMessage< ::pbdb::db_rolekeyvalue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_rolekeyvalue >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::mailitem*
Arena::CreateMaybeMessage< ::pbdb::mailitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::mailitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::mail*
Arena::CreateMaybeMessage< ::pbdb::mail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::mail >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_mail_MmailEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbdb::db_mail_MmailEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_mail_MmailEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_mail*
Arena::CreateMaybeMessage< ::pbdb::db_mail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_mail >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_notice*
Arena::CreateMaybeMessage< ::pbdb::db_notice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_notice >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::rankitem*
Arena::CreateMaybeMessage< ::pbdb::rankitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::rankitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_ranklist_MitemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbdb::db_ranklist_MitemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_ranklist_MitemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_ranklist*
Arena::CreateMaybeMessage< ::pbdb::db_ranklist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_ranklist >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_activitytimes*
Arena::CreateMaybeMessage< ::pbdb::db_activitytimes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_activitytimes >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::activity_task_MopenEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbdb::activity_task_MopenEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::activity_task_MopenEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::activity_task_McloseEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbdb::activity_task_McloseEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::activity_task_McloseEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::activity_task*
Arena::CreateMaybeMessage< ::pbdb::activity_task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::activity_task >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::activity_drawcompliance_MrewardEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::activity_drawcompliance*
Arena::CreateMaybeMessage< ::pbdb::activity_drawcompliance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::activity_drawcompliance >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_activity_MtaskEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbdb::db_activity_MtaskEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_activity_MtaskEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_activity_MdrawcomplianceEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_activity*
Arena::CreateMaybeMessage< ::pbdb::db_activity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_activity >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task_data_schedule*
Arena::CreateMaybeMessage< ::pbdb::db_task_data_schedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task_data_schedule >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task_data*
Arena::CreateMaybeMessage< ::pbdb::db_task_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task_data >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task_complete*
Arena::CreateMaybeMessage< ::pbdb::db_task_complete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task_complete >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task_MrundatasEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbdb::db_task_MrundatasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task_MrundatasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task_McompleteddatasEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbdb::db_task_McompleteddatasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task_McompleteddatasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task*
Arena::CreateMaybeMessage< ::pbdb::db_task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_familyer*
Arena::CreateMaybeMessage< ::pbdb::db_familyer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_familyer >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_family*
Arena::CreateMaybeMessage< ::pbdb::db_family >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_family >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_friends*
Arena::CreateMaybeMessage< ::pbdb::db_friends >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_friends >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::dbcross_test*
Arena::CreateMaybeMessage< ::pbdb::dbcross_test >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::dbcross_test >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_testlua_luadata*
Arena::CreateMaybeMessage< ::pbdb::db_testlua_luadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_testlua_luadata >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_testlua_MdatasEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbdb::db_testlua_MdatasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_testlua_MdatasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_testlua*
Arena::CreateMaybeMessage< ::pbdb::db_testlua >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_testlua >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
