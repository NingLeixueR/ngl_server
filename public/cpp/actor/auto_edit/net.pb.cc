// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#include "net.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pbnet {
PROTOBUF_CONSTEXPR PROBUFF_NET_MSG_RESPONSE::PROBUFF_NET_MSG_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PROBUFF_NET_MSG_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MSG_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MSG_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MSG_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MSG_RESPONSEDefaultTypeInternal _PROBUFF_NET_MSG_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_HEARTBEAT::PROBUFF_NET_HEARTBEAT(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_HEARTBEATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_HEARTBEATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_HEARTBEATDefaultTypeInternal() {}
  union {
    PROBUFF_NET_HEARTBEAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_HEARTBEATDefaultTypeInternal _PROBUFF_NET_HEARTBEAT_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_RECHARGE::PROBUFF_NET_RECHARGE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mrechargeid_)*/0} {}
struct PROBUFF_NET_RECHARGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_RECHARGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_RECHARGEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_RECHARGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_RECHARGEDefaultTypeInternal _PROBUFF_NET_RECHARGE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_RECHARGE_RESPONSE::PROBUFF_NET_RECHARGE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.morderid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mrechargeid_)*/0
  , /*decltype(_impl_.mstat_)*/0} {}
struct PROBUFF_NET_RECHARGE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_RECHARGE_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_RECHARGE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_RECHARGE_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_RECHARGE_RESPONSEDefaultTypeInternal _PROBUFF_NET_RECHARGE_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_DELIVER_GOODS_RECHARGE::PROBUFF_NET_DELIVER_GOODS_RECHARGE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mitems_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.morderid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mrechargeid_)*/0
  , /*decltype(_impl_.mgold_)*/0} {}
struct PROBUFF_NET_DELIVER_GOODS_RECHARGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_DELIVER_GOODS_RECHARGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_DELIVER_GOODS_RECHARGEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_DELIVER_GOODS_RECHARGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_DELIVER_GOODS_RECHARGEDefaultTypeInternal _PROBUFF_NET_DELIVER_GOODS_RECHARGE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ERROR::PROBUFF_NET_ERROR(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.merrmessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PROBUFF_NET_ERRORDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ERRORDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ERRORDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ERROR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ERRORDefaultTypeInternal _PROBUFF_NET_ERROR_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_GET_TIME::PROBUFF_NET_GET_TIME(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_GET_TIMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_GET_TIMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_GET_TIMEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_GET_TIME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_GET_TIMEDefaultTypeInternal _PROBUFF_NET_GET_TIME_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_GET_TIME_RESPONSE::PROBUFF_NET_GET_TIME_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mutc_)*/0} {}
struct PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_GET_TIME_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal _PROBUFF_NET_GET_TIME_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_NOTICE::PROBUFF_NET_NOTICE(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_NOTICEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_NOTICEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_NOTICEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_NOTICE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_NOTICEDefaultTypeInternal _PROBUFF_NET_NOTICE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_NOTICE_RESPONSE::PROBUFF_NET_NOTICE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mnotices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_NOTICE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_NOTICE_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_NOTICE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_NOTICE_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_NOTICE_RESPONSEDefaultTypeInternal _PROBUFF_NET_NOTICE_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ACOUNT_LOGIN::PROBUFF_NET_ACOUNT_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.maccount_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mpassword_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.marea_)*/0} {}
struct PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ACOUNT_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal _PROBUFF_NET_ACOUNT_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msession_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.maccount_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mroleid_)*/int64_t{0}
  , /*decltype(_impl_.marea_)*/0
  , /*decltype(_impl_.mgatewayid_)*/0} {}
struct PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ACOUNT_LOGIN_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal _PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_LOGIN::PROBUFF_NET_ROLE_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msession_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mroleid_)*/int64_t{0}
  , /*decltype(_impl_.miscreate_)*/false
  , /*decltype(_impl_.marea_)*/0
  , /*decltype(_impl_.mgatewayid_)*/0} {}
struct PROBUFF_NET_ROLE_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ROLE_LOGINDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ROLE_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ROLE_LOGINDefaultTypeInternal _PROBUFF_NET_ROLE_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_SYNC::PROBUFF_NET_ROLE_SYNC(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_ROLE_SYNCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_SYNCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ROLE_SYNCDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ROLE_SYNC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ROLE_SYNCDefaultTypeInternal _PROBUFF_NET_ROLE_SYNC_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_SYNC_RESPONSE::PROBUFF_NET_ROLE_SYNC_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mrole_)*/nullptr
  , /*decltype(_impl_.mbrief_)*/nullptr
  , /*decltype(_impl_.mbag_)*/nullptr
  , /*decltype(_impl_.mtask_)*/nullptr} {}
struct PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ROLE_SYNC_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal _PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_SYNC::PROBUFF_NET_BAG_SYNC(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_BAG_SYNCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_SYNCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_SYNCDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_SYNC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_SYNCDefaultTypeInternal _PROBUFF_NET_BAG_SYNC_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_SYNC_RESPONSE::PROBUFF_NET_BAG_SYNC_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mbag_)*/nullptr} {}
struct PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_SYNC_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal _PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_delitem::PROBUFF_NET_BAG_UPDATE_delitem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mid_)*/0
  , /*decltype(_impl_.mcount_)*/0} {}
struct PROBUFF_NET_BAG_UPDATE_delitemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_delitemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_UPDATE_delitemDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_UPDATE_delitem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_UPDATE_delitemDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_delitem_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_additem::PROBUFF_NET_BAG_UPDATE_additem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mid_)*/0
  , /*decltype(_impl_.mcount_)*/0} {}
struct PROBUFF_NET_BAG_UPDATE_additemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_additemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_UPDATE_additemDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_UPDATE_additem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_UPDATE_additemDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_additem_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE::PROBUFF_NET_BAG_UPDATE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mdelitems_)*/{}
  , /*decltype(_impl_.mdelnostackitems_)*/{}
  , /*decltype(_impl_._mdelnostackitems_cached_byte_size_)*/{0}
  , /*decltype(_impl_.madditems_)*/{}
  , /*decltype(_impl_.maddnostackitems_)*/{}
  , /*decltype(_impl_._maddnostackitems_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_BAG_UPDATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_UPDATEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_UPDATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_UPDATEDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_CMD::PROBUFF_NET_CMD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mcmd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PROBUFF_NET_CMDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CMDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CMDDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CMD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CMDDefaultTypeInternal _PROBUFF_NET_CMD_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_CHAT::PROBUFF_NET_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mcontent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mtype_)*/0
  , /*decltype(_impl_.mchannelid_)*/0} {}
struct PROBUFF_NET_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CHATDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CHATDefaultTypeInternal _PROBUFF_NET_CHAT_default_instance_;
PROTOBUF_CONSTEXPR chatitem::chatitem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mrolename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mcontent_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mroleid_)*/int64_t{0}
  , /*decltype(_impl_.mutc_)*/0} {}
struct chatitemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR chatitemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~chatitemDefaultTypeInternal() {}
  union {
    chatitem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 chatitemDefaultTypeInternal _chatitem_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_CHAT_RESPONSE::PROBUFF_NET_CHAT_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mchatlist_)*/{}
  , /*decltype(_impl_.mtype_)*/0
  , /*decltype(_impl_.mchannelid_)*/0
  , /*decltype(_impl_.mstat_)*/false} {}
struct PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CHAT_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal _PROBUFF_NET_CHAT_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_SWITCH_LINE::PROBUFF_NET_SWITCH_LINE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mline_)*/0} {}
struct PROBUFF_NET_SWITCH_LINEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SWITCH_LINEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SWITCH_LINEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SWITCH_LINE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SWITCH_LINEDefaultTypeInternal _PROBUFF_NET_SWITCH_LINE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_SWITCH_LINE_RESPONSE::PROBUFF_NET_SWITCH_LINE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mline_)*/0
  , /*decltype(_impl_.mstat_)*/false} {}
struct PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SWITCH_LINE_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal _PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST::PROBUFF_NET_MAIL_LIST(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_MAIL_LISTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LISTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_LISTDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_LIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_LISTDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST_RESPONSE::PROBUFF_NET_MAIL_LIST_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mmail_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_LIST_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_READ::PROBUFF_NET_MAIL_READ(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mmailid_)*/int64_t{0}} {}
struct PROBUFF_NET_MAIL_READDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_READDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_READDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_READ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_READDefaultTypeInternal _PROBUFF_NET_MAIL_READ_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_READ_RESPONSE::PROBUFF_NET_MAIL_READ_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mmailid_)*/int64_t{0}
  , /*decltype(_impl_.mstat_)*/false} {}
struct PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_READ_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DRAW::PROBUFF_NET_MAIL_DRAW(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mmailid_)*/int64_t{0}} {}
struct PROBUFF_NET_MAIL_DRAWDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DRAWDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_DRAWDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_DRAW _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_DRAWDefaultTypeInternal _PROBUFF_NET_MAIL_DRAW_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DRAW_RESPONSE::PROBUFF_NET_MAIL_DRAW_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mmailid_)*/int64_t{0}
  , /*decltype(_impl_.mstat_)*/false} {}
struct PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_DRAW_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DEL::PROBUFF_NET_MAIL_DEL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mmailid_)*/int64_t{0}} {}
struct PROBUFF_NET_MAIL_DELDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DELDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_DELDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_DEL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_DELDefaultTypeInternal _PROBUFF_NET_MAIL_DEL_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DEL_RESPONSE::PROBUFF_NET_MAIL_DEL_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mmailid_)*/int64_t{0}
  , /*decltype(_impl_.mstat_)*/false} {}
struct PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_DEL_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_KCPSESSION::PROBUFF_NET_KCPSESSION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.muip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mserverid_)*/int64_t{0}
  , /*decltype(_impl_.muport_)*/0
  , /*decltype(_impl_.mconv_)*/0} {}
struct PROBUFF_NET_KCPSESSIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_KCPSESSIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_KCPSESSIONDefaultTypeInternal() {}
  union {
    PROBUFF_NET_KCPSESSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_KCPSESSIONDefaultTypeInternal _PROBUFF_NET_KCPSESSION_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_KCPSESSION_RESPONSE::PROBUFF_NET_KCPSESSION_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mkcpsession_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PROBUFF_NET_KCPSESSION_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_KCPSESSION_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_KCPSESSION_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_KCPSESSION_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_KCPSESSION_RESPONSEDefaultTypeInternal _PROBUFF_NET_KCPSESSION_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_TASK_RECEIVE_AWARD::PROBUFF_NET_TASK_RECEIVE_AWARD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mtaskid_)*/0} {}
struct PROBUFF_NET_TASK_RECEIVE_AWARDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_TASK_RECEIVE_AWARDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_TASK_RECEIVE_AWARDDefaultTypeInternal() {}
  union {
    PROBUFF_NET_TASK_RECEIVE_AWARD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_TASK_RECEIVE_AWARDDefaultTypeInternal _PROBUFF_NET_TASK_RECEIVE_AWARD_default_instance_;
PROTOBUF_CONSTEXPR drop_item::drop_item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mitem_)*/0
  , /*decltype(_impl_.mcount_)*/0} {}
struct drop_itemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR drop_itemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~drop_itemDefaultTypeInternal() {}
  union {
    drop_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 drop_itemDefaultTypeInternal _drop_item_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mdrop_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mtaskid_)*/0
  , /*decltype(_impl_.mstat_)*/false} {}
struct PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSEDefaultTypeInternal _PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_CREATE::PROBUFF_NET_FAMIL_CREATE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PROBUFF_NET_FAMIL_CREATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_CREATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_CREATEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_CREATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_CREATEDefaultTypeInternal _PROBUFF_NET_FAMIL_CREATE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_CREATE_RESPONSE::PROBUFF_NET_FAMIL_CREATE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mstat_)*/0} {}
struct PROBUFF_NET_FAMIL_CREATE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_CREATE_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_CREATE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_CREATE_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_CREATE_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_CREATE_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_INFO::PROBUFF_NET_FAMIL_INFO(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_FAMIL_INFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_INFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_INFODefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_INFODefaultTypeInternal _PROBUFF_NET_FAMIL_INFO_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_INFO_RESPONSE::PROBUFF_NET_FAMIL_INFO_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mmember_)*/{}
  , /*decltype(_impl_.minfo_)*/nullptr
  , /*decltype(_impl_.mstat_)*/0} {}
struct PROBUFF_NET_FAMIL_INFO_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_INFO_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_INFO_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_INFO_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_INFO_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_INFO_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_JOIN::PROBUFF_NET_FAMIL_JOIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mfamilid_)*/int64_t{0}
  , /*decltype(_impl_.mapply_)*/false} {}
struct PROBUFF_NET_FAMIL_JOINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_JOINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_JOINDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_JOIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_JOINDefaultTypeInternal _PROBUFF_NET_FAMIL_JOIN_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_JOIN_RESPONSE::PROBUFF_NET_FAMIL_JOIN_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mstat_)*/0} {}
struct PROBUFF_NET_FAMIL_JOIN_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_JOIN_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_JOIN_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_JOIN_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_JOIN_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_JOIN_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_RATIFY_JOIN::PROBUFF_NET_FAMIL_RATIFY_JOIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mroleid_)*/int64_t{0}
  , /*decltype(_impl_.mratify_)*/false} {}
struct PROBUFF_NET_FAMIL_RATIFY_JOINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_RATIFY_JOINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_RATIFY_JOINDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_RATIFY_JOIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_RATIFY_JOINDefaultTypeInternal _PROBUFF_NET_FAMIL_RATIFY_JOIN_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mstat_)*/0} {}
struct PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_CEDE::PROBUFF_NET_FAMIL_CEDE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mroleid_)*/int64_t{0}} {}
struct PROBUFF_NET_FAMIL_CEDEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_CEDEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_CEDEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_CEDE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_CEDEDefaultTypeInternal _PROBUFF_NET_FAMIL_CEDE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_CEDE_RESPONSE::PROBUFF_NET_FAMIL_CEDE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mstat_)*/0} {}
struct PROBUFF_NET_FAMIL_CEDE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_CEDE_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_CEDE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_CEDE_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_CEDE_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_CEDE_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_LEAVE::PROBUFF_NET_FAMIL_LEAVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mfamilid_)*/int64_t{0}} {}
struct PROBUFF_NET_FAMIL_LEAVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_LEAVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_LEAVEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_LEAVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_LEAVEDefaultTypeInternal _PROBUFF_NET_FAMIL_LEAVE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_LEAVE_RESPONSE::PROBUFF_NET_FAMIL_LEAVE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mstat_)*/0} {}
struct PROBUFF_NET_FAMIL_LEAVE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_LEAVE_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_LEAVE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_LEAVE_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_LEAVE_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_LEAVE_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_LIST::PROBUFF_NET_FAMIL_LIST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mfamilid_)*/int64_t{0}} {}
struct PROBUFF_NET_FAMIL_LISTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_LISTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_LISTDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_LIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_LISTDefaultTypeInternal _PROBUFF_NET_FAMIL_LIST_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_LIST_RESPONSE::PROBUFF_NET_FAMIL_LIST_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mfamily_)*/{}
  , /*decltype(_impl_.mfamilid_)*/int64_t{0}} {}
struct PROBUFF_NET_FAMIL_LIST_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_LIST_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_LIST_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_LIST_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_LIST_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_LIST_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_CHANGENAME::PROBUFF_NET_FAMIL_CHANGENAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mfamilid_)*/int64_t{0}} {}
struct PROBUFF_NET_FAMIL_CHANGENAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_CHANGENAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_CHANGENAMEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_CHANGENAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_CHANGENAMEDefaultTypeInternal _PROBUFF_NET_FAMIL_CHANGENAME_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mstat_)*/0} {}
struct PROBUFF_NET_FAMIL_CHANGENAME_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_CHANGENAME_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_CHANGENAME_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_CHANGENAME_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_SIGN::PROBUFF_NET_FAMIL_SIGN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mfamilid_)*/int64_t{0}} {}
struct PROBUFF_NET_FAMIL_SIGNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_SIGNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_SIGNDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_SIGN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_SIGNDefaultTypeInternal _PROBUFF_NET_FAMIL_SIGN_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_SIGN_RESPONSE::PROBUFF_NET_FAMIL_SIGN_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mstat_)*/0} {}
struct PROBUFF_NET_FAMIL_SIGN_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_SIGN_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_SIGN_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_SIGN_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_SIGN_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_SIGN_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_REWARD_ITEM_RESPONSE::PROBUFF_NET_REWARD_ITEM_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mitems_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_REWARD_ITEM_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_REWARD_ITEM_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_REWARD_ITEM_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_REWARD_ITEM_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_REWARD_ITEM_RESPONSEDefaultTypeInternal _PROBUFF_NET_REWARD_ITEM_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_RANKLIST::PROBUFF_NET_RANKLIST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.miscross_)*/false
  , /*decltype(_impl_.mtype_)*/0
  , /*decltype(_impl_.mactivityid_)*/0
  , /*decltype(_impl_.mpage_)*/0} {}
struct PROBUFF_NET_RANKLISTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_RANKLISTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_RANKLISTDefaultTypeInternal() {}
  union {
    PROBUFF_NET_RANKLIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_RANKLISTDefaultTypeInternal _PROBUFF_NET_RANKLIST_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_RANKLIST_RESPONSE::PROBUFF_NET_RANKLIST_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mitems_)*/{}
  , /*decltype(_impl_.mtype_)*/0
  , /*decltype(_impl_.mpage_)*/0
  , /*decltype(_impl_.mcount_)*/0
  , /*decltype(_impl_.mrolerank_)*/0} {}
struct PROBUFF_NET_RANKLIST_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_RANKLIST_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_RANKLIST_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_RANKLIST_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_RANKLIST_RESPONSEDefaultTypeInternal _PROBUFF_NET_RANKLIST_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND::PROBUFF_NET_FRIEND(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_FRIENDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FRIENDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FRIENDDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FRIEND _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FRIENDDefaultTypeInternal _PROBUFF_NET_FRIEND_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_RESPONSE::PROBUFF_NET_FRIEND_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mfriends_)*/{}
  , /*decltype(_impl_.mapplyfriends_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_FRIEND_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FRIEND_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FRIEND_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FRIEND_RESPONSEDefaultTypeInternal _PROBUFF_NET_FRIEND_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_ADD::PROBUFF_NET_FRIEND_ADD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mfriedid_)*/int64_t{0}} {}
struct PROBUFF_NET_FRIEND_ADDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_ADDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FRIEND_ADDDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FRIEND_ADD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FRIEND_ADDDefaultTypeInternal _PROBUFF_NET_FRIEND_ADD_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_ADD_RESPONSE::PROBUFF_NET_FRIEND_ADD_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mfriedid_)*/int64_t{0}
  , /*decltype(_impl_.mstat_)*/0} {}
struct PROBUFF_NET_FRIEND_ADD_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_ADD_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FRIEND_ADD_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FRIEND_ADD_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FRIEND_ADD_RESPONSEDefaultTypeInternal _PROBUFF_NET_FRIEND_ADD_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_RATIFY_ADD::PROBUFF_NET_FRIEND_RATIFY_ADD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mfriedid_)*/int64_t{0}
  , /*decltype(_impl_.mratify_)*/false} {}
struct PROBUFF_NET_FRIEND_RATIFY_ADDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_RATIFY_ADDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FRIEND_RATIFY_ADDDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FRIEND_RATIFY_ADD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FRIEND_RATIFY_ADDDefaultTypeInternal _PROBUFF_NET_FRIEND_RATIFY_ADD_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mfriedid_)*/int64_t{0}
  , /*decltype(_impl_.mratify_)*/false
  , /*decltype(_impl_.mstat_)*/0} {}
struct PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSEDefaultTypeInternal _PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_ERASE::PROBUFF_NET_FRIEND_ERASE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mfriedid_)*/int64_t{0}} {}
struct PROBUFF_NET_FRIEND_ERASEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_ERASEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FRIEND_ERASEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FRIEND_ERASE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FRIEND_ERASEDefaultTypeInternal _PROBUFF_NET_FRIEND_ERASE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_ERASE_RESPONSE::PROBUFF_NET_FRIEND_ERASE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mfriedid_)*/int64_t{0}
  , /*decltype(_impl_.mstat_)*/0} {}
struct PROBUFF_NET_FRIEND_ERASE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_ERASE_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FRIEND_ERASE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FRIEND_ERASE_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FRIEND_ERASE_RESPONSEDefaultTypeInternal _PROBUFF_NET_FRIEND_ERASE_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ROLESTAT::PROBUFF_NET_ROLESTAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mstat_)*/0
  , /*decltype(_impl_.mlogicstat_)*/0
  , /*decltype(_impl_.mroleid_)*/int64_t{0}} {}
struct PROBUFF_NET_ROLESTATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ROLESTATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ROLESTATDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ROLESTAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ROLESTATDefaultTypeInternal _PROBUFF_NET_ROLESTAT_default_instance_;
PROTOBUF_CONSTEXPR VECTOR2::VECTOR2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mx_)*/0
  , /*decltype(_impl_.my_)*/0} {}
struct VECTOR2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR VECTOR2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VECTOR2DefaultTypeInternal() {}
  union {
    VECTOR2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VECTOR2DefaultTypeInternal _VECTOR2_default_instance_;
PROTOBUF_CONSTEXPR VECTOR3::VECTOR3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mx_)*/0
  , /*decltype(_impl_.my_)*/0
  , /*decltype(_impl_.mz_)*/0} {}
struct VECTOR3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR VECTOR3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VECTOR3DefaultTypeInternal() {}
  union {
    VECTOR3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VECTOR3DefaultTypeInternal _VECTOR3_default_instance_;
PROTOBUF_CONSTEXPR UNIT_POSITION::UNIT_POSITION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mposition_)*/nullptr
  , /*decltype(_impl_.mid_)*/int64_t{0}
  , /*decltype(_impl_.mangle_)*/0
  , /*decltype(_impl_.mspeed_)*/0} {}
struct UNIT_POSITIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UNIT_POSITIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UNIT_POSITIONDefaultTypeInternal() {}
  union {
    UNIT_POSITION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UNIT_POSITIONDefaultTypeInternal _UNIT_POSITION_default_instance_;
PROTOBUF_CONSTEXPR UnitAttribute::UnitAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mvalue_)*/int64_t{0}
  , /*decltype(_impl_.mtype_)*/0} {}
struct UnitAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnitAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnitAttributeDefaultTypeInternal() {}
  union {
    UnitAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnitAttributeDefaultTypeInternal _UnitAttribute_default_instance_;
PROTOBUF_CONSTEXPR UnitModule::UnitModule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mmodules_)*/{}
  , /*decltype(_impl_.mmtype_)*/0} {}
struct UnitModuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnitModuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnitModuleDefaultTypeInternal() {}
  union {
    UnitModule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnitModuleDefaultTypeInternal _UnitModule_default_instance_;
PROTOBUF_CONSTEXPR UNIT::UNIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mmodules_)*/{}
  , /*decltype(_impl_.mposition_)*/nullptr
  , /*decltype(_impl_.mid_)*/int64_t{0}
  , /*decltype(_impl_.mtype_)*/0
  , /*decltype(_impl_.mstat_)*/0} {}
struct UNITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UNITDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UNITDefaultTypeInternal() {}
  union {
    UNIT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UNITDefaultTypeInternal _UNIT_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_ATTRIBUTE::PROBUFF_NET_SYNC_ATTRIBUTE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mmodules_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_SYNC_ATTRIBUTEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_ATTRIBUTEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SYNC_ATTRIBUTEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SYNC_ATTRIBUTE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SYNC_ATTRIBUTEDefaultTypeInternal _PROBUFF_NET_SYNC_ATTRIBUTE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_UNIT::PROBUFF_NET_SYNC_UNIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.munits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_SYNC_UNITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_UNITDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SYNC_UNITDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SYNC_UNIT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SYNC_UNITDefaultTypeInternal _PROBUFF_NET_SYNC_UNIT_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ENTER_LEAVE_VIEW::PROBUFF_NET_ENTER_LEAVE_VIEW(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.munits_)*/{}
  , /*decltype(_impl_._munits_cached_byte_size_)*/{0}
  , /*decltype(_impl_.misenter_)*/false} {}
struct PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ENTER_LEAVE_VIEW _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal _PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_POSITION::PROBUFF_NET_SYNC_POSITION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mposition_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SYNC_POSITION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal _PROBUFF_NET_SYNC_POSITION_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_CHANGE_ANGLE::PROBUFF_NET_CHANGE_ANGLE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mposition_)*/nullptr} {}
struct PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CHANGE_ANGLE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal _PROBUFF_NET_CHANGE_ANGLE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_TESTLUA_MdataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_TESTLUA_MdataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_TESTLUA_MdataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_TESTLUA_MdataEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_TESTLUA::PROBUFF_NET_TESTLUA(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mdata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mvalue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mid_)*/int64_t{0}} {}
struct PROBUFF_NET_TESTLUADefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_TESTLUADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_TESTLUADefaultTypeInternal() {}
  union {
    PROBUFF_NET_TESTLUA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_TESTLUADefaultTypeInternal _PROBUFF_NET_TESTLUA_default_instance_;
}  // namespace pbnet
static ::_pb::Metadata file_level_metadata_net_2eproto[87];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_net_2eproto[7];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_net_2eproto = nullptr;

const uint32_t TableStruct_net_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MSG_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MSG_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MSG_RESPONSE, _impl_.mmsg_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE, _impl_.mrechargeid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, _impl_.mrechargeid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, _impl_.mstat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, _impl_.morderid_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _impl_.mrechargeid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _impl_.morderid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _impl_.mgold_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _impl_.mitems_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, _impl_.merrmessage_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, _impl_.mutc_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_NOTICE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_NOTICE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_NOTICE_RESPONSE, _impl_.mnotices_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _impl_.marea_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _impl_.maccount_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _impl_.mpassword_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.marea_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.mroleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.msession_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.maccount_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.mgatewayid_),
  3,
  2,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.mroleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.msession_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.miscreate_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.marea_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.mgatewayid_),
  1,
  0,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.mrole_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.mbrief_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.mbag_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.mtask_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, _impl_.mbag_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_delitem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_delitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_delitem, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_delitem, _impl_.mcount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_additem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_additem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_additem, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_additem, _impl_.mcount_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE, _impl_.mdelitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE, _impl_.mdelnostackitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE, _impl_.madditems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE, _impl_.maddnostackitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, _impl_.mcmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _impl_.mtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _impl_.mchannelid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _impl_.mcontent_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_.mroleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_.mrolename_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_.mcontent_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_.mutc_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_.mtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_.mchannelid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_.mchatlist_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_.mstat_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, _impl_.mline_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_.mline_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_.mstat_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE, _impl_.mmail_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, _impl_.mmailid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _impl_.mmailid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _impl_.mstat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, _impl_.mmailid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_.mmailid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_.mstat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, _impl_.mmailid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_.mmailid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_.mstat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _impl_.mserverid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _impl_.muip_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _impl_.muport_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _impl_.mconv_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE, _impl_.mkcpsession_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD, _impl_.mtaskid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, _impl_.mitem_),
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, _impl_.mcount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _impl_.mtaskid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _impl_.mstat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _impl_.mdrop_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CREATE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CREATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CREATE, _impl_.mname_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE, _impl_.mstat_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE, _impl_.mstat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE, _impl_.minfo_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE, _impl_.mmember_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_JOIN, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_JOIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_JOIN, _impl_.mfamilid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_JOIN, _impl_.mapply_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE, _impl_.mstat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN, _impl_.mroleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN, _impl_.mratify_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE, _impl_.mstat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CEDE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CEDE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CEDE, _impl_.mroleid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE, _impl_.mstat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LEAVE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LEAVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LEAVE, _impl_.mfamilid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE, _impl_.mstat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST, _impl_.mfamilid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, _impl_.mfamilid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, _impl_.mfamily_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME, _impl_.mfamilid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME, _impl_.mname_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE, _impl_.mstat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_SIGN, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_SIGN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_SIGN, _impl_.mfamilid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE, _impl_.mstat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE, _impl_.mitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, _impl_.miscross_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, _impl_.mtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, _impl_.mactivityid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, _impl_.mpage_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _impl_.mtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _impl_.mitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _impl_.mpage_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _impl_.mcount_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _impl_.mrolerank_),
  0,
  ~0u,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RESPONSE, _impl_.mfriends_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RESPONSE, _impl_.mapplyfriends_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ADD, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ADD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ADD, _impl_.mfriedid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE, _impl_.mfriedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE, _impl_.mstat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD, _impl_.mfriedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD, _impl_.mratify_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE, _impl_.mfriedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE, _impl_.mratify_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE, _impl_.mstat_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ERASE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ERASE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ERASE, _impl_.mfriedid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE, _impl_.mfriedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE, _impl_.mstat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, _impl_.mstat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, _impl_.mlogicstat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, _impl_.mroleid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _impl_.mx_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _impl_.my_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _impl_.mx_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _impl_.my_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _impl_.mz_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _impl_.mposition_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _impl_.mangle_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _impl_.mspeed_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, _impl_.mtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, _impl_.mvalue_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, _impl_.mmtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, _impl_.mmodules_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_.mtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_.mposition_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_.mmodules_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_.mstat_),
  2,
  1,
  0,
  ~0u,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE, _impl_.mmodules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_UNIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_UNIT, _impl_.munits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _impl_.misenter_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _impl_.munits_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION, _impl_.mposition_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_ANGLE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_ANGLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_ANGLE, _impl_.mposition_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA, _impl_.mvalue_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA, _impl_.mdata_),
  1,
  0,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::pbnet::PROBUFF_NET_MSG_RESPONSE)},
  { 8, -1, -1, sizeof(::pbnet::PROBUFF_NET_HEARTBEAT)},
  { 14, 21, -1, sizeof(::pbnet::PROBUFF_NET_RECHARGE)},
  { 22, 31, -1, sizeof(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE)},
  { 34, 42, -1, sizeof(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse)},
  { 44, 54, -1, sizeof(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE)},
  { 58, 65, -1, sizeof(::pbnet::PROBUFF_NET_ERROR)},
  { 66, -1, -1, sizeof(::pbnet::PROBUFF_NET_GET_TIME)},
  { 72, 79, -1, sizeof(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE)},
  { 80, -1, -1, sizeof(::pbnet::PROBUFF_NET_NOTICE)},
  { 86, -1, -1, sizeof(::pbnet::PROBUFF_NET_NOTICE_RESPONSE)},
  { 93, 102, -1, sizeof(::pbnet::PROBUFF_NET_ACOUNT_LOGIN)},
  { 105, 116, -1, sizeof(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)},
  { 121, 132, -1, sizeof(::pbnet::PROBUFF_NET_ROLE_LOGIN)},
  { 137, -1, -1, sizeof(::pbnet::PROBUFF_NET_ROLE_SYNC)},
  { 143, 153, -1, sizeof(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE)},
  { 157, -1, -1, sizeof(::pbnet::PROBUFF_NET_BAG_SYNC)},
  { 163, 170, -1, sizeof(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE)},
  { 171, 179, -1, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE_delitem)},
  { 181, 189, -1, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE_additem)},
  { 191, -1, -1, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE)},
  { 201, 208, -1, sizeof(::pbnet::PROBUFF_NET_CMD)},
  { 209, 218, -1, sizeof(::pbnet::PROBUFF_NET_CHAT)},
  { 221, 231, -1, sizeof(::pbnet::chatitem)},
  { 235, 245, -1, sizeof(::pbnet::PROBUFF_NET_CHAT_RESPONSE)},
  { 249, 256, -1, sizeof(::pbnet::PROBUFF_NET_SWITCH_LINE)},
  { 257, 265, -1, sizeof(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE)},
  { 267, -1, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST)},
  { 273, 281, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse)},
  { 283, -1, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE)},
  { 290, 297, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_READ)},
  { 298, 306, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE)},
  { 308, 315, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_DRAW)},
  { 316, 324, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE)},
  { 326, 333, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_DEL)},
  { 334, 342, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE)},
  { 344, 354, -1, sizeof(::pbnet::PROBUFF_NET_KCPSESSION)},
  { 358, 365, -1, sizeof(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE)},
  { 366, 373, -1, sizeof(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD)},
  { 374, 382, -1, sizeof(::pbnet::drop_item)},
  { 384, 392, -1, sizeof(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse)},
  { 394, 403, -1, sizeof(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)},
  { 406, 413, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_CREATE)},
  { 414, 421, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE)},
  { 422, -1, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_INFO)},
  { 428, 437, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE)},
  { 440, 448, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_JOIN)},
  { 450, 457, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE)},
  { 458, 466, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN)},
  { 468, 475, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)},
  { 476, 483, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_CEDE)},
  { 484, 491, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE)},
  { 492, 499, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_LEAVE)},
  { 500, 507, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE)},
  { 508, 515, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_LIST)},
  { 516, 524, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE)},
  { 526, 534, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME)},
  { 536, 543, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)},
  { 544, 551, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_SIGN)},
  { 552, 559, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE)},
  { 560, 568, -1, sizeof(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse)},
  { 570, -1, -1, sizeof(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE)},
  { 577, 587, -1, sizeof(::pbnet::PROBUFF_NET_RANKLIST)},
  { 591, 602, -1, sizeof(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE)},
  { 607, -1, -1, sizeof(::pbnet::PROBUFF_NET_FRIEND)},
  { 613, -1, -1, sizeof(::pbnet::PROBUFF_NET_FRIEND_RESPONSE)},
  { 621, 628, -1, sizeof(::pbnet::PROBUFF_NET_FRIEND_ADD)},
  { 629, 637, -1, sizeof(::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE)},
  { 639, 647, -1, sizeof(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD)},
  { 649, 658, -1, sizeof(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)},
  { 661, 668, -1, sizeof(::pbnet::PROBUFF_NET_FRIEND_ERASE)},
  { 669, 677, -1, sizeof(::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE)},
  { 679, 688, -1, sizeof(::pbnet::PROBUFF_NET_ROLESTAT)},
  { 691, 699, -1, sizeof(::pbnet::VECTOR2)},
  { 701, 710, -1, sizeof(::pbnet::VECTOR3)},
  { 713, 723, -1, sizeof(::pbnet::UNIT_POSITION)},
  { 727, 735, -1, sizeof(::pbnet::UnitAttribute)},
  { 737, 745, -1, sizeof(::pbnet::UnitModule)},
  { 747, 758, -1, sizeof(::pbnet::UNIT)},
  { 763, -1, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE)},
  { 770, -1, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_UNIT)},
  { 777, 785, -1, sizeof(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW)},
  { 787, 795, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse)},
  { 797, -1, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_POSITION)},
  { 804, 811, -1, sizeof(::pbnet::PROBUFF_NET_CHANGE_ANGLE)},
  { 812, 820, -1, sizeof(::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse)},
  { 822, 831, -1, sizeof(::pbnet::PROBUFF_NET_TESTLUA)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pbnet::_PROBUFF_NET_MSG_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_HEARTBEAT_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_RECHARGE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_RECHARGE_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_DELIVER_GOODS_RECHARGE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ERROR_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_GET_TIME_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_GET_TIME_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_NOTICE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_NOTICE_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ACOUNT_LOGIN_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ROLE_LOGIN_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ROLE_SYNC_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_BAG_SYNC_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_BAG_UPDATE_delitem_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_BAG_UPDATE_additem_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_BAG_UPDATE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_CMD_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_CHAT_default_instance_._instance,
  &::pbnet::_chatitem_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_CHAT_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_SWITCH_LINE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_LIST_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_READ_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_DRAW_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_DEL_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_KCPSESSION_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_KCPSESSION_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_default_instance_._instance,
  &::pbnet::_drop_item_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_CREATE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_CREATE_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_INFO_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_INFO_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_JOIN_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_JOIN_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_RATIFY_JOIN_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_CEDE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_CEDE_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_LEAVE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_LEAVE_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_LIST_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_LIST_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_CHANGENAME_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_SIGN_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_SIGN_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_REWARD_ITEM_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_RANKLIST_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_RANKLIST_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FRIEND_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FRIEND_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FRIEND_ADD_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FRIEND_ADD_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FRIEND_RATIFY_ADD_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FRIEND_ERASE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FRIEND_ERASE_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ROLESTAT_default_instance_._instance,
  &::pbnet::_VECTOR2_default_instance_._instance,
  &::pbnet::_VECTOR3_default_instance_._instance,
  &::pbnet::_UNIT_POSITION_default_instance_._instance,
  &::pbnet::_UnitAttribute_default_instance_._instance,
  &::pbnet::_UnitModule_default_instance_._instance,
  &::pbnet::_UNIT_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_SYNC_ATTRIBUTE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_SYNC_UNIT_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_SYNC_POSITION_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_CHANGE_ANGLE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_TESTLUA_default_instance_._instance,
};

const char descriptor_table_protodef_net_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnet.proto\022\005pbnet\032\010db.proto\"6\n\030PROBUFF_"
  "NET_MSG_RESPONSE\022\021\n\004mmsg\030\001 \001(\tH\000\210\001\001B\007\n\005_"
  "mmsg\"\027\n\025PROBUFF_NET_HEARTBEAT\"@\n\024PROBUFF"
  "_NET_RECHARGE\022\030\n\013mrechargeid\030\001 \001(\005H\000\210\001\001B"
  "\016\n\014_mrechargeid\"\200\002\n\035PROBUFF_NET_RECHARGE"
  "_RESPONSE\022\030\n\013mrechargeid\030\001 \001(\005H\000\210\001\001\022>\n\005m"
  "stat\030\002 \001(\0162*.pbnet.PROBUFF_NET_RECHARGE_"
  "RESPONSE.EstatH\001\210\001\001\022\025\n\010morderid\030\003 \001(\tH\002\210"
  "\001\001\"G\n\005Estat\022\021\n\rEstat_Success\020\000\022\027\n\023Estat_"
  "NotRechargeId\020\001\022\022\n\016Estat_MaxCount\020\002B\016\n\014_"
  "mrechargeidB\010\n\006_mstatB\013\n\t_morderid\"\206\002\n\"P"
  "ROBUFF_NET_DELIVER_GOODS_RECHARGE\022\030\n\013mre"
  "chargeid\030\001 \001(\005H\000\210\001\001\022\025\n\010morderid\030\002 \001(\tH\001\210"
  "\001\001\022\022\n\005mgold\030\003 \001(\005H\002\210\001\001\022E\n\006mitems\030\004 \003(\01325"
  ".pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARG"
  "E.MitemsEntry\032-\n\013MitemsEntry\022\013\n\003key\030\001 \001("
  "\005\022\r\n\005value\030\002 \001(\005:\0028\001B\016\n\014_mrechargeidB\013\n\t"
  "_morderidB\010\n\006_mgold\"=\n\021PROBUFF_NET_ERROR"
  "\022\030\n\013merrmessage\030\002 \001(\tH\000\210\001\001B\016\n\014_merrmessa"
  "ge\"\026\n\024PROBUFF_NET_GET_TIME\";\n\035PROBUFF_NE"
  "T_GET_TIME_RESPONSE\022\021\n\004mutc\030\001 \001(\005H\000\210\001\001B\007"
  "\n\005_mutc\"\024\n\022PROBUFF_NET_NOTICE\"@\n\033PROBUFF"
  "_NET_NOTICE_RESPONSE\022!\n\010mnotices\030\001 \003(\0132\017"
  ".pbdb.db_notice\"\202\001\n\030PROBUFF_NET_ACOUNT_L"
  "OGIN\022\022\n\005marea\030\001 \001(\005H\000\210\001\001\022\025\n\010maccount\030\002 \001"
  "(\tH\001\210\001\001\022\026\n\tmpassword\030\003 \001(\tH\002\210\001\001B\010\n\006_mare"
  "aB\013\n\t_maccountB\014\n\n_mpassword\"\323\001\n!PROBUFF"
  "_NET_ACOUNT_LOGIN_RESPONSE\022\022\n\005marea\030\001 \001("
  "\005H\000\210\001\001\022\024\n\007mroleid\030\002 \001(\003H\001\210\001\001\022\025\n\010msession"
  "\030\003 \001(\tH\002\210\001\001\022\025\n\010maccount\030\004 \001(\tH\003\210\001\001\022\027\n\nmg"
  "atewayid\030\005 \001(\005H\004\210\001\001B\010\n\006_mareaB\n\n\010_mrolei"
  "dB\013\n\t_msessionB\013\n\t_maccountB\r\n\013_mgateway"
  "id\"\312\001\n\026PROBUFF_NET_ROLE_LOGIN\022\024\n\007mroleid"
  "\030\001 \001(\003H\000\210\001\001\022\025\n\010msession\030\002 \001(\tH\001\210\001\001\022\026\n\tmi"
  "screate\030\003 \001(\010H\002\210\001\001\022\022\n\005marea\030\004 \001(\005H\003\210\001\001\022\027"
  "\n\nmgatewayid\030\005 \001(\005H\004\210\001\001B\n\n\010_mroleidB\013\n\t_"
  "msessionB\014\n\n_miscreateB\010\n\006_mareaB\r\n\013_mga"
  "tewayid\"\027\n\025PROBUFF_NET_ROLE_SYNC\"\324\001\n\036PRO"
  "BUFF_NET_ROLE_SYNC_RESPONSE\022!\n\005mrole\030\001 \001"
  "(\0132\r.pbdb.db_roleH\000\210\001\001\022#\n\006mbrief\030\002 \001(\0132\016"
  ".pbdb.db_briefH\001\210\001\001\022\037\n\004mbag\030\003 \001(\0132\014.pbdb"
  ".db_bagH\002\210\001\001\022!\n\005mtask\030\004 \001(\0132\r.pbdb.db_ta"
  "skH\003\210\001\001B\010\n\006_mroleB\t\n\007_mbriefB\007\n\005_mbagB\010\n"
  "\006_mtask\"\026\n\024PROBUFF_NET_BAG_SYNC\"I\n\035PROBU"
  "FF_NET_BAG_SYNC_RESPONSE\022\037\n\004mbag\030\001 \001(\0132\014"
  ".pbdb.db_bagH\000\210\001\001B\007\n\005_mbag\"\312\002\n\026PROBUFF_N"
  "ET_BAG_UPDATE\0228\n\tmdelitems\030\001 \003(\0132%.pbnet"
  ".PROBUFF_NET_BAG_UPDATE.delitem\022\030\n\020mdeln"
  "ostackitems\030\002 \003(\005\0228\n\tmadditems\030\003 \003(\0132%.p"
  "bnet.PROBUFF_NET_BAG_UPDATE.additem\022\030\n\020m"
  "addnostackitems\030\004 \003(\005\032C\n\007delitem\022\020\n\003mid\030"
  "\001 \001(\005H\000\210\001\001\022\023\n\006mcount\030\002 \001(\005H\001\210\001\001B\006\n\004_midB"
  "\t\n\007_mcount\032C\n\007additem\022\020\n\003mid\030\001 \001(\005H\000\210\001\001\022"
  "\023\n\006mcount\030\002 \001(\005H\001\210\001\001B\006\n\004_midB\t\n\007_mcount\""
  "-\n\017PROBUFF_NET_CMD\022\021\n\004mcmd\030\001 \001(\tH\000\210\001\001B\007\n"
  "\005_mcmd\"|\n\020PROBUFF_NET_CHAT\022\022\n\005mtype\030\001 \001("
  "\005H\000\210\001\001\022\027\n\nmchannelid\030\002 \001(\005H\001\210\001\001\022\025\n\010mcont"
  "ent\030\003 \001(\tH\002\210\001\001B\010\n\006_mtypeB\r\n\013_mchannelidB"
  "\013\n\t_mcontent\"\222\001\n\010chatitem\022\024\n\007mroleid\030\001 \001"
  "(\003H\000\210\001\001\022\026\n\tmrolename\030\002 \001(\tH\001\210\001\001\022\025\n\010mcont"
  "ent\030\003 \001(\tH\002\210\001\001\022\021\n\004mutc\030\004 \001(\005H\003\210\001\001B\n\n\010_mr"
  "oleidB\014\n\n_mrolenameB\013\n\t_mcontentB\007\n\005_mut"
  "c\"\243\001\n\031PROBUFF_NET_CHAT_RESPONSE\022\022\n\005mtype"
  "\030\001 \001(\005H\000\210\001\001\022\027\n\nmchannelid\030\002 \001(\005H\001\210\001\001\022\"\n\t"
  "mchatlist\030\003 \003(\0132\017.pbnet.chatitem\022\022\n\005msta"
  "t\030\004 \001(\010H\002\210\001\001B\010\n\006_mtypeB\r\n\013_mchannelidB\010\n"
  "\006_mstat\"7\n\027PROBUFF_NET_SWITCH_LINE\022\022\n\005ml"
  "ine\030\001 \001(\005H\000\210\001\001B\010\n\006_mline\"^\n PROBUFF_NET_"
  "SWITCH_LINE_RESPONSE\022\022\n\005mline\030\001 \001(\005H\000\210\001\001"
  "\022\022\n\005mstat\030\002 \001(\010H\001\210\001\001B\010\n\006_mlineB\010\n\006_mstat"
  "\"\027\n\025PROBUFF_NET_MAIL_LIST\"\233\001\n\036PROBUFF_NE"
  "T_MAIL_LIST_RESPONSE\022\?\n\005mmail\030\001 \003(\01320.pb"
  "net.PROBUFF_NET_MAIL_LIST_RESPONSE.Mmail"
  "Entry\0328\n\nMmailEntry\022\013\n\003key\030\001 \001(\005\022\031\n\005valu"
  "e\030\002 \001(\0132\n.pbdb.mail:\0028\001\"9\n\025PROBUFF_NET_M"
  "AIL_READ\022\024\n\007mmailid\030\001 \001(\003H\000\210\001\001B\n\n\010_mmail"
  "id\"`\n\036PROBUFF_NET_MAIL_READ_RESPONSE\022\024\n\007"
  "mmailid\030\001 \001(\003H\000\210\001\001\022\022\n\005mstat\030\002 \001(\010H\001\210\001\001B\n"
  "\n\010_mmailidB\010\n\006_mstat\"9\n\025PROBUFF_NET_MAIL"
  "_DRAW\022\024\n\007mmailid\030\001 \001(\003H\000\210\001\001B\n\n\010_mmailid\""
  "`\n\036PROBUFF_NET_MAIL_DRAW_RESPONSE\022\024\n\007mma"
  "ilid\030\001 \001(\003H\000\210\001\001\022\022\n\005mstat\030\002 \001(\010H\001\210\001\001B\n\n\010_"
  "mmailidB\010\n\006_mstat\"8\n\024PROBUFF_NET_MAIL_DE"
  "L\022\024\n\007mmailid\030\001 \001(\003H\000\210\001\001B\n\n\010_mmailid\"_\n\035P"
  "ROBUFF_NET_MAIL_DEL_RESPONSE\022\024\n\007mmailid\030"
  "\001 \001(\003H\000\210\001\001\022\022\n\005mstat\030\002 \001(\010H\001\210\001\001B\n\n\010_mmail"
  "idB\010\n\006_mstat\"\230\001\n\026PROBUFF_NET_KCPSESSION\022"
  "\026\n\tmserverid\030\001 \001(\003H\000\210\001\001\022\021\n\004muip\030\002 \001(\tH\001\210"
  "\001\001\022\023\n\006muport\030\003 \001(\005H\002\210\001\001\022\022\n\005mconv\030\004 \001(\005H\003"
  "\210\001\001B\014\n\n_mserveridB\007\n\005_muipB\t\n\007_muportB\010\n"
  "\006_mconv\"K\n\037PROBUFF_NET_KCPSESSION_RESPON"
  "SE\022\030\n\013mkcpsession\030\001 \001(\tH\000\210\001\001B\016\n\014_mkcpses"
  "sion\"B\n\036PROBUFF_NET_TASK_RECEIVE_AWARD\022\024"
  "\n\007mtaskid\030\001 \001(\005H\000\210\001\001B\n\n\010_mtaskid\"I\n\tdrop"
  "_item\022\022\n\005mitem\030\001 \001(\005H\000\210\001\001\022\023\n\006mcount\030\002 \001("
  "\005H\001\210\001\001B\010\n\006_mitemB\t\n\007_mcount\"\341\001\n\'PROBUFF_"
  "NET_TASK_RECEIVE_AWARD_RESPONSE\022\024\n\007mtask"
  "id\030\001 \001(\005H\000\210\001\001\022\022\n\005mstat\030\002 \001(\010H\001\210\001\001\022H\n\005mdr"
  "op\030\003 \003(\01329.pbnet.PROBUFF_NET_TASK_RECEIV"
  "E_AWARD_RESPONSE.MdropEntry\032,\n\nMdropEntr"
  "y\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001B\n\n\010_mt"
  "askidB\010\n\006_mstat\"8\n\030PROBUFF_NET_FAMIL_CRE"
  "ATE\022\022\n\005mname\030\001 \001(\tH\000\210\001\001B\010\n\006_mname\"A\n!PRO"
  "BUFF_NET_FAMIL_CREATE_RESPONSE\022\022\n\005mstat\030"
  "\001 \001(\005H\000\210\001\001B\010\n\006_mstat\"\030\n\026PROBUFF_NET_FAMI"
  "L_INFO\"\217\001\n\037PROBUFF_NET_FAMIL_INFO_RESPON"
  "SE\022\022\n\005mstat\030\001 \001(\005H\000\210\001\001\022#\n\005minfo\030\002 \001(\0132\017."
  "pbdb.db_familyH\001\210\001\001\022\037\n\007mmember\030\003 \003(\0132\016.p"
  "bdb.db_briefB\010\n\006_mstatB\010\n\006_minfo\"\\\n\026PROB"
  "UFF_NET_FAMIL_JOIN\022\025\n\010mfamilid\030\001 \001(\003H\000\210\001"
  "\001\022\023\n\006mapply\030\002 \001(\010H\001\210\001\001B\013\n\t_mfamilidB\t\n\007_"
  "mapply\"\?\n\037PROBUFF_NET_FAMIL_JOIN_RESPONS"
  "E\022\022\n\005mstat\030\001 \001(\005H\000\210\001\001B\010\n\006_mstat\"c\n\035PROBU"
  "FF_NET_FAMIL_RATIFY_JOIN\022\024\n\007mroleid\030\001 \001("
  "\003H\000\210\001\001\022\024\n\007mratify\030\002 \001(\010H\001\210\001\001B\n\n\010_mroleid"
  "B\n\n\010_mratify\"F\n&PROBUFF_NET_FAMIL_RATIFY"
  "_JOIN_RESPONSE\022\022\n\005mstat\030\001 \001(\005H\000\210\001\001B\010\n\006_m"
  "stat\":\n\026PROBUFF_NET_FAMIL_CEDE\022\024\n\007mrolei"
  "d\030\001 \001(\003H\000\210\001\001B\n\n\010_mroleid\"\?\n\037PROBUFF_NET_"
  "FAMIL_CEDE_RESPONSE\022\022\n\005mstat\030\001 \001(\005H\000\210\001\001B"
  "\010\n\006_mstat\"=\n\027PROBUFF_NET_FAMIL_LEAVE\022\025\n\010"
  "mfamilid\030\001 \001(\003H\000\210\001\001B\013\n\t_mfamilid\"@\n PROB"
  "UFF_NET_FAMIL_LEAVE_RESPONSE\022\022\n\005mstat\030\001 "
  "\001(\005H\000\210\001\001B\010\n\006_mstat\"<\n\026PROBUFF_NET_FAMIL_"
  "LIST\022\025\n\010mfamilid\030\001 \001(\003H\000\210\001\001B\013\n\t_mfamilid"
  "\"g\n\037PROBUFF_NET_FAMIL_LIST_RESPONSE\022\025\n\010m"
  "familid\030\001 \001(\003H\000\210\001\001\022 \n\007mfamily\030\002 \003(\0132\017.pb"
  "db.db_familyB\013\n\t_mfamilid\"`\n\034PROBUFF_NET"
  "_FAMIL_CHANGENAME\022\025\n\010mfamilid\030\001 \001(\003H\000\210\001\001"
  "\022\022\n\005mname\030\002 \001(\tH\001\210\001\001B\013\n\t_mfamilidB\010\n\006_mn"
  "ame\"E\n%PROBUFF_NET_FAMIL_CHANGENAME_RESP"
  "ONSE\022\022\n\005mstat\030\001 \001(\005H\000\210\001\001B\010\n\006_mstat\"<\n\026PR"
  "OBUFF_NET_FAMIL_SIGN\022\025\n\010mfamilid\030\001 \001(\003H\000"
  "\210\001\001B\013\n\t_mfamilid\"\?\n\037PROBUFF_NET_FAMIL_SI"
  "GN_RESPONSE\022\022\n\005mstat\030\001 \001(\005H\000\210\001\001B\010\n\006_msta"
  "t\"\226\001\n PROBUFF_NET_REWARD_ITEM_RESPONSE\022C"
  "\n\006mitems\030\001 \003(\01323.pbnet.PROBUFF_NET_REWAR"
  "D_ITEM_RESPONSE.MitemsEntry\032-\n\013MitemsEnt"
  "ry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\"\261\001\n\024P"
  "ROBUFF_NET_RANKLIST\022\025\n\010miscross\030\001 \001(\010H\000\210"
  "\001\001\022#\n\005mtype\030\002 \001(\0162\017.pbdb.eranklistH\001\210\001\001\022"
  "\030\n\013mactivityid\030\003 \001(\005H\002\210\001\001\022\022\n\005mpage\030\004 \001(\005"
  "H\003\210\001\001B\013\n\t_miscrossB\010\n\006_mtypeB\016\n\014_mactivi"
  "tyidB\010\n\006_mpage\"\322\001\n\035PROBUFF_NET_RANKLIST_"
  "RESPONSE\022#\n\005mtype\030\001 \001(\0162\017.pbdb.eranklist"
  "H\000\210\001\001\022\036\n\006mitems\030\002 \003(\0132\016.pbdb.db_brief\022\022\n"
  "\005mpage\030\003 \001(\005H\001\210\001\001\022\023\n\006mcount\030\004 \001(\005H\002\210\001\001\022\026"
  "\n\tmrolerank\030\005 \001(\005H\003\210\001\001B\010\n\006_mtypeB\010\n\006_mpa"
  "geB\t\n\007_mcountB\014\n\n_mrolerank\"\024\n\022PROBUFF_N"
  "ET_FRIEND\"f\n\033PROBUFF_NET_FRIEND_RESPONSE"
  "\022 \n\010mfriends\030\001 \003(\0132\016.pbdb.db_brief\022%\n\rma"
  "pplyfriends\030\002 \003(\0132\016.pbdb.db_brief\"<\n\026PRO"
  "BUFF_NET_FRIEND_ADD\022\025\n\010mfriedid\030\001 \001(\003H\000\210"
  "\001\001B\013\n\t_mfriedid\"c\n\037PROBUFF_NET_FRIEND_AD"
  "D_RESPONSE\022\025\n\010mfriedid\030\001 \001(\003H\000\210\001\001\022\022\n\005mst"
  "at\030\002 \001(\005H\001\210\001\001B\013\n\t_mfriedidB\010\n\006_mstat\"e\n\035"
  "PROBUFF_NET_FRIEND_RATIFY_ADD\022\025\n\010mfriedi"
  "d\030\001 \001(\003H\000\210\001\001\022\024\n\007mratify\030\002 \001(\010H\001\210\001\001B\013\n\t_m"
  "friedidB\n\n\010_mratify\"\214\001\n&PROBUFF_NET_FRIE"
  "ND_RATIFY_ADD_RESPONSE\022\025\n\010mfriedid\030\001 \001(\003"
  "H\000\210\001\001\022\024\n\007mratify\030\002 \001(\010H\001\210\001\001\022\022\n\005mstat\030\003 \001"
  "(\005H\002\210\001\001B\013\n\t_mfriedidB\n\n\010_mratifyB\010\n\006_mst"
  "at\">\n\030PROBUFF_NET_FRIEND_ERASE\022\025\n\010mfried"
  "id\030\001 \001(\003H\000\210\001\001B\013\n\t_mfriedid\"e\n!PROBUFF_NE"
  "T_FRIEND_ERASE_RESPONSE\022\025\n\010mfriedid\030\001 \001("
  "\003H\000\210\001\001\022\022\n\005mstat\030\002 \001(\005H\001\210\001\001B\013\n\t_mfriedidB"
  "\010\n\006_mstat\"\222\002\n\024PROBUFF_NET_ROLESTAT\0224\n\005ms"
  "tat\030\001 \001(\0162 .pbnet.PROBUFF_NET_ROLESTAT.s"
  "tatH\000\210\001\001\022\?\n\nmlogicstat\030\002 \001(\0162&.pbnet.PRO"
  "BUFF_NET_ROLESTAT.logic_statH\001\210\001\001\022\024\n\007mro"
  "leid\030\003 \001(\003H\002\210\001\001\"\037\n\004stat\022\n\n\006online\020\000\022\013\n\007o"
  "ffline\020\001\"\'\n\nlogic_stat\022\013\n\007friends\020\000\022\014\n\010f"
  "amilyer\020\001B\010\n\006_mstatB\r\n\013_mlogicstatB\n\n\010_m"
  "roleid\"9\n\007VECTOR2\022\017\n\002mx\030\001 \001(\005H\000\210\001\001\022\017\n\002my"
  "\030\002 \001(\005H\001\210\001\001B\005\n\003_mxB\005\n\003_my\"Q\n\007VECTOR3\022\017\n\002"
  "mx\030\001 \001(\005H\000\210\001\001\022\017\n\002my\030\002 \001(\005H\001\210\001\001\022\017\n\002mz\030\003 \001"
  "(\005H\002\210\001\001B\005\n\003_mxB\005\n\003_myB\005\n\003_mz\"\237\001\n\rUNIT_PO"
  "SITION\022\020\n\003mid\030\002 \001(\003H\000\210\001\001\022&\n\tmposition\030\003 "
  "\001(\0132\016.pbnet.VECTOR2H\001\210\001\001\022\023\n\006mangle\030\004 \001(\005"
  "H\002\210\001\001\022\023\n\006mspeed\030\005 \001(\005H\003\210\001\001B\006\n\004_midB\014\n\n_m"
  "positionB\t\n\007_mangleB\t\n\007_mspeed\"M\n\rUnitAt"
  "tribute\022\022\n\005mtype\030\001 \001(\005H\000\210\001\001\022\023\n\006mvalue\030\002 "
  "\001(\003H\001\210\001\001B\010\n\006_mtypeB\t\n\007_mvalue\"T\n\nUnitMod"
  "ule\022\023\n\006mmtype\030\001 \001(\005H\000\210\001\001\022&\n\010mmodules\030\002 \003"
  "(\0132\024.pbnet.UnitAttributeB\t\n\007_mmtype\"\335\001\n\004"
  "UNIT\022 \n\005mtype\030\001 \001(\0162\014.pbnet.eunitH\000\210\001\001\022\020"
  "\n\003mid\030\002 \001(\003H\001\210\001\001\022,\n\tmposition\030\003 \001(\0132\024.pb"
  "net.UNIT_POSITIONH\002\210\001\001\022#\n\010mmodules\030\004 \003(\013"
  "2\021.pbnet.UnitModule\022$\n\005mstat\030\005 \001(\0162\020.pbn"
  "et.eunitstatH\003\210\001\001B\010\n\006_mtypeB\006\n\004_midB\014\n\n_"
  "mpositionB\010\n\006_mstat\"A\n\032PROBUFF_NET_SYNC_"
  "ATTRIBUTE\022#\n\010mmodules\030\001 \003(\0132\021.pbnet.Unit"
  "Module\"4\n\025PROBUFF_NET_SYNC_UNIT\022\033\n\006munit"
  "s\030\001 \003(\0132\013.pbnet.UNIT\"R\n\034PROBUFF_NET_ENTE"
  "R_LEAVE_VIEW\022\025\n\010misenter\030\001 \001(\010H\000\210\001\001\022\016\n\006m"
  "units\030\002 \003(\003B\013\n\t_misenter\"\247\001\n\031PROBUFF_NET"
  "_SYNC_POSITION\022B\n\tmposition\030\001 \003(\0132/.pbne"
  "t.PROBUFF_NET_SYNC_POSITION.MpositionEnt"
  "ry\032F\n\016MpositionEntry\022\013\n\003key\030\001 \001(\003\022#\n\005val"
  "ue\030\002 \001(\0132\024.pbnet.UNIT_POSITION:\0028\001\"V\n\030PR"
  "OBUFF_NET_CHANGE_ANGLE\022,\n\tmposition\030\001 \001("
  "\0132\024.pbnet.UNIT_POSITIONH\000\210\001\001B\014\n\n_mpositi"
  "on\"\263\001\n\023PROBUFF_NET_TESTLUA\022\020\n\003mid\030\001 \001(\003H"
  "\000\210\001\001\022\023\n\006mvalue\030\002 \001(\tH\001\210\001\001\0224\n\005mdata\030\003 \003(\013"
  "2%.pbnet.PROBUFF_NET_TESTLUA.MdataEntry\032"
  ",\n\nMdataEntry\022\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001("
  "\t:\0028\001B\006\n\004_midB\t\n\007_mvalue*U\n\017ENUM_LOGIC_C"
  "HAT\022\026\n\022ENUM_GET_CHAT_LIST\020\000\022\023\n\017ENUM_CHAT"
  "_SPEAK\020\001\022\025\n\021ENUM_UPDATA_SPEAK\020\002*\221\001\n\021ENUM"
  "_CHAT_CHANNEL\022\032\n\026ENUM_CHAT_CHANNEL_NULL\020"
  "\000\022\036\n\032ENUM_CHAT_CHANNEL_ORDINARY\020\001\022$\n ENU"
  "M_CHAT_CHANNEL_CROSS_ORDINARY\020\002\022\032\n\026ENUM_"
  "CHAT_CHANNEL_NONE\020\003*<\n\005eunit\022\016\n\neunit_ro"
  "le\020\000\022\021\n\reunit_monster\020\001\022\020\n\014eunit_region\020"
  "\002*s\n\teunitstat\022\024\n\020eunitstat_normal\020\000\022\024\n\020"
  "eunitstat_nomove\020\001\022\034\n\030eunitstat_nonormal"
  "attack\020\002\022\034\n\030eunitstat_noreleaseskill\020\004B\002"
  "H\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_net_2eproto_deps[1] = {
  &::descriptor_table_db_2eproto,
};
static ::_pbi::once_flag descriptor_table_net_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_net_2eproto = {
    false, false, 8690, descriptor_table_protodef_net_2eproto,
    "net.proto",
    &descriptor_table_net_2eproto_once, descriptor_table_net_2eproto_deps, 1, 87,
    schemas, file_default_instances, TableStruct_net_2eproto::offsets,
    file_level_metadata_net_2eproto, file_level_enum_descriptors_net_2eproto,
    file_level_service_descriptors_net_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_net_2eproto_getter() {
  return &descriptor_table_net_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_net_2eproto(&descriptor_table_net_2eproto);
namespace pbnet {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_RECHARGE_RESPONSE_Estat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[0];
}
bool PROBUFF_NET_RECHARGE_RESPONSE_Estat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_Success;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_NotRechargeId;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_MaxCount;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_MIN;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_MAX;
constexpr int PROBUFF_NET_RECHARGE_RESPONSE::Estat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_ROLESTAT_stat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[1];
}
bool PROBUFF_NET_ROLESTAT_stat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::online;
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::offline;
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::stat_MIN;
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::stat_MAX;
constexpr int PROBUFF_NET_ROLESTAT::stat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_ROLESTAT_logic_stat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[2];
}
bool PROBUFF_NET_ROLESTAT_logic_stat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::friends;
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::familyer;
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::logic_stat_MIN;
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::logic_stat_MAX;
constexpr int PROBUFF_NET_ROLESTAT::logic_stat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_LOGIC_CHAT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[3];
}
bool ENUM_LOGIC_CHAT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_CHAT_CHANNEL_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[4];
}
bool ENUM_CHAT_CHANNEL_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eunit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[5];
}
bool eunit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eunitstat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[6];
}
bool eunitstat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PROBUFF_NET_MSG_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MSG_RESPONSE>()._impl_._has_bits_);
  static void set_has_mmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MSG_RESPONSE::PROBUFF_NET_MSG_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MSG_RESPONSE)
}
PROBUFF_NET_MSG_RESPONSE::PROBUFF_NET_MSG_RESPONSE(const PROBUFF_NET_MSG_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MSG_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmsg_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mmsg()) {
    _this->_impl_.mmsg_.Set(from._internal_mmsg(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MSG_RESPONSE)
}

inline void PROBUFF_NET_MSG_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmsg_){}
  };
  _impl_.mmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_MSG_RESPONSE::~PROBUFF_NET_MSG_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MSG_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MSG_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mmsg_.Destroy();
}

void PROBUFF_NET_MSG_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MSG_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mmsg_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MSG_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string mmsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_MSG_RESPONSE.mmsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MSG_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string mmsg = 1;
  if (_internal_has_mmsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mmsg().data(), static_cast<int>(this->_internal_mmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_MSG_RESPONSE.mmsg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MSG_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MSG_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string mmsg = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mmsg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MSG_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MSG_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MSG_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MSG_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MSG_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MSG_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mmsg()) {
    _this->_internal_set_mmsg(from._internal_mmsg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MSG_RESPONSE::CopyFrom(const PROBUFF_NET_MSG_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MSG_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MSG_RESPONSE::InternalSwap(PROBUFF_NET_MSG_RESPONSE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mmsg_, lhs_arena,
      &other->_impl_.mmsg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MSG_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[0]);
}

// ===================================================================

class PROBUFF_NET_HEARTBEAT::_Internal {
 public:
};

PROBUFF_NET_HEARTBEAT::PROBUFF_NET_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_HEARTBEAT)
}
PROBUFF_NET_HEARTBEAT::PROBUFF_NET_HEARTBEAT(const PROBUFF_NET_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_HEARTBEAT* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_HEARTBEAT)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_HEARTBEAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_HEARTBEAT::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_HEARTBEAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[1]);
}

// ===================================================================

class PROBUFF_NET_RECHARGE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RECHARGE>()._impl_._has_bits_);
  static void set_has_mrechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_RECHARGE::PROBUFF_NET_RECHARGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RECHARGE)
}
PROBUFF_NET_RECHARGE::PROBUFF_NET_RECHARGE(const PROBUFF_NET_RECHARGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_RECHARGE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mrechargeid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mrechargeid_ = from._impl_.mrechargeid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RECHARGE)
}

inline void PROBUFF_NET_RECHARGE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mrechargeid_){0}
  };
}

PROBUFF_NET_RECHARGE::~PROBUFF_NET_RECHARGE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RECHARGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_RECHARGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_RECHARGE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_RECHARGE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RECHARGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mrechargeid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RECHARGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mrechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mrechargeid(&has_bits);
          _impl_.mrechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_RECHARGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RECHARGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mrechargeid = 1;
  if (_internal_has_mrechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mrechargeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RECHARGE)
  return target;
}

size_t PROBUFF_NET_RECHARGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RECHARGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mrechargeid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mrechargeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_RECHARGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_RECHARGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_RECHARGE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_RECHARGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_RECHARGE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_RECHARGE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RECHARGE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mrechargeid()) {
    _this->_internal_set_mrechargeid(from._internal_mrechargeid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_RECHARGE::CopyFrom(const PROBUFF_NET_RECHARGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RECHARGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RECHARGE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RECHARGE::InternalSwap(PROBUFF_NET_RECHARGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mrechargeid_, other->_impl_.mrechargeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RECHARGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[2]);
}

// ===================================================================

class PROBUFF_NET_RECHARGE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RECHARGE_RESPONSE>()._impl_._has_bits_);
  static void set_has_mrechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_morderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_RECHARGE_RESPONSE::PROBUFF_NET_RECHARGE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
}
PROBUFF_NET_RECHARGE_RESPONSE::PROBUFF_NET_RECHARGE_RESPONSE(const PROBUFF_NET_RECHARGE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_RECHARGE_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.morderid_){}
    , decltype(_impl_.mrechargeid_){}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.morderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.morderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_morderid()) {
    _this->_impl_.morderid_.Set(from._internal_morderid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mrechargeid_, &from._impl_.mrechargeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstat_) -
    reinterpret_cast<char*>(&_impl_.mrechargeid_)) + sizeof(_impl_.mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
}

inline void PROBUFF_NET_RECHARGE_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.morderid_){}
    , decltype(_impl_.mrechargeid_){0}
    , decltype(_impl_.mstat_){0}
  };
  _impl_.morderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.morderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_RECHARGE_RESPONSE::~PROBUFF_NET_RECHARGE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_RECHARGE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.morderid_.Destroy();
}

void PROBUFF_NET_RECHARGE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_RECHARGE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.morderid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.mrechargeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstat_) -
        reinterpret_cast<char*>(&_impl_.mrechargeid_)) + sizeof(_impl_.mstat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RECHARGE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mrechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mrechargeid(&has_bits);
          _impl_.mrechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mstat(static_cast<::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string morderid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_morderid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_RECHARGE_RESPONSE.morderid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_RECHARGE_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mrechargeid = 1;
  if (_internal_has_mrechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mrechargeid(), target);
  }

  // optional .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mstat(), target);
  }

  // optional string morderid = 3;
  if (_internal_has_morderid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_morderid().data(), static_cast<int>(this->_internal_morderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_RECHARGE_RESPONSE.morderid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_morderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_RECHARGE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string morderid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morderid());
    }

    // optional int32 mrechargeid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mrechargeid());
    }

    // optional .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat mstat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mstat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_RECHARGE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_RECHARGE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_RECHARGE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_RECHARGE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_RECHARGE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_RECHARGE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_morderid(from._internal_morderid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mrechargeid_ = from._impl_.mrechargeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mstat_ = from._impl_.mstat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_RECHARGE_RESPONSE::CopyFrom(const PROBUFF_NET_RECHARGE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RECHARGE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RECHARGE_RESPONSE::InternalSwap(PROBUFF_NET_RECHARGE_RESPONSE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.morderid_, lhs_arena,
      &other->_impl_.morderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RECHARGE_RESPONSE, _impl_.mstat_)
      + sizeof(PROBUFF_NET_RECHARGE_RESPONSE::_impl_.mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RECHARGE_RESPONSE, _impl_.mrechargeid_)>(
          reinterpret_cast<char*>(&_impl_.mrechargeid_),
          reinterpret_cast<char*>(&other->_impl_.mrechargeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RECHARGE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[3]);
}

// ===================================================================

PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse() {}
PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::MergeFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[4]);
}

// ===================================================================

class PROBUFF_NET_DELIVER_GOODS_RECHARGE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_DELIVER_GOODS_RECHARGE>()._impl_._has_bits_);
  static void set_has_mrechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_morderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mgold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_DELIVER_GOODS_RECHARGE::PROBUFF_NET_DELIVER_GOODS_RECHARGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PROBUFF_NET_DELIVER_GOODS_RECHARGE::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
}
PROBUFF_NET_DELIVER_GOODS_RECHARGE::PROBUFF_NET_DELIVER_GOODS_RECHARGE(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_DELIVER_GOODS_RECHARGE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mitems_)*/{}
    , decltype(_impl_.morderid_){}
    , decltype(_impl_.mrechargeid_){}
    , decltype(_impl_.mgold_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mitems_.MergeFrom(from._impl_.mitems_);
  _impl_.morderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.morderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_morderid()) {
    _this->_impl_.morderid_.Set(from._internal_morderid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mrechargeid_, &from._impl_.mrechargeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mgold_) -
    reinterpret_cast<char*>(&_impl_.mrechargeid_)) + sizeof(_impl_.mgold_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
}

inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mitems_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.morderid_){}
    , decltype(_impl_.mrechargeid_){0}
    , decltype(_impl_.mgold_){0}
  };
  _impl_.morderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.morderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_DELIVER_GOODS_RECHARGE::~PROBUFF_NET_DELIVER_GOODS_RECHARGE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mitems_.Destruct();
  _impl_.mitems_.~MapField();
  _impl_.morderid_.Destroy();
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::ArenaDtor(void* object) {
  PROBUFF_NET_DELIVER_GOODS_RECHARGE* _this = reinterpret_cast< PROBUFF_NET_DELIVER_GOODS_RECHARGE* >(object);
  _this->_impl_.mitems_.Destruct();
}
void PROBUFF_NET_DELIVER_GOODS_RECHARGE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mitems_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.morderid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.mrechargeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mgold_) -
        reinterpret_cast<char*>(&_impl_.mrechargeid_)) + sizeof(_impl_.mgold_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_DELIVER_GOODS_RECHARGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mrechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mrechargeid(&has_bits);
          _impl_.mrechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string morderid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_morderid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.morderid"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 mgold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mgold(&has_bits);
          _impl_.mgold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, int32> mitems = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mitems_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_DELIVER_GOODS_RECHARGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mrechargeid = 1;
  if (_internal_has_mrechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mrechargeid(), target);
  }

  // optional string morderid = 2;
  if (_internal_has_morderid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_morderid().data(), static_cast<int>(this->_internal_morderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.morderid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_morderid(), target);
  }

  // optional int32 mgold = 3;
  if (_internal_has_mgold()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mgold(), target);
  }

  // map<int32, int32> mitems = 4;
  if (!this->_internal_mitems().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mitems();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  return target;
}

size_t PROBUFF_NET_DELIVER_GOODS_RECHARGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> mitems = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mitems_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_mitems().begin();
      it != this->_internal_mitems().end(); ++it) {
    total_size += PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string morderid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morderid());
    }

    // optional int32 mrechargeid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mrechargeid());
    }

    // optional int32 mgold = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mgold());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_DELIVER_GOODS_RECHARGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_DELIVER_GOODS_RECHARGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_DELIVER_GOODS_RECHARGE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_DELIVER_GOODS_RECHARGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_DELIVER_GOODS_RECHARGE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_DELIVER_GOODS_RECHARGE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mitems_.MergeFrom(from._impl_.mitems_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_morderid(from._internal_morderid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mrechargeid_ = from._impl_.mrechargeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mgold_ = from._impl_.mgold_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::CopyFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::InternalSwap(PROBUFF_NET_DELIVER_GOODS_RECHARGE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mitems_.InternalSwap(&other->_impl_.mitems_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.morderid_, lhs_arena,
      &other->_impl_.morderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_DELIVER_GOODS_RECHARGE, _impl_.mgold_)
      + sizeof(PROBUFF_NET_DELIVER_GOODS_RECHARGE::_impl_.mgold_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_DELIVER_GOODS_RECHARGE, _impl_.mrechargeid_)>(
          reinterpret_cast<char*>(&_impl_.mrechargeid_),
          reinterpret_cast<char*>(&other->_impl_.mrechargeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_DELIVER_GOODS_RECHARGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[5]);
}

// ===================================================================

class PROBUFF_NET_ERROR::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ERROR>()._impl_._has_bits_);
  static void set_has_merrmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ERROR::PROBUFF_NET_ERROR(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ERROR)
}
PROBUFF_NET_ERROR::PROBUFF_NET_ERROR(const PROBUFF_NET_ERROR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ERROR* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.merrmessage_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.merrmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.merrmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_merrmessage()) {
    _this->_impl_.merrmessage_.Set(from._internal_merrmessage(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ERROR)
}

inline void PROBUFF_NET_ERROR::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.merrmessage_){}
  };
  _impl_.merrmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.merrmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_ERROR::~PROBUFF_NET_ERROR() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ERROR)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ERROR::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.merrmessage_.Destroy();
}

void PROBUFF_NET_ERROR::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ERROR::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ERROR)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.merrmessage_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ERROR::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string merrmessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_merrmessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ERROR.merrmessage"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ERROR::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ERROR)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string merrmessage = 2;
  if (_internal_has_merrmessage()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_merrmessage().data(), static_cast<int>(this->_internal_merrmessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ERROR.merrmessage");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_merrmessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ERROR)
  return target;
}

size_t PROBUFF_NET_ERROR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ERROR)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string merrmessage = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_merrmessage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ERROR::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ERROR::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ERROR::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ERROR::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ERROR*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ERROR&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ERROR)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_merrmessage()) {
    _this->_internal_set_merrmessage(from._internal_merrmessage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ERROR::CopyFrom(const PROBUFF_NET_ERROR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ERROR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ERROR::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ERROR::InternalSwap(PROBUFF_NET_ERROR* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.merrmessage_, lhs_arena,
      &other->_impl_.merrmessage_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ERROR::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[6]);
}

// ===================================================================

class PROBUFF_NET_GET_TIME::_Internal {
 public:
};

PROBUFF_NET_GET_TIME::PROBUFF_NET_GET_TIME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_GET_TIME)
}
PROBUFF_NET_GET_TIME::PROBUFF_NET_GET_TIME(const PROBUFF_NET_GET_TIME& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_GET_TIME* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_GET_TIME)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_GET_TIME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_GET_TIME::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_GET_TIME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[7]);
}

// ===================================================================

class PROBUFF_NET_GET_TIME_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_GET_TIME_RESPONSE>()._impl_._has_bits_);
  static void set_has_mutc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_GET_TIME_RESPONSE::PROBUFF_NET_GET_TIME_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
}
PROBUFF_NET_GET_TIME_RESPONSE::PROBUFF_NET_GET_TIME_RESPONSE(const PROBUFF_NET_GET_TIME_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_GET_TIME_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mutc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mutc_ = from._impl_.mutc_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
}

inline void PROBUFF_NET_GET_TIME_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mutc_){0}
  };
}

PROBUFF_NET_GET_TIME_RESPONSE::~PROBUFF_NET_GET_TIME_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_GET_TIME_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_GET_TIME_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_GET_TIME_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mutc_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_GET_TIME_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mutc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mutc(&has_bits);
          _impl_.mutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_GET_TIME_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mutc = 1;
  if (_internal_has_mutc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mutc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  return target;
}

size_t PROBUFF_NET_GET_TIME_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mutc = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mutc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_GET_TIME_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_GET_TIME_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_GET_TIME_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_GET_TIME_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_GET_TIME_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_GET_TIME_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mutc()) {
    _this->_internal_set_mutc(from._internal_mutc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_GET_TIME_RESPONSE::CopyFrom(const PROBUFF_NET_GET_TIME_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_GET_TIME_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_GET_TIME_RESPONSE::InternalSwap(PROBUFF_NET_GET_TIME_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mutc_, other->_impl_.mutc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_GET_TIME_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[8]);
}

// ===================================================================

class PROBUFF_NET_NOTICE::_Internal {
 public:
};

PROBUFF_NET_NOTICE::PROBUFF_NET_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_NOTICE)
}
PROBUFF_NET_NOTICE::PROBUFF_NET_NOTICE(const PROBUFF_NET_NOTICE& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_NOTICE* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_NOTICE)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_NOTICE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_NOTICE::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_NOTICE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[9]);
}

// ===================================================================

class PROBUFF_NET_NOTICE_RESPONSE::_Internal {
 public:
};

void PROBUFF_NET_NOTICE_RESPONSE::clear_mnotices() {
  _impl_.mnotices_.Clear();
}
PROBUFF_NET_NOTICE_RESPONSE::PROBUFF_NET_NOTICE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
}
PROBUFF_NET_NOTICE_RESPONSE::PROBUFF_NET_NOTICE_RESPONSE(const PROBUFF_NET_NOTICE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_NOTICE_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mnotices_){from._impl_.mnotices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
}

inline void PROBUFF_NET_NOTICE_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mnotices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_NOTICE_RESPONSE::~PROBUFF_NET_NOTICE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_NOTICE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mnotices_.~RepeatedPtrField();
}

void PROBUFF_NET_NOTICE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_NOTICE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mnotices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_NOTICE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pbdb.db_notice mnotices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mnotices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_NOTICE_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbdb.db_notice mnotices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mnotices_size()); i < n; i++) {
    const auto& repfield = this->_internal_mnotices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_NOTICE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_notice mnotices = 1;
  total_size += 1UL * this->_internal_mnotices_size();
  for (const auto& msg : this->_impl_.mnotices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_NOTICE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_NOTICE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_NOTICE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_NOTICE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_NOTICE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_NOTICE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mnotices_.MergeFrom(from._impl_.mnotices_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_NOTICE_RESPONSE::CopyFrom(const PROBUFF_NET_NOTICE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_NOTICE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_NOTICE_RESPONSE::InternalSwap(PROBUFF_NET_NOTICE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mnotices_.InternalSwap(&other->_impl_.mnotices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_NOTICE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[10]);
}

// ===================================================================

class PROBUFF_NET_ACOUNT_LOGIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ACOUNT_LOGIN>()._impl_._has_bits_);
  static void set_has_marea(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_maccount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mpassword(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_ACOUNT_LOGIN::PROBUFF_NET_ACOUNT_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
}
PROBUFF_NET_ACOUNT_LOGIN::PROBUFF_NET_ACOUNT_LOGIN(const PROBUFF_NET_ACOUNT_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ACOUNT_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.maccount_){}
    , decltype(_impl_.mpassword_){}
    , decltype(_impl_.marea_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.maccount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maccount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_maccount()) {
    _this->_impl_.maccount_.Set(from._internal_maccount(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mpassword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mpassword()) {
    _this->_impl_.mpassword_.Set(from._internal_mpassword(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.marea_ = from._impl_.marea_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
}

inline void PROBUFF_NET_ACOUNT_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.maccount_){}
    , decltype(_impl_.mpassword_){}
    , decltype(_impl_.marea_){0}
  };
  _impl_.maccount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maccount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mpassword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_ACOUNT_LOGIN::~PROBUFF_NET_ACOUNT_LOGIN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ACOUNT_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.maccount_.Destroy();
  _impl_.mpassword_.Destroy();
}

void PROBUFF_NET_ACOUNT_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ACOUNT_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.maccount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mpassword_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.marea_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ACOUNT_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 marea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_marea(&has_bits);
          _impl_.marea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string maccount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_maccount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN.maccount"));
        } else
          goto handle_unusual;
        continue;
      // optional string mpassword = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mpassword();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN.mpassword"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ACOUNT_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 marea = 1;
  if (_internal_has_marea()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_marea(), target);
  }

  // optional string maccount = 2;
  if (_internal_has_maccount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maccount().data(), static_cast<int>(this->_internal_maccount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN.maccount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_maccount(), target);
  }

  // optional string mpassword = 3;
  if (_internal_has_mpassword()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mpassword().data(), static_cast<int>(this->_internal_mpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN.mpassword");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mpassword(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  return target;
}

size_t PROBUFF_NET_ACOUNT_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string maccount = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_maccount());
    }

    // optional string mpassword = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mpassword());
    }

    // optional int32 marea = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_marea());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ACOUNT_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ACOUNT_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ACOUNT_LOGIN::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ACOUNT_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ACOUNT_LOGIN*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ACOUNT_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_maccount(from._internal_maccount());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mpassword(from._internal_mpassword());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.marea_ = from._impl_.marea_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ACOUNT_LOGIN::CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ACOUNT_LOGIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ACOUNT_LOGIN::InternalSwap(PROBUFF_NET_ACOUNT_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.maccount_, lhs_arena,
      &other->_impl_.maccount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mpassword_, lhs_arena,
      &other->_impl_.mpassword_, rhs_arena
  );
  swap(_impl_.marea_, other->_impl_.marea_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ACOUNT_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[11]);
}

// ===================================================================

class PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>()._impl_._has_bits_);
  static void set_has_marea(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_msession(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maccount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mgatewayid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
}
PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msession_){}
    , decltype(_impl_.maccount_){}
    , decltype(_impl_.mroleid_){}
    , decltype(_impl_.marea_){}
    , decltype(_impl_.mgatewayid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msession_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msession_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msession()) {
    _this->_impl_.msession_.Set(from._internal_msession(), 
      _this->GetArenaForAllocation());
  }
  _impl_.maccount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maccount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_maccount()) {
    _this->_impl_.maccount_.Set(from._internal_maccount(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mroleid_, &from._impl_.mroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mgatewayid_) -
    reinterpret_cast<char*>(&_impl_.mroleid_)) + sizeof(_impl_.mgatewayid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
}

inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msession_){}
    , decltype(_impl_.maccount_){}
    , decltype(_impl_.mroleid_){int64_t{0}}
    , decltype(_impl_.marea_){0}
    , decltype(_impl_.mgatewayid_){0}
  };
  _impl_.msession_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msession_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maccount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maccount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::~PROBUFF_NET_ACOUNT_LOGIN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msession_.Destroy();
  _impl_.maccount_.Destroy();
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msession_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.maccount_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.mroleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mgatewayid_) -
        reinterpret_cast<char*>(&_impl_.mroleid_)) + sizeof(_impl_.mgatewayid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 marea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_marea(&has_bits);
          _impl_.marea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 mroleid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mroleid(&has_bits);
          _impl_.mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string msession = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msession();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.msession"));
        } else
          goto handle_unusual;
        continue;
      // optional string maccount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_maccount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.maccount"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 mgatewayid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mgatewayid(&has_bits);
          _impl_.mgatewayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 marea = 1;
  if (_internal_has_marea()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_marea(), target);
  }

  // optional int64 mroleid = 2;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_mroleid(), target);
  }

  // optional string msession = 3;
  if (_internal_has_msession()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msession().data(), static_cast<int>(this->_internal_msession().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.msession");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msession(), target);
  }

  // optional string maccount = 4;
  if (_internal_has_maccount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maccount().data(), static_cast<int>(this->_internal_maccount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.maccount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_maccount(), target);
  }

  // optional int32 mgatewayid = 5;
  if (_internal_has_mgatewayid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mgatewayid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  return target;
}

size_t PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string msession = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msession());
    }

    // optional string maccount = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_maccount());
    }

    // optional int64 mroleid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mroleid());
    }

    // optional int32 marea = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_marea());
    }

    // optional int32 mgatewayid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mgatewayid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msession(from._internal_msession());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_maccount(from._internal_maccount());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mroleid_ = from._impl_.mroleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.marea_ = from._impl_.marea_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.mgatewayid_ = from._impl_.mgatewayid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::InternalSwap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msession_, lhs_arena,
      &other->_impl_.msession_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.maccount_, lhs_arena,
      &other->_impl_.maccount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.mgatewayid_)
      + sizeof(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_impl_.mgatewayid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.mroleid_)>(
          reinterpret_cast<char*>(&_impl_.mroleid_),
          reinterpret_cast<char*>(&other->_impl_.mroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[12]);
}

// ===================================================================

class PROBUFF_NET_ROLE_LOGIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ROLE_LOGIN>()._impl_._has_bits_);
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msession(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_miscreate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_marea(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mgatewayid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PROBUFF_NET_ROLE_LOGIN::PROBUFF_NET_ROLE_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
}
PROBUFF_NET_ROLE_LOGIN::PROBUFF_NET_ROLE_LOGIN(const PROBUFF_NET_ROLE_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ROLE_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msession_){}
    , decltype(_impl_.mroleid_){}
    , decltype(_impl_.miscreate_){}
    , decltype(_impl_.marea_){}
    , decltype(_impl_.mgatewayid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msession_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msession_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msession()) {
    _this->_impl_.msession_.Set(from._internal_msession(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mroleid_, &from._impl_.mroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mgatewayid_) -
    reinterpret_cast<char*>(&_impl_.mroleid_)) + sizeof(_impl_.mgatewayid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
}

inline void PROBUFF_NET_ROLE_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msession_){}
    , decltype(_impl_.mroleid_){int64_t{0}}
    , decltype(_impl_.miscreate_){false}
    , decltype(_impl_.marea_){0}
    , decltype(_impl_.mgatewayid_){0}
  };
  _impl_.msession_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msession_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_ROLE_LOGIN::~PROBUFF_NET_ROLE_LOGIN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ROLE_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msession_.Destroy();
}

void PROBUFF_NET_ROLE_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ROLE_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.msession_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.mroleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mgatewayid_) -
        reinterpret_cast<char*>(&_impl_.mroleid_)) + sizeof(_impl_.mgatewayid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLE_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mroleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mroleid(&has_bits);
          _impl_.mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string msession = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msession();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ROLE_LOGIN.msession"));
        } else
          goto handle_unusual;
        continue;
      // optional bool miscreate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_miscreate(&has_bits);
          _impl_.miscreate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 marea = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_marea(&has_bits);
          _impl_.marea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mgatewayid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mgatewayid(&has_bits);
          _impl_.mgatewayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ROLE_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mroleid = 1;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mroleid(), target);
  }

  // optional string msession = 2;
  if (_internal_has_msession()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msession().data(), static_cast<int>(this->_internal_msession().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ROLE_LOGIN.msession");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msession(), target);
  }

  // optional bool miscreate = 3;
  if (_internal_has_miscreate()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_miscreate(), target);
  }

  // optional int32 marea = 4;
  if (_internal_has_marea()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_marea(), target);
  }

  // optional int32 mgatewayid = 5;
  if (_internal_has_mgatewayid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mgatewayid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLE_LOGIN)
  return target;
}

size_t PROBUFF_NET_ROLE_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string msession = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msession());
    }

    // optional int64 mroleid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mroleid());
    }

    // optional bool miscreate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 marea = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_marea());
    }

    // optional int32 mgatewayid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mgatewayid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ROLE_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ROLE_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ROLE_LOGIN::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ROLE_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ROLE_LOGIN*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ROLE_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msession(from._internal_msession());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mroleid_ = from._impl_.mroleid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.miscreate_ = from._impl_.miscreate_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.marea_ = from._impl_.marea_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.mgatewayid_ = from._impl_.mgatewayid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ROLE_LOGIN::CopyFrom(const PROBUFF_NET_ROLE_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLE_LOGIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLE_LOGIN::InternalSwap(PROBUFF_NET_ROLE_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msession_, lhs_arena,
      &other->_impl_.msession_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_LOGIN, _impl_.mgatewayid_)
      + sizeof(PROBUFF_NET_ROLE_LOGIN::_impl_.mgatewayid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_LOGIN, _impl_.mroleid_)>(
          reinterpret_cast<char*>(&_impl_.mroleid_),
          reinterpret_cast<char*>(&other->_impl_.mroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[13]);
}

// ===================================================================

class PROBUFF_NET_ROLE_SYNC::_Internal {
 public:
};

PROBUFF_NET_ROLE_SYNC::PROBUFF_NET_ROLE_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_SYNC)
}
PROBUFF_NET_ROLE_SYNC::PROBUFF_NET_ROLE_SYNC(const PROBUFF_NET_ROLE_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_ROLE_SYNC* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_SYNC)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ROLE_SYNC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ROLE_SYNC::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_SYNC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[14]);
}

// ===================================================================

class PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ROLE_SYNC_RESPONSE>()._impl_._has_bits_);
  static const ::pbdb::db_role& mrole(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_mrole(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pbdb::db_brief& mbrief(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_mbrief(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbdb::db_bag& mbag(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_mbag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pbdb::db_task& mtask(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_mtask(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pbdb::db_role&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::mrole(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->_impl_.mrole_;
}
const ::pbdb::db_brief&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::mbrief(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->_impl_.mbrief_;
}
const ::pbdb::db_bag&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::mbag(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->_impl_.mbag_;
}
const ::pbdb::db_task&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::mtask(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->_impl_.mtask_;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_mrole() {
  if (_impl_.mrole_ != nullptr) _impl_.mrole_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_mbrief() {
  if (_impl_.mbrief_ != nullptr) _impl_.mbrief_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_mbag() {
  if (_impl_.mbag_ != nullptr) _impl_.mbag_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_mtask() {
  if (_impl_.mtask_ != nullptr) _impl_.mtask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
PROBUFF_NET_ROLE_SYNC_RESPONSE::PROBUFF_NET_ROLE_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
}
PROBUFF_NET_ROLE_SYNC_RESPONSE::PROBUFF_NET_ROLE_SYNC_RESPONSE(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ROLE_SYNC_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mrole_){nullptr}
    , decltype(_impl_.mbrief_){nullptr}
    , decltype(_impl_.mbag_){nullptr}
    , decltype(_impl_.mtask_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mrole()) {
    _this->_impl_.mrole_ = new ::pbdb::db_role(*from._impl_.mrole_);
  }
  if (from._internal_has_mbrief()) {
    _this->_impl_.mbrief_ = new ::pbdb::db_brief(*from._impl_.mbrief_);
  }
  if (from._internal_has_mbag()) {
    _this->_impl_.mbag_ = new ::pbdb::db_bag(*from._impl_.mbag_);
  }
  if (from._internal_has_mtask()) {
    _this->_impl_.mtask_ = new ::pbdb::db_task(*from._impl_.mtask_);
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
}

inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mrole_){nullptr}
    , decltype(_impl_.mbrief_){nullptr}
    , decltype(_impl_.mbag_){nullptr}
    , decltype(_impl_.mtask_){nullptr}
  };
}

PROBUFF_NET_ROLE_SYNC_RESPONSE::~PROBUFF_NET_ROLE_SYNC_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mrole_;
  if (this != internal_default_instance()) delete _impl_.mbrief_;
  if (this != internal_default_instance()) delete _impl_.mbag_;
  if (this != internal_default_instance()) delete _impl_.mtask_;
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.mrole_ != nullptr);
      _impl_.mrole_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.mbrief_ != nullptr);
      _impl_.mbrief_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.mbag_ != nullptr);
      _impl_.mbag_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.mtask_ != nullptr);
      _impl_.mtask_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLE_SYNC_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbdb.db_role mrole = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mrole(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbdb.db_brief mbrief = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mbrief(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbdb.db_bag mbag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mbag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbdb.db_task mtask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mtask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ROLE_SYNC_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbdb.db_role mrole = 1;
  if (_internal_has_mrole()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mrole(this),
        _Internal::mrole(this).GetCachedSize(), target, stream);
  }

  // optional .pbdb.db_brief mbrief = 2;
  if (_internal_has_mbrief()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mbrief(this),
        _Internal::mbrief(this).GetCachedSize(), target, stream);
  }

  // optional .pbdb.db_bag mbag = 3;
  if (_internal_has_mbag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::mbag(this),
        _Internal::mbag(this).GetCachedSize(), target, stream);
  }

  // optional .pbdb.db_task mtask = 4;
  if (_internal_has_mtask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::mtask(this),
        _Internal::mtask(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  return target;
}

size_t PROBUFF_NET_ROLE_SYNC_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .pbdb.db_role mrole = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mrole_);
    }

    // optional .pbdb.db_brief mbrief = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mbrief_);
    }

    // optional .pbdb.db_bag mbag = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mbag_);
    }

    // optional .pbdb.db_task mtask = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mtask_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ROLE_SYNC_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ROLE_SYNC_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ROLE_SYNC_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ROLE_SYNC_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ROLE_SYNC_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ROLE_SYNC_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_mrole()->::pbdb::db_role::MergeFrom(
          from._internal_mrole());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_mbrief()->::pbdb::db_brief::MergeFrom(
          from._internal_mbrief());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_mbag()->::pbdb::db_bag::MergeFrom(
          from._internal_mbag());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_mtask()->::pbdb::db_task::MergeFrom(
          from._internal_mtask());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::CopyFrom(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLE_SYNC_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::InternalSwap(PROBUFF_NET_ROLE_SYNC_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.mtask_)
      + sizeof(PROBUFF_NET_ROLE_SYNC_RESPONSE::_impl_.mtask_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.mrole_)>(
          reinterpret_cast<char*>(&_impl_.mrole_),
          reinterpret_cast<char*>(&other->_impl_.mrole_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_SYNC_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[15]);
}

// ===================================================================

class PROBUFF_NET_BAG_SYNC::_Internal {
 public:
};

PROBUFF_NET_BAG_SYNC::PROBUFF_NET_BAG_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_SYNC)
}
PROBUFF_NET_BAG_SYNC::PROBUFF_NET_BAG_SYNC(const PROBUFF_NET_BAG_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_BAG_SYNC* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_SYNC)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_SYNC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_SYNC::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_SYNC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[16]);
}

// ===================================================================

class PROBUFF_NET_BAG_SYNC_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_SYNC_RESPONSE>()._impl_._has_bits_);
  static const ::pbdb::db_bag& mbag(const PROBUFF_NET_BAG_SYNC_RESPONSE* msg);
  static void set_has_mbag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pbdb::db_bag&
PROBUFF_NET_BAG_SYNC_RESPONSE::_Internal::mbag(const PROBUFF_NET_BAG_SYNC_RESPONSE* msg) {
  return *msg->_impl_.mbag_;
}
void PROBUFF_NET_BAG_SYNC_RESPONSE::clear_mbag() {
  if (_impl_.mbag_ != nullptr) _impl_.mbag_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PROBUFF_NET_BAG_SYNC_RESPONSE::PROBUFF_NET_BAG_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
}
PROBUFF_NET_BAG_SYNC_RESPONSE::PROBUFF_NET_BAG_SYNC_RESPONSE(const PROBUFF_NET_BAG_SYNC_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_BAG_SYNC_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mbag_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mbag()) {
    _this->_impl_.mbag_ = new ::pbdb::db_bag(*from._impl_.mbag_);
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
}

inline void PROBUFF_NET_BAG_SYNC_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mbag_){nullptr}
  };
}

PROBUFF_NET_BAG_SYNC_RESPONSE::~PROBUFF_NET_BAG_SYNC_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_BAG_SYNC_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mbag_;
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.mbag_ != nullptr);
    _impl_.mbag_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_SYNC_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbdb.db_bag mbag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mbag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_BAG_SYNC_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbdb.db_bag mbag = 1;
  if (_internal_has_mbag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mbag(this),
        _Internal::mbag(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  return target;
}

size_t PROBUFF_NET_BAG_SYNC_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .pbdb.db_bag mbag = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mbag_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_SYNC_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_BAG_SYNC_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_SYNC_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_BAG_SYNC_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_BAG_SYNC_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_BAG_SYNC_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mbag()) {
    _this->_internal_mutable_mbag()->::pbdb::db_bag::MergeFrom(
        from._internal_mbag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::CopyFrom(const PROBUFF_NET_BAG_SYNC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_SYNC_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::InternalSwap(PROBUFF_NET_BAG_SYNC_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mbag_, other->_impl_.mbag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_SYNC_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[17]);
}

// ===================================================================

class PROBUFF_NET_BAG_UPDATE_delitem::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_UPDATE_delitem>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_BAG_UPDATE_delitem::PROBUFF_NET_BAG_UPDATE_delitem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
}
PROBUFF_NET_BAG_UPDATE_delitem::PROBUFF_NET_BAG_UPDATE_delitem(const PROBUFF_NET_BAG_UPDATE_delitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_BAG_UPDATE_delitem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.mcount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mid_, &from._impl_.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mcount_) -
    reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mcount_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
}

inline void PROBUFF_NET_BAG_UPDATE_delitem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mid_){0}
    , decltype(_impl_.mcount_){0}
  };
}

PROBUFF_NET_BAG_UPDATE_delitem::~PROBUFF_NET_BAG_UPDATE_delitem() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_BAG_UPDATE_delitem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_BAG_UPDATE_delitem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_BAG_UPDATE_delitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mcount_) -
        reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mcount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE_delitem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mcount(&has_bits);
          _impl_.mcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_BAG_UPDATE_delitem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mid(), target);
  }

  // optional int32 mcount = 2;
  if (_internal_has_mcount()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  return target;
}

size_t PROBUFF_NET_BAG_UPDATE_delitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mid());
    }

    // optional int32 mcount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mcount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_UPDATE_delitem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_BAG_UPDATE_delitem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_UPDATE_delitem::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_BAG_UPDATE_delitem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_BAG_UPDATE_delitem*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_BAG_UPDATE_delitem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mcount_ = from._impl_.mcount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_BAG_UPDATE_delitem::CopyFrom(const PROBUFF_NET_BAG_UPDATE_delitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE_delitem::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE_delitem::InternalSwap(PROBUFF_NET_BAG_UPDATE_delitem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_delitem, _impl_.mcount_)
      + sizeof(PROBUFF_NET_BAG_UPDATE_delitem::_impl_.mcount_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_delitem, _impl_.mid_)>(
          reinterpret_cast<char*>(&_impl_.mid_),
          reinterpret_cast<char*>(&other->_impl_.mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE_delitem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[18]);
}

// ===================================================================

class PROBUFF_NET_BAG_UPDATE_additem::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_UPDATE_additem>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_BAG_UPDATE_additem::PROBUFF_NET_BAG_UPDATE_additem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
}
PROBUFF_NET_BAG_UPDATE_additem::PROBUFF_NET_BAG_UPDATE_additem(const PROBUFF_NET_BAG_UPDATE_additem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_BAG_UPDATE_additem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.mcount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mid_, &from._impl_.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mcount_) -
    reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mcount_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
}

inline void PROBUFF_NET_BAG_UPDATE_additem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mid_){0}
    , decltype(_impl_.mcount_){0}
  };
}

PROBUFF_NET_BAG_UPDATE_additem::~PROBUFF_NET_BAG_UPDATE_additem() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_BAG_UPDATE_additem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_BAG_UPDATE_additem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_BAG_UPDATE_additem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mcount_) -
        reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mcount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE_additem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mcount(&has_bits);
          _impl_.mcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_BAG_UPDATE_additem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mid(), target);
  }

  // optional int32 mcount = 2;
  if (_internal_has_mcount()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  return target;
}

size_t PROBUFF_NET_BAG_UPDATE_additem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mid());
    }

    // optional int32 mcount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mcount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_UPDATE_additem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_BAG_UPDATE_additem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_UPDATE_additem::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_BAG_UPDATE_additem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_BAG_UPDATE_additem*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_BAG_UPDATE_additem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mcount_ = from._impl_.mcount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_BAG_UPDATE_additem::CopyFrom(const PROBUFF_NET_BAG_UPDATE_additem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE_additem::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE_additem::InternalSwap(PROBUFF_NET_BAG_UPDATE_additem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_additem, _impl_.mcount_)
      + sizeof(PROBUFF_NET_BAG_UPDATE_additem::_impl_.mcount_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_additem, _impl_.mid_)>(
          reinterpret_cast<char*>(&_impl_.mid_),
          reinterpret_cast<char*>(&other->_impl_.mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE_additem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[19]);
}

// ===================================================================

class PROBUFF_NET_BAG_UPDATE::_Internal {
 public:
};

PROBUFF_NET_BAG_UPDATE::PROBUFF_NET_BAG_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE)
}
PROBUFF_NET_BAG_UPDATE::PROBUFF_NET_BAG_UPDATE(const PROBUFF_NET_BAG_UPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_BAG_UPDATE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mdelitems_){from._impl_.mdelitems_}
    , decltype(_impl_.mdelnostackitems_){from._impl_.mdelnostackitems_}
    , /*decltype(_impl_._mdelnostackitems_cached_byte_size_)*/{0}
    , decltype(_impl_.madditems_){from._impl_.madditems_}
    , decltype(_impl_.maddnostackitems_){from._impl_.maddnostackitems_}
    , /*decltype(_impl_._maddnostackitems_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE)
}

inline void PROBUFF_NET_BAG_UPDATE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mdelitems_){arena}
    , decltype(_impl_.mdelnostackitems_){arena}
    , /*decltype(_impl_._mdelnostackitems_cached_byte_size_)*/{0}
    , decltype(_impl_.madditems_){arena}
    , decltype(_impl_.maddnostackitems_){arena}
    , /*decltype(_impl_._maddnostackitems_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_BAG_UPDATE::~PROBUFF_NET_BAG_UPDATE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_BAG_UPDATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mdelitems_.~RepeatedPtrField();
  _impl_.mdelnostackitems_.~RepeatedField();
  _impl_.madditems_.~RepeatedPtrField();
  _impl_.maddnostackitems_.~RepeatedField();
}

void PROBUFF_NET_BAG_UPDATE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_BAG_UPDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mdelitems_.Clear();
  _impl_.mdelnostackitems_.Clear();
  _impl_.madditems_.Clear();
  _impl_.maddnostackitems_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pbnet.PROBUFF_NET_BAG_UPDATE.delitem mdelitems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mdelitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 mdelnostackitems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_mdelnostackitems(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_mdelnostackitems(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbnet.PROBUFF_NET_BAG_UPDATE.additem madditems = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_madditems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 maddnostackitems = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_maddnostackitems(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_maddnostackitems(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_BAG_UPDATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE.delitem mdelitems = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mdelitems_size()); i < n; i++) {
    const auto& repfield = this->_internal_mdelitems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 mdelnostackitems = 2;
  {
    int byte_size = _impl_._mdelnostackitems_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_mdelnostackitems(), byte_size, target);
    }
  }

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE.additem madditems = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_madditems_size()); i < n; i++) {
    const auto& repfield = this->_internal_madditems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 maddnostackitems = 4;
  {
    int byte_size = _impl_._maddnostackitems_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_maddnostackitems(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE)
  return target;
}

size_t PROBUFF_NET_BAG_UPDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE.delitem mdelitems = 1;
  total_size += 1UL * this->_internal_mdelitems_size();
  for (const auto& msg : this->_impl_.mdelitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 mdelnostackitems = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.mdelnostackitems_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._mdelnostackitems_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE.additem madditems = 3;
  total_size += 1UL * this->_internal_madditems_size();
  for (const auto& msg : this->_impl_.madditems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 maddnostackitems = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.maddnostackitems_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._maddnostackitems_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_UPDATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_BAG_UPDATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_UPDATE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_BAG_UPDATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_BAG_UPDATE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_BAG_UPDATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mdelitems_.MergeFrom(from._impl_.mdelitems_);
  _this->_impl_.mdelnostackitems_.MergeFrom(from._impl_.mdelnostackitems_);
  _this->_impl_.madditems_.MergeFrom(from._impl_.madditems_);
  _this->_impl_.maddnostackitems_.MergeFrom(from._impl_.maddnostackitems_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_BAG_UPDATE::CopyFrom(const PROBUFF_NET_BAG_UPDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE::InternalSwap(PROBUFF_NET_BAG_UPDATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mdelitems_.InternalSwap(&other->_impl_.mdelitems_);
  _impl_.mdelnostackitems_.InternalSwap(&other->_impl_.mdelnostackitems_);
  _impl_.madditems_.InternalSwap(&other->_impl_.madditems_);
  _impl_.maddnostackitems_.InternalSwap(&other->_impl_.maddnostackitems_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[20]);
}

// ===================================================================

class PROBUFF_NET_CMD::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CMD>()._impl_._has_bits_);
  static void set_has_mcmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CMD::PROBUFF_NET_CMD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CMD)
}
PROBUFF_NET_CMD::PROBUFF_NET_CMD(const PROBUFF_NET_CMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CMD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mcmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mcmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mcmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mcmd()) {
    _this->_impl_.mcmd_.Set(from._internal_mcmd(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CMD)
}

inline void PROBUFF_NET_CMD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mcmd_){}
  };
  _impl_.mcmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mcmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_CMD::~PROBUFF_NET_CMD() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CMD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CMD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mcmd_.Destroy();
}

void PROBUFF_NET_CMD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CMD::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CMD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mcmd_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CMD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string mcmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mcmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_CMD.mcmd"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_CMD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CMD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string mcmd = 1;
  if (_internal_has_mcmd()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcmd().data(), static_cast<int>(this->_internal_mcmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_CMD.mcmd");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mcmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CMD)
  return target;
}

size_t PROBUFF_NET_CMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CMD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string mcmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mcmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CMD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CMD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CMD::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CMD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CMD*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CMD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CMD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mcmd()) {
    _this->_internal_set_mcmd(from._internal_mcmd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CMD::CopyFrom(const PROBUFF_NET_CMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CMD::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CMD::InternalSwap(PROBUFF_NET_CMD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mcmd_, lhs_arena,
      &other->_impl_.mcmd_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CMD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[21]);
}

// ===================================================================

class PROBUFF_NET_CHAT::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHAT>()._impl_._has_bits_);
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mchannelid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mcontent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CHAT::PROBUFF_NET_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHAT)
}
PROBUFF_NET_CHAT::PROBUFF_NET_CHAT(const PROBUFF_NET_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mcontent_){}
    , decltype(_impl_.mtype_){}
    , decltype(_impl_.mchannelid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mcontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mcontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mcontent()) {
    _this->_impl_.mcontent_.Set(from._internal_mcontent(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mtype_, &from._impl_.mtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mchannelid_) -
    reinterpret_cast<char*>(&_impl_.mtype_)) + sizeof(_impl_.mchannelid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHAT)
}

inline void PROBUFF_NET_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mcontent_){}
    , decltype(_impl_.mtype_){0}
    , decltype(_impl_.mchannelid_){0}
  };
  _impl_.mcontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mcontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_CHAT::~PROBUFF_NET_CHAT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mcontent_.Destroy();
}

void PROBUFF_NET_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mcontent_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.mtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mchannelid_) -
        reinterpret_cast<char*>(&_impl_.mtype_)) + sizeof(_impl_.mchannelid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mtype(&has_bits);
          _impl_.mtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mchannelid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mchannelid(&has_bits);
          _impl_.mchannelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mcontent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mcontent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_CHAT.mcontent"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mtype = 1;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtype(), target);
  }

  // optional int32 mchannelid = 2;
  if (_internal_has_mchannelid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mchannelid(), target);
  }

  // optional string mcontent = 3;
  if (_internal_has_mcontent()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcontent().data(), static_cast<int>(this->_internal_mcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_CHAT.mcontent");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mcontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHAT)
  return target;
}

size_t PROBUFF_NET_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string mcontent = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mcontent());
    }

    // optional int32 mtype = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mtype());
    }

    // optional int32 mchannelid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mchannelid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CHAT::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CHAT*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mcontent(from._internal_mcontent());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mtype_ = from._impl_.mtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mchannelid_ = from._impl_.mchannelid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CHAT::CopyFrom(const PROBUFF_NET_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHAT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHAT::InternalSwap(PROBUFF_NET_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mcontent_, lhs_arena,
      &other->_impl_.mcontent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT, _impl_.mchannelid_)
      + sizeof(PROBUFF_NET_CHAT::_impl_.mchannelid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT, _impl_.mtype_)>(
          reinterpret_cast<char*>(&_impl_.mtype_),
          reinterpret_cast<char*>(&other->_impl_.mtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[22]);
}

// ===================================================================

class chatitem::_Internal {
 public:
  using HasBits = decltype(std::declval<chatitem>()._impl_._has_bits_);
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mrolename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mcontent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mutc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

chatitem::chatitem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.chatitem)
}
chatitem::chatitem(const chatitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  chatitem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mrolename_){}
    , decltype(_impl_.mcontent_){}
    , decltype(_impl_.mroleid_){}
    , decltype(_impl_.mutc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mrolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mrolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mrolename()) {
    _this->_impl_.mrolename_.Set(from._internal_mrolename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mcontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mcontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mcontent()) {
    _this->_impl_.mcontent_.Set(from._internal_mcontent(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mroleid_, &from._impl_.mroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mutc_) -
    reinterpret_cast<char*>(&_impl_.mroleid_)) + sizeof(_impl_.mutc_));
  // @@protoc_insertion_point(copy_constructor:pbnet.chatitem)
}

inline void chatitem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mrolename_){}
    , decltype(_impl_.mcontent_){}
    , decltype(_impl_.mroleid_){int64_t{0}}
    , decltype(_impl_.mutc_){0}
  };
  _impl_.mrolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mrolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mcontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mcontent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

chatitem::~chatitem() {
  // @@protoc_insertion_point(destructor:pbnet.chatitem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void chatitem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mrolename_.Destroy();
  _impl_.mcontent_.Destroy();
}

void chatitem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void chatitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.chatitem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.mrolename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.mcontent_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.mroleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mutc_) -
        reinterpret_cast<char*>(&_impl_.mroleid_)) + sizeof(_impl_.mutc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* chatitem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mroleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mroleid(&has_bits);
          _impl_.mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mrolename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mrolename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.chatitem.mrolename"));
        } else
          goto handle_unusual;
        continue;
      // optional string mcontent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mcontent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.chatitem.mcontent"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 mutc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mutc(&has_bits);
          _impl_.mutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* chatitem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.chatitem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mroleid = 1;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mroleid(), target);
  }

  // optional string mrolename = 2;
  if (_internal_has_mrolename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mrolename().data(), static_cast<int>(this->_internal_mrolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.chatitem.mrolename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mrolename(), target);
  }

  // optional string mcontent = 3;
  if (_internal_has_mcontent()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcontent().data(), static_cast<int>(this->_internal_mcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.chatitem.mcontent");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mcontent(), target);
  }

  // optional int32 mutc = 4;
  if (_internal_has_mutc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mutc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.chatitem)
  return target;
}

size_t chatitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.chatitem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string mrolename = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mrolename());
    }

    // optional string mcontent = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mcontent());
    }

    // optional int64 mroleid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mroleid());
    }

    // optional int32 mutc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mutc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData chatitem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    chatitem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*chatitem::GetClassData() const { return &_class_data_; }


void chatitem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<chatitem*>(&to_msg);
  auto& from = static_cast<const chatitem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.chatitem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mrolename(from._internal_mrolename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_mcontent(from._internal_mcontent());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mroleid_ = from._impl_.mroleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mutc_ = from._impl_.mutc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void chatitem::CopyFrom(const chatitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.chatitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatitem::IsInitialized() const {
  return true;
}

void chatitem::InternalSwap(chatitem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mrolename_, lhs_arena,
      &other->_impl_.mrolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mcontent_, lhs_arena,
      &other->_impl_.mcontent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(chatitem, _impl_.mutc_)
      + sizeof(chatitem::_impl_.mutc_)
      - PROTOBUF_FIELD_OFFSET(chatitem, _impl_.mroleid_)>(
          reinterpret_cast<char*>(&_impl_.mroleid_),
          reinterpret_cast<char*>(&other->_impl_.mroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata chatitem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[23]);
}

// ===================================================================

class PROBUFF_NET_CHAT_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHAT_RESPONSE>()._impl_._has_bits_);
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mchannelid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_CHAT_RESPONSE::PROBUFF_NET_CHAT_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
}
PROBUFF_NET_CHAT_RESPONSE::PROBUFF_NET_CHAT_RESPONSE(const PROBUFF_NET_CHAT_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CHAT_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mchatlist_){from._impl_.mchatlist_}
    , decltype(_impl_.mtype_){}
    , decltype(_impl_.mchannelid_){}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mtype_, &from._impl_.mtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstat_) -
    reinterpret_cast<char*>(&_impl_.mtype_)) + sizeof(_impl_.mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
}

inline void PROBUFF_NET_CHAT_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mchatlist_){arena}
    , decltype(_impl_.mtype_){0}
    , decltype(_impl_.mchannelid_){0}
    , decltype(_impl_.mstat_){false}
  };
}

PROBUFF_NET_CHAT_RESPONSE::~PROBUFF_NET_CHAT_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CHAT_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mchatlist_.~RepeatedPtrField();
}

void PROBUFF_NET_CHAT_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CHAT_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mchatlist_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.mtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstat_) -
        reinterpret_cast<char*>(&_impl_.mtype_)) + sizeof(_impl_.mstat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHAT_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mtype(&has_bits);
          _impl_.mtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mchannelid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mchannelid(&has_bits);
          _impl_.mchannelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbnet.chatitem mchatlist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mchatlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool mstat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_CHAT_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mtype = 1;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtype(), target);
  }

  // optional int32 mchannelid = 2;
  if (_internal_has_mchannelid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mchannelid(), target);
  }

  // repeated .pbnet.chatitem mchatlist = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mchatlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_mchatlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool mstat = 4;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  return target;
}

size_t PROBUFF_NET_CHAT_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.chatitem mchatlist = 3;
  total_size += 1UL * this->_internal_mchatlist_size();
  for (const auto& msg : this->_impl_.mchatlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 mtype = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mtype());
    }

    // optional int32 mchannelid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mchannelid());
    }

    // optional bool mstat = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CHAT_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CHAT_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CHAT_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CHAT_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CHAT_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CHAT_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mchatlist_.MergeFrom(from._impl_.mchatlist_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mtype_ = from._impl_.mtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mchannelid_ = from._impl_.mchannelid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mstat_ = from._impl_.mstat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CHAT_RESPONSE::CopyFrom(const PROBUFF_NET_CHAT_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHAT_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHAT_RESPONSE::InternalSwap(PROBUFF_NET_CHAT_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mchatlist_.InternalSwap(&other->_impl_.mchatlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT_RESPONSE, _impl_.mstat_)
      + sizeof(PROBUFF_NET_CHAT_RESPONSE::_impl_.mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT_RESPONSE, _impl_.mtype_)>(
          reinterpret_cast<char*>(&_impl_.mtype_),
          reinterpret_cast<char*>(&other->_impl_.mtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHAT_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[24]);
}

// ===================================================================

class PROBUFF_NET_SWITCH_LINE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_SWITCH_LINE>()._impl_._has_bits_);
  static void set_has_mline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_SWITCH_LINE::PROBUFF_NET_SWITCH_LINE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SWITCH_LINE)
}
PROBUFF_NET_SWITCH_LINE::PROBUFF_NET_SWITCH_LINE(const PROBUFF_NET_SWITCH_LINE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_SWITCH_LINE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mline_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mline_ = from._impl_.mline_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SWITCH_LINE)
}

inline void PROBUFF_NET_SWITCH_LINE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mline_){0}
  };
}

PROBUFF_NET_SWITCH_LINE::~PROBUFF_NET_SWITCH_LINE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SWITCH_LINE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SWITCH_LINE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_SWITCH_LINE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SWITCH_LINE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mline_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SWITCH_LINE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mline(&has_bits);
          _impl_.mline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_SWITCH_LINE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mline = 1;
  if (_internal_has_mline()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SWITCH_LINE)
  return target;
}

size_t PROBUFF_NET_SWITCH_LINE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mline = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mline());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SWITCH_LINE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SWITCH_LINE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SWITCH_LINE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SWITCH_LINE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SWITCH_LINE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SWITCH_LINE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mline()) {
    _this->_internal_set_mline(from._internal_mline());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SWITCH_LINE::CopyFrom(const PROBUFF_NET_SWITCH_LINE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SWITCH_LINE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SWITCH_LINE::InternalSwap(PROBUFF_NET_SWITCH_LINE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mline_, other->_impl_.mline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SWITCH_LINE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[25]);
}

// ===================================================================

class PROBUFF_NET_SWITCH_LINE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_SWITCH_LINE_RESPONSE>()._impl_._has_bits_);
  static void set_has_mline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_SWITCH_LINE_RESPONSE::PROBUFF_NET_SWITCH_LINE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
}
PROBUFF_NET_SWITCH_LINE_RESPONSE::PROBUFF_NET_SWITCH_LINE_RESPONSE(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_SWITCH_LINE_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mline_){}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mline_, &from._impl_.mline_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstat_) -
    reinterpret_cast<char*>(&_impl_.mline_)) + sizeof(_impl_.mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
}

inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mline_){0}
    , decltype(_impl_.mstat_){false}
  };
}

PROBUFF_NET_SWITCH_LINE_RESPONSE::~PROBUFF_NET_SWITCH_LINE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mline_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstat_) -
        reinterpret_cast<char*>(&_impl_.mline_)) + sizeof(_impl_.mstat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SWITCH_LINE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mline(&has_bits);
          _impl_.mline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_SWITCH_LINE_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mline = 1;
  if (_internal_has_mline()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mline(), target);
  }

  // optional bool mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_SWITCH_LINE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 mline = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mline());
    }

    // optional bool mstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SWITCH_LINE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SWITCH_LINE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SWITCH_LINE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SWITCH_LINE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SWITCH_LINE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SWITCH_LINE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mline_ = from._impl_.mline_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mstat_ = from._impl_.mstat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::CopyFrom(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SWITCH_LINE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::InternalSwap(PROBUFF_NET_SWITCH_LINE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_.mstat_)
      + sizeof(PROBUFF_NET_SWITCH_LINE_RESPONSE::_impl_.mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_.mline_)>(
          reinterpret_cast<char*>(&_impl_.mline_),
          reinterpret_cast<char*>(&other->_impl_.mline_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SWITCH_LINE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[26]);
}

// ===================================================================

class PROBUFF_NET_MAIL_LIST::_Internal {
 public:
};

PROBUFF_NET_MAIL_LIST::PROBUFF_NET_MAIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_LIST)
}
PROBUFF_NET_MAIL_LIST::PROBUFF_NET_MAIL_LIST(const PROBUFF_NET_MAIL_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_MAIL_LIST* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_LIST)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_LIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_LIST::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[27]);
}

// ===================================================================

PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse() {}
PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::MergeFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[28]);
}

// ===================================================================

class PROBUFF_NET_MAIL_LIST_RESPONSE::_Internal {
 public:
};

void PROBUFF_NET_MAIL_LIST_RESPONSE::clear_mmail() {
  _impl_.mmail_.Clear();
}
PROBUFF_NET_MAIL_LIST_RESPONSE::PROBUFF_NET_MAIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PROBUFF_NET_MAIL_LIST_RESPONSE::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
}
PROBUFF_NET_MAIL_LIST_RESPONSE::PROBUFF_NET_MAIL_LIST_RESPONSE(const PROBUFF_NET_MAIL_LIST_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_LIST_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.mmail_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mmail_.MergeFrom(from._impl_.mmail_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
}

inline void PROBUFF_NET_MAIL_LIST_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.mmail_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_MAIL_LIST_RESPONSE::~PROBUFF_NET_MAIL_LIST_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_LIST_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mmail_.Destruct();
  _impl_.mmail_.~MapField();
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_LIST_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MAIL_LIST_RESPONSE* >(object);
  _this->_impl_.mmail_.Destruct();
}
void PROBUFF_NET_MAIL_LIST_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mmail_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_LIST_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .pbdb.mail> mmail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mmail_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MAIL_LIST_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .pbdb.mail> mmail = 1;
  if (!this->_internal_mmail().empty()) {
    using MapType = ::_pb::Map<int32_t, ::pbdb::mail>;
    using WireHelper = PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mmail();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_LIST_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.mail> mmail = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mmail_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::pbdb::mail >::const_iterator
      it = this->_internal_mmail().begin();
      it != this->_internal_mmail().end(); ++it) {
    total_size += PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_LIST_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_LIST_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_LIST_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_LIST_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_LIST_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_LIST_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mmail_.MergeFrom(from._impl_.mmail_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_LIST_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_LIST_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mmail_.InternalSwap(&other->_impl_.mmail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[29]);
}

// ===================================================================

class PROBUFF_NET_MAIL_READ::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_READ>()._impl_._has_bits_);
  static void set_has_mmailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_READ::PROBUFF_NET_MAIL_READ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_READ)
}
PROBUFF_NET_MAIL_READ::PROBUFF_NET_MAIL_READ(const PROBUFF_NET_MAIL_READ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_READ* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmailid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mmailid_ = from._impl_.mmailid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_READ)
}

inline void PROBUFF_NET_MAIL_READ::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmailid_){int64_t{0}}
  };
}

PROBUFF_NET_MAIL_READ::~PROBUFF_NET_MAIL_READ() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_READ)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_READ::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_READ::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_READ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_READ)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mmailid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_READ::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mmailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mmailid(&has_bits);
          _impl_.mmailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MAIL_READ::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_READ)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mmailid = 1;
  if (_internal_has_mmailid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mmailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_READ)
  return target;
}

size_t PROBUFF_NET_MAIL_READ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_READ)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 mmailid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mmailid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_READ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_READ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_READ::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_READ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_READ*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_READ&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_READ)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mmailid()) {
    _this->_internal_set_mmailid(from._internal_mmailid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_READ::CopyFrom(const PROBUFF_NET_MAIL_READ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_READ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_READ::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_READ::InternalSwap(PROBUFF_NET_MAIL_READ* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mmailid_, other->_impl_.mmailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_READ::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[30]);
}

// ===================================================================

class PROBUFF_NET_MAIL_READ_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_READ_RESPONSE>()._impl_._has_bits_);
  static void set_has_mmailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_READ_RESPONSE::PROBUFF_NET_MAIL_READ_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
}
PROBUFF_NET_MAIL_READ_RESPONSE::PROBUFF_NET_MAIL_READ_RESPONSE(const PROBUFF_NET_MAIL_READ_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_READ_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmailid_){}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mmailid_, &from._impl_.mmailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstat_) -
    reinterpret_cast<char*>(&_impl_.mmailid_)) + sizeof(_impl_.mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
}

inline void PROBUFF_NET_MAIL_READ_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmailid_){int64_t{0}}
    , decltype(_impl_.mstat_){false}
  };
}

PROBUFF_NET_MAIL_READ_RESPONSE::~PROBUFF_NET_MAIL_READ_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_READ_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_READ_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_READ_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mmailid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstat_) -
        reinterpret_cast<char*>(&_impl_.mmailid_)) + sizeof(_impl_.mstat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_READ_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mmailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mmailid(&has_bits);
          _impl_.mmailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MAIL_READ_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mmailid = 1;
  if (_internal_has_mmailid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mmailid(), target);
  }

  // optional bool mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_READ_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 mmailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mmailid());
    }

    // optional bool mstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_READ_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_READ_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_READ_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_READ_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_READ_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_READ_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mmailid_ = from._impl_.mmailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mstat_ = from._impl_.mstat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_READ_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_READ_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_READ_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_READ_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_READ_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_READ_RESPONSE, _impl_.mstat_)
      + sizeof(PROBUFF_NET_MAIL_READ_RESPONSE::_impl_.mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_READ_RESPONSE, _impl_.mmailid_)>(
          reinterpret_cast<char*>(&_impl_.mmailid_),
          reinterpret_cast<char*>(&other->_impl_.mmailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_READ_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[31]);
}

// ===================================================================

class PROBUFF_NET_MAIL_DRAW::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DRAW>()._impl_._has_bits_);
  static void set_has_mmailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_DRAW::PROBUFF_NET_MAIL_DRAW(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DRAW)
}
PROBUFF_NET_MAIL_DRAW::PROBUFF_NET_MAIL_DRAW(const PROBUFF_NET_MAIL_DRAW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_DRAW* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmailid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mmailid_ = from._impl_.mmailid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DRAW)
}

inline void PROBUFF_NET_MAIL_DRAW::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmailid_){int64_t{0}}
  };
}

PROBUFF_NET_MAIL_DRAW::~PROBUFF_NET_MAIL_DRAW() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DRAW)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_DRAW::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_DRAW::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_DRAW::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mmailid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DRAW::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mmailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mmailid(&has_bits);
          _impl_.mmailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MAIL_DRAW::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mmailid = 1;
  if (_internal_has_mmailid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mmailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DRAW)
  return target;
}

size_t PROBUFF_NET_MAIL_DRAW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 mmailid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mmailid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_DRAW::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_DRAW::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_DRAW::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_DRAW::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_DRAW*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_DRAW&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mmailid()) {
    _this->_internal_set_mmailid(from._internal_mmailid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_DRAW::CopyFrom(const PROBUFF_NET_MAIL_DRAW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DRAW::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DRAW::InternalSwap(PROBUFF_NET_MAIL_DRAW* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mmailid_, other->_impl_.mmailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DRAW::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[32]);
}

// ===================================================================

class PROBUFF_NET_MAIL_DRAW_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DRAW_RESPONSE>()._impl_._has_bits_);
  static void set_has_mmailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_DRAW_RESPONSE::PROBUFF_NET_MAIL_DRAW_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
}
PROBUFF_NET_MAIL_DRAW_RESPONSE::PROBUFF_NET_MAIL_DRAW_RESPONSE(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_DRAW_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmailid_){}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mmailid_, &from._impl_.mmailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstat_) -
    reinterpret_cast<char*>(&_impl_.mmailid_)) + sizeof(_impl_.mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
}

inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmailid_){int64_t{0}}
    , decltype(_impl_.mstat_){false}
  };
}

PROBUFF_NET_MAIL_DRAW_RESPONSE::~PROBUFF_NET_MAIL_DRAW_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mmailid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstat_) -
        reinterpret_cast<char*>(&_impl_.mmailid_)) + sizeof(_impl_.mstat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DRAW_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mmailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mmailid(&has_bits);
          _impl_.mmailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MAIL_DRAW_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mmailid = 1;
  if (_internal_has_mmailid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mmailid(), target);
  }

  // optional bool mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_DRAW_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 mmailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mmailid());
    }

    // optional bool mstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_DRAW_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_DRAW_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_DRAW_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_DRAW_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_DRAW_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_DRAW_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mmailid_ = from._impl_.mmailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mstat_ = from._impl_.mstat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DRAW_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_DRAW_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_.mstat_)
      + sizeof(PROBUFF_NET_MAIL_DRAW_RESPONSE::_impl_.mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_.mmailid_)>(
          reinterpret_cast<char*>(&_impl_.mmailid_),
          reinterpret_cast<char*>(&other->_impl_.mmailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DRAW_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[33]);
}

// ===================================================================

class PROBUFF_NET_MAIL_DEL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DEL>()._impl_._has_bits_);
  static void set_has_mmailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_DEL::PROBUFF_NET_MAIL_DEL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DEL)
}
PROBUFF_NET_MAIL_DEL::PROBUFF_NET_MAIL_DEL(const PROBUFF_NET_MAIL_DEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_DEL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmailid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mmailid_ = from._impl_.mmailid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DEL)
}

inline void PROBUFF_NET_MAIL_DEL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmailid_){int64_t{0}}
  };
}

PROBUFF_NET_MAIL_DEL::~PROBUFF_NET_MAIL_DEL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DEL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_DEL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_DEL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_DEL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DEL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mmailid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DEL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mmailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mmailid(&has_bits);
          _impl_.mmailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MAIL_DEL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DEL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mmailid = 1;
  if (_internal_has_mmailid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mmailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DEL)
  return target;
}

size_t PROBUFF_NET_MAIL_DEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DEL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 mmailid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mmailid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_DEL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_DEL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_DEL::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_DEL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_DEL*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_DEL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DEL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mmailid()) {
    _this->_internal_set_mmailid(from._internal_mmailid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_DEL::CopyFrom(const PROBUFF_NET_MAIL_DEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DEL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DEL::InternalSwap(PROBUFF_NET_MAIL_DEL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mmailid_, other->_impl_.mmailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DEL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[34]);
}

// ===================================================================

class PROBUFF_NET_MAIL_DEL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DEL_RESPONSE>()._impl_._has_bits_);
  static void set_has_mmailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_DEL_RESPONSE::PROBUFF_NET_MAIL_DEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
}
PROBUFF_NET_MAIL_DEL_RESPONSE::PROBUFF_NET_MAIL_DEL_RESPONSE(const PROBUFF_NET_MAIL_DEL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_DEL_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmailid_){}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mmailid_, &from._impl_.mmailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstat_) -
    reinterpret_cast<char*>(&_impl_.mmailid_)) + sizeof(_impl_.mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
}

inline void PROBUFF_NET_MAIL_DEL_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmailid_){int64_t{0}}
    , decltype(_impl_.mstat_){false}
  };
}

PROBUFF_NET_MAIL_DEL_RESPONSE::~PROBUFF_NET_MAIL_DEL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_DEL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mmailid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstat_) -
        reinterpret_cast<char*>(&_impl_.mmailid_)) + sizeof(_impl_.mstat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DEL_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mmailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mmailid(&has_bits);
          _impl_.mmailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MAIL_DEL_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mmailid = 1;
  if (_internal_has_mmailid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mmailid(), target);
  }

  // optional bool mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_DEL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 mmailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mmailid());
    }

    // optional bool mstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_DEL_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_DEL_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_DEL_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_DEL_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_DEL_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_DEL_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mmailid_ = from._impl_.mmailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mstat_ = from._impl_.mstat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_DEL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DEL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_DEL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_.mstat_)
      + sizeof(PROBUFF_NET_MAIL_DEL_RESPONSE::_impl_.mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_.mmailid_)>(
          reinterpret_cast<char*>(&_impl_.mmailid_),
          reinterpret_cast<char*>(&other->_impl_.mmailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DEL_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[35]);
}

// ===================================================================

class PROBUFF_NET_KCPSESSION::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_KCPSESSION>()._impl_._has_bits_);
  static void set_has_mserverid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_muip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_muport(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mconv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PROBUFF_NET_KCPSESSION::PROBUFF_NET_KCPSESSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_KCPSESSION)
}
PROBUFF_NET_KCPSESSION::PROBUFF_NET_KCPSESSION(const PROBUFF_NET_KCPSESSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_KCPSESSION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.muip_){}
    , decltype(_impl_.mserverid_){}
    , decltype(_impl_.muport_){}
    , decltype(_impl_.mconv_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.muip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.muip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_muip()) {
    _this->_impl_.muip_.Set(from._internal_muip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mserverid_, &from._impl_.mserverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mconv_) -
    reinterpret_cast<char*>(&_impl_.mserverid_)) + sizeof(_impl_.mconv_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_KCPSESSION)
}

inline void PROBUFF_NET_KCPSESSION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.muip_){}
    , decltype(_impl_.mserverid_){int64_t{0}}
    , decltype(_impl_.muport_){0}
    , decltype(_impl_.mconv_){0}
  };
  _impl_.muip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.muip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_KCPSESSION::~PROBUFF_NET_KCPSESSION() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_KCPSESSION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_KCPSESSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.muip_.Destroy();
}

void PROBUFF_NET_KCPSESSION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_KCPSESSION::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_KCPSESSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.muip_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.mserverid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mconv_) -
        reinterpret_cast<char*>(&_impl_.mserverid_)) + sizeof(_impl_.mconv_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_KCPSESSION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mserverid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mserverid(&has_bits);
          _impl_.mserverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string muip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_muip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_KCPSESSION.muip"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 muport = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_muport(&has_bits);
          _impl_.muport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mconv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mconv(&has_bits);
          _impl_.mconv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_KCPSESSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_KCPSESSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mserverid = 1;
  if (_internal_has_mserverid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mserverid(), target);
  }

  // optional string muip = 2;
  if (_internal_has_muip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_muip().data(), static_cast<int>(this->_internal_muip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_KCPSESSION.muip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_muip(), target);
  }

  // optional int32 muport = 3;
  if (_internal_has_muport()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_muport(), target);
  }

  // optional int32 mconv = 4;
  if (_internal_has_mconv()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mconv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_KCPSESSION)
  return target;
}

size_t PROBUFF_NET_KCPSESSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_KCPSESSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string muip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_muip());
    }

    // optional int64 mserverid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mserverid());
    }

    // optional int32 muport = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_muport());
    }

    // optional int32 mconv = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mconv());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_KCPSESSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_KCPSESSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_KCPSESSION::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_KCPSESSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_KCPSESSION*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_KCPSESSION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_KCPSESSION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_muip(from._internal_muip());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mserverid_ = from._impl_.mserverid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.muport_ = from._impl_.muport_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mconv_ = from._impl_.mconv_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_KCPSESSION::CopyFrom(const PROBUFF_NET_KCPSESSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_KCPSESSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_KCPSESSION::IsInitialized() const {
  return true;
}

void PROBUFF_NET_KCPSESSION::InternalSwap(PROBUFF_NET_KCPSESSION* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.muip_, lhs_arena,
      &other->_impl_.muip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_KCPSESSION, _impl_.mconv_)
      + sizeof(PROBUFF_NET_KCPSESSION::_impl_.mconv_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_KCPSESSION, _impl_.mserverid_)>(
          reinterpret_cast<char*>(&_impl_.mserverid_),
          reinterpret_cast<char*>(&other->_impl_.mserverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_KCPSESSION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[36]);
}

// ===================================================================

class PROBUFF_NET_KCPSESSION_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_KCPSESSION_RESPONSE>()._impl_._has_bits_);
  static void set_has_mkcpsession(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_KCPSESSION_RESPONSE::PROBUFF_NET_KCPSESSION_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
}
PROBUFF_NET_KCPSESSION_RESPONSE::PROBUFF_NET_KCPSESSION_RESPONSE(const PROBUFF_NET_KCPSESSION_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_KCPSESSION_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mkcpsession_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mkcpsession_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mkcpsession_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mkcpsession()) {
    _this->_impl_.mkcpsession_.Set(from._internal_mkcpsession(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
}

inline void PROBUFF_NET_KCPSESSION_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mkcpsession_){}
  };
  _impl_.mkcpsession_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mkcpsession_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_KCPSESSION_RESPONSE::~PROBUFF_NET_KCPSESSION_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_KCPSESSION_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mkcpsession_.Destroy();
}

void PROBUFF_NET_KCPSESSION_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_KCPSESSION_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mkcpsession_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_KCPSESSION_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string mkcpsession = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mkcpsession();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.mkcpsession"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_KCPSESSION_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string mkcpsession = 1;
  if (_internal_has_mkcpsession()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mkcpsession().data(), static_cast<int>(this->_internal_mkcpsession().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.mkcpsession");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mkcpsession(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  return target;
}

size_t PROBUFF_NET_KCPSESSION_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string mkcpsession = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mkcpsession());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_KCPSESSION_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_KCPSESSION_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_KCPSESSION_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_KCPSESSION_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_KCPSESSION_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_KCPSESSION_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mkcpsession()) {
    _this->_internal_set_mkcpsession(from._internal_mkcpsession());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_KCPSESSION_RESPONSE::CopyFrom(const PROBUFF_NET_KCPSESSION_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_KCPSESSION_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_KCPSESSION_RESPONSE::InternalSwap(PROBUFF_NET_KCPSESSION_RESPONSE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mkcpsession_, lhs_arena,
      &other->_impl_.mkcpsession_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_KCPSESSION_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[37]);
}

// ===================================================================

class PROBUFF_NET_TASK_RECEIVE_AWARD::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_TASK_RECEIVE_AWARD>()._impl_._has_bits_);
  static void set_has_mtaskid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_TASK_RECEIVE_AWARD::PROBUFF_NET_TASK_RECEIVE_AWARD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
}
PROBUFF_NET_TASK_RECEIVE_AWARD::PROBUFF_NET_TASK_RECEIVE_AWARD(const PROBUFF_NET_TASK_RECEIVE_AWARD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_TASK_RECEIVE_AWARD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mtaskid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mtaskid_ = from._impl_.mtaskid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
}

inline void PROBUFF_NET_TASK_RECEIVE_AWARD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mtaskid_){0}
  };
}

PROBUFF_NET_TASK_RECEIVE_AWARD::~PROBUFF_NET_TASK_RECEIVE_AWARD() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_TASK_RECEIVE_AWARD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mtaskid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_TASK_RECEIVE_AWARD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mtaskid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mtaskid(&has_bits);
          _impl_.mtaskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_TASK_RECEIVE_AWARD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mtaskid = 1;
  if (_internal_has_mtaskid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtaskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  return target;
}

size_t PROBUFF_NET_TASK_RECEIVE_AWARD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mtaskid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mtaskid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_TASK_RECEIVE_AWARD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_TASK_RECEIVE_AWARD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_TASK_RECEIVE_AWARD::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_TASK_RECEIVE_AWARD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_TASK_RECEIVE_AWARD*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_TASK_RECEIVE_AWARD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mtaskid()) {
    _this->_internal_set_mtaskid(from._internal_mtaskid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::CopyFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_TASK_RECEIVE_AWARD::IsInitialized() const {
  return true;
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::InternalSwap(PROBUFF_NET_TASK_RECEIVE_AWARD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mtaskid_, other->_impl_.mtaskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TASK_RECEIVE_AWARD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[38]);
}

// ===================================================================

class drop_item::_Internal {
 public:
  using HasBits = decltype(std::declval<drop_item>()._impl_._has_bits_);
  static void set_has_mitem(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

drop_item::drop_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.drop_item)
}
drop_item::drop_item(const drop_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  drop_item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mitem_){}
    , decltype(_impl_.mcount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mitem_, &from._impl_.mitem_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mcount_) -
    reinterpret_cast<char*>(&_impl_.mitem_)) + sizeof(_impl_.mcount_));
  // @@protoc_insertion_point(copy_constructor:pbnet.drop_item)
}

inline void drop_item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mitem_){0}
    , decltype(_impl_.mcount_){0}
  };
}

drop_item::~drop_item() {
  // @@protoc_insertion_point(destructor:pbnet.drop_item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void drop_item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void drop_item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void drop_item::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.drop_item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mitem_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mcount_) -
        reinterpret_cast<char*>(&_impl_.mitem_)) + sizeof(_impl_.mcount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* drop_item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mitem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mitem(&has_bits);
          _impl_.mitem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mcount(&has_bits);
          _impl_.mcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* drop_item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.drop_item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mitem = 1;
  if (_internal_has_mitem()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mitem(), target);
  }

  // optional int32 mcount = 2;
  if (_internal_has_mcount()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.drop_item)
  return target;
}

size_t drop_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.drop_item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 mitem = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mitem());
    }

    // optional int32 mcount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mcount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData drop_item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    drop_item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*drop_item::GetClassData() const { return &_class_data_; }


void drop_item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<drop_item*>(&to_msg);
  auto& from = static_cast<const drop_item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.drop_item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mitem_ = from._impl_.mitem_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mcount_ = from._impl_.mcount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void drop_item::CopyFrom(const drop_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.drop_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool drop_item::IsInitialized() const {
  return true;
}

void drop_item::InternalSwap(drop_item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(drop_item, _impl_.mcount_)
      + sizeof(drop_item::_impl_.mcount_)
      - PROTOBUF_FIELD_OFFSET(drop_item, _impl_.mitem_)>(
          reinterpret_cast<char*>(&_impl_.mitem_),
          reinterpret_cast<char*>(&other->_impl_.mitem_));
}

::PROTOBUF_NAMESPACE_ID::Metadata drop_item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[39]);
}

// ===================================================================

PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse() {}
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::MergeFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[40]);
}

// ===================================================================

class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE>()._impl_._has_bits_);
  static void set_has_mtaskid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
}
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mdrop_)*/{}
    , decltype(_impl_.mtaskid_){}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mdrop_.MergeFrom(from._impl_.mdrop_);
  ::memcpy(&_impl_.mtaskid_, &from._impl_.mtaskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstat_) -
    reinterpret_cast<char*>(&_impl_.mtaskid_)) + sizeof(_impl_.mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
}

inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mdrop_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.mtaskid_){0}
    , decltype(_impl_.mstat_){false}
  };
}

PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::~PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mdrop_.Destruct();
  _impl_.mdrop_.~MapField();
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* >(object);
  _this->_impl_.mdrop_.Destruct();
}
void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mdrop_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mtaskid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstat_) -
        reinterpret_cast<char*>(&_impl_.mtaskid_)) + sizeof(_impl_.mstat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mtaskid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mtaskid(&has_bits);
          _impl_.mtaskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, int32> mdrop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mdrop_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mtaskid = 1;
  if (_internal_has_mtaskid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtaskid(), target);
  }

  // optional bool mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_mstat(), target);
  }

  // map<int32, int32> mdrop = 3;
  if (!this->_internal_mdrop().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mdrop();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  return target;
}

size_t PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> mdrop = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mdrop_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_mdrop().begin();
      it != this->_internal_mdrop().end(); ++it) {
    total_size += PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 mtaskid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mtaskid());
    }

    // optional bool mstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mdrop_.MergeFrom(from._impl_.mdrop_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mtaskid_ = from._impl_.mtaskid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mstat_ = from._impl_.mstat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::CopyFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::InternalSwap(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mdrop_.InternalSwap(&other->_impl_.mdrop_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _impl_.mstat_)
      + sizeof(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_impl_.mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _impl_.mtaskid_)>(
          reinterpret_cast<char*>(&_impl_.mtaskid_),
          reinterpret_cast<char*>(&other->_impl_.mtaskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[41]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_CREATE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_CREATE>()._impl_._has_bits_);
  static void set_has_mname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_CREATE::PROBUFF_NET_FAMIL_CREATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_CREATE)
}
PROBUFF_NET_FAMIL_CREATE::PROBUFF_NET_FAMIL_CREATE(const PROBUFF_NET_FAMIL_CREATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_CREATE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mname_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mname()) {
    _this->_impl_.mname_.Set(from._internal_mname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_CREATE)
}

inline void PROBUFF_NET_FAMIL_CREATE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mname_){}
  };
  _impl_.mname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_FAMIL_CREATE::~PROBUFF_NET_FAMIL_CREATE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_CREATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_CREATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mname_.Destroy();
}

void PROBUFF_NET_FAMIL_CREATE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_CREATE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_CREATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mname_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_CREATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string mname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_FAMIL_CREATE.mname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_CREATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_CREATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string mname = 1;
  if (_internal_has_mname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mname().data(), static_cast<int>(this->_internal_mname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_FAMIL_CREATE.mname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_CREATE)
  return target;
}

size_t PROBUFF_NET_FAMIL_CREATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_CREATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string mname = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_CREATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_CREATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_CREATE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_CREATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_CREATE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_CREATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CREATE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mname()) {
    _this->_internal_set_mname(from._internal_mname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_CREATE::CopyFrom(const PROBUFF_NET_FAMIL_CREATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CREATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_CREATE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_CREATE::InternalSwap(PROBUFF_NET_FAMIL_CREATE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mname_, lhs_arena,
      &other->_impl_.mname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_CREATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[42]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_CREATE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_CREATE_RESPONSE>()._impl_._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_CREATE_RESPONSE::PROBUFF_NET_FAMIL_CREATE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
}
PROBUFF_NET_FAMIL_CREATE_RESPONSE::PROBUFF_NET_FAMIL_CREATE_RESPONSE(const PROBUFF_NET_FAMIL_CREATE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_CREATE_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mstat_ = from._impl_.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
}

inline void PROBUFF_NET_FAMIL_CREATE_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){0}
  };
}

PROBUFF_NET_FAMIL_CREATE_RESPONSE::~PROBUFF_NET_FAMIL_CREATE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_CREATE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMIL_CREATE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_CREATE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mstat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_CREATE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_CREATE_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_CREATE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mstat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_CREATE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_CREATE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_CREATE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_CREATE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_CREATE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_CREATE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _this->_internal_set_mstat(from._internal_mstat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_CREATE_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_CREATE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_CREATE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_CREATE_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_CREATE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mstat_, other->_impl_.mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_CREATE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[43]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_INFO::_Internal {
 public:
};

PROBUFF_NET_FAMIL_INFO::PROBUFF_NET_FAMIL_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_INFO)
}
PROBUFF_NET_FAMIL_INFO::PROBUFF_NET_FAMIL_INFO(const PROBUFF_NET_FAMIL_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_FAMIL_INFO* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_INFO)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_INFO::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_INFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[44]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_INFO_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_INFO_RESPONSE>()._impl_._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbdb::db_family& minfo(const PROBUFF_NET_FAMIL_INFO_RESPONSE* msg);
  static void set_has_minfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pbdb::db_family&
PROBUFF_NET_FAMIL_INFO_RESPONSE::_Internal::minfo(const PROBUFF_NET_FAMIL_INFO_RESPONSE* msg) {
  return *msg->_impl_.minfo_;
}
void PROBUFF_NET_FAMIL_INFO_RESPONSE::clear_minfo() {
  if (_impl_.minfo_ != nullptr) _impl_.minfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PROBUFF_NET_FAMIL_INFO_RESPONSE::clear_mmember() {
  _impl_.mmember_.Clear();
}
PROBUFF_NET_FAMIL_INFO_RESPONSE::PROBUFF_NET_FAMIL_INFO_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
}
PROBUFF_NET_FAMIL_INFO_RESPONSE::PROBUFF_NET_FAMIL_INFO_RESPONSE(const PROBUFF_NET_FAMIL_INFO_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_INFO_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmember_){from._impl_.mmember_}
    , decltype(_impl_.minfo_){nullptr}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_minfo()) {
    _this->_impl_.minfo_ = new ::pbdb::db_family(*from._impl_.minfo_);
  }
  _this->_impl_.mstat_ = from._impl_.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
}

inline void PROBUFF_NET_FAMIL_INFO_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmember_){arena}
    , decltype(_impl_.minfo_){nullptr}
    , decltype(_impl_.mstat_){0}
  };
}

PROBUFF_NET_FAMIL_INFO_RESPONSE::~PROBUFF_NET_FAMIL_INFO_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_INFO_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mmember_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.minfo_;
}

void PROBUFF_NET_FAMIL_INFO_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_INFO_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mmember_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.minfo_ != nullptr);
    _impl_.minfo_->Clear();
  }
  _impl_.mstat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_INFO_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbdb.db_family minfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_minfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbdb.db_brief mmember = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mmember(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_INFO_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  // optional .pbdb.db_family minfo = 2;
  if (_internal_has_minfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::minfo(this),
        _Internal::minfo(this).GetCachedSize(), target, stream);
  }

  // repeated .pbdb.db_brief mmember = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mmember_size()); i < n; i++) {
    const auto& repfield = this->_internal_mmember(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_INFO_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_brief mmember = 3;
  total_size += 1UL * this->_internal_mmember_size();
  for (const auto& msg : this->_impl_.mmember_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbdb.db_family minfo = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.minfo_);
    }

    // optional int32 mstat = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mstat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_INFO_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_INFO_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_INFO_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_INFO_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_INFO_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_INFO_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mmember_.MergeFrom(from._impl_.mmember_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_minfo()->::pbdb::db_family::MergeFrom(
          from._internal_minfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mstat_ = from._impl_.mstat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_INFO_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_INFO_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_INFO_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_INFO_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_INFO_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mmember_.InternalSwap(&other->_impl_.mmember_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FAMIL_INFO_RESPONSE, _impl_.mstat_)
      + sizeof(PROBUFF_NET_FAMIL_INFO_RESPONSE::_impl_.mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FAMIL_INFO_RESPONSE, _impl_.minfo_)>(
          reinterpret_cast<char*>(&_impl_.minfo_),
          reinterpret_cast<char*>(&other->_impl_.minfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_INFO_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[45]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_JOIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_JOIN>()._impl_._has_bits_);
  static void set_has_mfamilid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mapply(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_FAMIL_JOIN::PROBUFF_NET_FAMIL_JOIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_JOIN)
}
PROBUFF_NET_FAMIL_JOIN::PROBUFF_NET_FAMIL_JOIN(const PROBUFF_NET_FAMIL_JOIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_JOIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfamilid_){}
    , decltype(_impl_.mapply_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mfamilid_, &from._impl_.mfamilid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mapply_) -
    reinterpret_cast<char*>(&_impl_.mfamilid_)) + sizeof(_impl_.mapply_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_JOIN)
}

inline void PROBUFF_NET_FAMIL_JOIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfamilid_){int64_t{0}}
    , decltype(_impl_.mapply_){false}
  };
}

PROBUFF_NET_FAMIL_JOIN::~PROBUFF_NET_FAMIL_JOIN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_JOIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_JOIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMIL_JOIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_JOIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_JOIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mfamilid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mapply_) -
        reinterpret_cast<char*>(&_impl_.mfamilid_)) + sizeof(_impl_.mapply_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_JOIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mfamilid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mfamilid(&has_bits);
          _impl_.mfamilid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mapply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mapply(&has_bits);
          _impl_.mapply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_JOIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_JOIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mfamilid = 1;
  if (_internal_has_mfamilid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfamilid(), target);
  }

  // optional bool mapply = 2;
  if (_internal_has_mapply()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_mapply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_JOIN)
  return target;
}

size_t PROBUFF_NET_FAMIL_JOIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_JOIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 mfamilid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mfamilid());
    }

    // optional bool mapply = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_JOIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_JOIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_JOIN::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_JOIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_JOIN*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_JOIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_JOIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mfamilid_ = from._impl_.mfamilid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mapply_ = from._impl_.mapply_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_JOIN::CopyFrom(const PROBUFF_NET_FAMIL_JOIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_JOIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_JOIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_JOIN::InternalSwap(PROBUFF_NET_FAMIL_JOIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FAMIL_JOIN, _impl_.mapply_)
      + sizeof(PROBUFF_NET_FAMIL_JOIN::_impl_.mapply_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FAMIL_JOIN, _impl_.mfamilid_)>(
          reinterpret_cast<char*>(&_impl_.mfamilid_),
          reinterpret_cast<char*>(&other->_impl_.mfamilid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_JOIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[46]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_JOIN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_JOIN_RESPONSE>()._impl_._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_JOIN_RESPONSE::PROBUFF_NET_FAMIL_JOIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
}
PROBUFF_NET_FAMIL_JOIN_RESPONSE::PROBUFF_NET_FAMIL_JOIN_RESPONSE(const PROBUFF_NET_FAMIL_JOIN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_JOIN_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mstat_ = from._impl_.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
}

inline void PROBUFF_NET_FAMIL_JOIN_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){0}
  };
}

PROBUFF_NET_FAMIL_JOIN_RESPONSE::~PROBUFF_NET_FAMIL_JOIN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_JOIN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMIL_JOIN_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_JOIN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mstat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_JOIN_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_JOIN_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_JOIN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mstat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_JOIN_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_JOIN_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_JOIN_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_JOIN_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_JOIN_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_JOIN_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _this->_internal_set_mstat(from._internal_mstat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_JOIN_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_JOIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_JOIN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_JOIN_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_JOIN_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mstat_, other->_impl_.mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_JOIN_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[47]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_RATIFY_JOIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_RATIFY_JOIN>()._impl_._has_bits_);
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mratify(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_FAMIL_RATIFY_JOIN::PROBUFF_NET_FAMIL_RATIFY_JOIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
}
PROBUFF_NET_FAMIL_RATIFY_JOIN::PROBUFF_NET_FAMIL_RATIFY_JOIN(const PROBUFF_NET_FAMIL_RATIFY_JOIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_RATIFY_JOIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mroleid_){}
    , decltype(_impl_.mratify_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mroleid_, &from._impl_.mroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mratify_) -
    reinterpret_cast<char*>(&_impl_.mroleid_)) + sizeof(_impl_.mratify_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
}

inline void PROBUFF_NET_FAMIL_RATIFY_JOIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mroleid_){int64_t{0}}
    , decltype(_impl_.mratify_){false}
  };
}

PROBUFF_NET_FAMIL_RATIFY_JOIN::~PROBUFF_NET_FAMIL_RATIFY_JOIN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_RATIFY_JOIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mroleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mratify_) -
        reinterpret_cast<char*>(&_impl_.mroleid_)) + sizeof(_impl_.mratify_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_RATIFY_JOIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mroleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mroleid(&has_bits);
          _impl_.mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mratify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mratify(&has_bits);
          _impl_.mratify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_RATIFY_JOIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mroleid = 1;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mroleid(), target);
  }

  // optional bool mratify = 2;
  if (_internal_has_mratify()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_mratify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  return target;
}

size_t PROBUFF_NET_FAMIL_RATIFY_JOIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 mroleid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mroleid());
    }

    // optional bool mratify = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_RATIFY_JOIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_RATIFY_JOIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_RATIFY_JOIN::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_RATIFY_JOIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_RATIFY_JOIN*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_RATIFY_JOIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mroleid_ = from._impl_.mroleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mratify_ = from._impl_.mratify_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN::CopyFrom(const PROBUFF_NET_FAMIL_RATIFY_JOIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_RATIFY_JOIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN::InternalSwap(PROBUFF_NET_FAMIL_RATIFY_JOIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FAMIL_RATIFY_JOIN, _impl_.mratify_)
      + sizeof(PROBUFF_NET_FAMIL_RATIFY_JOIN::_impl_.mratify_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FAMIL_RATIFY_JOIN, _impl_.mroleid_)>(
          reinterpret_cast<char*>(&_impl_.mroleid_),
          reinterpret_cast<char*>(&other->_impl_.mroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_RATIFY_JOIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[48]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE>()._impl_._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
}
PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE(const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mstat_ = from._impl_.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
}

inline void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){0}
  };
}

PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::~PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mstat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mstat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _this->_internal_set_mstat(from._internal_mstat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mstat_, other->_impl_.mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[49]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_CEDE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_CEDE>()._impl_._has_bits_);
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_CEDE::PROBUFF_NET_FAMIL_CEDE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_CEDE)
}
PROBUFF_NET_FAMIL_CEDE::PROBUFF_NET_FAMIL_CEDE(const PROBUFF_NET_FAMIL_CEDE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_CEDE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mroleid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mroleid_ = from._impl_.mroleid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_CEDE)
}

inline void PROBUFF_NET_FAMIL_CEDE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mroleid_){int64_t{0}}
  };
}

PROBUFF_NET_FAMIL_CEDE::~PROBUFF_NET_FAMIL_CEDE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_CEDE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_CEDE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMIL_CEDE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_CEDE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_CEDE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mroleid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_CEDE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mroleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mroleid(&has_bits);
          _impl_.mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_CEDE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_CEDE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mroleid = 1;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mroleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_CEDE)
  return target;
}

size_t PROBUFF_NET_FAMIL_CEDE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_CEDE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 mroleid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mroleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_CEDE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_CEDE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_CEDE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_CEDE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_CEDE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_CEDE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CEDE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mroleid()) {
    _this->_internal_set_mroleid(from._internal_mroleid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_CEDE::CopyFrom(const PROBUFF_NET_FAMIL_CEDE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CEDE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_CEDE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_CEDE::InternalSwap(PROBUFF_NET_FAMIL_CEDE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mroleid_, other->_impl_.mroleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_CEDE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[50]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_CEDE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_CEDE_RESPONSE>()._impl_._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_CEDE_RESPONSE::PROBUFF_NET_FAMIL_CEDE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
}
PROBUFF_NET_FAMIL_CEDE_RESPONSE::PROBUFF_NET_FAMIL_CEDE_RESPONSE(const PROBUFF_NET_FAMIL_CEDE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_CEDE_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mstat_ = from._impl_.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
}

inline void PROBUFF_NET_FAMIL_CEDE_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){0}
  };
}

PROBUFF_NET_FAMIL_CEDE_RESPONSE::~PROBUFF_NET_FAMIL_CEDE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_CEDE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMIL_CEDE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_CEDE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mstat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_CEDE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_CEDE_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_CEDE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mstat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_CEDE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_CEDE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_CEDE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_CEDE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_CEDE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_CEDE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _this->_internal_set_mstat(from._internal_mstat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_CEDE_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_CEDE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_CEDE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_CEDE_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_CEDE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mstat_, other->_impl_.mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_CEDE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[51]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_LEAVE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_LEAVE>()._impl_._has_bits_);
  static void set_has_mfamilid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_LEAVE::PROBUFF_NET_FAMIL_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_LEAVE)
}
PROBUFF_NET_FAMIL_LEAVE::PROBUFF_NET_FAMIL_LEAVE(const PROBUFF_NET_FAMIL_LEAVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_LEAVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfamilid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mfamilid_ = from._impl_.mfamilid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_LEAVE)
}

inline void PROBUFF_NET_FAMIL_LEAVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfamilid_){int64_t{0}}
  };
}

PROBUFF_NET_FAMIL_LEAVE::~PROBUFF_NET_FAMIL_LEAVE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_LEAVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMIL_LEAVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_LEAVE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mfamilid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_LEAVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mfamilid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mfamilid(&has_bits);
          _impl_.mfamilid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_LEAVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mfamilid = 1;
  if (_internal_has_mfamilid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfamilid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  return target;
}

size_t PROBUFF_NET_FAMIL_LEAVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 mfamilid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mfamilid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_LEAVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_LEAVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_LEAVE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_LEAVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_LEAVE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_LEAVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mfamilid()) {
    _this->_internal_set_mfamilid(from._internal_mfamilid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_LEAVE::CopyFrom(const PROBUFF_NET_FAMIL_LEAVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_LEAVE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_LEAVE::InternalSwap(PROBUFF_NET_FAMIL_LEAVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mfamilid_, other->_impl_.mfamilid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_LEAVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[52]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_LEAVE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_LEAVE_RESPONSE>()._impl_._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_LEAVE_RESPONSE::PROBUFF_NET_FAMIL_LEAVE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
}
PROBUFF_NET_FAMIL_LEAVE_RESPONSE::PROBUFF_NET_FAMIL_LEAVE_RESPONSE(const PROBUFF_NET_FAMIL_LEAVE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_LEAVE_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mstat_ = from._impl_.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
}

inline void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){0}
  };
}

PROBUFF_NET_FAMIL_LEAVE_RESPONSE::~PROBUFF_NET_FAMIL_LEAVE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mstat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_LEAVE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_LEAVE_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_LEAVE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mstat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_LEAVE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_LEAVE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_LEAVE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_LEAVE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_LEAVE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _this->_internal_set_mstat(from._internal_mstat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_LEAVE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_LEAVE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_LEAVE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mstat_, other->_impl_.mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_LEAVE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[53]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_LIST::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_LIST>()._impl_._has_bits_);
  static void set_has_mfamilid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_LIST::PROBUFF_NET_FAMIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_LIST)
}
PROBUFF_NET_FAMIL_LIST::PROBUFF_NET_FAMIL_LIST(const PROBUFF_NET_FAMIL_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_LIST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfamilid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mfamilid_ = from._impl_.mfamilid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_LIST)
}

inline void PROBUFF_NET_FAMIL_LIST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfamilid_){int64_t{0}}
  };
}

PROBUFF_NET_FAMIL_LIST::~PROBUFF_NET_FAMIL_LIST() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_LIST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_LIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMIL_LIST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mfamilid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_LIST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mfamilid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mfamilid(&has_bits);
          _impl_.mfamilid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_LIST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mfamilid = 1;
  if (_internal_has_mfamilid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfamilid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_LIST)
  return target;
}

size_t PROBUFF_NET_FAMIL_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 mfamilid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mfamilid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_LIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_LIST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_LIST::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_LIST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_LIST*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_LIST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mfamilid()) {
    _this->_internal_set_mfamilid(from._internal_mfamilid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_LIST::CopyFrom(const PROBUFF_NET_FAMIL_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_LIST::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_LIST::InternalSwap(PROBUFF_NET_FAMIL_LIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mfamilid_, other->_impl_.mfamilid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_LIST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[54]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_LIST_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_LIST_RESPONSE>()._impl_._has_bits_);
  static void set_has_mfamilid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void PROBUFF_NET_FAMIL_LIST_RESPONSE::clear_mfamily() {
  _impl_.mfamily_.Clear();
}
PROBUFF_NET_FAMIL_LIST_RESPONSE::PROBUFF_NET_FAMIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
}
PROBUFF_NET_FAMIL_LIST_RESPONSE::PROBUFF_NET_FAMIL_LIST_RESPONSE(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_LIST_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfamily_){from._impl_.mfamily_}
    , decltype(_impl_.mfamilid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mfamilid_ = from._impl_.mfamilid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
}

inline void PROBUFF_NET_FAMIL_LIST_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfamily_){arena}
    , decltype(_impl_.mfamilid_){int64_t{0}}
  };
}

PROBUFF_NET_FAMIL_LIST_RESPONSE::~PROBUFF_NET_FAMIL_LIST_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_LIST_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mfamily_.~RepeatedPtrField();
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mfamily_.Clear();
  _impl_.mfamilid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_LIST_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mfamilid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mfamilid(&has_bits);
          _impl_.mfamilid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbdb.db_family mfamily = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mfamily(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_LIST_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mfamilid = 1;
  if (_internal_has_mfamilid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfamilid(), target);
  }

  // repeated .pbdb.db_family mfamily = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mfamily_size()); i < n; i++) {
    const auto& repfield = this->_internal_mfamily(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_LIST_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_family mfamily = 2;
  total_size += 1UL * this->_internal_mfamily_size();
  for (const auto& msg : this->_impl_.mfamily_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int64 mfamilid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mfamilid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_LIST_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_LIST_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_LIST_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_LIST_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_LIST_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_LIST_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mfamily_.MergeFrom(from._impl_.mfamily_);
  if (from._internal_has_mfamilid()) {
    _this->_internal_set_mfamilid(from._internal_mfamilid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_LIST_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_LIST_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mfamily_.InternalSwap(&other->_impl_.mfamily_);
  swap(_impl_.mfamilid_, other->_impl_.mfamilid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_LIST_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[55]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_CHANGENAME::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_CHANGENAME>()._impl_._has_bits_);
  static void set_has_mfamilid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_CHANGENAME::PROBUFF_NET_FAMIL_CHANGENAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
}
PROBUFF_NET_FAMIL_CHANGENAME::PROBUFF_NET_FAMIL_CHANGENAME(const PROBUFF_NET_FAMIL_CHANGENAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_CHANGENAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mname_){}
    , decltype(_impl_.mfamilid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mname()) {
    _this->_impl_.mname_.Set(from._internal_mname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mfamilid_ = from._impl_.mfamilid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
}

inline void PROBUFF_NET_FAMIL_CHANGENAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mname_){}
    , decltype(_impl_.mfamilid_){int64_t{0}}
  };
  _impl_.mname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_FAMIL_CHANGENAME::~PROBUFF_NET_FAMIL_CHANGENAME() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_CHANGENAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mname_.Destroy();
}

void PROBUFF_NET_FAMIL_CHANGENAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_CHANGENAME::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mname_.ClearNonDefaultToEmpty();
  }
  _impl_.mfamilid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_CHANGENAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mfamilid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mfamilid(&has_bits);
          _impl_.mfamilid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_CHANGENAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mfamilid = 1;
  if (_internal_has_mfamilid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfamilid(), target);
  }

  // optional string mname = 2;
  if (_internal_has_mname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mname().data(), static_cast<int>(this->_internal_mname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  return target;
}

size_t PROBUFF_NET_FAMIL_CHANGENAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string mname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mname());
    }

    // optional int64 mfamilid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mfamilid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_CHANGENAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_CHANGENAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_CHANGENAME::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_CHANGENAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_CHANGENAME*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_CHANGENAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mname(from._internal_mname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mfamilid_ = from._impl_.mfamilid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_CHANGENAME::CopyFrom(const PROBUFF_NET_FAMIL_CHANGENAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_CHANGENAME::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_CHANGENAME::InternalSwap(PROBUFF_NET_FAMIL_CHANGENAME* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mname_, lhs_arena,
      &other->_impl_.mname_, rhs_arena
  );
  swap(_impl_.mfamilid_, other->_impl_.mfamilid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_CHANGENAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[56]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE>()._impl_._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
}
PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE(const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mstat_ = from._impl_.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
}

inline void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){0}
  };
}

PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::~PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mstat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mstat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _this->_internal_set_mstat(from._internal_mstat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mstat_, other->_impl_.mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[57]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_SIGN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_SIGN>()._impl_._has_bits_);
  static void set_has_mfamilid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_SIGN::PROBUFF_NET_FAMIL_SIGN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_SIGN)
}
PROBUFF_NET_FAMIL_SIGN::PROBUFF_NET_FAMIL_SIGN(const PROBUFF_NET_FAMIL_SIGN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_SIGN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfamilid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mfamilid_ = from._impl_.mfamilid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_SIGN)
}

inline void PROBUFF_NET_FAMIL_SIGN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfamilid_){int64_t{0}}
  };
}

PROBUFF_NET_FAMIL_SIGN::~PROBUFF_NET_FAMIL_SIGN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_SIGN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_SIGN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMIL_SIGN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_SIGN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_SIGN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mfamilid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_SIGN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mfamilid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mfamilid(&has_bits);
          _impl_.mfamilid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_SIGN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_SIGN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mfamilid = 1;
  if (_internal_has_mfamilid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfamilid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_SIGN)
  return target;
}

size_t PROBUFF_NET_FAMIL_SIGN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_SIGN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 mfamilid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mfamilid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_SIGN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_SIGN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_SIGN::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_SIGN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_SIGN*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_SIGN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_SIGN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mfamilid()) {
    _this->_internal_set_mfamilid(from._internal_mfamilid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_SIGN::CopyFrom(const PROBUFF_NET_FAMIL_SIGN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_SIGN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_SIGN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_SIGN::InternalSwap(PROBUFF_NET_FAMIL_SIGN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mfamilid_, other->_impl_.mfamilid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_SIGN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[58]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_SIGN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_SIGN_RESPONSE>()._impl_._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_SIGN_RESPONSE::PROBUFF_NET_FAMIL_SIGN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
}
PROBUFF_NET_FAMIL_SIGN_RESPONSE::PROBUFF_NET_FAMIL_SIGN_RESPONSE(const PROBUFF_NET_FAMIL_SIGN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_SIGN_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mstat_ = from._impl_.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
}

inline void PROBUFF_NET_FAMIL_SIGN_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){0}
  };
}

PROBUFF_NET_FAMIL_SIGN_RESPONSE::~PROBUFF_NET_FAMIL_SIGN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_SIGN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMIL_SIGN_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_SIGN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mstat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_SIGN_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_SIGN_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_SIGN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 mstat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mstat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_SIGN_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_SIGN_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_SIGN_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_SIGN_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_SIGN_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_SIGN_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _this->_internal_set_mstat(from._internal_mstat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_SIGN_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_SIGN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_SIGN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_SIGN_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_SIGN_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mstat_, other->_impl_.mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_SIGN_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[59]);
}

// ===================================================================

PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse() {}
PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::MergeFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[60]);
}

// ===================================================================

class PROBUFF_NET_REWARD_ITEM_RESPONSE::_Internal {
 public:
};

PROBUFF_NET_REWARD_ITEM_RESPONSE::PROBUFF_NET_REWARD_ITEM_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PROBUFF_NET_REWARD_ITEM_RESPONSE::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
}
PROBUFF_NET_REWARD_ITEM_RESPONSE::PROBUFF_NET_REWARD_ITEM_RESPONSE(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_REWARD_ITEM_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.mitems_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mitems_.MergeFrom(from._impl_.mitems_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
}

inline void PROBUFF_NET_REWARD_ITEM_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.mitems_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_REWARD_ITEM_RESPONSE::~PROBUFF_NET_REWARD_ITEM_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_REWARD_ITEM_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mitems_.Destruct();
  _impl_.mitems_.~MapField();
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_REWARD_ITEM_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_REWARD_ITEM_RESPONSE* >(object);
  _this->_impl_.mitems_.Destruct();
}
void PROBUFF_NET_REWARD_ITEM_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mitems_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_REWARD_ITEM_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, int32> mitems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mitems_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_REWARD_ITEM_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> mitems = 1;
  if (!this->_internal_mitems().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mitems();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  return target;
}

size_t PROBUFF_NET_REWARD_ITEM_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> mitems = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mitems_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_mitems().begin();
      it != this->_internal_mitems().end(); ++it) {
    total_size += PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_REWARD_ITEM_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_REWARD_ITEM_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_REWARD_ITEM_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_REWARD_ITEM_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_REWARD_ITEM_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_REWARD_ITEM_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mitems_.MergeFrom(from._impl_.mitems_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::CopyFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_REWARD_ITEM_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::InternalSwap(PROBUFF_NET_REWARD_ITEM_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mitems_.InternalSwap(&other->_impl_.mitems_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_REWARD_ITEM_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[61]);
}

// ===================================================================

class PROBUFF_NET_RANKLIST::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RANKLIST>()._impl_._has_bits_);
  static void set_has_miscross(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mactivityid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mpage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PROBUFF_NET_RANKLIST::PROBUFF_NET_RANKLIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RANKLIST)
}
PROBUFF_NET_RANKLIST::PROBUFF_NET_RANKLIST(const PROBUFF_NET_RANKLIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_RANKLIST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.miscross_){}
    , decltype(_impl_.mtype_){}
    , decltype(_impl_.mactivityid_){}
    , decltype(_impl_.mpage_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.miscross_, &from._impl_.miscross_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mpage_) -
    reinterpret_cast<char*>(&_impl_.miscross_)) + sizeof(_impl_.mpage_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RANKLIST)
}

inline void PROBUFF_NET_RANKLIST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.miscross_){false}
    , decltype(_impl_.mtype_){0}
    , decltype(_impl_.mactivityid_){0}
    , decltype(_impl_.mpage_){0}
  };
}

PROBUFF_NET_RANKLIST::~PROBUFF_NET_RANKLIST() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RANKLIST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_RANKLIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_RANKLIST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_RANKLIST::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RANKLIST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.miscross_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mpage_) -
        reinterpret_cast<char*>(&_impl_.miscross_)) + sizeof(_impl_.mpage_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RANKLIST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool miscross = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_miscross(&has_bits);
          _impl_.miscross_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbdb.eranklist mtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mtype(static_cast<::pbdb::eranklist>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 mactivityid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mactivityid(&has_bits);
          _impl_.mactivityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mpage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mpage(&has_bits);
          _impl_.mpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_RANKLIST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RANKLIST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool miscross = 1;
  if (_internal_has_miscross()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_miscross(), target);
  }

  // optional .pbdb.eranklist mtype = 2;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mtype(), target);
  }

  // optional int32 mactivityid = 3;
  if (_internal_has_mactivityid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mactivityid(), target);
  }

  // optional int32 mpage = 4;
  if (_internal_has_mpage()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mpage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RANKLIST)
  return target;
}

size_t PROBUFF_NET_RANKLIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RANKLIST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool miscross = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .pbdb.eranklist mtype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mtype());
    }

    // optional int32 mactivityid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mactivityid());
    }

    // optional int32 mpage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mpage());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_RANKLIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_RANKLIST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_RANKLIST::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_RANKLIST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_RANKLIST*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_RANKLIST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RANKLIST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.miscross_ = from._impl_.miscross_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mtype_ = from._impl_.mtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mactivityid_ = from._impl_.mactivityid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mpage_ = from._impl_.mpage_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_RANKLIST::CopyFrom(const PROBUFF_NET_RANKLIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RANKLIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RANKLIST::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RANKLIST::InternalSwap(PROBUFF_NET_RANKLIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RANKLIST, _impl_.mpage_)
      + sizeof(PROBUFF_NET_RANKLIST::_impl_.mpage_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RANKLIST, _impl_.miscross_)>(
          reinterpret_cast<char*>(&_impl_.miscross_),
          reinterpret_cast<char*>(&other->_impl_.miscross_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RANKLIST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[62]);
}

// ===================================================================

class PROBUFF_NET_RANKLIST_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RANKLIST_RESPONSE>()._impl_._has_bits_);
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mpage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mrolerank(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void PROBUFF_NET_RANKLIST_RESPONSE::clear_mitems() {
  _impl_.mitems_.Clear();
}
PROBUFF_NET_RANKLIST_RESPONSE::PROBUFF_NET_RANKLIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
}
PROBUFF_NET_RANKLIST_RESPONSE::PROBUFF_NET_RANKLIST_RESPONSE(const PROBUFF_NET_RANKLIST_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_RANKLIST_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mitems_){from._impl_.mitems_}
    , decltype(_impl_.mtype_){}
    , decltype(_impl_.mpage_){}
    , decltype(_impl_.mcount_){}
    , decltype(_impl_.mrolerank_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mtype_, &from._impl_.mtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mrolerank_) -
    reinterpret_cast<char*>(&_impl_.mtype_)) + sizeof(_impl_.mrolerank_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
}

inline void PROBUFF_NET_RANKLIST_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mitems_){arena}
    , decltype(_impl_.mtype_){0}
    , decltype(_impl_.mpage_){0}
    , decltype(_impl_.mcount_){0}
    , decltype(_impl_.mrolerank_){0}
  };
}

PROBUFF_NET_RANKLIST_RESPONSE::~PROBUFF_NET_RANKLIST_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_RANKLIST_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mitems_.~RepeatedPtrField();
}

void PROBUFF_NET_RANKLIST_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_RANKLIST_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mitems_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.mtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mrolerank_) -
        reinterpret_cast<char*>(&_impl_.mtype_)) + sizeof(_impl_.mrolerank_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RANKLIST_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbdb.eranklist mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mtype(static_cast<::pbdb::eranklist>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .pbdb.db_brief mitems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 mpage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mpage(&has_bits);
          _impl_.mpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mcount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mcount(&has_bits);
          _impl_.mcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mrolerank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mrolerank(&has_bits);
          _impl_.mrolerank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_RANKLIST_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbdb.eranklist mtype = 1;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mtype(), target);
  }

  // repeated .pbdb.db_brief mitems = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mitems_size()); i < n; i++) {
    const auto& repfield = this->_internal_mitems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 mpage = 3;
  if (_internal_has_mpage()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mpage(), target);
  }

  // optional int32 mcount = 4;
  if (_internal_has_mcount()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mcount(), target);
  }

  // optional int32 mrolerank = 5;
  if (_internal_has_mrolerank()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mrolerank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  return target;
}

size_t PROBUFF_NET_RANKLIST_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_brief mitems = 2;
  total_size += 1UL * this->_internal_mitems_size();
  for (const auto& msg : this->_impl_.mitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .pbdb.eranklist mtype = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mtype());
    }

    // optional int32 mpage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mpage());
    }

    // optional int32 mcount = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mcount());
    }

    // optional int32 mrolerank = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mrolerank());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_RANKLIST_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_RANKLIST_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_RANKLIST_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_RANKLIST_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_RANKLIST_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_RANKLIST_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mitems_.MergeFrom(from._impl_.mitems_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mtype_ = from._impl_.mtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mpage_ = from._impl_.mpage_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mcount_ = from._impl_.mcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mrolerank_ = from._impl_.mrolerank_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_RANKLIST_RESPONSE::CopyFrom(const PROBUFF_NET_RANKLIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RANKLIST_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RANKLIST_RESPONSE::InternalSwap(PROBUFF_NET_RANKLIST_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mitems_.InternalSwap(&other->_impl_.mitems_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RANKLIST_RESPONSE, _impl_.mrolerank_)
      + sizeof(PROBUFF_NET_RANKLIST_RESPONSE::_impl_.mrolerank_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RANKLIST_RESPONSE, _impl_.mtype_)>(
          reinterpret_cast<char*>(&_impl_.mtype_),
          reinterpret_cast<char*>(&other->_impl_.mtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RANKLIST_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[63]);
}

// ===================================================================

class PROBUFF_NET_FRIEND::_Internal {
 public:
};

PROBUFF_NET_FRIEND::PROBUFF_NET_FRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND)
}
PROBUFF_NET_FRIEND::PROBUFF_NET_FRIEND(const PROBUFF_NET_FRIEND& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_FRIEND* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FRIEND::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FRIEND::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[64]);
}

// ===================================================================

class PROBUFF_NET_FRIEND_RESPONSE::_Internal {
 public:
};

void PROBUFF_NET_FRIEND_RESPONSE::clear_mfriends() {
  _impl_.mfriends_.Clear();
}
void PROBUFF_NET_FRIEND_RESPONSE::clear_mapplyfriends() {
  _impl_.mapplyfriends_.Clear();
}
PROBUFF_NET_FRIEND_RESPONSE::PROBUFF_NET_FRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
}
PROBUFF_NET_FRIEND_RESPONSE::PROBUFF_NET_FRIEND_RESPONSE(const PROBUFF_NET_FRIEND_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FRIEND_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mfriends_){from._impl_.mfriends_}
    , decltype(_impl_.mapplyfriends_){from._impl_.mapplyfriends_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
}

inline void PROBUFF_NET_FRIEND_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mfriends_){arena}
    , decltype(_impl_.mapplyfriends_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_FRIEND_RESPONSE::~PROBUFF_NET_FRIEND_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FRIEND_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mfriends_.~RepeatedPtrField();
  _impl_.mapplyfriends_.~RepeatedPtrField();
}

void PROBUFF_NET_FRIEND_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FRIEND_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mfriends_.Clear();
  _impl_.mapplyfriends_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pbdb.db_brief mfriends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mfriends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .pbdb.db_brief mapplyfriends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mapplyfriends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FRIEND_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbdb.db_brief mfriends = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mfriends_size()); i < n; i++) {
    const auto& repfield = this->_internal_mfriends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pbdb.db_brief mapplyfriends = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mapplyfriends_size()); i < n; i++) {
    const auto& repfield = this->_internal_mapplyfriends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FRIEND_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_brief mfriends = 1;
  total_size += 1UL * this->_internal_mfriends_size();
  for (const auto& msg : this->_impl_.mfriends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pbdb.db_brief mapplyfriends = 2;
  total_size += 1UL * this->_internal_mapplyfriends_size();
  for (const auto& msg : this->_impl_.mapplyfriends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FRIEND_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FRIEND_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FRIEND_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FRIEND_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FRIEND_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FRIEND_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mfriends_.MergeFrom(from._impl_.mfriends_);
  _this->_impl_.mapplyfriends_.MergeFrom(from._impl_.mapplyfriends_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FRIEND_RESPONSE::CopyFrom(const PROBUFF_NET_FRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_RESPONSE::InternalSwap(PROBUFF_NET_FRIEND_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mfriends_.InternalSwap(&other->_impl_.mfriends_);
  _impl_.mapplyfriends_.InternalSwap(&other->_impl_.mapplyfriends_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[65]);
}

// ===================================================================

class PROBUFF_NET_FRIEND_ADD::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FRIEND_ADD>()._impl_._has_bits_);
  static void set_has_mfriedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FRIEND_ADD::PROBUFF_NET_FRIEND_ADD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_ADD)
}
PROBUFF_NET_FRIEND_ADD::PROBUFF_NET_FRIEND_ADD(const PROBUFF_NET_FRIEND_ADD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FRIEND_ADD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfriedid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mfriedid_ = from._impl_.mfriedid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_ADD)
}

inline void PROBUFF_NET_FRIEND_ADD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfriedid_){int64_t{0}}
  };
}

PROBUFF_NET_FRIEND_ADD::~PROBUFF_NET_FRIEND_ADD() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_ADD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FRIEND_ADD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FRIEND_ADD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FRIEND_ADD::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_ADD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mfriedid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_ADD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mfriedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mfriedid(&has_bits);
          _impl_.mfriedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FRIEND_ADD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_ADD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mfriedid = 1;
  if (_internal_has_mfriedid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfriedid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_ADD)
  return target;
}

size_t PROBUFF_NET_FRIEND_ADD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_ADD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 mfriedid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mfriedid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FRIEND_ADD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FRIEND_ADD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FRIEND_ADD::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FRIEND_ADD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FRIEND_ADD*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FRIEND_ADD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_ADD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mfriedid()) {
    _this->_internal_set_mfriedid(from._internal_mfriedid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FRIEND_ADD::CopyFrom(const PROBUFF_NET_FRIEND_ADD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_ADD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_ADD::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_ADD::InternalSwap(PROBUFF_NET_FRIEND_ADD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mfriedid_, other->_impl_.mfriedid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_ADD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[66]);
}

// ===================================================================

class PROBUFF_NET_FRIEND_ADD_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FRIEND_ADD_RESPONSE>()._impl_._has_bits_);
  static void set_has_mfriedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_FRIEND_ADD_RESPONSE::PROBUFF_NET_FRIEND_ADD_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
}
PROBUFF_NET_FRIEND_ADD_RESPONSE::PROBUFF_NET_FRIEND_ADD_RESPONSE(const PROBUFF_NET_FRIEND_ADD_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FRIEND_ADD_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfriedid_){}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mfriedid_, &from._impl_.mfriedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstat_) -
    reinterpret_cast<char*>(&_impl_.mfriedid_)) + sizeof(_impl_.mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
}

inline void PROBUFF_NET_FRIEND_ADD_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfriedid_){int64_t{0}}
    , decltype(_impl_.mstat_){0}
  };
}

PROBUFF_NET_FRIEND_ADD_RESPONSE::~PROBUFF_NET_FRIEND_ADD_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FRIEND_ADD_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FRIEND_ADD_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FRIEND_ADD_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mfriedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstat_) -
        reinterpret_cast<char*>(&_impl_.mfriedid_)) + sizeof(_impl_.mstat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_ADD_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mfriedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mfriedid(&has_bits);
          _impl_.mfriedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FRIEND_ADD_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mfriedid = 1;
  if (_internal_has_mfriedid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfriedid(), target);
  }

  // optional int32 mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FRIEND_ADD_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 mfriedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mfriedid());
    }

    // optional int32 mstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mstat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FRIEND_ADD_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FRIEND_ADD_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FRIEND_ADD_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FRIEND_ADD_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FRIEND_ADD_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FRIEND_ADD_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mfriedid_ = from._impl_.mfriedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mstat_ = from._impl_.mstat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FRIEND_ADD_RESPONSE::CopyFrom(const PROBUFF_NET_FRIEND_ADD_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_ADD_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_ADD_RESPONSE::InternalSwap(PROBUFF_NET_FRIEND_ADD_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_ADD_RESPONSE, _impl_.mstat_)
      + sizeof(PROBUFF_NET_FRIEND_ADD_RESPONSE::_impl_.mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_ADD_RESPONSE, _impl_.mfriedid_)>(
          reinterpret_cast<char*>(&_impl_.mfriedid_),
          reinterpret_cast<char*>(&other->_impl_.mfriedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_ADD_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[67]);
}

// ===================================================================

class PROBUFF_NET_FRIEND_RATIFY_ADD::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FRIEND_RATIFY_ADD>()._impl_._has_bits_);
  static void set_has_mfriedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mratify(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_FRIEND_RATIFY_ADD::PROBUFF_NET_FRIEND_RATIFY_ADD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
}
PROBUFF_NET_FRIEND_RATIFY_ADD::PROBUFF_NET_FRIEND_RATIFY_ADD(const PROBUFF_NET_FRIEND_RATIFY_ADD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FRIEND_RATIFY_ADD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfriedid_){}
    , decltype(_impl_.mratify_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mfriedid_, &from._impl_.mfriedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mratify_) -
    reinterpret_cast<char*>(&_impl_.mfriedid_)) + sizeof(_impl_.mratify_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
}

inline void PROBUFF_NET_FRIEND_RATIFY_ADD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfriedid_){int64_t{0}}
    , decltype(_impl_.mratify_){false}
  };
}

PROBUFF_NET_FRIEND_RATIFY_ADD::~PROBUFF_NET_FRIEND_RATIFY_ADD() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FRIEND_RATIFY_ADD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FRIEND_RATIFY_ADD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FRIEND_RATIFY_ADD::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mfriedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mratify_) -
        reinterpret_cast<char*>(&_impl_.mfriedid_)) + sizeof(_impl_.mratify_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_RATIFY_ADD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mfriedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mfriedid(&has_bits);
          _impl_.mfriedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mratify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mratify(&has_bits);
          _impl_.mratify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FRIEND_RATIFY_ADD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mfriedid = 1;
  if (_internal_has_mfriedid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfriedid(), target);
  }

  // optional bool mratify = 2;
  if (_internal_has_mratify()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_mratify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  return target;
}

size_t PROBUFF_NET_FRIEND_RATIFY_ADD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 mfriedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mfriedid());
    }

    // optional bool mratify = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FRIEND_RATIFY_ADD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FRIEND_RATIFY_ADD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FRIEND_RATIFY_ADD::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FRIEND_RATIFY_ADD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FRIEND_RATIFY_ADD*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FRIEND_RATIFY_ADD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mfriedid_ = from._impl_.mfriedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mratify_ = from._impl_.mratify_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FRIEND_RATIFY_ADD::CopyFrom(const PROBUFF_NET_FRIEND_RATIFY_ADD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_RATIFY_ADD::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_RATIFY_ADD::InternalSwap(PROBUFF_NET_FRIEND_RATIFY_ADD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_RATIFY_ADD, _impl_.mratify_)
      + sizeof(PROBUFF_NET_FRIEND_RATIFY_ADD::_impl_.mratify_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_RATIFY_ADD, _impl_.mfriedid_)>(
          reinterpret_cast<char*>(&_impl_.mfriedid_),
          reinterpret_cast<char*>(&other->_impl_.mfriedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_RATIFY_ADD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[68]);
}

// ===================================================================

class PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE>()._impl_._has_bits_);
  static void set_has_mfriedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mratify(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
}
PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE(const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfriedid_){}
    , decltype(_impl_.mratify_){}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mfriedid_, &from._impl_.mfriedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstat_) -
    reinterpret_cast<char*>(&_impl_.mfriedid_)) + sizeof(_impl_.mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
}

inline void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfriedid_){int64_t{0}}
    , decltype(_impl_.mratify_){false}
    , decltype(_impl_.mstat_){0}
  };
}

PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::~PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.mfriedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstat_) -
        reinterpret_cast<char*>(&_impl_.mfriedid_)) + sizeof(_impl_.mstat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mfriedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mfriedid(&has_bits);
          _impl_.mfriedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool mratify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mratify(&has_bits);
          _impl_.mratify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mstat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mfriedid = 1;
  if (_internal_has_mfriedid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfriedid(), target);
  }

  // optional bool mratify = 2;
  if (_internal_has_mratify()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_mratify(), target);
  }

  // optional int32 mstat = 3;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 mfriedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mfriedid());
    }

    // optional bool mratify = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 mstat = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mstat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mfriedid_ = from._impl_.mfriedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mratify_ = from._impl_.mratify_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mstat_ = from._impl_.mstat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::CopyFrom(const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::InternalSwap(PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE, _impl_.mstat_)
      + sizeof(PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_impl_.mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE, _impl_.mfriedid_)>(
          reinterpret_cast<char*>(&_impl_.mfriedid_),
          reinterpret_cast<char*>(&other->_impl_.mfriedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[69]);
}

// ===================================================================

class PROBUFF_NET_FRIEND_ERASE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FRIEND_ERASE>()._impl_._has_bits_);
  static void set_has_mfriedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FRIEND_ERASE::PROBUFF_NET_FRIEND_ERASE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_ERASE)
}
PROBUFF_NET_FRIEND_ERASE::PROBUFF_NET_FRIEND_ERASE(const PROBUFF_NET_FRIEND_ERASE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FRIEND_ERASE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfriedid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mfriedid_ = from._impl_.mfriedid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_ERASE)
}

inline void PROBUFF_NET_FRIEND_ERASE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfriedid_){int64_t{0}}
  };
}

PROBUFF_NET_FRIEND_ERASE::~PROBUFF_NET_FRIEND_ERASE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_ERASE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FRIEND_ERASE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FRIEND_ERASE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FRIEND_ERASE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_ERASE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mfriedid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_ERASE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mfriedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mfriedid(&has_bits);
          _impl_.mfriedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FRIEND_ERASE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_ERASE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mfriedid = 1;
  if (_internal_has_mfriedid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfriedid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_ERASE)
  return target;
}

size_t PROBUFF_NET_FRIEND_ERASE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_ERASE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 mfriedid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mfriedid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FRIEND_ERASE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FRIEND_ERASE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FRIEND_ERASE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FRIEND_ERASE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FRIEND_ERASE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FRIEND_ERASE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_ERASE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mfriedid()) {
    _this->_internal_set_mfriedid(from._internal_mfriedid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FRIEND_ERASE::CopyFrom(const PROBUFF_NET_FRIEND_ERASE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_ERASE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_ERASE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_ERASE::InternalSwap(PROBUFF_NET_FRIEND_ERASE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mfriedid_, other->_impl_.mfriedid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_ERASE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[70]);
}

// ===================================================================

class PROBUFF_NET_FRIEND_ERASE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FRIEND_ERASE_RESPONSE>()._impl_._has_bits_);
  static void set_has_mfriedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_FRIEND_ERASE_RESPONSE::PROBUFF_NET_FRIEND_ERASE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
}
PROBUFF_NET_FRIEND_ERASE_RESPONSE::PROBUFF_NET_FRIEND_ERASE_RESPONSE(const PROBUFF_NET_FRIEND_ERASE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FRIEND_ERASE_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfriedid_){}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mfriedid_, &from._impl_.mfriedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstat_) -
    reinterpret_cast<char*>(&_impl_.mfriedid_)) + sizeof(_impl_.mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
}

inline void PROBUFF_NET_FRIEND_ERASE_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mfriedid_){int64_t{0}}
    , decltype(_impl_.mstat_){0}
  };
}

PROBUFF_NET_FRIEND_ERASE_RESPONSE::~PROBUFF_NET_FRIEND_ERASE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FRIEND_ERASE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FRIEND_ERASE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FRIEND_ERASE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mfriedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstat_) -
        reinterpret_cast<char*>(&_impl_.mfriedid_)) + sizeof(_impl_.mstat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_ERASE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mfriedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mfriedid(&has_bits);
          _impl_.mfriedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mstat(&has_bits);
          _impl_.mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FRIEND_ERASE_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mfriedid = 1;
  if (_internal_has_mfriedid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfriedid(), target);
  }

  // optional int32 mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FRIEND_ERASE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 mfriedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mfriedid());
    }

    // optional int32 mstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mstat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FRIEND_ERASE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FRIEND_ERASE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FRIEND_ERASE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FRIEND_ERASE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FRIEND_ERASE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FRIEND_ERASE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mfriedid_ = from._impl_.mfriedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mstat_ = from._impl_.mstat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FRIEND_ERASE_RESPONSE::CopyFrom(const PROBUFF_NET_FRIEND_ERASE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_ERASE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_ERASE_RESPONSE::InternalSwap(PROBUFF_NET_FRIEND_ERASE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_ERASE_RESPONSE, _impl_.mstat_)
      + sizeof(PROBUFF_NET_FRIEND_ERASE_RESPONSE::_impl_.mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_ERASE_RESPONSE, _impl_.mfriedid_)>(
          reinterpret_cast<char*>(&_impl_.mfriedid_),
          reinterpret_cast<char*>(&other->_impl_.mfriedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_ERASE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[71]);
}

// ===================================================================

class PROBUFF_NET_ROLESTAT::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ROLESTAT>()._impl_._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mlogicstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_ROLESTAT::PROBUFF_NET_ROLESTAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLESTAT)
}
PROBUFF_NET_ROLESTAT::PROBUFF_NET_ROLESTAT(const PROBUFF_NET_ROLESTAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ROLESTAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){}
    , decltype(_impl_.mlogicstat_){}
    , decltype(_impl_.mroleid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mstat_, &from._impl_.mstat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mroleid_) -
    reinterpret_cast<char*>(&_impl_.mstat_)) + sizeof(_impl_.mroleid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLESTAT)
}

inline void PROBUFF_NET_ROLESTAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mstat_){0}
    , decltype(_impl_.mlogicstat_){0}
    , decltype(_impl_.mroleid_){int64_t{0}}
  };
}

PROBUFF_NET_ROLESTAT::~PROBUFF_NET_ROLESTAT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLESTAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ROLESTAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_ROLESTAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ROLESTAT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLESTAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.mstat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mroleid_) -
        reinterpret_cast<char*>(&_impl_.mstat_)) + sizeof(_impl_.mroleid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLESTAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.PROBUFF_NET_ROLESTAT.stat mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mstat(static_cast<::pbnet::PROBUFF_NET_ROLESTAT_stat>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .pbnet.PROBUFF_NET_ROLESTAT.logic_stat mlogicstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mlogicstat(static_cast<::pbnet::PROBUFF_NET_ROLESTAT_logic_stat>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int64 mroleid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mroleid(&has_bits);
          _impl_.mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ROLESTAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLESTAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.PROBUFF_NET_ROLESTAT.stat mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mstat(), target);
  }

  // optional .pbnet.PROBUFF_NET_ROLESTAT.logic_stat mlogicstat = 2;
  if (_internal_has_mlogicstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mlogicstat(), target);
  }

  // optional int64 mroleid = 3;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_mroleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLESTAT)
  return target;
}

size_t PROBUFF_NET_ROLESTAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLESTAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .pbnet.PROBUFF_NET_ROLESTAT.stat mstat = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mstat());
    }

    // optional .pbnet.PROBUFF_NET_ROLESTAT.logic_stat mlogicstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mlogicstat());
    }

    // optional int64 mroleid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mroleid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ROLESTAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ROLESTAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ROLESTAT::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ROLESTAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ROLESTAT*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ROLESTAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLESTAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mstat_ = from._impl_.mstat_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mlogicstat_ = from._impl_.mlogicstat_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mroleid_ = from._impl_.mroleid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ROLESTAT::CopyFrom(const PROBUFF_NET_ROLESTAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLESTAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLESTAT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLESTAT::InternalSwap(PROBUFF_NET_ROLESTAT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLESTAT, _impl_.mroleid_)
      + sizeof(PROBUFF_NET_ROLESTAT::_impl_.mroleid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLESTAT, _impl_.mstat_)>(
          reinterpret_cast<char*>(&_impl_.mstat_),
          reinterpret_cast<char*>(&other->_impl_.mstat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLESTAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[72]);
}

// ===================================================================

class VECTOR2::_Internal {
 public:
  using HasBits = decltype(std::declval<VECTOR2>()._impl_._has_bits_);
  static void set_has_mx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_my(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VECTOR2::VECTOR2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.VECTOR2)
}
VECTOR2::VECTOR2(const VECTOR2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VECTOR2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mx_){}
    , decltype(_impl_.my_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mx_, &from._impl_.mx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.my_) -
    reinterpret_cast<char*>(&_impl_.mx_)) + sizeof(_impl_.my_));
  // @@protoc_insertion_point(copy_constructor:pbnet.VECTOR2)
}

inline void VECTOR2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mx_){0}
    , decltype(_impl_.my_){0}
  };
}

VECTOR2::~VECTOR2() {
  // @@protoc_insertion_point(destructor:pbnet.VECTOR2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VECTOR2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VECTOR2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VECTOR2::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.VECTOR2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.my_) -
        reinterpret_cast<char*>(&_impl_.mx_)) + sizeof(_impl_.my_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VECTOR2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mx(&has_bits);
          _impl_.mx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 my = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_my(&has_bits);
          _impl_.my_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VECTOR2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.VECTOR2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mx = 1;
  if (_internal_has_mx()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mx(), target);
  }

  // optional int32 my = 2;
  if (_internal_has_my()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_my(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.VECTOR2)
  return target;
}

size_t VECTOR2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.VECTOR2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 mx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mx());
    }

    // optional int32 my = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_my());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VECTOR2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VECTOR2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VECTOR2::GetClassData() const { return &_class_data_; }


void VECTOR2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VECTOR2*>(&to_msg);
  auto& from = static_cast<const VECTOR2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.VECTOR2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mx_ = from._impl_.mx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.my_ = from._impl_.my_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VECTOR2::CopyFrom(const VECTOR2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.VECTOR2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VECTOR2::IsInitialized() const {
  return true;
}

void VECTOR2::InternalSwap(VECTOR2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VECTOR2, _impl_.my_)
      + sizeof(VECTOR2::_impl_.my_)
      - PROTOBUF_FIELD_OFFSET(VECTOR2, _impl_.mx_)>(
          reinterpret_cast<char*>(&_impl_.mx_),
          reinterpret_cast<char*>(&other->_impl_.mx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VECTOR2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[73]);
}

// ===================================================================

class VECTOR3::_Internal {
 public:
  using HasBits = decltype(std::declval<VECTOR3>()._impl_._has_bits_);
  static void set_has_mx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_my(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VECTOR3::VECTOR3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.VECTOR3)
}
VECTOR3::VECTOR3(const VECTOR3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VECTOR3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mx_){}
    , decltype(_impl_.my_){}
    , decltype(_impl_.mz_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mx_, &from._impl_.mx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mz_) -
    reinterpret_cast<char*>(&_impl_.mx_)) + sizeof(_impl_.mz_));
  // @@protoc_insertion_point(copy_constructor:pbnet.VECTOR3)
}

inline void VECTOR3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mx_){0}
    , decltype(_impl_.my_){0}
    , decltype(_impl_.mz_){0}
  };
}

VECTOR3::~VECTOR3() {
  // @@protoc_insertion_point(destructor:pbnet.VECTOR3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VECTOR3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VECTOR3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VECTOR3::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.VECTOR3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.mx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mz_) -
        reinterpret_cast<char*>(&_impl_.mx_)) + sizeof(_impl_.mz_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VECTOR3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mx(&has_bits);
          _impl_.mx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 my = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_my(&has_bits);
          _impl_.my_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mz(&has_bits);
          _impl_.mz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VECTOR3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.VECTOR3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mx = 1;
  if (_internal_has_mx()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mx(), target);
  }

  // optional int32 my = 2;
  if (_internal_has_my()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_my(), target);
  }

  // optional int32 mz = 3;
  if (_internal_has_mz()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.VECTOR3)
  return target;
}

size_t VECTOR3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.VECTOR3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 mx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mx());
    }

    // optional int32 my = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_my());
    }

    // optional int32 mz = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mz());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VECTOR3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VECTOR3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VECTOR3::GetClassData() const { return &_class_data_; }


void VECTOR3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VECTOR3*>(&to_msg);
  auto& from = static_cast<const VECTOR3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.VECTOR3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mx_ = from._impl_.mx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.my_ = from._impl_.my_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mz_ = from._impl_.mz_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VECTOR3::CopyFrom(const VECTOR3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.VECTOR3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VECTOR3::IsInitialized() const {
  return true;
}

void VECTOR3::InternalSwap(VECTOR3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_.mz_)
      + sizeof(VECTOR3::_impl_.mz_)
      - PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_.mx_)>(
          reinterpret_cast<char*>(&_impl_.mx_),
          reinterpret_cast<char*>(&other->_impl_.mx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VECTOR3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[74]);
}

// ===================================================================

class UNIT_POSITION::_Internal {
 public:
  using HasBits = decltype(std::declval<UNIT_POSITION>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbnet::VECTOR2& mposition(const UNIT_POSITION* msg);
  static void set_has_mposition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mangle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mspeed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pbnet::VECTOR2&
UNIT_POSITION::_Internal::mposition(const UNIT_POSITION* msg) {
  return *msg->_impl_.mposition_;
}
UNIT_POSITION::UNIT_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.UNIT_POSITION)
}
UNIT_POSITION::UNIT_POSITION(const UNIT_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UNIT_POSITION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mposition_){nullptr}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.mangle_){}
    , decltype(_impl_.mspeed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mposition()) {
    _this->_impl_.mposition_ = new ::pbnet::VECTOR2(*from._impl_.mposition_);
  }
  ::memcpy(&_impl_.mid_, &from._impl_.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mspeed_) -
    reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mspeed_));
  // @@protoc_insertion_point(copy_constructor:pbnet.UNIT_POSITION)
}

inline void UNIT_POSITION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mposition_){nullptr}
    , decltype(_impl_.mid_){int64_t{0}}
    , decltype(_impl_.mangle_){0}
    , decltype(_impl_.mspeed_){0}
  };
}

UNIT_POSITION::~UNIT_POSITION() {
  // @@protoc_insertion_point(destructor:pbnet.UNIT_POSITION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UNIT_POSITION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mposition_;
}

void UNIT_POSITION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UNIT_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UNIT_POSITION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.mposition_ != nullptr);
    _impl_.mposition_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mspeed_) -
        reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mspeed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UNIT_POSITION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbnet.VECTOR2 mposition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mposition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mangle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mangle(&has_bits);
          _impl_.mangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mspeed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mspeed(&has_bits);
          _impl_.mspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UNIT_POSITION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UNIT_POSITION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 2;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_mid(), target);
  }

  // optional .pbnet.VECTOR2 mposition = 3;
  if (_internal_has_mposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::mposition(this),
        _Internal::mposition(this).GetCachedSize(), target, stream);
  }

  // optional int32 mangle = 4;
  if (_internal_has_mangle()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mangle(), target);
  }

  // optional int32 mspeed = 5;
  if (_internal_has_mspeed()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mspeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UNIT_POSITION)
  return target;
}

size_t UNIT_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UNIT_POSITION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .pbnet.VECTOR2 mposition = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mposition_);
    }

    // optional int64 mid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
    }

    // optional int32 mangle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mangle());
    }

    // optional int32 mspeed = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mspeed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UNIT_POSITION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UNIT_POSITION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UNIT_POSITION::GetClassData() const { return &_class_data_; }


void UNIT_POSITION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UNIT_POSITION*>(&to_msg);
  auto& from = static_cast<const UNIT_POSITION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UNIT_POSITION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_mposition()->::pbnet::VECTOR2::MergeFrom(
          from._internal_mposition());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mangle_ = from._impl_.mangle_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mspeed_ = from._impl_.mspeed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UNIT_POSITION::CopyFrom(const UNIT_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UNIT_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UNIT_POSITION::IsInitialized() const {
  return true;
}

void UNIT_POSITION::InternalSwap(UNIT_POSITION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UNIT_POSITION, _impl_.mspeed_)
      + sizeof(UNIT_POSITION::_impl_.mspeed_)
      - PROTOBUF_FIELD_OFFSET(UNIT_POSITION, _impl_.mposition_)>(
          reinterpret_cast<char*>(&_impl_.mposition_),
          reinterpret_cast<char*>(&other->_impl_.mposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UNIT_POSITION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[75]);
}

// ===================================================================

class UnitAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitAttribute>()._impl_._has_bits_);
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitAttribute::UnitAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.UnitAttribute)
}
UnitAttribute::UnitAttribute(const UnitAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnitAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mvalue_){}
    , decltype(_impl_.mtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mvalue_, &from._impl_.mvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mtype_) -
    reinterpret_cast<char*>(&_impl_.mvalue_)) + sizeof(_impl_.mtype_));
  // @@protoc_insertion_point(copy_constructor:pbnet.UnitAttribute)
}

inline void UnitAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mvalue_){int64_t{0}}
    , decltype(_impl_.mtype_){0}
  };
}

UnitAttribute::~UnitAttribute() {
  // @@protoc_insertion_point(destructor:pbnet.UnitAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnitAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnitAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnitAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UnitAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mtype_) -
        reinterpret_cast<char*>(&_impl_.mvalue_)) + sizeof(_impl_.mtype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mtype(&has_bits);
          _impl_.mtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 mvalue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mvalue(&has_bits);
          _impl_.mvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnitAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UnitAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mtype = 1;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtype(), target);
  }

  // optional int64 mvalue = 2;
  if (_internal_has_mvalue()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_mvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UnitAttribute)
  return target;
}

size_t UnitAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UnitAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 mvalue = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mvalue());
    }

    // optional int32 mtype = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mtype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnitAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnitAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnitAttribute::GetClassData() const { return &_class_data_; }


void UnitAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnitAttribute*>(&to_msg);
  auto& from = static_cast<const UnitAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UnitAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mvalue_ = from._impl_.mvalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mtype_ = from._impl_.mtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnitAttribute::CopyFrom(const UnitAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UnitAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitAttribute::IsInitialized() const {
  return true;
}

void UnitAttribute::InternalSwap(UnitAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnitAttribute, _impl_.mtype_)
      + sizeof(UnitAttribute::_impl_.mtype_)
      - PROTOBUF_FIELD_OFFSET(UnitAttribute, _impl_.mvalue_)>(
          reinterpret_cast<char*>(&_impl_.mvalue_),
          reinterpret_cast<char*>(&other->_impl_.mvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[76]);
}

// ===================================================================

class UnitModule::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitModule>()._impl_._has_bits_);
  static void set_has_mmtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitModule::UnitModule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.UnitModule)
}
UnitModule::UnitModule(const UnitModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnitModule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmodules_){from._impl_.mmodules_}
    , decltype(_impl_.mmtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mmtype_ = from._impl_.mmtype_;
  // @@protoc_insertion_point(copy_constructor:pbnet.UnitModule)
}

inline void UnitModule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmodules_){arena}
    , decltype(_impl_.mmtype_){0}
  };
}

UnitModule::~UnitModule() {
  // @@protoc_insertion_point(destructor:pbnet.UnitModule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnitModule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mmodules_.~RepeatedPtrField();
}

void UnitModule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnitModule::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UnitModule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mmodules_.Clear();
  _impl_.mmtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitModule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mmtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mmtype(&has_bits);
          _impl_.mmtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbnet.UnitAttribute mmodules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mmodules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnitModule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UnitModule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 mmtype = 1;
  if (_internal_has_mmtype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mmtype(), target);
  }

  // repeated .pbnet.UnitAttribute mmodules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mmodules_size()); i < n; i++) {
    const auto& repfield = this->_internal_mmodules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UnitModule)
  return target;
}

size_t UnitModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UnitModule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UnitAttribute mmodules = 2;
  total_size += 1UL * this->_internal_mmodules_size();
  for (const auto& msg : this->_impl_.mmodules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 mmtype = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mmtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnitModule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnitModule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnitModule::GetClassData() const { return &_class_data_; }


void UnitModule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnitModule*>(&to_msg);
  auto& from = static_cast<const UnitModule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UnitModule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mmodules_.MergeFrom(from._impl_.mmodules_);
  if (from._internal_has_mmtype()) {
    _this->_internal_set_mmtype(from._internal_mmtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnitModule::CopyFrom(const UnitModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UnitModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitModule::IsInitialized() const {
  return true;
}

void UnitModule::InternalSwap(UnitModule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mmodules_.InternalSwap(&other->_impl_.mmodules_);
  swap(_impl_.mmtype_, other->_impl_.mmtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitModule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[77]);
}

// ===================================================================

class UNIT::_Internal {
 public:
  using HasBits = decltype(std::declval<UNIT>()._impl_._has_bits_);
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbnet::UNIT_POSITION& mposition(const UNIT* msg);
  static void set_has_mposition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pbnet::UNIT_POSITION&
UNIT::_Internal::mposition(const UNIT* msg) {
  return *msg->_impl_.mposition_;
}
UNIT::UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.UNIT)
}
UNIT::UNIT(const UNIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UNIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmodules_){from._impl_.mmodules_}
    , decltype(_impl_.mposition_){nullptr}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.mtype_){}
    , decltype(_impl_.mstat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mposition()) {
    _this->_impl_.mposition_ = new ::pbnet::UNIT_POSITION(*from._impl_.mposition_);
  }
  ::memcpy(&_impl_.mid_, &from._impl_.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstat_) -
    reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.UNIT)
}

inline void UNIT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mmodules_){arena}
    , decltype(_impl_.mposition_){nullptr}
    , decltype(_impl_.mid_){int64_t{0}}
    , decltype(_impl_.mtype_){0}
    , decltype(_impl_.mstat_){0}
  };
}

UNIT::~UNIT() {
  // @@protoc_insertion_point(destructor:pbnet.UNIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UNIT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mmodules_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.mposition_;
}

void UNIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UNIT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UNIT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mmodules_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.mposition_ != nullptr);
    _impl_.mposition_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstat_) -
        reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.mstat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UNIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eunit mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mtype(static_cast<::pbnet::eunit>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int64 mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbnet.UNIT_POSITION mposition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mposition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbnet.UnitModule mmodules = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mmodules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .pbnet.eunitstat mstat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mstat(static_cast<::pbnet::eunitstat>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UNIT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UNIT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.eunit mtype = 1;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mtype(), target);
  }

  // optional int64 mid = 2;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_mid(), target);
  }

  // optional .pbnet.UNIT_POSITION mposition = 3;
  if (_internal_has_mposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::mposition(this),
        _Internal::mposition(this).GetCachedSize(), target, stream);
  }

  // repeated .pbnet.UnitModule mmodules = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mmodules_size()); i < n; i++) {
    const auto& repfield = this->_internal_mmodules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .pbnet.eunitstat mstat = 5;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UNIT)
  return target;
}

size_t UNIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UNIT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UnitModule mmodules = 4;
  total_size += 1UL * this->_internal_mmodules_size();
  for (const auto& msg : this->_impl_.mmodules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .pbnet.UNIT_POSITION mposition = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mposition_);
    }

    // optional int64 mid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
    }

    // optional .pbnet.eunit mtype = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mtype());
    }

    // optional .pbnet.eunitstat mstat = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_mstat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UNIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UNIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UNIT::GetClassData() const { return &_class_data_; }


void UNIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UNIT*>(&to_msg);
  auto& from = static_cast<const UNIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UNIT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mmodules_.MergeFrom(from._impl_.mmodules_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_mposition()->::pbnet::UNIT_POSITION::MergeFrom(
          from._internal_mposition());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mtype_ = from._impl_.mtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mstat_ = from._impl_.mstat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UNIT::CopyFrom(const UNIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UNIT::IsInitialized() const {
  return true;
}

void UNIT::InternalSwap(UNIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mmodules_.InternalSwap(&other->_impl_.mmodules_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UNIT, _impl_.mstat_)
      + sizeof(UNIT::_impl_.mstat_)
      - PROTOBUF_FIELD_OFFSET(UNIT, _impl_.mposition_)>(
          reinterpret_cast<char*>(&_impl_.mposition_),
          reinterpret_cast<char*>(&other->_impl_.mposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UNIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[78]);
}

// ===================================================================

class PROBUFF_NET_SYNC_ATTRIBUTE::_Internal {
 public:
};

PROBUFF_NET_SYNC_ATTRIBUTE::PROBUFF_NET_SYNC_ATTRIBUTE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
}
PROBUFF_NET_SYNC_ATTRIBUTE::PROBUFF_NET_SYNC_ATTRIBUTE(const PROBUFF_NET_SYNC_ATTRIBUTE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_SYNC_ATTRIBUTE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mmodules_){from._impl_.mmodules_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
}

inline void PROBUFF_NET_SYNC_ATTRIBUTE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mmodules_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_SYNC_ATTRIBUTE::~PROBUFF_NET_SYNC_ATTRIBUTE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SYNC_ATTRIBUTE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mmodules_.~RepeatedPtrField();
}

void PROBUFF_NET_SYNC_ATTRIBUTE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SYNC_ATTRIBUTE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mmodules_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_ATTRIBUTE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pbnet.UnitModule mmodules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mmodules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_SYNC_ATTRIBUTE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnet.UnitModule mmodules = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mmodules_size()); i < n; i++) {
    const auto& repfield = this->_internal_mmodules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  return target;
}

size_t PROBUFF_NET_SYNC_ATTRIBUTE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UnitModule mmodules = 1;
  total_size += 1UL * this->_internal_mmodules_size();
  for (const auto& msg : this->_impl_.mmodules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SYNC_ATTRIBUTE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SYNC_ATTRIBUTE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SYNC_ATTRIBUTE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SYNC_ATTRIBUTE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SYNC_ATTRIBUTE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SYNC_ATTRIBUTE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mmodules_.MergeFrom(from._impl_.mmodules_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SYNC_ATTRIBUTE::CopyFrom(const PROBUFF_NET_SYNC_ATTRIBUTE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_ATTRIBUTE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_ATTRIBUTE::InternalSwap(PROBUFF_NET_SYNC_ATTRIBUTE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mmodules_.InternalSwap(&other->_impl_.mmodules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_ATTRIBUTE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[79]);
}

// ===================================================================

class PROBUFF_NET_SYNC_UNIT::_Internal {
 public:
};

PROBUFF_NET_SYNC_UNIT::PROBUFF_NET_SYNC_UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_UNIT)
}
PROBUFF_NET_SYNC_UNIT::PROBUFF_NET_SYNC_UNIT(const PROBUFF_NET_SYNC_UNIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_SYNC_UNIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.munits_){from._impl_.munits_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_UNIT)
}

inline void PROBUFF_NET_SYNC_UNIT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.munits_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_SYNC_UNIT::~PROBUFF_NET_SYNC_UNIT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_UNIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SYNC_UNIT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.munits_.~RepeatedPtrField();
}

void PROBUFF_NET_SYNC_UNIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SYNC_UNIT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.munits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_UNIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pbnet.UNIT munits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_munits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_SYNC_UNIT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnet.UNIT munits = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_munits_size()); i < n; i++) {
    const auto& repfield = this->_internal_munits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_UNIT)
  return target;
}

size_t PROBUFF_NET_SYNC_UNIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UNIT munits = 1;
  total_size += 1UL * this->_internal_munits_size();
  for (const auto& msg : this->_impl_.munits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SYNC_UNIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SYNC_UNIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SYNC_UNIT::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SYNC_UNIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SYNC_UNIT*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SYNC_UNIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.munits_.MergeFrom(from._impl_.munits_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SYNC_UNIT::CopyFrom(const PROBUFF_NET_SYNC_UNIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_UNIT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_UNIT::InternalSwap(PROBUFF_NET_SYNC_UNIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.munits_.InternalSwap(&other->_impl_.munits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_UNIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[80]);
}

// ===================================================================

class PROBUFF_NET_ENTER_LEAVE_VIEW::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ENTER_LEAVE_VIEW>()._impl_._has_bits_);
  static void set_has_misenter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ENTER_LEAVE_VIEW::PROBUFF_NET_ENTER_LEAVE_VIEW(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
}
PROBUFF_NET_ENTER_LEAVE_VIEW::PROBUFF_NET_ENTER_LEAVE_VIEW(const PROBUFF_NET_ENTER_LEAVE_VIEW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ENTER_LEAVE_VIEW* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.munits_){from._impl_.munits_}
    , /*decltype(_impl_._munits_cached_byte_size_)*/{0}
    , decltype(_impl_.misenter_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.misenter_ = from._impl_.misenter_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
}

inline void PROBUFF_NET_ENTER_LEAVE_VIEW::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.munits_){arena}
    , /*decltype(_impl_._munits_cached_byte_size_)*/{0}
    , decltype(_impl_.misenter_){false}
  };
}

PROBUFF_NET_ENTER_LEAVE_VIEW::~PROBUFF_NET_ENTER_LEAVE_VIEW() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ENTER_LEAVE_VIEW::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.munits_.~RepeatedField();
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.munits_.Clear();
  _impl_.misenter_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ENTER_LEAVE_VIEW::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool misenter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_misenter(&has_bits);
          _impl_.misenter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 munits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_munits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_munits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ENTER_LEAVE_VIEW::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool misenter = 1;
  if (_internal_has_misenter()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_misenter(), target);
  }

  // repeated int64 munits = 2;
  {
    int byte_size = _impl_._munits_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_munits(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  return target;
}

size_t PROBUFF_NET_ENTER_LEAVE_VIEW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 munits = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.munits_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._munits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional bool misenter = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ENTER_LEAVE_VIEW::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ENTER_LEAVE_VIEW::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ENTER_LEAVE_VIEW::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ENTER_LEAVE_VIEW::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ENTER_LEAVE_VIEW*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ENTER_LEAVE_VIEW&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.munits_.MergeFrom(from._impl_.munits_);
  if (from._internal_has_misenter()) {
    _this->_internal_set_misenter(from._internal_misenter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::CopyFrom(const PROBUFF_NET_ENTER_LEAVE_VIEW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ENTER_LEAVE_VIEW::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::InternalSwap(PROBUFF_NET_ENTER_LEAVE_VIEW* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.munits_.InternalSwap(&other->_impl_.munits_);
  swap(_impl_.misenter_, other->_impl_.misenter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ENTER_LEAVE_VIEW::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[81]);
}

// ===================================================================

PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse() {}
PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::MergeFrom(const PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[82]);
}

// ===================================================================

class PROBUFF_NET_SYNC_POSITION::_Internal {
 public:
};

PROBUFF_NET_SYNC_POSITION::PROBUFF_NET_SYNC_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PROBUFF_NET_SYNC_POSITION::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_POSITION)
}
PROBUFF_NET_SYNC_POSITION::PROBUFF_NET_SYNC_POSITION(const PROBUFF_NET_SYNC_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_SYNC_POSITION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.mposition_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mposition_.MergeFrom(from._impl_.mposition_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_POSITION)
}

inline void PROBUFF_NET_SYNC_POSITION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.mposition_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_SYNC_POSITION::~PROBUFF_NET_SYNC_POSITION() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_POSITION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SYNC_POSITION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mposition_.Destruct();
  _impl_.mposition_.~MapField();
}

void PROBUFF_NET_SYNC_POSITION::ArenaDtor(void* object) {
  PROBUFF_NET_SYNC_POSITION* _this = reinterpret_cast< PROBUFF_NET_SYNC_POSITION* >(object);
  _this->_impl_.mposition_.Destruct();
}
void PROBUFF_NET_SYNC_POSITION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SYNC_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mposition_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_POSITION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int64, .pbnet.UNIT_POSITION> mposition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mposition_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_SYNC_POSITION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .pbnet.UNIT_POSITION> mposition = 1;
  if (!this->_internal_mposition().empty()) {
    using MapType = ::_pb::Map<int64_t, ::pbnet::UNIT_POSITION>;
    using WireHelper = PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mposition();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_POSITION)
  return target;
}

size_t PROBUFF_NET_SYNC_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .pbnet.UNIT_POSITION> mposition = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mposition_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::pbnet::UNIT_POSITION >::const_iterator
      it = this->_internal_mposition().begin();
      it != this->_internal_mposition().end(); ++it) {
    total_size += PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SYNC_POSITION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SYNC_POSITION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SYNC_POSITION::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SYNC_POSITION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SYNC_POSITION*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SYNC_POSITION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mposition_.MergeFrom(from._impl_.mposition_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SYNC_POSITION::CopyFrom(const PROBUFF_NET_SYNC_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_POSITION::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_POSITION::InternalSwap(PROBUFF_NET_SYNC_POSITION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mposition_.InternalSwap(&other->_impl_.mposition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_POSITION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[83]);
}

// ===================================================================

class PROBUFF_NET_CHANGE_ANGLE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHANGE_ANGLE>()._impl_._has_bits_);
  static const ::pbnet::UNIT_POSITION& mposition(const PROBUFF_NET_CHANGE_ANGLE* msg);
  static void set_has_mposition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pbnet::UNIT_POSITION&
PROBUFF_NET_CHANGE_ANGLE::_Internal::mposition(const PROBUFF_NET_CHANGE_ANGLE* msg) {
  return *msg->_impl_.mposition_;
}
PROBUFF_NET_CHANGE_ANGLE::PROBUFF_NET_CHANGE_ANGLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHANGE_ANGLE)
}
PROBUFF_NET_CHANGE_ANGLE::PROBUFF_NET_CHANGE_ANGLE(const PROBUFF_NET_CHANGE_ANGLE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CHANGE_ANGLE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mposition_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mposition()) {
    _this->_impl_.mposition_ = new ::pbnet::UNIT_POSITION(*from._impl_.mposition_);
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHANGE_ANGLE)
}

inline void PROBUFF_NET_CHANGE_ANGLE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mposition_){nullptr}
  };
}

PROBUFF_NET_CHANGE_ANGLE::~PROBUFF_NET_CHANGE_ANGLE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CHANGE_ANGLE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mposition_;
}

void PROBUFF_NET_CHANGE_ANGLE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CHANGE_ANGLE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.mposition_ != nullptr);
    _impl_.mposition_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHANGE_ANGLE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.UNIT_POSITION mposition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mposition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_CHANGE_ANGLE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.UNIT_POSITION mposition = 1;
  if (_internal_has_mposition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mposition(this),
        _Internal::mposition(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  return target;
}

size_t PROBUFF_NET_CHANGE_ANGLE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .pbnet.UNIT_POSITION mposition = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mposition_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CHANGE_ANGLE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CHANGE_ANGLE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CHANGE_ANGLE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CHANGE_ANGLE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CHANGE_ANGLE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CHANGE_ANGLE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mposition()) {
    _this->_internal_mutable_mposition()->::pbnet::UNIT_POSITION::MergeFrom(
        from._internal_mposition());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CHANGE_ANGLE::CopyFrom(const PROBUFF_NET_CHANGE_ANGLE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHANGE_ANGLE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHANGE_ANGLE::InternalSwap(PROBUFF_NET_CHANGE_ANGLE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mposition_, other->_impl_.mposition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHANGE_ANGLE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[84]);
}

// ===================================================================

PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse() {}
PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::MergeFrom(const PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[85]);
}

// ===================================================================

class PROBUFF_NET_TESTLUA::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_TESTLUA>()._impl_._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_TESTLUA::PROBUFF_NET_TESTLUA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PROBUFF_NET_TESTLUA::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_TESTLUA)
}
PROBUFF_NET_TESTLUA::PROBUFF_NET_TESTLUA(const PROBUFF_NET_TESTLUA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_TESTLUA* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mdata_)*/{}
    , decltype(_impl_.mvalue_){}
    , decltype(_impl_.mid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mdata_.MergeFrom(from._impl_.mdata_);
  _impl_.mvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mvalue()) {
    _this->_impl_.mvalue_.Set(from._internal_mvalue(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mid_ = from._impl_.mid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_TESTLUA)
}

inline void PROBUFF_NET_TESTLUA::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.mdata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.mvalue_){}
    , decltype(_impl_.mid_){int64_t{0}}
  };
  _impl_.mvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_TESTLUA::~PROBUFF_NET_TESTLUA() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_TESTLUA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_TESTLUA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mdata_.Destruct();
  _impl_.mdata_.~MapField();
  _impl_.mvalue_.Destroy();
}

void PROBUFF_NET_TESTLUA::ArenaDtor(void* object) {
  PROBUFF_NET_TESTLUA* _this = reinterpret_cast< PROBUFF_NET_TESTLUA* >(object);
  _this->_impl_.mdata_.Destruct();
}
void PROBUFF_NET_TESTLUA::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_TESTLUA::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_TESTLUA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mdata_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.mvalue_.ClearNonDefaultToEmpty();
  }
  _impl_.mid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_TESTLUA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mvalue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_TESTLUA.mvalue"));
        } else
          goto handle_unusual;
        continue;
      // map<int64, string> mdata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mdata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_TESTLUA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_TESTLUA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // optional string mvalue = 2;
  if (_internal_has_mvalue()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mvalue().data(), static_cast<int>(this->_internal_mvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_TESTLUA.mvalue");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mvalue(), target);
  }

  // map<int64, string> mdata = 3;
  if (!this->_internal_mdata().empty()) {
    using MapType = ::_pb::Map<int64_t, std::string>;
    using WireHelper = PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mdata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "pbnet.PROBUFF_NET_TESTLUA.MdataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_TESTLUA)
  return target;
}

size_t PROBUFF_NET_TESTLUA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_TESTLUA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, string> mdata = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mdata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >::const_iterator
      it = this->_internal_mdata().begin();
      it != this->_internal_mdata().end(); ++it) {
    total_size += PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string mvalue = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mvalue());
    }

    // optional int64 mid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_TESTLUA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_TESTLUA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_TESTLUA::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_TESTLUA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_TESTLUA*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_TESTLUA&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_TESTLUA)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mdata_.MergeFrom(from._impl_.mdata_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_mvalue(from._internal_mvalue());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mid_ = from._impl_.mid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_TESTLUA::CopyFrom(const PROBUFF_NET_TESTLUA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_TESTLUA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_TESTLUA::IsInitialized() const {
  return true;
}

void PROBUFF_NET_TESTLUA::InternalSwap(PROBUFF_NET_TESTLUA* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mdata_.InternalSwap(&other->_impl_.mdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mvalue_, lhs_arena,
      &other->_impl_.mvalue_, rhs_arena
  );
  swap(_impl_.mid_, other->_impl_.mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TESTLUA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[86]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pbnet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MSG_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MSG_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MSG_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_HEARTBEAT*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_HEARTBEAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_HEARTBEAT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RECHARGE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RECHARGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RECHARGE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ERROR*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ERROR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ERROR >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_GET_TIME*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_GET_TIME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_GET_TIME >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_NOTICE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_NOTICE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_NOTICE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_NOTICE_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_NOTICE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_NOTICE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ACOUNT_LOGIN*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_LOGIN*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_SYNC*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_SYNC*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE_additem*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE_additem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE_additem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CMD*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CMD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CMD >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHAT*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::chatitem*
Arena::CreateMaybeMessage< ::pbnet::chatitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::chatitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHAT_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHAT_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHAT_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SWITCH_LINE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SWITCH_LINE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SWITCH_LINE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_READ*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_READ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_READ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DRAW*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DRAW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DRAW >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DEL*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DEL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_KCPSESSION*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_KCPSESSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_KCPSESSION >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::drop_item*
Arena::CreateMaybeMessage< ::pbnet::drop_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::drop_item >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_CREATE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_CREATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_CREATE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_INFO*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_JOIN*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_JOIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_JOIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_CEDE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_CEDE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_CEDE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_LEAVE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_LEAVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_LEAVE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_LIST*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_SIGN*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_SIGN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_SIGN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RANKLIST*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RANKLIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RANKLIST >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_ADD*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_ADD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_ADD >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_ERASE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_ERASE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_ERASE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLESTAT*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLESTAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLESTAT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::VECTOR2*
Arena::CreateMaybeMessage< ::pbnet::VECTOR2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::VECTOR2 >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::VECTOR3*
Arena::CreateMaybeMessage< ::pbnet::VECTOR3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::VECTOR3 >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UNIT_POSITION*
Arena::CreateMaybeMessage< ::pbnet::UNIT_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UNIT_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UnitAttribute*
Arena::CreateMaybeMessage< ::pbnet::UnitAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UnitAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UnitModule*
Arena::CreateMaybeMessage< ::pbnet::UnitModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UnitModule >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UNIT*
Arena::CreateMaybeMessage< ::pbnet::UNIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UNIT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_UNIT*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_UNIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_UNIT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_POSITION*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHANGE_ANGLE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHANGE_ANGLE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHANGE_ANGLE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TESTLUA*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TESTLUA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TESTLUA >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
