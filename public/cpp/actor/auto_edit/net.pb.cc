// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#include "net.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_bag_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_brief_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_family_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_notice_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_role_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_db_task_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mail_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_BAG_UPDATE_additem_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_BAG_UPDATE_delitem_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UNIT_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UNIT_POSITION_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitAttribute_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnitModule_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VECTOR2_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_chatitem_net_2eproto;
namespace pbnet {
class PROBUFF_NET_MSG_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MSG_RESPONSE> _instance;
} _PROBUFF_NET_MSG_RESPONSE_default_instance_;
class PROBUFF_NET_HEARTBEATDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_HEARTBEAT> _instance;
} _PROBUFF_NET_HEARTBEAT_default_instance_;
class PROBUFF_NET_RECHARGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_RECHARGE> _instance;
} _PROBUFF_NET_RECHARGE_default_instance_;
class PROBUFF_NET_RECHARGE_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_RECHARGE_RESPONSE> _instance;
} _PROBUFF_NET_RECHARGE_RESPONSE_default_instance_;
class PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse> _instance;
} _PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse_default_instance_;
class PROBUFF_NET_DELIVER_GOODS_RECHARGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_DELIVER_GOODS_RECHARGE> _instance;
} _PROBUFF_NET_DELIVER_GOODS_RECHARGE_default_instance_;
class PROBUFF_NET_ERRORDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ERROR> _instance;
} _PROBUFF_NET_ERROR_default_instance_;
class PROBUFF_NET_GET_TIMEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_GET_TIME> _instance;
} _PROBUFF_NET_GET_TIME_default_instance_;
class PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_GET_TIME_RESPONSE> _instance;
} _PROBUFF_NET_GET_TIME_RESPONSE_default_instance_;
class PROBUFF_NET_NOTICEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_NOTICE> _instance;
} _PROBUFF_NET_NOTICE_default_instance_;
class PROBUFF_NET_NOTICE_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_NOTICE_RESPONSE> _instance;
} _PROBUFF_NET_NOTICE_RESPONSE_default_instance_;
class PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ACOUNT_LOGIN> _instance;
} _PROBUFF_NET_ACOUNT_LOGIN_default_instance_;
class PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE> _instance;
} _PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_;
class PROBUFF_NET_ROLE_LOGINDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ROLE_LOGIN> _instance;
} _PROBUFF_NET_ROLE_LOGIN_default_instance_;
class PROBUFF_NET_ROLE_SYNCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ROLE_SYNC> _instance;
} _PROBUFF_NET_ROLE_SYNC_default_instance_;
class PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ROLE_SYNC_RESPONSE> _instance;
} _PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_;
class PROBUFF_NET_BAG_SYNCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_BAG_SYNC> _instance;
} _PROBUFF_NET_BAG_SYNC_default_instance_;
class PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_BAG_SYNC_RESPONSE> _instance;
} _PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_;
class PROBUFF_NET_BAG_UPDATE_delitemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_BAG_UPDATE_delitem> _instance;
} _PROBUFF_NET_BAG_UPDATE_delitem_default_instance_;
class PROBUFF_NET_BAG_UPDATE_additemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_BAG_UPDATE_additem> _instance;
} _PROBUFF_NET_BAG_UPDATE_additem_default_instance_;
class PROBUFF_NET_BAG_UPDATEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_BAG_UPDATE> _instance;
} _PROBUFF_NET_BAG_UPDATE_default_instance_;
class PROBUFF_NET_CMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_CMD> _instance;
} _PROBUFF_NET_CMD_default_instance_;
class PROBUFF_NET_CHATDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_CHAT> _instance;
} _PROBUFF_NET_CHAT_default_instance_;
class chatitemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<chatitem> _instance;
} _chatitem_default_instance_;
class PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_CHAT_RESPONSE> _instance;
} _PROBUFF_NET_CHAT_RESPONSE_default_instance_;
class PROBUFF_NET_SWITCH_LINEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_SWITCH_LINE> _instance;
} _PROBUFF_NET_SWITCH_LINE_default_instance_;
class PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_SWITCH_LINE_RESPONSE> _instance;
} _PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_LISTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_LIST> _instance;
} _PROBUFF_NET_MAIL_LIST_default_instance_;
class PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse> _instance;
} _PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse_default_instance_;
class PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_LIST_RESPONSE> _instance;
} _PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_READDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_READ> _instance;
} _PROBUFF_NET_MAIL_READ_default_instance_;
class PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_READ_RESPONSE> _instance;
} _PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_DRAWDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_DRAW> _instance;
} _PROBUFF_NET_MAIL_DRAW_default_instance_;
class PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_DRAW_RESPONSE> _instance;
} _PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_DELDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_DEL> _instance;
} _PROBUFF_NET_MAIL_DEL_default_instance_;
class PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_DEL_RESPONSE> _instance;
} _PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_;
class PROBUFF_NET_KCPSESSIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_KCPSESSION> _instance;
} _PROBUFF_NET_KCPSESSION_default_instance_;
class PROBUFF_NET_KCPSESSION_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_KCPSESSION_RESPONSE> _instance;
} _PROBUFF_NET_KCPSESSION_RESPONSE_default_instance_;
class PROBUFF_NET_TASK_RECEIVE_AWARDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_TASK_RECEIVE_AWARD> _instance;
} _PROBUFF_NET_TASK_RECEIVE_AWARD_default_instance_;
class drop_itemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<drop_item> _instance;
} _drop_item_default_instance_;
class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse> _instance;
} _PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse_default_instance_;
class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE> _instance;
} _PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_CREATEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_CREATE> _instance;
} _PROBUFF_NET_FAMIL_CREATE_default_instance_;
class PROBUFF_NET_FAMIL_CREATE_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_CREATE_RESPONSE> _instance;
} _PROBUFF_NET_FAMIL_CREATE_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_INFODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_INFO> _instance;
} _PROBUFF_NET_FAMIL_INFO_default_instance_;
class PROBUFF_NET_FAMIL_INFO_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_INFO_RESPONSE> _instance;
} _PROBUFF_NET_FAMIL_INFO_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_JOINDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_JOIN> _instance;
} _PROBUFF_NET_FAMIL_JOIN_default_instance_;
class PROBUFF_NET_FAMIL_JOIN_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_JOIN_RESPONSE> _instance;
} _PROBUFF_NET_FAMIL_JOIN_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_RATIFY_JOINDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_RATIFY_JOIN> _instance;
} _PROBUFF_NET_FAMIL_RATIFY_JOIN_default_instance_;
class PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE> _instance;
} _PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_CEDEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_CEDE> _instance;
} _PROBUFF_NET_FAMIL_CEDE_default_instance_;
class PROBUFF_NET_FAMIL_CEDE_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_CEDE_RESPONSE> _instance;
} _PROBUFF_NET_FAMIL_CEDE_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_LEAVEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_LEAVE> _instance;
} _PROBUFF_NET_FAMIL_LEAVE_default_instance_;
class PROBUFF_NET_FAMIL_LEAVE_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_LEAVE_RESPONSE> _instance;
} _PROBUFF_NET_FAMIL_LEAVE_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_LISTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_LIST> _instance;
} _PROBUFF_NET_FAMIL_LIST_default_instance_;
class PROBUFF_NET_FAMIL_LIST_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_LIST_RESPONSE> _instance;
} _PROBUFF_NET_FAMIL_LIST_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_CHANGENAMEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_CHANGENAME> _instance;
} _PROBUFF_NET_FAMIL_CHANGENAME_default_instance_;
class PROBUFF_NET_FAMIL_CHANGENAME_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE> _instance;
} _PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_SIGNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_SIGN> _instance;
} _PROBUFF_NET_FAMIL_SIGN_default_instance_;
class PROBUFF_NET_FAMIL_SIGN_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_SIGN_RESPONSE> _instance;
} _PROBUFF_NET_FAMIL_SIGN_RESPONSE_default_instance_;
class PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse> _instance;
} _PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse_default_instance_;
class PROBUFF_NET_REWARD_ITEM_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_REWARD_ITEM_RESPONSE> _instance;
} _PROBUFF_NET_REWARD_ITEM_RESPONSE_default_instance_;
class PROBUFF_NET_RANKLISTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_RANKLIST> _instance;
} _PROBUFF_NET_RANKLIST_default_instance_;
class PROBUFF_NET_RANKLIST_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_RANKLIST_RESPONSE> _instance;
} _PROBUFF_NET_RANKLIST_RESPONSE_default_instance_;
class PROBUFF_NET_FRIENDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FRIEND> _instance;
} _PROBUFF_NET_FRIEND_default_instance_;
class PROBUFF_NET_FRIEND_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FRIEND_RESPONSE> _instance;
} _PROBUFF_NET_FRIEND_RESPONSE_default_instance_;
class PROBUFF_NET_FRIEND_ADDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FRIEND_ADD> _instance;
} _PROBUFF_NET_FRIEND_ADD_default_instance_;
class PROBUFF_NET_FRIEND_ADD_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FRIEND_ADD_RESPONSE> _instance;
} _PROBUFF_NET_FRIEND_ADD_RESPONSE_default_instance_;
class PROBUFF_NET_FRIEND_RATIFY_ADDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FRIEND_RATIFY_ADD> _instance;
} _PROBUFF_NET_FRIEND_RATIFY_ADD_default_instance_;
class PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE> _instance;
} _PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE_default_instance_;
class PROBUFF_NET_FRIEND_ERASEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FRIEND_ERASE> _instance;
} _PROBUFF_NET_FRIEND_ERASE_default_instance_;
class PROBUFF_NET_FRIEND_ERASE_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FRIEND_ERASE_RESPONSE> _instance;
} _PROBUFF_NET_FRIEND_ERASE_RESPONSE_default_instance_;
class PROBUFF_NET_ROLESTATDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ROLESTAT> _instance;
} _PROBUFF_NET_ROLESTAT_default_instance_;
class VECTOR2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VECTOR2> _instance;
} _VECTOR2_default_instance_;
class VECTOR3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VECTOR3> _instance;
} _VECTOR3_default_instance_;
class UNIT_POSITIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UNIT_POSITION> _instance;
} _UNIT_POSITION_default_instance_;
class UnitAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnitAttribute> _instance;
} _UnitAttribute_default_instance_;
class UnitModuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnitModule> _instance;
} _UnitModule_default_instance_;
class UNITDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UNIT> _instance;
} _UNIT_default_instance_;
class PROBUFF_NET_SYNC_ATTRIBUTEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_SYNC_ATTRIBUTE> _instance;
} _PROBUFF_NET_SYNC_ATTRIBUTE_default_instance_;
class PROBUFF_NET_SYNC_UNITDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_SYNC_UNIT> _instance;
} _PROBUFF_NET_SYNC_UNIT_default_instance_;
class PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ENTER_LEAVE_VIEW> _instance;
} _PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_;
class PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse> _instance;
} _PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse_default_instance_;
class PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_SYNC_POSITION> _instance;
} _PROBUFF_NET_SYNC_POSITION_default_instance_;
class PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_CHANGE_ANGLE> _instance;
} _PROBUFF_NET_CHANGE_ANGLE_default_instance_;
class PROBUFF_NET_TESTLUA_MdataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse> _instance;
} _PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse_default_instance_;
class PROBUFF_NET_TESTLUADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_TESTLUA> _instance;
} _PROBUFF_NET_TESTLUA_default_instance_;
}  // namespace pbnet
static void InitDefaultsscc_info_PROBUFF_NET_ACOUNT_LOGIN_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ACOUNT_LOGIN_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ACOUNT_LOGIN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ACOUNT_LOGIN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ACOUNT_LOGIN_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ACOUNT_LOGIN_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_BAG_SYNC_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_BAG_SYNC_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_BAG_SYNC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_BAG_SYNC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_BAG_SYNC_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_BAG_SYNC_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_BAG_SYNC_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_BAG_SYNC_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_BAG_SYNC_RESPONSE_net_2eproto}, {
      &scc_info_db_bag_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_BAG_UPDATE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_BAG_UPDATE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_BAG_UPDATE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_BAG_UPDATE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PROBUFF_NET_BAG_UPDATE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PROBUFF_NET_BAG_UPDATE_net_2eproto}, {
      &scc_info_PROBUFF_NET_BAG_UPDATE_delitem_net_2eproto.base,
      &scc_info_PROBUFF_NET_BAG_UPDATE_additem_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_BAG_UPDATE_additem_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_BAG_UPDATE_additem_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_BAG_UPDATE_additem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_BAG_UPDATE_additem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_BAG_UPDATE_additem_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_BAG_UPDATE_additem_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_BAG_UPDATE_delitem_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_BAG_UPDATE_delitem_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_BAG_UPDATE_delitem_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_BAG_UPDATE_delitem_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_CHANGE_ANGLE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_CHANGE_ANGLE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_CHANGE_ANGLE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_CHANGE_ANGLE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_CHANGE_ANGLE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_CHANGE_ANGLE_net_2eproto}, {
      &scc_info_UNIT_POSITION_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_CHAT_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_CHAT_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_CHAT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_CHAT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_CHAT_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_CHAT_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_CHAT_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_CHAT_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_CHAT_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_CHAT_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_CHAT_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_CHAT_RESPONSE_net_2eproto}, {
      &scc_info_chatitem_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_CMD_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_CMD_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_CMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_CMD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_CMD_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_CMD_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_DELIVER_GOODS_RECHARGE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_net_2eproto}, {
      &scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse();
  }
  ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ENTER_LEAVE_VIEW_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ENTER_LEAVE_VIEW_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ENTER_LEAVE_VIEW_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ERROR_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ERROR_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ERROR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ERROR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ERROR_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ERROR_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_CEDE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_CEDE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_CEDE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_CEDE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_CEDE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_CEDE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_CEDE_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_CEDE_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_CEDE_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_CEDE_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_CHANGENAME_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_CHANGENAME_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_CHANGENAME_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_CHANGENAME_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_CREATE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_CREATE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_CREATE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_CREATE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_CREATE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_CREATE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_CREATE_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_CREATE_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_CREATE_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_CREATE_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_INFO_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_INFO_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_INFO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_INFO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_INFO_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_INFO_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_INFO_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_INFO_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PROBUFF_NET_FAMIL_INFO_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_INFO_RESPONSE_net_2eproto}, {
      &scc_info_db_family_db_2eproto.base,
      &scc_info_db_brief_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_JOIN_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_JOIN_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_JOIN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_JOIN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_JOIN_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_JOIN_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_JOIN_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_JOIN_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_JOIN_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_JOIN_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_LEAVE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_LEAVE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_LEAVE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_LEAVE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_LEAVE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_LEAVE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_LEAVE_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_LEAVE_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_LEAVE_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_LEAVE_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_LIST_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_LIST_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_LIST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_LIST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_LIST_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_LIST_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_LIST_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_LIST_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_FAMIL_LIST_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_LIST_RESPONSE_net_2eproto}, {
      &scc_info_db_family_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_RATIFY_JOIN_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_RATIFY_JOIN_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_RATIFY_JOIN_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_RATIFY_JOIN_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_SIGN_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_SIGN_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_SIGN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_SIGN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_SIGN_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_SIGN_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_SIGN_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_SIGN_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_SIGN_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_SIGN_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FRIEND_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FRIEND_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FRIEND();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FRIEND::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FRIEND_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FRIEND_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FRIEND_ADD_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FRIEND_ADD_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FRIEND_ADD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FRIEND_ADD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FRIEND_ADD_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FRIEND_ADD_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FRIEND_ADD_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FRIEND_ADD_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FRIEND_ADD_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FRIEND_ADD_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FRIEND_ERASE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FRIEND_ERASE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FRIEND_ERASE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FRIEND_ERASE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FRIEND_ERASE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FRIEND_ERASE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FRIEND_ERASE_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FRIEND_ERASE_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FRIEND_ERASE_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FRIEND_ERASE_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FRIEND_RATIFY_ADD_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FRIEND_RATIFY_ADD_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FRIEND_RATIFY_ADD_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FRIEND_RATIFY_ADD_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FRIEND_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FRIEND_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FRIEND_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FRIEND_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_FRIEND_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_FRIEND_RESPONSE_net_2eproto}, {
      &scc_info_db_brief_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_GET_TIME_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_GET_TIME_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_GET_TIME();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_GET_TIME::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_GET_TIME_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_GET_TIME_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_GET_TIME_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_GET_TIME_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_GET_TIME_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_GET_TIME_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_HEARTBEAT_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_HEARTBEAT_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_HEARTBEAT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_HEARTBEAT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_HEARTBEAT_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_HEARTBEAT_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_KCPSESSION_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_KCPSESSION_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_KCPSESSION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_KCPSESSION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_KCPSESSION_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_KCPSESSION_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_KCPSESSION_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_KCPSESSION_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_KCPSESSION_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_KCPSESSION_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_DEL_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_DEL_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_DEL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_DEL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MAIL_DEL_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_DEL_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_DEL_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MAIL_DEL_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_DEL_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_DRAW_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_DRAW_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_DRAW();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_DRAW::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MAIL_DRAW_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_DRAW_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_DRAW_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MAIL_DRAW_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_DRAW_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_LIST_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_LIST_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_LIST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_LIST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MAIL_LIST_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_LIST_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_net_2eproto}, {
      &scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse();
  }
  ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse_net_2eproto}, {
      &scc_info_mail_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_READ_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_READ_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_READ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_READ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MAIL_READ_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_READ_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_READ_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MAIL_READ_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_READ_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MSG_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MSG_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MSG_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MSG_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MSG_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MSG_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_NOTICE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_NOTICE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_NOTICE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_NOTICE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_NOTICE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_NOTICE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_NOTICE_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_NOTICE_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_NOTICE_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_NOTICE_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_NOTICE_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_NOTICE_RESPONSE_net_2eproto}, {
      &scc_info_db_notice_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_RANKLIST_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_RANKLIST_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_RANKLIST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_RANKLIST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_RANKLIST_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_RANKLIST_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_RANKLIST_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_RANKLIST_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_RANKLIST_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_RANKLIST_RESPONSE_net_2eproto}, {
      &scc_info_db_brief_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_RECHARGE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_RECHARGE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_RECHARGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_RECHARGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_RECHARGE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_RECHARGE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_RECHARGE_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_RECHARGE_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_RECHARGE_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_RECHARGE_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_REWARD_ITEM_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_net_2eproto}, {
      &scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse();
  }
  ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ROLESTAT_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ROLESTAT_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ROLESTAT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ROLESTAT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ROLESTAT_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ROLESTAT_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ROLE_LOGIN_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ROLE_LOGIN_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ROLE_LOGIN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ROLE_LOGIN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ROLE_LOGIN_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ROLE_LOGIN_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ROLE_SYNC_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ROLE_SYNC_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ROLE_SYNC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ROLE_SYNC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ROLE_SYNC_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ROLE_SYNC_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ROLE_SYNC_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PROBUFF_NET_ROLE_SYNC_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PROBUFF_NET_ROLE_SYNC_RESPONSE_net_2eproto}, {
      &scc_info_db_role_db_2eproto.base,
      &scc_info_db_brief_db_2eproto.base,
      &scc_info_db_bag_db_2eproto.base,
      &scc_info_db_task_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_SWITCH_LINE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_SWITCH_LINE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_SWITCH_LINE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_SWITCH_LINE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_SWITCH_LINE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_SWITCH_LINE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_SWITCH_LINE_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_SWITCH_LINE_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_SWITCH_LINE_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_SYNC_ATTRIBUTE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_SYNC_ATTRIBUTE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_SYNC_ATTRIBUTE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_SYNC_ATTRIBUTE_net_2eproto}, {
      &scc_info_UnitModule_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_SYNC_POSITION_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_SYNC_POSITION_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_SYNC_POSITION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_SYNC_POSITION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_SYNC_POSITION_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_SYNC_POSITION_net_2eproto}, {
      &scc_info_PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse();
  }
  ::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse_net_2eproto}, {
      &scc_info_UNIT_POSITION_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_SYNC_UNIT_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_SYNC_UNIT_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_SYNC_UNIT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_SYNC_UNIT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_SYNC_UNIT_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_SYNC_UNIT_net_2eproto}, {
      &scc_info_UNIT_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_net_2eproto}, {
      &scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse();
  }
  ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_TESTLUA_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_TESTLUA_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_TESTLUA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_TESTLUA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_TESTLUA_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_TESTLUA_net_2eproto}, {
      &scc_info_PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse();
  }
  ::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse_net_2eproto}, {}};

static void InitDefaultsscc_info_UNIT_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_UNIT_default_instance_;
    new (ptr) ::pbnet::UNIT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::UNIT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UNIT_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UNIT_net_2eproto}, {
      &scc_info_UNIT_POSITION_net_2eproto.base,
      &scc_info_UnitModule_net_2eproto.base,}};

static void InitDefaultsscc_info_UNIT_POSITION_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_UNIT_POSITION_default_instance_;
    new (ptr) ::pbnet::UNIT_POSITION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::UNIT_POSITION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UNIT_POSITION_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UNIT_POSITION_net_2eproto}, {
      &scc_info_VECTOR2_net_2eproto.base,}};

static void InitDefaultsscc_info_UnitAttribute_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_UnitAttribute_default_instance_;
    new (ptr) ::pbnet::UnitAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::UnitAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitAttribute_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnitAttribute_net_2eproto}, {}};

static void InitDefaultsscc_info_UnitModule_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_UnitModule_default_instance_;
    new (ptr) ::pbnet::UnitModule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::UnitModule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnitModule_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnitModule_net_2eproto}, {
      &scc_info_UnitAttribute_net_2eproto.base,}};

static void InitDefaultsscc_info_VECTOR2_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_VECTOR2_default_instance_;
    new (ptr) ::pbnet::VECTOR2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::VECTOR2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VECTOR2_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VECTOR2_net_2eproto}, {}};

static void InitDefaultsscc_info_VECTOR3_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_VECTOR3_default_instance_;
    new (ptr) ::pbnet::VECTOR3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::VECTOR3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VECTOR3_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VECTOR3_net_2eproto}, {}};

static void InitDefaultsscc_info_chatitem_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_chatitem_default_instance_;
    new (ptr) ::pbnet::chatitem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::chatitem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_chatitem_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_chatitem_net_2eproto}, {}};

static void InitDefaultsscc_info_drop_item_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_drop_item_default_instance_;
    new (ptr) ::pbnet::drop_item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::drop_item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_drop_item_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_drop_item_net_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_net_2eproto[87];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_net_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_net_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_net_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MSG_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MSG_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MSG_RESPONSE, mmsg_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE, mrechargeid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, mrechargeid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, mstat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, morderid_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, mrechargeid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, morderid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, mgold_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, mitems_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, merrmessage_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, mutc_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_NOTICE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_NOTICE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_NOTICE_RESPONSE, mnotices_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, marea_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, maccount_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, mpassword_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, marea_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, mroleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, msession_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, maccount_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, mgatewayid_),
  3,
  2,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, mroleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, msession_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, miscreate_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, marea_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, mgatewayid_),
  1,
  0,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, mrole_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, mbrief_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, mbag_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, mtask_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, mbag_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_delitem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_delitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_delitem, mid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_delitem, mcount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_additem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_additem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_additem, mid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_additem, mcount_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE, mdelitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE, mdelnostackitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE, madditems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE, maddnostackitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, mcmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, mtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, mchannelid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, mcontent_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, mroleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, mrolename_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, mcontent_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, mutc_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, mtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, mchannelid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, mchatlist_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, mstat_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, mline_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, mline_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, mstat_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE, mmail_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, mmailid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, mmailid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, mstat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, mmailid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, mmailid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, mstat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, mmailid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, mmailid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, mstat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, mserverid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, muip_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, muport_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, mconv_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE, mkcpsession_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD, mtaskid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, mitem_),
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, mcount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, mtaskid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, mstat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, mdrop_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CREATE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CREATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CREATE, mname_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE, mstat_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE, mstat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE, minfo_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE, mmember_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_JOIN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_JOIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_JOIN, mfamilid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_JOIN, mapply_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE, mstat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN, mroleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN, mratify_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE, mstat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CEDE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CEDE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CEDE, mroleid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE, mstat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LEAVE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LEAVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LEAVE, mfamilid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE, mstat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST, mfamilid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, mfamilid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, mfamily_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME, mfamilid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME, mname_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE, mstat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_SIGN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_SIGN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_SIGN, mfamilid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE, mstat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE, mitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, miscross_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, mtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, mactivityid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, mpage_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, mtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, mitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, mpage_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, mcount_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, mrolerank_),
  0,
  ~0u,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RESPONSE, mfriends_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RESPONSE, mapplyfriends_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ADD, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ADD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ADD, mfriedid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE, mfriedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE, mstat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD, mfriedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD, mratify_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE, mfriedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE, mratify_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE, mstat_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ERASE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ERASE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ERASE, mfriedid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE, mfriedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE, mstat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, mstat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, mlogicstat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, mroleid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, mx_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, my_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, mx_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, my_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, mz_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, mid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, mposition_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, mangle_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, mspeed_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, mtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, mvalue_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, mmtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, mmodules_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, mtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, mid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, mposition_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, mmodules_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, mstat_),
  2,
  1,
  0,
  ~0u,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE, mmodules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_UNIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_UNIT, munits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, misenter_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, munits_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION, mposition_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_ANGLE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_ANGLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_ANGLE, mposition_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA, mid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA, mvalue_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TESTLUA, mdata_),
  1,
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::pbnet::PROBUFF_NET_MSG_RESPONSE)},
  { 7, -1, sizeof(::pbnet::PROBUFF_NET_HEARTBEAT)},
  { 12, 18, sizeof(::pbnet::PROBUFF_NET_RECHARGE)},
  { 19, 27, sizeof(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE)},
  { 30, 37, sizeof(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse)},
  { 39, 48, sizeof(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE)},
  { 52, 58, sizeof(::pbnet::PROBUFF_NET_ERROR)},
  { 59, -1, sizeof(::pbnet::PROBUFF_NET_GET_TIME)},
  { 64, 70, sizeof(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE)},
  { 71, -1, sizeof(::pbnet::PROBUFF_NET_NOTICE)},
  { 76, -1, sizeof(::pbnet::PROBUFF_NET_NOTICE_RESPONSE)},
  { 82, 90, sizeof(::pbnet::PROBUFF_NET_ACOUNT_LOGIN)},
  { 93, 103, sizeof(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)},
  { 108, 118, sizeof(::pbnet::PROBUFF_NET_ROLE_LOGIN)},
  { 123, -1, sizeof(::pbnet::PROBUFF_NET_ROLE_SYNC)},
  { 128, 137, sizeof(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE)},
  { 141, -1, sizeof(::pbnet::PROBUFF_NET_BAG_SYNC)},
  { 146, 152, sizeof(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE)},
  { 153, 160, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE_delitem)},
  { 162, 169, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE_additem)},
  { 171, -1, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE)},
  { 180, 186, sizeof(::pbnet::PROBUFF_NET_CMD)},
  { 187, 195, sizeof(::pbnet::PROBUFF_NET_CHAT)},
  { 198, 207, sizeof(::pbnet::chatitem)},
  { 211, 220, sizeof(::pbnet::PROBUFF_NET_CHAT_RESPONSE)},
  { 224, 230, sizeof(::pbnet::PROBUFF_NET_SWITCH_LINE)},
  { 231, 238, sizeof(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE)},
  { 240, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST)},
  { 245, 252, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse)},
  { 254, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE)},
  { 260, 266, sizeof(::pbnet::PROBUFF_NET_MAIL_READ)},
  { 267, 274, sizeof(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE)},
  { 276, 282, sizeof(::pbnet::PROBUFF_NET_MAIL_DRAW)},
  { 283, 290, sizeof(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE)},
  { 292, 298, sizeof(::pbnet::PROBUFF_NET_MAIL_DEL)},
  { 299, 306, sizeof(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE)},
  { 308, 317, sizeof(::pbnet::PROBUFF_NET_KCPSESSION)},
  { 321, 327, sizeof(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE)},
  { 328, 334, sizeof(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD)},
  { 335, 342, sizeof(::pbnet::drop_item)},
  { 344, 351, sizeof(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse)},
  { 353, 361, sizeof(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)},
  { 364, 370, sizeof(::pbnet::PROBUFF_NET_FAMIL_CREATE)},
  { 371, 377, sizeof(::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE)},
  { 378, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_INFO)},
  { 383, 391, sizeof(::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE)},
  { 394, 401, sizeof(::pbnet::PROBUFF_NET_FAMIL_JOIN)},
  { 403, 409, sizeof(::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE)},
  { 410, 417, sizeof(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN)},
  { 419, 425, sizeof(::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)},
  { 426, 432, sizeof(::pbnet::PROBUFF_NET_FAMIL_CEDE)},
  { 433, 439, sizeof(::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE)},
  { 440, 446, sizeof(::pbnet::PROBUFF_NET_FAMIL_LEAVE)},
  { 447, 453, sizeof(::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE)},
  { 454, 460, sizeof(::pbnet::PROBUFF_NET_FAMIL_LIST)},
  { 461, 468, sizeof(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE)},
  { 470, 477, sizeof(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME)},
  { 479, 485, sizeof(::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)},
  { 486, 492, sizeof(::pbnet::PROBUFF_NET_FAMIL_SIGN)},
  { 493, 499, sizeof(::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE)},
  { 500, 507, sizeof(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse)},
  { 509, -1, sizeof(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE)},
  { 515, 524, sizeof(::pbnet::PROBUFF_NET_RANKLIST)},
  { 528, 538, sizeof(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE)},
  { 543, -1, sizeof(::pbnet::PROBUFF_NET_FRIEND)},
  { 548, -1, sizeof(::pbnet::PROBUFF_NET_FRIEND_RESPONSE)},
  { 555, 561, sizeof(::pbnet::PROBUFF_NET_FRIEND_ADD)},
  { 562, 569, sizeof(::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE)},
  { 571, 578, sizeof(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD)},
  { 580, 588, sizeof(::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)},
  { 591, 597, sizeof(::pbnet::PROBUFF_NET_FRIEND_ERASE)},
  { 598, 605, sizeof(::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE)},
  { 607, 615, sizeof(::pbnet::PROBUFF_NET_ROLESTAT)},
  { 618, 625, sizeof(::pbnet::VECTOR2)},
  { 627, 635, sizeof(::pbnet::VECTOR3)},
  { 638, 647, sizeof(::pbnet::UNIT_POSITION)},
  { 651, 658, sizeof(::pbnet::UnitAttribute)},
  { 660, 667, sizeof(::pbnet::UnitModule)},
  { 669, 679, sizeof(::pbnet::UNIT)},
  { 684, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE)},
  { 690, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_UNIT)},
  { 696, 703, sizeof(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW)},
  { 705, 712, sizeof(::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse)},
  { 714, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_POSITION)},
  { 720, 726, sizeof(::pbnet::PROBUFF_NET_CHANGE_ANGLE)},
  { 727, 734, sizeof(::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse)},
  { 736, 744, sizeof(::pbnet::PROBUFF_NET_TESTLUA)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MSG_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_HEARTBEAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_RECHARGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_RECHARGE_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_DELIVER_GOODS_RECHARGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ERROR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_GET_TIME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_GET_TIME_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_NOTICE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_NOTICE_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ACOUNT_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ROLE_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ROLE_SYNC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_BAG_SYNC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_BAG_UPDATE_delitem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_BAG_UPDATE_additem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_BAG_UPDATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_CMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_CHAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_chatitem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_CHAT_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_SWITCH_LINE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_LIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_READ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_DRAW_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_DEL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_KCPSESSION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_KCPSESSION_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_drop_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_CREATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_CREATE_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_INFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_INFO_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_JOIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_JOIN_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_RATIFY_JOIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_CEDE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_CEDE_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_LEAVE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_LEAVE_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_LIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_LIST_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_CHANGENAME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_SIGN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_SIGN_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_REWARD_ITEM_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_RANKLIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_RANKLIST_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FRIEND_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FRIEND_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FRIEND_ADD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FRIEND_ADD_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FRIEND_RATIFY_ADD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FRIEND_ERASE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FRIEND_ERASE_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ROLESTAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_VECTOR2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_VECTOR3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_UNIT_POSITION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_UnitAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_UnitModule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_UNIT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_SYNC_ATTRIBUTE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_SYNC_UNIT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_SYNC_POSITION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_CHANGE_ANGLE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_TESTLUA_default_instance_),
};

const char descriptor_table_protodef_net_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnet.proto\022\005pbnet\032\010db.proto\"6\n\030PROBUFF_"
  "NET_MSG_RESPONSE\022\021\n\004mmsg\030\001 \001(\tH\000\210\001\001B\007\n\005_"
  "mmsg\"\027\n\025PROBUFF_NET_HEARTBEAT\"@\n\024PROBUFF"
  "_NET_RECHARGE\022\030\n\013mrechargeid\030\001 \001(\005H\000\210\001\001B"
  "\016\n\014_mrechargeid\"\200\002\n\035PROBUFF_NET_RECHARGE"
  "_RESPONSE\022\030\n\013mrechargeid\030\001 \001(\005H\000\210\001\001\022>\n\005m"
  "stat\030\002 \001(\0162*.pbnet.PROBUFF_NET_RECHARGE_"
  "RESPONSE.EstatH\001\210\001\001\022\025\n\010morderid\030\003 \001(\tH\002\210"
  "\001\001\"G\n\005Estat\022\021\n\rEstat_Success\020\000\022\027\n\023Estat_"
  "NotRechargeId\020\001\022\022\n\016Estat_MaxCount\020\002B\016\n\014_"
  "mrechargeidB\010\n\006_mstatB\013\n\t_morderid\"\206\002\n\"P"
  "ROBUFF_NET_DELIVER_GOODS_RECHARGE\022\030\n\013mre"
  "chargeid\030\001 \001(\005H\000\210\001\001\022\025\n\010morderid\030\002 \001(\tH\001\210"
  "\001\001\022\022\n\005mgold\030\003 \001(\005H\002\210\001\001\022E\n\006mitems\030\004 \003(\01325"
  ".pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARG"
  "E.MitemsEntry\032-\n\013MitemsEntry\022\013\n\003key\030\001 \001("
  "\005\022\r\n\005value\030\002 \001(\005:\0028\001B\016\n\014_mrechargeidB\013\n\t"
  "_morderidB\010\n\006_mgold\"=\n\021PROBUFF_NET_ERROR"
  "\022\030\n\013merrmessage\030\002 \001(\tH\000\210\001\001B\016\n\014_merrmessa"
  "ge\"\026\n\024PROBUFF_NET_GET_TIME\";\n\035PROBUFF_NE"
  "T_GET_TIME_RESPONSE\022\021\n\004mutc\030\001 \001(\005H\000\210\001\001B\007"
  "\n\005_mutc\"\024\n\022PROBUFF_NET_NOTICE\"@\n\033PROBUFF"
  "_NET_NOTICE_RESPONSE\022!\n\010mnotices\030\001 \003(\0132\017"
  ".pbdb.db_notice\"\202\001\n\030PROBUFF_NET_ACOUNT_L"
  "OGIN\022\022\n\005marea\030\001 \001(\005H\000\210\001\001\022\025\n\010maccount\030\002 \001"
  "(\tH\001\210\001\001\022\026\n\tmpassword\030\003 \001(\tH\002\210\001\001B\010\n\006_mare"
  "aB\013\n\t_maccountB\014\n\n_mpassword\"\323\001\n!PROBUFF"
  "_NET_ACOUNT_LOGIN_RESPONSE\022\022\n\005marea\030\001 \001("
  "\005H\000\210\001\001\022\024\n\007mroleid\030\002 \001(\003H\001\210\001\001\022\025\n\010msession"
  "\030\003 \001(\tH\002\210\001\001\022\025\n\010maccount\030\004 \001(\tH\003\210\001\001\022\027\n\nmg"
  "atewayid\030\005 \001(\005H\004\210\001\001B\010\n\006_mareaB\n\n\010_mrolei"
  "dB\013\n\t_msessionB\013\n\t_maccountB\r\n\013_mgateway"
  "id\"\312\001\n\026PROBUFF_NET_ROLE_LOGIN\022\024\n\007mroleid"
  "\030\001 \001(\003H\000\210\001\001\022\025\n\010msession\030\002 \001(\tH\001\210\001\001\022\026\n\tmi"
  "screate\030\003 \001(\010H\002\210\001\001\022\022\n\005marea\030\004 \001(\005H\003\210\001\001\022\027"
  "\n\nmgatewayid\030\005 \001(\005H\004\210\001\001B\n\n\010_mroleidB\013\n\t_"
  "msessionB\014\n\n_miscreateB\010\n\006_mareaB\r\n\013_mga"
  "tewayid\"\027\n\025PROBUFF_NET_ROLE_SYNC\"\324\001\n\036PRO"
  "BUFF_NET_ROLE_SYNC_RESPONSE\022!\n\005mrole\030\001 \001"
  "(\0132\r.pbdb.db_roleH\000\210\001\001\022#\n\006mbrief\030\002 \001(\0132\016"
  ".pbdb.db_briefH\001\210\001\001\022\037\n\004mbag\030\003 \001(\0132\014.pbdb"
  ".db_bagH\002\210\001\001\022!\n\005mtask\030\004 \001(\0132\r.pbdb.db_ta"
  "skH\003\210\001\001B\010\n\006_mroleB\t\n\007_mbriefB\007\n\005_mbagB\010\n"
  "\006_mtask\"\026\n\024PROBUFF_NET_BAG_SYNC\"I\n\035PROBU"
  "FF_NET_BAG_SYNC_RESPONSE\022\037\n\004mbag\030\001 \001(\0132\014"
  ".pbdb.db_bagH\000\210\001\001B\007\n\005_mbag\"\312\002\n\026PROBUFF_N"
  "ET_BAG_UPDATE\0228\n\tmdelitems\030\001 \003(\0132%.pbnet"
  ".PROBUFF_NET_BAG_UPDATE.delitem\022\030\n\020mdeln"
  "ostackitems\030\002 \003(\005\0228\n\tmadditems\030\003 \003(\0132%.p"
  "bnet.PROBUFF_NET_BAG_UPDATE.additem\022\030\n\020m"
  "addnostackitems\030\004 \003(\005\032C\n\007delitem\022\020\n\003mid\030"
  "\001 \001(\005H\000\210\001\001\022\023\n\006mcount\030\002 \001(\005H\001\210\001\001B\006\n\004_midB"
  "\t\n\007_mcount\032C\n\007additem\022\020\n\003mid\030\001 \001(\005H\000\210\001\001\022"
  "\023\n\006mcount\030\002 \001(\005H\001\210\001\001B\006\n\004_midB\t\n\007_mcount\""
  "-\n\017PROBUFF_NET_CMD\022\021\n\004mcmd\030\001 \001(\tH\000\210\001\001B\007\n"
  "\005_mcmd\"|\n\020PROBUFF_NET_CHAT\022\022\n\005mtype\030\001 \001("
  "\005H\000\210\001\001\022\027\n\nmchannelid\030\002 \001(\005H\001\210\001\001\022\025\n\010mcont"
  "ent\030\003 \001(\tH\002\210\001\001B\010\n\006_mtypeB\r\n\013_mchannelidB"
  "\013\n\t_mcontent\"\222\001\n\010chatitem\022\024\n\007mroleid\030\001 \001"
  "(\003H\000\210\001\001\022\026\n\tmrolename\030\002 \001(\tH\001\210\001\001\022\025\n\010mcont"
  "ent\030\003 \001(\tH\002\210\001\001\022\021\n\004mutc\030\004 \001(\005H\003\210\001\001B\n\n\010_mr"
  "oleidB\014\n\n_mrolenameB\013\n\t_mcontentB\007\n\005_mut"
  "c\"\243\001\n\031PROBUFF_NET_CHAT_RESPONSE\022\022\n\005mtype"
  "\030\001 \001(\005H\000\210\001\001\022\027\n\nmchannelid\030\002 \001(\005H\001\210\001\001\022\"\n\t"
  "mchatlist\030\003 \003(\0132\017.pbnet.chatitem\022\022\n\005msta"
  "t\030\004 \001(\010H\002\210\001\001B\010\n\006_mtypeB\r\n\013_mchannelidB\010\n"
  "\006_mstat\"7\n\027PROBUFF_NET_SWITCH_LINE\022\022\n\005ml"
  "ine\030\001 \001(\005H\000\210\001\001B\010\n\006_mline\"^\n PROBUFF_NET_"
  "SWITCH_LINE_RESPONSE\022\022\n\005mline\030\001 \001(\005H\000\210\001\001"
  "\022\022\n\005mstat\030\002 \001(\010H\001\210\001\001B\010\n\006_mlineB\010\n\006_mstat"
  "\"\027\n\025PROBUFF_NET_MAIL_LIST\"\233\001\n\036PROBUFF_NE"
  "T_MAIL_LIST_RESPONSE\022\?\n\005mmail\030\001 \003(\01320.pb"
  "net.PROBUFF_NET_MAIL_LIST_RESPONSE.Mmail"
  "Entry\0328\n\nMmailEntry\022\013\n\003key\030\001 \001(\005\022\031\n\005valu"
  "e\030\002 \001(\0132\n.pbdb.mail:\0028\001\"9\n\025PROBUFF_NET_M"
  "AIL_READ\022\024\n\007mmailid\030\001 \001(\003H\000\210\001\001B\n\n\010_mmail"
  "id\"`\n\036PROBUFF_NET_MAIL_READ_RESPONSE\022\024\n\007"
  "mmailid\030\001 \001(\003H\000\210\001\001\022\022\n\005mstat\030\002 \001(\010H\001\210\001\001B\n"
  "\n\010_mmailidB\010\n\006_mstat\"9\n\025PROBUFF_NET_MAIL"
  "_DRAW\022\024\n\007mmailid\030\001 \001(\003H\000\210\001\001B\n\n\010_mmailid\""
  "`\n\036PROBUFF_NET_MAIL_DRAW_RESPONSE\022\024\n\007mma"
  "ilid\030\001 \001(\003H\000\210\001\001\022\022\n\005mstat\030\002 \001(\010H\001\210\001\001B\n\n\010_"
  "mmailidB\010\n\006_mstat\"8\n\024PROBUFF_NET_MAIL_DE"
  "L\022\024\n\007mmailid\030\001 \001(\003H\000\210\001\001B\n\n\010_mmailid\"_\n\035P"
  "ROBUFF_NET_MAIL_DEL_RESPONSE\022\024\n\007mmailid\030"
  "\001 \001(\003H\000\210\001\001\022\022\n\005mstat\030\002 \001(\010H\001\210\001\001B\n\n\010_mmail"
  "idB\010\n\006_mstat\"\230\001\n\026PROBUFF_NET_KCPSESSION\022"
  "\026\n\tmserverid\030\001 \001(\003H\000\210\001\001\022\021\n\004muip\030\002 \001(\tH\001\210"
  "\001\001\022\023\n\006muport\030\003 \001(\005H\002\210\001\001\022\022\n\005mconv\030\004 \001(\005H\003"
  "\210\001\001B\014\n\n_mserveridB\007\n\005_muipB\t\n\007_muportB\010\n"
  "\006_mconv\"K\n\037PROBUFF_NET_KCPSESSION_RESPON"
  "SE\022\030\n\013mkcpsession\030\001 \001(\tH\000\210\001\001B\016\n\014_mkcpses"
  "sion\"B\n\036PROBUFF_NET_TASK_RECEIVE_AWARD\022\024"
  "\n\007mtaskid\030\001 \001(\005H\000\210\001\001B\n\n\010_mtaskid\"I\n\tdrop"
  "_item\022\022\n\005mitem\030\001 \001(\005H\000\210\001\001\022\023\n\006mcount\030\002 \001("
  "\005H\001\210\001\001B\010\n\006_mitemB\t\n\007_mcount\"\341\001\n\'PROBUFF_"
  "NET_TASK_RECEIVE_AWARD_RESPONSE\022\024\n\007mtask"
  "id\030\001 \001(\005H\000\210\001\001\022\022\n\005mstat\030\002 \001(\010H\001\210\001\001\022H\n\005mdr"
  "op\030\003 \003(\01329.pbnet.PROBUFF_NET_TASK_RECEIV"
  "E_AWARD_RESPONSE.MdropEntry\032,\n\nMdropEntr"
  "y\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001B\n\n\010_mt"
  "askidB\010\n\006_mstat\"8\n\030PROBUFF_NET_FAMIL_CRE"
  "ATE\022\022\n\005mname\030\001 \001(\tH\000\210\001\001B\010\n\006_mname\"A\n!PRO"
  "BUFF_NET_FAMIL_CREATE_RESPONSE\022\022\n\005mstat\030"
  "\001 \001(\005H\000\210\001\001B\010\n\006_mstat\"\030\n\026PROBUFF_NET_FAMI"
  "L_INFO\"\217\001\n\037PROBUFF_NET_FAMIL_INFO_RESPON"
  "SE\022\022\n\005mstat\030\001 \001(\005H\000\210\001\001\022#\n\005minfo\030\002 \001(\0132\017."
  "pbdb.db_familyH\001\210\001\001\022\037\n\007mmember\030\003 \003(\0132\016.p"
  "bdb.db_briefB\010\n\006_mstatB\010\n\006_minfo\"\\\n\026PROB"
  "UFF_NET_FAMIL_JOIN\022\025\n\010mfamilid\030\001 \001(\003H\000\210\001"
  "\001\022\023\n\006mapply\030\002 \001(\010H\001\210\001\001B\013\n\t_mfamilidB\t\n\007_"
  "mapply\"\?\n\037PROBUFF_NET_FAMIL_JOIN_RESPONS"
  "E\022\022\n\005mstat\030\001 \001(\005H\000\210\001\001B\010\n\006_mstat\"c\n\035PROBU"
  "FF_NET_FAMIL_RATIFY_JOIN\022\024\n\007mroleid\030\001 \001("
  "\003H\000\210\001\001\022\024\n\007mratify\030\002 \001(\010H\001\210\001\001B\n\n\010_mroleid"
  "B\n\n\010_mratify\"F\n&PROBUFF_NET_FAMIL_RATIFY"
  "_JOIN_RESPONSE\022\022\n\005mstat\030\001 \001(\005H\000\210\001\001B\010\n\006_m"
  "stat\":\n\026PROBUFF_NET_FAMIL_CEDE\022\024\n\007mrolei"
  "d\030\001 \001(\003H\000\210\001\001B\n\n\010_mroleid\"\?\n\037PROBUFF_NET_"
  "FAMIL_CEDE_RESPONSE\022\022\n\005mstat\030\001 \001(\005H\000\210\001\001B"
  "\010\n\006_mstat\"=\n\027PROBUFF_NET_FAMIL_LEAVE\022\025\n\010"
  "mfamilid\030\001 \001(\003H\000\210\001\001B\013\n\t_mfamilid\"@\n PROB"
  "UFF_NET_FAMIL_LEAVE_RESPONSE\022\022\n\005mstat\030\001 "
  "\001(\005H\000\210\001\001B\010\n\006_mstat\"<\n\026PROBUFF_NET_FAMIL_"
  "LIST\022\025\n\010mfamilid\030\001 \001(\003H\000\210\001\001B\013\n\t_mfamilid"
  "\"g\n\037PROBUFF_NET_FAMIL_LIST_RESPONSE\022\025\n\010m"
  "familid\030\001 \001(\003H\000\210\001\001\022 \n\007mfamily\030\002 \003(\0132\017.pb"
  "db.db_familyB\013\n\t_mfamilid\"`\n\034PROBUFF_NET"
  "_FAMIL_CHANGENAME\022\025\n\010mfamilid\030\001 \001(\003H\000\210\001\001"
  "\022\022\n\005mname\030\002 \001(\tH\001\210\001\001B\013\n\t_mfamilidB\010\n\006_mn"
  "ame\"E\n%PROBUFF_NET_FAMIL_CHANGENAME_RESP"
  "ONSE\022\022\n\005mstat\030\001 \001(\005H\000\210\001\001B\010\n\006_mstat\"<\n\026PR"
  "OBUFF_NET_FAMIL_SIGN\022\025\n\010mfamilid\030\001 \001(\003H\000"
  "\210\001\001B\013\n\t_mfamilid\"\?\n\037PROBUFF_NET_FAMIL_SI"
  "GN_RESPONSE\022\022\n\005mstat\030\001 \001(\005H\000\210\001\001B\010\n\006_msta"
  "t\"\226\001\n PROBUFF_NET_REWARD_ITEM_RESPONSE\022C"
  "\n\006mitems\030\001 \003(\01323.pbnet.PROBUFF_NET_REWAR"
  "D_ITEM_RESPONSE.MitemsEntry\032-\n\013MitemsEnt"
  "ry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\"\261\001\n\024P"
  "ROBUFF_NET_RANKLIST\022\025\n\010miscross\030\001 \001(\010H\000\210"
  "\001\001\022#\n\005mtype\030\002 \001(\0162\017.pbdb.eranklistH\001\210\001\001\022"
  "\030\n\013mactivityid\030\003 \001(\005H\002\210\001\001\022\022\n\005mpage\030\004 \001(\005"
  "H\003\210\001\001B\013\n\t_miscrossB\010\n\006_mtypeB\016\n\014_mactivi"
  "tyidB\010\n\006_mpage\"\322\001\n\035PROBUFF_NET_RANKLIST_"
  "RESPONSE\022#\n\005mtype\030\001 \001(\0162\017.pbdb.eranklist"
  "H\000\210\001\001\022\036\n\006mitems\030\002 \003(\0132\016.pbdb.db_brief\022\022\n"
  "\005mpage\030\003 \001(\005H\001\210\001\001\022\023\n\006mcount\030\004 \001(\005H\002\210\001\001\022\026"
  "\n\tmrolerank\030\005 \001(\005H\003\210\001\001B\010\n\006_mtypeB\010\n\006_mpa"
  "geB\t\n\007_mcountB\014\n\n_mrolerank\"\024\n\022PROBUFF_N"
  "ET_FRIEND\"f\n\033PROBUFF_NET_FRIEND_RESPONSE"
  "\022 \n\010mfriends\030\001 \003(\0132\016.pbdb.db_brief\022%\n\rma"
  "pplyfriends\030\002 \003(\0132\016.pbdb.db_brief\"<\n\026PRO"
  "BUFF_NET_FRIEND_ADD\022\025\n\010mfriedid\030\001 \001(\003H\000\210"
  "\001\001B\013\n\t_mfriedid\"c\n\037PROBUFF_NET_FRIEND_AD"
  "D_RESPONSE\022\025\n\010mfriedid\030\001 \001(\003H\000\210\001\001\022\022\n\005mst"
  "at\030\002 \001(\005H\001\210\001\001B\013\n\t_mfriedidB\010\n\006_mstat\"e\n\035"
  "PROBUFF_NET_FRIEND_RATIFY_ADD\022\025\n\010mfriedi"
  "d\030\001 \001(\003H\000\210\001\001\022\024\n\007mratify\030\002 \001(\010H\001\210\001\001B\013\n\t_m"
  "friedidB\n\n\010_mratify\"\214\001\n&PROBUFF_NET_FRIE"
  "ND_RATIFY_ADD_RESPONSE\022\025\n\010mfriedid\030\001 \001(\003"
  "H\000\210\001\001\022\024\n\007mratify\030\002 \001(\010H\001\210\001\001\022\022\n\005mstat\030\003 \001"
  "(\005H\002\210\001\001B\013\n\t_mfriedidB\n\n\010_mratifyB\010\n\006_mst"
  "at\">\n\030PROBUFF_NET_FRIEND_ERASE\022\025\n\010mfried"
  "id\030\001 \001(\003H\000\210\001\001B\013\n\t_mfriedid\"e\n!PROBUFF_NE"
  "T_FRIEND_ERASE_RESPONSE\022\025\n\010mfriedid\030\001 \001("
  "\003H\000\210\001\001\022\022\n\005mstat\030\002 \001(\005H\001\210\001\001B\013\n\t_mfriedidB"
  "\010\n\006_mstat\"\222\002\n\024PROBUFF_NET_ROLESTAT\0224\n\005ms"
  "tat\030\001 \001(\0162 .pbnet.PROBUFF_NET_ROLESTAT.s"
  "tatH\000\210\001\001\022\?\n\nmlogicstat\030\002 \001(\0162&.pbnet.PRO"
  "BUFF_NET_ROLESTAT.logic_statH\001\210\001\001\022\024\n\007mro"
  "leid\030\003 \001(\003H\002\210\001\001\"\037\n\004stat\022\n\n\006online\020\000\022\013\n\007o"
  "ffline\020\001\"\'\n\nlogic_stat\022\013\n\007friends\020\000\022\014\n\010f"
  "amilyer\020\001B\010\n\006_mstatB\r\n\013_mlogicstatB\n\n\010_m"
  "roleid\"9\n\007VECTOR2\022\017\n\002mx\030\001 \001(\005H\000\210\001\001\022\017\n\002my"
  "\030\002 \001(\005H\001\210\001\001B\005\n\003_mxB\005\n\003_my\"Q\n\007VECTOR3\022\017\n\002"
  "mx\030\001 \001(\005H\000\210\001\001\022\017\n\002my\030\002 \001(\005H\001\210\001\001\022\017\n\002mz\030\003 \001"
  "(\005H\002\210\001\001B\005\n\003_mxB\005\n\003_myB\005\n\003_mz\"\237\001\n\rUNIT_PO"
  "SITION\022\020\n\003mid\030\002 \001(\003H\000\210\001\001\022&\n\tmposition\030\003 "
  "\001(\0132\016.pbnet.VECTOR2H\001\210\001\001\022\023\n\006mangle\030\004 \001(\005"
  "H\002\210\001\001\022\023\n\006mspeed\030\005 \001(\005H\003\210\001\001B\006\n\004_midB\014\n\n_m"
  "positionB\t\n\007_mangleB\t\n\007_mspeed\"M\n\rUnitAt"
  "tribute\022\022\n\005mtype\030\001 \001(\005H\000\210\001\001\022\023\n\006mvalue\030\002 "
  "\001(\003H\001\210\001\001B\010\n\006_mtypeB\t\n\007_mvalue\"T\n\nUnitMod"
  "ule\022\023\n\006mmtype\030\001 \001(\005H\000\210\001\001\022&\n\010mmodules\030\002 \003"
  "(\0132\024.pbnet.UnitAttributeB\t\n\007_mmtype\"\335\001\n\004"
  "UNIT\022 \n\005mtype\030\001 \001(\0162\014.pbnet.eunitH\000\210\001\001\022\020"
  "\n\003mid\030\002 \001(\003H\001\210\001\001\022,\n\tmposition\030\003 \001(\0132\024.pb"
  "net.UNIT_POSITIONH\002\210\001\001\022#\n\010mmodules\030\004 \003(\013"
  "2\021.pbnet.UnitModule\022$\n\005mstat\030\005 \001(\0162\020.pbn"
  "et.eunitstatH\003\210\001\001B\010\n\006_mtypeB\006\n\004_midB\014\n\n_"
  "mpositionB\010\n\006_mstat\"A\n\032PROBUFF_NET_SYNC_"
  "ATTRIBUTE\022#\n\010mmodules\030\001 \003(\0132\021.pbnet.Unit"
  "Module\"4\n\025PROBUFF_NET_SYNC_UNIT\022\033\n\006munit"
  "s\030\001 \003(\0132\013.pbnet.UNIT\"R\n\034PROBUFF_NET_ENTE"
  "R_LEAVE_VIEW\022\025\n\010misenter\030\001 \001(\010H\000\210\001\001\022\016\n\006m"
  "units\030\002 \003(\003B\013\n\t_misenter\"\247\001\n\031PROBUFF_NET"
  "_SYNC_POSITION\022B\n\tmposition\030\001 \003(\0132/.pbne"
  "t.PROBUFF_NET_SYNC_POSITION.MpositionEnt"
  "ry\032F\n\016MpositionEntry\022\013\n\003key\030\001 \001(\003\022#\n\005val"
  "ue\030\002 \001(\0132\024.pbnet.UNIT_POSITION:\0028\001\"V\n\030PR"
  "OBUFF_NET_CHANGE_ANGLE\022,\n\tmposition\030\001 \001("
  "\0132\024.pbnet.UNIT_POSITIONH\000\210\001\001B\014\n\n_mpositi"
  "on\"\263\001\n\023PROBUFF_NET_TESTLUA\022\020\n\003mid\030\001 \001(\003H"
  "\000\210\001\001\022\023\n\006mvalue\030\002 \001(\tH\001\210\001\001\0224\n\005mdata\030\003 \003(\013"
  "2%.pbnet.PROBUFF_NET_TESTLUA.MdataEntry\032"
  ",\n\nMdataEntry\022\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001("
  "\t:\0028\001B\006\n\004_midB\t\n\007_mvalue*U\n\017ENUM_LOGIC_C"
  "HAT\022\026\n\022ENUM_GET_CHAT_LIST\020\000\022\023\n\017ENUM_CHAT"
  "_SPEAK\020\001\022\025\n\021ENUM_UPDATA_SPEAK\020\002*\221\001\n\021ENUM"
  "_CHAT_CHANNEL\022\032\n\026ENUM_CHAT_CHANNEL_NULL\020"
  "\000\022\036\n\032ENUM_CHAT_CHANNEL_ORDINARY\020\001\022$\n ENU"
  "M_CHAT_CHANNEL_CROSS_ORDINARY\020\002\022\032\n\026ENUM_"
  "CHAT_CHANNEL_NONE\020\003*<\n\005eunit\022\016\n\neunit_ro"
  "le\020\000\022\021\n\reunit_monster\020\001\022\020\n\014eunit_region\020"
  "\002*s\n\teunitstat\022\024\n\020eunitstat_normal\020\000\022\024\n\020"
  "eunitstat_nomove\020\001\022\034\n\030eunitstat_nonormal"
  "attack\020\002\022\034\n\030eunitstat_noreleaseskill\020\004B\002"
  "H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_net_2eproto_deps[1] = {
  &::descriptor_table_db_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_net_2eproto_sccs[87] = {
  &scc_info_PROBUFF_NET_ACOUNT_LOGIN_net_2eproto.base,
  &scc_info_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_BAG_SYNC_net_2eproto.base,
  &scc_info_PROBUFF_NET_BAG_SYNC_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_BAG_UPDATE_net_2eproto.base,
  &scc_info_PROBUFF_NET_BAG_UPDATE_additem_net_2eproto.base,
  &scc_info_PROBUFF_NET_BAG_UPDATE_delitem_net_2eproto.base,
  &scc_info_PROBUFF_NET_CHANGE_ANGLE_net_2eproto.base,
  &scc_info_PROBUFF_NET_CHAT_net_2eproto.base,
  &scc_info_PROBUFF_NET_CHAT_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_CMD_net_2eproto.base,
  &scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_net_2eproto.base,
  &scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse_net_2eproto.base,
  &scc_info_PROBUFF_NET_ENTER_LEAVE_VIEW_net_2eproto.base,
  &scc_info_PROBUFF_NET_ERROR_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_CEDE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_CEDE_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_CHANGENAME_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_CREATE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_CREATE_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_INFO_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_INFO_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_JOIN_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_JOIN_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_LEAVE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_LEAVE_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_LIST_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_LIST_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_RATIFY_JOIN_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_SIGN_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_SIGN_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FRIEND_net_2eproto.base,
  &scc_info_PROBUFF_NET_FRIEND_ADD_net_2eproto.base,
  &scc_info_PROBUFF_NET_FRIEND_ADD_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FRIEND_ERASE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FRIEND_ERASE_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FRIEND_RATIFY_ADD_net_2eproto.base,
  &scc_info_PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FRIEND_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_GET_TIME_net_2eproto.base,
  &scc_info_PROBUFF_NET_GET_TIME_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_HEARTBEAT_net_2eproto.base,
  &scc_info_PROBUFF_NET_KCPSESSION_net_2eproto.base,
  &scc_info_PROBUFF_NET_KCPSESSION_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_DEL_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_DEL_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_DRAW_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_DRAW_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_LIST_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_READ_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_READ_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_MSG_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_NOTICE_net_2eproto.base,
  &scc_info_PROBUFF_NET_NOTICE_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_RANKLIST_net_2eproto.base,
  &scc_info_PROBUFF_NET_RANKLIST_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_RECHARGE_net_2eproto.base,
  &scc_info_PROBUFF_NET_RECHARGE_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse_net_2eproto.base,
  &scc_info_PROBUFF_NET_ROLESTAT_net_2eproto.base,
  &scc_info_PROBUFF_NET_ROLE_LOGIN_net_2eproto.base,
  &scc_info_PROBUFF_NET_ROLE_SYNC_net_2eproto.base,
  &scc_info_PROBUFF_NET_ROLE_SYNC_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_SWITCH_LINE_net_2eproto.base,
  &scc_info_PROBUFF_NET_SWITCH_LINE_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_SYNC_ATTRIBUTE_net_2eproto.base,
  &scc_info_PROBUFF_NET_SYNC_POSITION_net_2eproto.base,
  &scc_info_PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse_net_2eproto.base,
  &scc_info_PROBUFF_NET_SYNC_UNIT_net_2eproto.base,
  &scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_net_2eproto.base,
  &scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse_net_2eproto.base,
  &scc_info_PROBUFF_NET_TESTLUA_net_2eproto.base,
  &scc_info_PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse_net_2eproto.base,
  &scc_info_UNIT_net_2eproto.base,
  &scc_info_UNIT_POSITION_net_2eproto.base,
  &scc_info_UnitAttribute_net_2eproto.base,
  &scc_info_UnitModule_net_2eproto.base,
  &scc_info_VECTOR2_net_2eproto.base,
  &scc_info_VECTOR3_net_2eproto.base,
  &scc_info_chatitem_net_2eproto.base,
  &scc_info_drop_item_net_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_net_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_net_2eproto = {
  false, false, descriptor_table_protodef_net_2eproto, "net.proto", 8690,
  &descriptor_table_net_2eproto_once, descriptor_table_net_2eproto_sccs, descriptor_table_net_2eproto_deps, 87, 1,
  schemas, file_default_instances, TableStruct_net_2eproto::offsets,
  file_level_metadata_net_2eproto, 87, file_level_enum_descriptors_net_2eproto, file_level_service_descriptors_net_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_net_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_net_2eproto)), true);
namespace pbnet {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_RECHARGE_RESPONSE_Estat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[0];
}
bool PROBUFF_NET_RECHARGE_RESPONSE_Estat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_Success;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_NotRechargeId;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_MaxCount;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_MIN;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_MAX;
constexpr int PROBUFF_NET_RECHARGE_RESPONSE::Estat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_ROLESTAT_stat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[1];
}
bool PROBUFF_NET_ROLESTAT_stat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::online;
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::offline;
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::stat_MIN;
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::stat_MAX;
constexpr int PROBUFF_NET_ROLESTAT::stat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_ROLESTAT_logic_stat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[2];
}
bool PROBUFF_NET_ROLESTAT_logic_stat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::friends;
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::familyer;
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::logic_stat_MIN;
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::logic_stat_MAX;
constexpr int PROBUFF_NET_ROLESTAT::logic_stat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_LOGIC_CHAT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[3];
}
bool ENUM_LOGIC_CHAT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_CHAT_CHANNEL_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[4];
}
bool ENUM_CHAT_CHANNEL_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eunit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[5];
}
bool eunit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eunitstat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[6];
}
bool eunitstat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PROBUFF_NET_MSG_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_MSG_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MSG_RESPONSE>()._has_bits_);
  static void set_has_mmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MSG_RESPONSE::PROBUFF_NET_MSG_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MSG_RESPONSE)
}
PROBUFF_NET_MSG_RESPONSE::PROBUFF_NET_MSG_RESPONSE(const PROBUFF_NET_MSG_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mmsg()) {
    mmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mmsg(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MSG_RESPONSE)
}

void PROBUFF_NET_MSG_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_MSG_RESPONSE_net_2eproto.base);
  mmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PROBUFF_NET_MSG_RESPONSE::~PROBUFF_NET_MSG_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MSG_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MSG_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_MSG_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MSG_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MSG_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_MSG_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MSG_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MSG_RESPONSE& PROBUFF_NET_MSG_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MSG_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MSG_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mmsg_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MSG_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mmsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_MSG_RESPONSE.mmsg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MSG_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mmsg = 1;
  if (_internal_has_mmsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mmsg().data(), static_cast<int>(this->_internal_mmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_MSG_RESPONSE.mmsg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MSG_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MSG_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mmsg = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mmsg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MSG_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MSG_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MSG_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MSG_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MSG_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MSG_RESPONSE::MergeFrom(const PROBUFF_NET_MSG_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mmsg()) {
    _internal_set_mmsg(from._internal_mmsg());
  }
}

void PROBUFF_NET_MSG_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MSG_RESPONSE::CopyFrom(const PROBUFF_NET_MSG_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MSG_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MSG_RESPONSE::InternalSwap(PROBUFF_NET_MSG_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mmsg_.Swap(&other->mmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MSG_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_HEARTBEAT::InitAsDefaultInstance() {
}
class PROBUFF_NET_HEARTBEAT::_Internal {
 public:
};

PROBUFF_NET_HEARTBEAT::PROBUFF_NET_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_HEARTBEAT)
}
PROBUFF_NET_HEARTBEAT::PROBUFF_NET_HEARTBEAT(const PROBUFF_NET_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_HEARTBEAT)
}

void PROBUFF_NET_HEARTBEAT::SharedCtor() {
}

PROBUFF_NET_HEARTBEAT::~PROBUFF_NET_HEARTBEAT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_HEARTBEAT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_HEARTBEAT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_HEARTBEAT::ArenaDtor(void* object) {
  PROBUFF_NET_HEARTBEAT* _this = reinterpret_cast< PROBUFF_NET_HEARTBEAT* >(object);
  (void)_this;
}
void PROBUFF_NET_HEARTBEAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_HEARTBEAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_HEARTBEAT& PROBUFF_NET_HEARTBEAT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_HEARTBEAT_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_HEARTBEAT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_HEARTBEAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_HEARTBEAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_HEARTBEAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_HEARTBEAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_HEARTBEAT)
  return target;
}

size_t PROBUFF_NET_HEARTBEAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_HEARTBEAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_HEARTBEAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_HEARTBEAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_HEARTBEAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_HEARTBEAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_HEARTBEAT)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_HEARTBEAT::MergeFrom(const PROBUFF_NET_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_HEARTBEAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_HEARTBEAT::CopyFrom(const PROBUFF_NET_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_HEARTBEAT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_HEARTBEAT::InternalSwap(PROBUFF_NET_HEARTBEAT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_HEARTBEAT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_RECHARGE::InitAsDefaultInstance() {
}
class PROBUFF_NET_RECHARGE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RECHARGE>()._has_bits_);
  static void set_has_mrechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_RECHARGE::PROBUFF_NET_RECHARGE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RECHARGE)
}
PROBUFF_NET_RECHARGE::PROBUFF_NET_RECHARGE(const PROBUFF_NET_RECHARGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mrechargeid_ = from.mrechargeid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RECHARGE)
}

void PROBUFF_NET_RECHARGE::SharedCtor() {
  mrechargeid_ = 0;
}

PROBUFF_NET_RECHARGE::~PROBUFF_NET_RECHARGE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RECHARGE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_RECHARGE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_RECHARGE::ArenaDtor(void* object) {
  PROBUFF_NET_RECHARGE* _this = reinterpret_cast< PROBUFF_NET_RECHARGE* >(object);
  (void)_this;
}
void PROBUFF_NET_RECHARGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_RECHARGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_RECHARGE& PROBUFF_NET_RECHARGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_RECHARGE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_RECHARGE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RECHARGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mrechargeid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RECHARGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mrechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mrechargeid(&has_bits);
          mrechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_RECHARGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RECHARGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mrechargeid = 1;
  if (_internal_has_mrechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mrechargeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RECHARGE)
  return target;
}

size_t PROBUFF_NET_RECHARGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RECHARGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mrechargeid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mrechargeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_RECHARGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_RECHARGE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_RECHARGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_RECHARGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_RECHARGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_RECHARGE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_RECHARGE::MergeFrom(const PROBUFF_NET_RECHARGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RECHARGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mrechargeid()) {
    _internal_set_mrechargeid(from._internal_mrechargeid());
  }
}

void PROBUFF_NET_RECHARGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_RECHARGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_RECHARGE::CopyFrom(const PROBUFF_NET_RECHARGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RECHARGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RECHARGE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RECHARGE::InternalSwap(PROBUFF_NET_RECHARGE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mrechargeid_, other->mrechargeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RECHARGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_RECHARGE_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_RECHARGE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RECHARGE_RESPONSE>()._has_bits_);
  static void set_has_mrechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_morderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_RECHARGE_RESPONSE::PROBUFF_NET_RECHARGE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
}
PROBUFF_NET_RECHARGE_RESPONSE::PROBUFF_NET_RECHARGE_RESPONSE(const PROBUFF_NET_RECHARGE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  morderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_morderid()) {
    morderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_morderid(),
      GetArena());
  }
  ::memcpy(&mrechargeid_, &from.mrechargeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstat_) -
    reinterpret_cast<char*>(&mrechargeid_)) + sizeof(mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
}

void PROBUFF_NET_RECHARGE_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_RECHARGE_RESPONSE_net_2eproto.base);
  morderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mrechargeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstat_) -
      reinterpret_cast<char*>(&mrechargeid_)) + sizeof(mstat_));
}

PROBUFF_NET_RECHARGE_RESPONSE::~PROBUFF_NET_RECHARGE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_RECHARGE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  morderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_RECHARGE_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_RECHARGE_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_RECHARGE_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_RECHARGE_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_RECHARGE_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_RECHARGE_RESPONSE& PROBUFF_NET_RECHARGE_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_RECHARGE_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_RECHARGE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    morderid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&mrechargeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstat_) -
        reinterpret_cast<char*>(&mrechargeid_)) + sizeof(mstat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RECHARGE_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mrechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mrechargeid(&has_bits);
          mrechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mstat(static_cast<::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat>(val));
        } else goto handle_unusual;
        continue;
      // string morderid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_morderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_RECHARGE_RESPONSE.morderid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_RECHARGE_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mrechargeid = 1;
  if (_internal_has_mrechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mrechargeid(), target);
  }

  // .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mstat(), target);
  }

  // string morderid = 3;
  if (_internal_has_morderid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_morderid().data(), static_cast<int>(this->_internal_morderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_RECHARGE_RESPONSE.morderid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_morderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_RECHARGE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // string morderid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morderid());
    }

    // int32 mrechargeid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mrechargeid());
    }

    // .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat mstat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mstat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_RECHARGE_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_RECHARGE_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_RECHARGE_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_RECHARGE_RESPONSE::MergeFrom(const PROBUFF_NET_RECHARGE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_morderid(from._internal_morderid());
    }
    if (cached_has_bits & 0x00000002u) {
      mrechargeid_ = from.mrechargeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      mstat_ = from.mstat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_RECHARGE_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_RECHARGE_RESPONSE::CopyFrom(const PROBUFF_NET_RECHARGE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RECHARGE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RECHARGE_RESPONSE::InternalSwap(PROBUFF_NET_RECHARGE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  morderid_.Swap(&other->morderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RECHARGE_RESPONSE, mstat_)
      + sizeof(PROBUFF_NET_RECHARGE_RESPONSE::mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RECHARGE_RESPONSE, mrechargeid_)>(
          reinterpret_cast<char*>(&mrechargeid_),
          reinterpret_cast<char*>(&other->mrechargeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RECHARGE_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse() {}
PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::MergeFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::InitAsDefaultInstance() {
}
class PROBUFF_NET_DELIVER_GOODS_RECHARGE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_DELIVER_GOODS_RECHARGE>()._has_bits_);
  static void set_has_mrechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_morderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mgold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_DELIVER_GOODS_RECHARGE::PROBUFF_NET_DELIVER_GOODS_RECHARGE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mitems_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
}
PROBUFF_NET_DELIVER_GOODS_RECHARGE::PROBUFF_NET_DELIVER_GOODS_RECHARGE(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mitems_.MergeFrom(from.mitems_);
  morderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_morderid()) {
    morderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_morderid(),
      GetArena());
  }
  ::memcpy(&mrechargeid_, &from.mrechargeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mgold_) -
    reinterpret_cast<char*>(&mrechargeid_)) + sizeof(mgold_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_net_2eproto.base);
  morderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mrechargeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mgold_) -
      reinterpret_cast<char*>(&mrechargeid_)) + sizeof(mgold_));
}

PROBUFF_NET_DELIVER_GOODS_RECHARGE::~PROBUFF_NET_DELIVER_GOODS_RECHARGE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  morderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::ArenaDtor(void* object) {
  PROBUFF_NET_DELIVER_GOODS_RECHARGE* _this = reinterpret_cast< PROBUFF_NET_DELIVER_GOODS_RECHARGE* >(object);
  (void)_this;
}
void PROBUFF_NET_DELIVER_GOODS_RECHARGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_DELIVER_GOODS_RECHARGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_DELIVER_GOODS_RECHARGE& PROBUFF_NET_DELIVER_GOODS_RECHARGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_DELIVER_GOODS_RECHARGE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mitems_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    morderid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&mrechargeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mgold_) -
        reinterpret_cast<char*>(&mrechargeid_)) + sizeof(mgold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_DELIVER_GOODS_RECHARGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mrechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mrechargeid(&has_bits);
          mrechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string morderid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_morderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.morderid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mgold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mgold(&has_bits);
          mgold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, int32> mitems = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mitems_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_DELIVER_GOODS_RECHARGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mrechargeid = 1;
  if (_internal_has_mrechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mrechargeid(), target);
  }

  // string morderid = 2;
  if (_internal_has_morderid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_morderid().data(), static_cast<int>(this->_internal_morderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.morderid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_morderid(), target);
  }

  // int32 mgold = 3;
  if (_internal_has_mgold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mgold(), target);
  }

  // map<int32, int32> mitems = 4;
  if (!this->_internal_mitems().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mitems().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mitems().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_mitems().begin();
          it != this->_internal_mitems().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_mitems().begin();
          it != this->_internal_mitems().end(); ++it) {
        target = PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  return target;
}

size_t PROBUFF_NET_DELIVER_GOODS_RECHARGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> mitems = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mitems_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_mitems().begin();
      it != this->_internal_mitems().end(); ++it) {
    total_size += PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // string morderid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_morderid());
    }

    // int32 mrechargeid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mrechargeid());
    }

    // int32 mgold = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mgold());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_DELIVER_GOODS_RECHARGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_DELIVER_GOODS_RECHARGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::MergeFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mitems_.MergeFrom(from.mitems_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_morderid(from._internal_morderid());
    }
    if (cached_has_bits & 0x00000002u) {
      mrechargeid_ = from.mrechargeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      mgold_ = from.mgold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::CopyFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::InternalSwap(PROBUFF_NET_DELIVER_GOODS_RECHARGE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mitems_.Swap(&other->mitems_);
  morderid_.Swap(&other->morderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_DELIVER_GOODS_RECHARGE, mgold_)
      + sizeof(PROBUFF_NET_DELIVER_GOODS_RECHARGE::mgold_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_DELIVER_GOODS_RECHARGE, mrechargeid_)>(
          reinterpret_cast<char*>(&mrechargeid_),
          reinterpret_cast<char*>(&other->mrechargeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_DELIVER_GOODS_RECHARGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ERROR::InitAsDefaultInstance() {
}
class PROBUFF_NET_ERROR::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ERROR>()._has_bits_);
  static void set_has_merrmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ERROR::PROBUFF_NET_ERROR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ERROR)
}
PROBUFF_NET_ERROR::PROBUFF_NET_ERROR(const PROBUFF_NET_ERROR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  merrmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_merrmessage()) {
    merrmessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_merrmessage(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ERROR)
}

void PROBUFF_NET_ERROR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_ERROR_net_2eproto.base);
  merrmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PROBUFF_NET_ERROR::~PROBUFF_NET_ERROR() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ERROR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ERROR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  merrmessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_ERROR::ArenaDtor(void* object) {
  PROBUFF_NET_ERROR* _this = reinterpret_cast< PROBUFF_NET_ERROR* >(object);
  (void)_this;
}
void PROBUFF_NET_ERROR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ERROR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ERROR& PROBUFF_NET_ERROR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ERROR_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ERROR::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ERROR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    merrmessage_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ERROR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string merrmessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_merrmessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_ERROR.merrmessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ERROR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ERROR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string merrmessage = 2;
  if (_internal_has_merrmessage()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_merrmessage().data(), static_cast<int>(this->_internal_merrmessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ERROR.merrmessage");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_merrmessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ERROR)
  return target;
}

size_t PROBUFF_NET_ERROR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ERROR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string merrmessage = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_merrmessage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ERROR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ERROR)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ERROR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ERROR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ERROR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ERROR)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ERROR::MergeFrom(const PROBUFF_NET_ERROR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ERROR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_merrmessage()) {
    _internal_set_merrmessage(from._internal_merrmessage());
  }
}

void PROBUFF_NET_ERROR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ERROR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ERROR::CopyFrom(const PROBUFF_NET_ERROR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ERROR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ERROR::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ERROR::InternalSwap(PROBUFF_NET_ERROR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  merrmessage_.Swap(&other->merrmessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ERROR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_GET_TIME::InitAsDefaultInstance() {
}
class PROBUFF_NET_GET_TIME::_Internal {
 public:
};

PROBUFF_NET_GET_TIME::PROBUFF_NET_GET_TIME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_GET_TIME)
}
PROBUFF_NET_GET_TIME::PROBUFF_NET_GET_TIME(const PROBUFF_NET_GET_TIME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_GET_TIME)
}

void PROBUFF_NET_GET_TIME::SharedCtor() {
}

PROBUFF_NET_GET_TIME::~PROBUFF_NET_GET_TIME() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_GET_TIME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_GET_TIME::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_GET_TIME::ArenaDtor(void* object) {
  PROBUFF_NET_GET_TIME* _this = reinterpret_cast< PROBUFF_NET_GET_TIME* >(object);
  (void)_this;
}
void PROBUFF_NET_GET_TIME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_GET_TIME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_GET_TIME& PROBUFF_NET_GET_TIME::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_GET_TIME_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_GET_TIME::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_GET_TIME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_GET_TIME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_GET_TIME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_GET_TIME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_GET_TIME)
  return target;
}

size_t PROBUFF_NET_GET_TIME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_GET_TIME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_GET_TIME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_GET_TIME)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_GET_TIME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_GET_TIME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_GET_TIME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_GET_TIME)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_GET_TIME::MergeFrom(const PROBUFF_NET_GET_TIME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_GET_TIME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_GET_TIME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_GET_TIME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_GET_TIME::CopyFrom(const PROBUFF_NET_GET_TIME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_GET_TIME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_GET_TIME::IsInitialized() const {
  return true;
}

void PROBUFF_NET_GET_TIME::InternalSwap(PROBUFF_NET_GET_TIME* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_GET_TIME::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_GET_TIME_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_GET_TIME_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_GET_TIME_RESPONSE>()._has_bits_);
  static void set_has_mutc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_GET_TIME_RESPONSE::PROBUFF_NET_GET_TIME_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
}
PROBUFF_NET_GET_TIME_RESPONSE::PROBUFF_NET_GET_TIME_RESPONSE(const PROBUFF_NET_GET_TIME_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mutc_ = from.mutc_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
}

void PROBUFF_NET_GET_TIME_RESPONSE::SharedCtor() {
  mutc_ = 0;
}

PROBUFF_NET_GET_TIME_RESPONSE::~PROBUFF_NET_GET_TIME_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_GET_TIME_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_GET_TIME_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_GET_TIME_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_GET_TIME_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_GET_TIME_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_GET_TIME_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_GET_TIME_RESPONSE& PROBUFF_NET_GET_TIME_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_GET_TIME_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_GET_TIME_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mutc_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_GET_TIME_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mutc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mutc(&has_bits);
          mutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_GET_TIME_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mutc = 1;
  if (_internal_has_mutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mutc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  return target;
}

size_t PROBUFF_NET_GET_TIME_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mutc = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mutc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_GET_TIME_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_GET_TIME_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_GET_TIME_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_GET_TIME_RESPONSE::MergeFrom(const PROBUFF_NET_GET_TIME_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mutc()) {
    _internal_set_mutc(from._internal_mutc());
  }
}

void PROBUFF_NET_GET_TIME_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_GET_TIME_RESPONSE::CopyFrom(const PROBUFF_NET_GET_TIME_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_GET_TIME_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_GET_TIME_RESPONSE::InternalSwap(PROBUFF_NET_GET_TIME_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mutc_, other->mutc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_GET_TIME_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_NOTICE::InitAsDefaultInstance() {
}
class PROBUFF_NET_NOTICE::_Internal {
 public:
};

PROBUFF_NET_NOTICE::PROBUFF_NET_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_NOTICE)
}
PROBUFF_NET_NOTICE::PROBUFF_NET_NOTICE(const PROBUFF_NET_NOTICE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_NOTICE)
}

void PROBUFF_NET_NOTICE::SharedCtor() {
}

PROBUFF_NET_NOTICE::~PROBUFF_NET_NOTICE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_NOTICE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_NOTICE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_NOTICE::ArenaDtor(void* object) {
  PROBUFF_NET_NOTICE* _this = reinterpret_cast< PROBUFF_NET_NOTICE* >(object);
  (void)_this;
}
void PROBUFF_NET_NOTICE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_NOTICE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_NOTICE& PROBUFF_NET_NOTICE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_NOTICE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_NOTICE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_NOTICE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_NOTICE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_NOTICE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_NOTICE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_NOTICE)
  return target;
}

size_t PROBUFF_NET_NOTICE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_NOTICE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_NOTICE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_NOTICE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_NOTICE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_NOTICE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_NOTICE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_NOTICE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_NOTICE::MergeFrom(const PROBUFF_NET_NOTICE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_NOTICE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_NOTICE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_NOTICE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_NOTICE::CopyFrom(const PROBUFF_NET_NOTICE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_NOTICE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_NOTICE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_NOTICE::InternalSwap(PROBUFF_NET_NOTICE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_NOTICE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_NOTICE_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_NOTICE_RESPONSE::_Internal {
 public:
};

void PROBUFF_NET_NOTICE_RESPONSE::clear_mnotices() {
  mnotices_.Clear();
}
PROBUFF_NET_NOTICE_RESPONSE::PROBUFF_NET_NOTICE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mnotices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
}
PROBUFF_NET_NOTICE_RESPONSE::PROBUFF_NET_NOTICE_RESPONSE(const PROBUFF_NET_NOTICE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mnotices_(from.mnotices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
}

void PROBUFF_NET_NOTICE_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_NOTICE_RESPONSE_net_2eproto.base);
}

PROBUFF_NET_NOTICE_RESPONSE::~PROBUFF_NET_NOTICE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_NOTICE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_NOTICE_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_NOTICE_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_NOTICE_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_NOTICE_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_NOTICE_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_NOTICE_RESPONSE& PROBUFF_NET_NOTICE_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_NOTICE_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_NOTICE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mnotices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_NOTICE_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pbdb.db_notice mnotices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mnotices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_NOTICE_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbdb.db_notice mnotices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mnotices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mnotices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_NOTICE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_notice mnotices = 1;
  total_size += 1UL * this->_internal_mnotices_size();
  for (const auto& msg : this->mnotices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_NOTICE_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_NOTICE_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_NOTICE_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_NOTICE_RESPONSE::MergeFrom(const PROBUFF_NET_NOTICE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mnotices_.MergeFrom(from.mnotices_);
}

void PROBUFF_NET_NOTICE_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_NOTICE_RESPONSE::CopyFrom(const PROBUFF_NET_NOTICE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_NOTICE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_NOTICE_RESPONSE::InternalSwap(PROBUFF_NET_NOTICE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mnotices_.InternalSwap(&other->mnotices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_NOTICE_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ACOUNT_LOGIN::InitAsDefaultInstance() {
}
class PROBUFF_NET_ACOUNT_LOGIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ACOUNT_LOGIN>()._has_bits_);
  static void set_has_marea(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_maccount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mpassword(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_ACOUNT_LOGIN::PROBUFF_NET_ACOUNT_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
}
PROBUFF_NET_ACOUNT_LOGIN::PROBUFF_NET_ACOUNT_LOGIN(const PROBUFF_NET_ACOUNT_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  maccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_maccount()) {
    maccount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_maccount(),
      GetArena());
  }
  mpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mpassword()) {
    mpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mpassword(),
      GetArena());
  }
  marea_ = from.marea_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
}

void PROBUFF_NET_ACOUNT_LOGIN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_ACOUNT_LOGIN_net_2eproto.base);
  maccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  marea_ = 0;
}

PROBUFF_NET_ACOUNT_LOGIN::~PROBUFF_NET_ACOUNT_LOGIN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ACOUNT_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  maccount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mpassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_ACOUNT_LOGIN::ArenaDtor(void* object) {
  PROBUFF_NET_ACOUNT_LOGIN* _this = reinterpret_cast< PROBUFF_NET_ACOUNT_LOGIN* >(object);
  (void)_this;
}
void PROBUFF_NET_ACOUNT_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ACOUNT_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ACOUNT_LOGIN& PROBUFF_NET_ACOUNT_LOGIN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ACOUNT_LOGIN_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ACOUNT_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      maccount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mpassword_.ClearNonDefaultToEmpty();
    }
  }
  marea_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ACOUNT_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 marea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_marea(&has_bits);
          marea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maccount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_maccount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN.maccount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mpassword = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mpassword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN.mpassword"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ACOUNT_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 marea = 1;
  if (_internal_has_marea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_marea(), target);
  }

  // string maccount = 2;
  if (_internal_has_maccount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maccount().data(), static_cast<int>(this->_internal_maccount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN.maccount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_maccount(), target);
  }

  // string mpassword = 3;
  if (_internal_has_mpassword()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mpassword().data(), static_cast<int>(this->_internal_mpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN.mpassword");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mpassword(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  return target;
}

size_t PROBUFF_NET_ACOUNT_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // string maccount = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_maccount());
    }

    // string mpassword = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mpassword());
    }

    // int32 marea = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_marea());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ACOUNT_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ACOUNT_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ACOUNT_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ACOUNT_LOGIN::MergeFrom(const PROBUFF_NET_ACOUNT_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_maccount(from._internal_maccount());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mpassword(from._internal_mpassword());
    }
    if (cached_has_bits & 0x00000004u) {
      marea_ = from.marea_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_ACOUNT_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ACOUNT_LOGIN::CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ACOUNT_LOGIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ACOUNT_LOGIN::InternalSwap(PROBUFF_NET_ACOUNT_LOGIN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  maccount_.Swap(&other->maccount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mpassword_.Swap(&other->mpassword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(marea_, other->marea_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ACOUNT_LOGIN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>()._has_bits_);
  static void set_has_marea(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_msession(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maccount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mgatewayid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
}
PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msession()) {
    msession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msession(),
      GetArena());
  }
  maccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_maccount()) {
    maccount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_maccount(),
      GetArena());
  }
  ::memcpy(&mroleid_, &from.mroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mgatewayid_) -
    reinterpret_cast<char*>(&mroleid_)) + sizeof(mgatewayid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_net_2eproto.base);
  msession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maccount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mroleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mgatewayid_) -
      reinterpret_cast<char*>(&mroleid_)) + sizeof(mgatewayid_));
}

PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::~PROBUFF_NET_ACOUNT_LOGIN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msession_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maccount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      msession_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      maccount_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&mroleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mgatewayid_) -
        reinterpret_cast<char*>(&mroleid_)) + sizeof(mgatewayid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 marea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_marea(&has_bits);
          marea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mroleid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mroleid(&has_bits);
          mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msession = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msession();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.msession"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maccount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_maccount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.maccount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mgatewayid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mgatewayid(&has_bits);
          mgatewayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 marea = 1;
  if (_internal_has_marea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_marea(), target);
  }

  // int64 mroleid = 2;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_mroleid(), target);
  }

  // string msession = 3;
  if (_internal_has_msession()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msession().data(), static_cast<int>(this->_internal_msession().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.msession");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msession(), target);
  }

  // string maccount = 4;
  if (_internal_has_maccount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maccount().data(), static_cast<int>(this->_internal_maccount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.maccount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_maccount(), target);
  }

  // int32 mgatewayid = 5;
  if (_internal_has_mgatewayid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mgatewayid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  return target;
}

size_t PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // string msession = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msession());
    }

    // string maccount = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_maccount());
    }

    // int64 mroleid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mroleid());
    }

    // int32 marea = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_marea());
    }

    // int32 mgatewayid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mgatewayid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::MergeFrom(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msession(from._internal_msession());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_maccount(from._internal_maccount());
    }
    if (cached_has_bits & 0x00000004u) {
      mroleid_ = from.mroleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      marea_ = from.marea_;
    }
    if (cached_has_bits & 0x00000010u) {
      mgatewayid_ = from.mgatewayid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::InternalSwap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msession_.Swap(&other->msession_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  maccount_.Swap(&other->maccount_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, mgatewayid_)
      + sizeof(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::mgatewayid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, mroleid_)>(
          reinterpret_cast<char*>(&mroleid_),
          reinterpret_cast<char*>(&other->mroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ROLE_LOGIN::InitAsDefaultInstance() {
}
class PROBUFF_NET_ROLE_LOGIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ROLE_LOGIN>()._has_bits_);
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msession(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_miscreate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_marea(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mgatewayid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PROBUFF_NET_ROLE_LOGIN::PROBUFF_NET_ROLE_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
}
PROBUFF_NET_ROLE_LOGIN::PROBUFF_NET_ROLE_LOGIN(const PROBUFF_NET_ROLE_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msession()) {
    msession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msession(),
      GetArena());
  }
  ::memcpy(&mroleid_, &from.mroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mgatewayid_) -
    reinterpret_cast<char*>(&mroleid_)) + sizeof(mgatewayid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
}

void PROBUFF_NET_ROLE_LOGIN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_ROLE_LOGIN_net_2eproto.base);
  msession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mroleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mgatewayid_) -
      reinterpret_cast<char*>(&mroleid_)) + sizeof(mgatewayid_));
}

PROBUFF_NET_ROLE_LOGIN::~PROBUFF_NET_ROLE_LOGIN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ROLE_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msession_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_ROLE_LOGIN::ArenaDtor(void* object) {
  PROBUFF_NET_ROLE_LOGIN* _this = reinterpret_cast< PROBUFF_NET_ROLE_LOGIN* >(object);
  (void)_this;
}
void PROBUFF_NET_ROLE_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ROLE_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ROLE_LOGIN& PROBUFF_NET_ROLE_LOGIN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ROLE_LOGIN_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ROLE_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msession_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&mroleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mgatewayid_) -
        reinterpret_cast<char*>(&mroleid_)) + sizeof(mgatewayid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLE_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mroleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mroleid(&has_bits);
          mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msession = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msession();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_ROLE_LOGIN.msession"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool miscreate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_miscreate(&has_bits);
          miscreate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 marea = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_marea(&has_bits);
          marea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mgatewayid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mgatewayid(&has_bits);
          mgatewayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ROLE_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mroleid = 1;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mroleid(), target);
  }

  // string msession = 2;
  if (_internal_has_msession()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msession().data(), static_cast<int>(this->_internal_msession().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ROLE_LOGIN.msession");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msession(), target);
  }

  // bool miscreate = 3;
  if (_internal_has_miscreate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_miscreate(), target);
  }

  // int32 marea = 4;
  if (_internal_has_marea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_marea(), target);
  }

  // int32 mgatewayid = 5;
  if (_internal_has_mgatewayid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mgatewayid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLE_LOGIN)
  return target;
}

size_t PROBUFF_NET_ROLE_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // string msession = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msession());
    }

    // int64 mroleid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mroleid());
    }

    // bool miscreate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // int32 marea = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_marea());
    }

    // int32 mgatewayid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mgatewayid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ROLE_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ROLE_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ROLE_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ROLE_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ROLE_LOGIN)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ROLE_LOGIN::MergeFrom(const PROBUFF_NET_ROLE_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msession(from._internal_msession());
    }
    if (cached_has_bits & 0x00000002u) {
      mroleid_ = from.mroleid_;
    }
    if (cached_has_bits & 0x00000004u) {
      miscreate_ = from.miscreate_;
    }
    if (cached_has_bits & 0x00000008u) {
      marea_ = from.marea_;
    }
    if (cached_has_bits & 0x00000010u) {
      mgatewayid_ = from.mgatewayid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_ROLE_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ROLE_LOGIN::CopyFrom(const PROBUFF_NET_ROLE_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLE_LOGIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLE_LOGIN::InternalSwap(PROBUFF_NET_ROLE_LOGIN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msession_.Swap(&other->msession_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_LOGIN, mgatewayid_)
      + sizeof(PROBUFF_NET_ROLE_LOGIN::mgatewayid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_LOGIN, mroleid_)>(
          reinterpret_cast<char*>(&mroleid_),
          reinterpret_cast<char*>(&other->mroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_LOGIN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ROLE_SYNC::InitAsDefaultInstance() {
}
class PROBUFF_NET_ROLE_SYNC::_Internal {
 public:
};

PROBUFF_NET_ROLE_SYNC::PROBUFF_NET_ROLE_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_SYNC)
}
PROBUFF_NET_ROLE_SYNC::PROBUFF_NET_ROLE_SYNC(const PROBUFF_NET_ROLE_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_SYNC)
}

void PROBUFF_NET_ROLE_SYNC::SharedCtor() {
}

PROBUFF_NET_ROLE_SYNC::~PROBUFF_NET_ROLE_SYNC() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLE_SYNC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ROLE_SYNC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_ROLE_SYNC::ArenaDtor(void* object) {
  PROBUFF_NET_ROLE_SYNC* _this = reinterpret_cast< PROBUFF_NET_ROLE_SYNC* >(object);
  (void)_this;
}
void PROBUFF_NET_ROLE_SYNC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ROLE_SYNC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ROLE_SYNC& PROBUFF_NET_ROLE_SYNC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ROLE_SYNC_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ROLE_SYNC::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLE_SYNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLE_SYNC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ROLE_SYNC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLE_SYNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLE_SYNC)
  return target;
}

size_t PROBUFF_NET_ROLE_SYNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLE_SYNC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ROLE_SYNC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ROLE_SYNC)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ROLE_SYNC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ROLE_SYNC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ROLE_SYNC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ROLE_SYNC)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ROLE_SYNC::MergeFrom(const PROBUFF_NET_ROLE_SYNC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLE_SYNC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_ROLE_SYNC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ROLE_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ROLE_SYNC::CopyFrom(const PROBUFF_NET_ROLE_SYNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLE_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLE_SYNC::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLE_SYNC::InternalSwap(PROBUFF_NET_ROLE_SYNC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_SYNC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ROLE_SYNC_RESPONSE::InitAsDefaultInstance() {
  ::pbnet::_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_._instance.get_mutable()->mrole_ = const_cast< ::pbdb::db_role*>(
      ::pbdb::db_role::internal_default_instance());
  ::pbnet::_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_._instance.get_mutable()->mbrief_ = const_cast< ::pbdb::db_brief*>(
      ::pbdb::db_brief::internal_default_instance());
  ::pbnet::_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_._instance.get_mutable()->mbag_ = const_cast< ::pbdb::db_bag*>(
      ::pbdb::db_bag::internal_default_instance());
  ::pbnet::_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_._instance.get_mutable()->mtask_ = const_cast< ::pbdb::db_task*>(
      ::pbdb::db_task::internal_default_instance());
}
class PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ROLE_SYNC_RESPONSE>()._has_bits_);
  static const ::pbdb::db_role& mrole(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_mrole(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pbdb::db_brief& mbrief(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_mbrief(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbdb::db_bag& mbag(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_mbag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pbdb::db_task& mtask(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_mtask(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pbdb::db_role&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::mrole(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->mrole_;
}
const ::pbdb::db_brief&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::mbrief(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->mbrief_;
}
const ::pbdb::db_bag&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::mbag(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->mbag_;
}
const ::pbdb::db_task&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::mtask(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->mtask_;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_mrole() {
  if (GetArena() == nullptr && mrole_ != nullptr) {
    delete mrole_;
  }
  mrole_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_mbrief() {
  if (GetArena() == nullptr && mbrief_ != nullptr) {
    delete mbrief_;
  }
  mbrief_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_mbag() {
  if (GetArena() == nullptr && mbag_ != nullptr) {
    delete mbag_;
  }
  mbag_ = nullptr;
  _has_bits_[0] &= ~0x00000004u;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_mtask() {
  if (GetArena() == nullptr && mtask_ != nullptr) {
    delete mtask_;
  }
  mtask_ = nullptr;
  _has_bits_[0] &= ~0x00000008u;
}
PROBUFF_NET_ROLE_SYNC_RESPONSE::PROBUFF_NET_ROLE_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
}
PROBUFF_NET_ROLE_SYNC_RESPONSE::PROBUFF_NET_ROLE_SYNC_RESPONSE(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mrole()) {
    mrole_ = new ::pbdb::db_role(*from.mrole_);
  } else {
    mrole_ = nullptr;
  }
  if (from._internal_has_mbrief()) {
    mbrief_ = new ::pbdb::db_brief(*from.mbrief_);
  } else {
    mbrief_ = nullptr;
  }
  if (from._internal_has_mbag()) {
    mbag_ = new ::pbdb::db_bag(*from.mbag_);
  } else {
    mbag_ = nullptr;
  }
  if (from._internal_has_mtask()) {
    mtask_ = new ::pbdb::db_task(*from.mtask_);
  } else {
    mtask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_ROLE_SYNC_RESPONSE_net_2eproto.base);
  ::memset(&mrole_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mtask_) -
      reinterpret_cast<char*>(&mrole_)) + sizeof(mtask_));
}

PROBUFF_NET_ROLE_SYNC_RESPONSE::~PROBUFF_NET_ROLE_SYNC_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mrole_;
  if (this != internal_default_instance()) delete mbrief_;
  if (this != internal_default_instance()) delete mbag_;
  if (this != internal_default_instance()) delete mtask_;
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_ROLE_SYNC_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_ROLE_SYNC_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ROLE_SYNC_RESPONSE& PROBUFF_NET_ROLE_SYNC_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ROLE_SYNC_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ROLE_SYNC_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      if (GetArena() == nullptr && mrole_ != nullptr) {
        delete mrole_;
      }
      mrole_ = nullptr;
    }
    if (cached_has_bits & 0x00000002u) {
      if (GetArena() == nullptr && mbrief_ != nullptr) {
        delete mbrief_;
      }
      mbrief_ = nullptr;
    }
    if (cached_has_bits & 0x00000004u) {
      if (GetArena() == nullptr && mbag_ != nullptr) {
        delete mbag_;
      }
      mbag_ = nullptr;
    }
    if (cached_has_bits & 0x00000008u) {
      if (GetArena() == nullptr && mtask_ != nullptr) {
        delete mtask_;
      }
      mtask_ = nullptr;
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLE_SYNC_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbdb.db_role mrole = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mrole(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbdb.db_brief mbrief = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mbrief(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbdb.db_bag mbag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mbag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbdb.db_task mtask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mtask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ROLE_SYNC_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbdb.db_role mrole = 1;
  if (_internal_has_mrole()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mrole(this), target, stream);
  }

  // .pbdb.db_brief mbrief = 2;
  if (_internal_has_mbrief()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mbrief(this), target, stream);
  }

  // .pbdb.db_bag mbag = 3;
  if (_internal_has_mbag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mbag(this), target, stream);
  }

  // .pbdb.db_task mtask = 4;
  if (_internal_has_mtask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mtask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  return target;
}

size_t PROBUFF_NET_ROLE_SYNC_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .pbdb.db_role mrole = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mrole_);
    }

    // .pbdb.db_brief mbrief = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mbrief_);
    }

    // .pbdb.db_bag mbag = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mbag_);
    }

    // .pbdb.db_task mtask = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mtask_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ROLE_SYNC_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ROLE_SYNC_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::MergeFrom(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mrole()->::pbdb::db_role::MergeFrom(from._internal_mrole());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mbrief()->::pbdb::db_brief::MergeFrom(from._internal_mbrief());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mbag()->::pbdb::db_bag::MergeFrom(from._internal_mbag());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_mtask()->::pbdb::db_task::MergeFrom(from._internal_mtask());
    }
  }
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::CopyFrom(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLE_SYNC_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::InternalSwap(PROBUFF_NET_ROLE_SYNC_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_SYNC_RESPONSE, mtask_)
      + sizeof(PROBUFF_NET_ROLE_SYNC_RESPONSE::mtask_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_SYNC_RESPONSE, mrole_)>(
          reinterpret_cast<char*>(&mrole_),
          reinterpret_cast<char*>(&other->mrole_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_SYNC_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_BAG_SYNC::InitAsDefaultInstance() {
}
class PROBUFF_NET_BAG_SYNC::_Internal {
 public:
};

PROBUFF_NET_BAG_SYNC::PROBUFF_NET_BAG_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_SYNC)
}
PROBUFF_NET_BAG_SYNC::PROBUFF_NET_BAG_SYNC(const PROBUFF_NET_BAG_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_SYNC)
}

void PROBUFF_NET_BAG_SYNC::SharedCtor() {
}

PROBUFF_NET_BAG_SYNC::~PROBUFF_NET_BAG_SYNC() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_SYNC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_BAG_SYNC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_BAG_SYNC::ArenaDtor(void* object) {
  PROBUFF_NET_BAG_SYNC* _this = reinterpret_cast< PROBUFF_NET_BAG_SYNC* >(object);
  (void)_this;
}
void PROBUFF_NET_BAG_SYNC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_BAG_SYNC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_BAG_SYNC& PROBUFF_NET_BAG_SYNC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_BAG_SYNC_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_BAG_SYNC::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_SYNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_SYNC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_BAG_SYNC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_SYNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_SYNC)
  return target;
}

size_t PROBUFF_NET_BAG_SYNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_SYNC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_BAG_SYNC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_BAG_SYNC)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_BAG_SYNC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_BAG_SYNC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_BAG_SYNC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_BAG_SYNC)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_BAG_SYNC::MergeFrom(const PROBUFF_NET_BAG_SYNC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_SYNC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_BAG_SYNC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_BAG_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_BAG_SYNC::CopyFrom(const PROBUFF_NET_BAG_SYNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_SYNC::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_SYNC::InternalSwap(PROBUFF_NET_BAG_SYNC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_SYNC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_BAG_SYNC_RESPONSE::InitAsDefaultInstance() {
  ::pbnet::_PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_._instance.get_mutable()->mbag_ = const_cast< ::pbdb::db_bag*>(
      ::pbdb::db_bag::internal_default_instance());
}
class PROBUFF_NET_BAG_SYNC_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_SYNC_RESPONSE>()._has_bits_);
  static const ::pbdb::db_bag& mbag(const PROBUFF_NET_BAG_SYNC_RESPONSE* msg);
  static void set_has_mbag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pbdb::db_bag&
PROBUFF_NET_BAG_SYNC_RESPONSE::_Internal::mbag(const PROBUFF_NET_BAG_SYNC_RESPONSE* msg) {
  return *msg->mbag_;
}
void PROBUFF_NET_BAG_SYNC_RESPONSE::clear_mbag() {
  if (GetArena() == nullptr && mbag_ != nullptr) {
    delete mbag_;
  }
  mbag_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
PROBUFF_NET_BAG_SYNC_RESPONSE::PROBUFF_NET_BAG_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
}
PROBUFF_NET_BAG_SYNC_RESPONSE::PROBUFF_NET_BAG_SYNC_RESPONSE(const PROBUFF_NET_BAG_SYNC_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mbag()) {
    mbag_ = new ::pbdb::db_bag(*from.mbag_);
  } else {
    mbag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_BAG_SYNC_RESPONSE_net_2eproto.base);
  mbag_ = nullptr;
}

PROBUFF_NET_BAG_SYNC_RESPONSE::~PROBUFF_NET_BAG_SYNC_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mbag_;
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_BAG_SYNC_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_BAG_SYNC_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_BAG_SYNC_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_BAG_SYNC_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_BAG_SYNC_RESPONSE& PROBUFF_NET_BAG_SYNC_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_BAG_SYNC_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_BAG_SYNC_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && mbag_ != nullptr) {
      delete mbag_;
    }
    mbag_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_SYNC_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbdb.db_bag mbag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mbag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_BAG_SYNC_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbdb.db_bag mbag = 1;
  if (_internal_has_mbag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mbag(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  return target;
}

size_t PROBUFF_NET_BAG_SYNC_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pbdb.db_bag mbag = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mbag_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_BAG_SYNC_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_BAG_SYNC_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::MergeFrom(const PROBUFF_NET_BAG_SYNC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mbag()) {
    _internal_mutable_mbag()->::pbdb::db_bag::MergeFrom(from._internal_mbag());
  }
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::CopyFrom(const PROBUFF_NET_BAG_SYNC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_SYNC_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::InternalSwap(PROBUFF_NET_BAG_SYNC_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mbag_, other->mbag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_SYNC_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_BAG_UPDATE_delitem::InitAsDefaultInstance() {
}
class PROBUFF_NET_BAG_UPDATE_delitem::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_UPDATE_delitem>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_BAG_UPDATE_delitem::PROBUFF_NET_BAG_UPDATE_delitem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
}
PROBUFF_NET_BAG_UPDATE_delitem::PROBUFF_NET_BAG_UPDATE_delitem(const PROBUFF_NET_BAG_UPDATE_delitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mcount_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(mcount_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
}

void PROBUFF_NET_BAG_UPDATE_delitem::SharedCtor() {
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mcount_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(mcount_));
}

PROBUFF_NET_BAG_UPDATE_delitem::~PROBUFF_NET_BAG_UPDATE_delitem() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_BAG_UPDATE_delitem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_BAG_UPDATE_delitem::ArenaDtor(void* object) {
  PROBUFF_NET_BAG_UPDATE_delitem* _this = reinterpret_cast< PROBUFF_NET_BAG_UPDATE_delitem* >(object);
  (void)_this;
}
void PROBUFF_NET_BAG_UPDATE_delitem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_BAG_UPDATE_delitem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_BAG_UPDATE_delitem& PROBUFF_NET_BAG_UPDATE_delitem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_BAG_UPDATE_delitem_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_BAG_UPDATE_delitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mcount_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(mcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE_delitem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mcount(&has_bits);
          mcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_BAG_UPDATE_delitem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mid(), target);
  }

  // int32 mcount = 2;
  if (_internal_has_mcount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  return target;
}

size_t PROBUFF_NET_BAG_UPDATE_delitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mid());
    }

    // int32 mcount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_BAG_UPDATE_delitem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_BAG_UPDATE_delitem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_BAG_UPDATE_delitem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_BAG_UPDATE_delitem::MergeFrom(const PROBUFF_NET_BAG_UPDATE_delitem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mcount_ = from.mcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_BAG_UPDATE_delitem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_BAG_UPDATE_delitem::CopyFrom(const PROBUFF_NET_BAG_UPDATE_delitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE.delitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE_delitem::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE_delitem::InternalSwap(PROBUFF_NET_BAG_UPDATE_delitem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_delitem, mcount_)
      + sizeof(PROBUFF_NET_BAG_UPDATE_delitem::mcount_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_delitem, mid_)>(
          reinterpret_cast<char*>(&mid_),
          reinterpret_cast<char*>(&other->mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE_delitem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_BAG_UPDATE_additem::InitAsDefaultInstance() {
}
class PROBUFF_NET_BAG_UPDATE_additem::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_UPDATE_additem>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_BAG_UPDATE_additem::PROBUFF_NET_BAG_UPDATE_additem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
}
PROBUFF_NET_BAG_UPDATE_additem::PROBUFF_NET_BAG_UPDATE_additem(const PROBUFF_NET_BAG_UPDATE_additem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mcount_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(mcount_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
}

void PROBUFF_NET_BAG_UPDATE_additem::SharedCtor() {
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mcount_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(mcount_));
}

PROBUFF_NET_BAG_UPDATE_additem::~PROBUFF_NET_BAG_UPDATE_additem() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_BAG_UPDATE_additem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_BAG_UPDATE_additem::ArenaDtor(void* object) {
  PROBUFF_NET_BAG_UPDATE_additem* _this = reinterpret_cast< PROBUFF_NET_BAG_UPDATE_additem* >(object);
  (void)_this;
}
void PROBUFF_NET_BAG_UPDATE_additem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_BAG_UPDATE_additem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_BAG_UPDATE_additem& PROBUFF_NET_BAG_UPDATE_additem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_BAG_UPDATE_additem_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_BAG_UPDATE_additem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mcount_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(mcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE_additem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mcount(&has_bits);
          mcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_BAG_UPDATE_additem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mid(), target);
  }

  // int32 mcount = 2;
  if (_internal_has_mcount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  return target;
}

size_t PROBUFF_NET_BAG_UPDATE_additem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 mid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mid());
    }

    // int32 mcount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_BAG_UPDATE_additem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_BAG_UPDATE_additem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_BAG_UPDATE_additem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_BAG_UPDATE_additem::MergeFrom(const PROBUFF_NET_BAG_UPDATE_additem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mcount_ = from.mcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_BAG_UPDATE_additem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_BAG_UPDATE_additem::CopyFrom(const PROBUFF_NET_BAG_UPDATE_additem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE.additem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE_additem::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE_additem::InternalSwap(PROBUFF_NET_BAG_UPDATE_additem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_additem, mcount_)
      + sizeof(PROBUFF_NET_BAG_UPDATE_additem::mcount_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_additem, mid_)>(
          reinterpret_cast<char*>(&mid_),
          reinterpret_cast<char*>(&other->mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE_additem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_BAG_UPDATE::InitAsDefaultInstance() {
}
class PROBUFF_NET_BAG_UPDATE::_Internal {
 public:
};

PROBUFF_NET_BAG_UPDATE::PROBUFF_NET_BAG_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mdelitems_(arena),
  mdelnostackitems_(arena),
  madditems_(arena),
  maddnostackitems_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE)
}
PROBUFF_NET_BAG_UPDATE::PROBUFF_NET_BAG_UPDATE(const PROBUFF_NET_BAG_UPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mdelitems_(from.mdelitems_),
      mdelnostackitems_(from.mdelnostackitems_),
      madditems_(from.madditems_),
      maddnostackitems_(from.maddnostackitems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE)
}

void PROBUFF_NET_BAG_UPDATE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_BAG_UPDATE_net_2eproto.base);
}

PROBUFF_NET_BAG_UPDATE::~PROBUFF_NET_BAG_UPDATE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_BAG_UPDATE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_BAG_UPDATE::ArenaDtor(void* object) {
  PROBUFF_NET_BAG_UPDATE* _this = reinterpret_cast< PROBUFF_NET_BAG_UPDATE* >(object);
  (void)_this;
}
void PROBUFF_NET_BAG_UPDATE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_BAG_UPDATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_BAG_UPDATE& PROBUFF_NET_BAG_UPDATE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_BAG_UPDATE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_BAG_UPDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mdelitems_.Clear();
  mdelnostackitems_.Clear();
  madditems_.Clear();
  maddnostackitems_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pbnet.PROBUFF_NET_BAG_UPDATE.delitem mdelitems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mdelitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 mdelnostackitems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_mdelnostackitems(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_mdelnostackitems(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbnet.PROBUFF_NET_BAG_UPDATE.additem madditems = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_madditems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 maddnostackitems = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_maddnostackitems(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_maddnostackitems(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_BAG_UPDATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE.delitem mdelitems = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mdelitems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mdelitems(i), target, stream);
  }

  // repeated int32 mdelnostackitems = 2;
  {
    int byte_size = _mdelnostackitems_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_mdelnostackitems(), byte_size, target);
    }
  }

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE.additem madditems = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_madditems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_madditems(i), target, stream);
  }

  // repeated int32 maddnostackitems = 4;
  {
    int byte_size = _maddnostackitems_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_maddnostackitems(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE)
  return target;
}

size_t PROBUFF_NET_BAG_UPDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE.delitem mdelitems = 1;
  total_size += 1UL * this->_internal_mdelitems_size();
  for (const auto& msg : this->mdelitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 mdelnostackitems = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->mdelnostackitems_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mdelnostackitems_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE.additem madditems = 3;
  total_size += 1UL * this->_internal_madditems_size();
  for (const auto& msg : this->madditems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 maddnostackitems = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->maddnostackitems_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _maddnostackitems_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_BAG_UPDATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_BAG_UPDATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_BAG_UPDATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_BAG_UPDATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_BAG_UPDATE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_BAG_UPDATE::MergeFrom(const PROBUFF_NET_BAG_UPDATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mdelitems_.MergeFrom(from.mdelitems_);
  mdelnostackitems_.MergeFrom(from.mdelnostackitems_);
  madditems_.MergeFrom(from.madditems_);
  maddnostackitems_.MergeFrom(from.maddnostackitems_);
}

void PROBUFF_NET_BAG_UPDATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_BAG_UPDATE::CopyFrom(const PROBUFF_NET_BAG_UPDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE::InternalSwap(PROBUFF_NET_BAG_UPDATE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mdelitems_.InternalSwap(&other->mdelitems_);
  mdelnostackitems_.InternalSwap(&other->mdelnostackitems_);
  madditems_.InternalSwap(&other->madditems_);
  maddnostackitems_.InternalSwap(&other->maddnostackitems_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_CMD::InitAsDefaultInstance() {
}
class PROBUFF_NET_CMD::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CMD>()._has_bits_);
  static void set_has_mcmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CMD::PROBUFF_NET_CMD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CMD)
}
PROBUFF_NET_CMD::PROBUFF_NET_CMD(const PROBUFF_NET_CMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mcmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mcmd()) {
    mcmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mcmd(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CMD)
}

void PROBUFF_NET_CMD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_CMD_net_2eproto.base);
  mcmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PROBUFF_NET_CMD::~PROBUFF_NET_CMD() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CMD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_CMD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mcmd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_CMD::ArenaDtor(void* object) {
  PROBUFF_NET_CMD* _this = reinterpret_cast< PROBUFF_NET_CMD* >(object);
  (void)_this;
}
void PROBUFF_NET_CMD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_CMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_CMD& PROBUFF_NET_CMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_CMD_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_CMD::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mcmd_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mcmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mcmd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_CMD.mcmd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_CMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mcmd = 1;
  if (_internal_has_mcmd()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcmd().data(), static_cast<int>(this->_internal_mcmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_CMD.mcmd");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mcmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CMD)
  return target;
}

size_t PROBUFF_NET_CMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mcmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mcmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_CMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_CMD)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_CMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_CMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_CMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_CMD)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_CMD::MergeFrom(const PROBUFF_NET_CMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mcmd()) {
    _internal_set_mcmd(from._internal_mcmd());
  }
}

void PROBUFF_NET_CMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_CMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_CMD::CopyFrom(const PROBUFF_NET_CMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CMD::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CMD::InternalSwap(PROBUFF_NET_CMD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mcmd_.Swap(&other->mcmd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_CHAT::InitAsDefaultInstance() {
}
class PROBUFF_NET_CHAT::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHAT>()._has_bits_);
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mchannelid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mcontent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CHAT::PROBUFF_NET_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHAT)
}
PROBUFF_NET_CHAT::PROBUFF_NET_CHAT(const PROBUFF_NET_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mcontent()) {
    mcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mcontent(),
      GetArena());
  }
  ::memcpy(&mtype_, &from.mtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&mchannelid_) -
    reinterpret_cast<char*>(&mtype_)) + sizeof(mchannelid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHAT)
}

void PROBUFF_NET_CHAT::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_CHAT_net_2eproto.base);
  mcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mchannelid_) -
      reinterpret_cast<char*>(&mtype_)) + sizeof(mchannelid_));
}

PROBUFF_NET_CHAT::~PROBUFF_NET_CHAT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHAT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mcontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_CHAT::ArenaDtor(void* object) {
  PROBUFF_NET_CHAT* _this = reinterpret_cast< PROBUFF_NET_CHAT* >(object);
  (void)_this;
}
void PROBUFF_NET_CHAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_CHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_CHAT& PROBUFF_NET_CHAT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_CHAT_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mcontent_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&mtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mchannelid_) -
        reinterpret_cast<char*>(&mtype_)) + sizeof(mchannelid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mtype(&has_bits);
          mtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mchannelid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mchannelid(&has_bits);
          mchannelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mcontent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mcontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_CHAT.mcontent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_CHAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mtype = 1;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtype(), target);
  }

  // int32 mchannelid = 2;
  if (_internal_has_mchannelid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mchannelid(), target);
  }

  // string mcontent = 3;
  if (_internal_has_mcontent()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcontent().data(), static_cast<int>(this->_internal_mcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_CHAT.mcontent");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mcontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHAT)
  return target;
}

size_t PROBUFF_NET_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // string mcontent = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mcontent());
    }

    // int32 mtype = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mtype());
    }

    // int32 mchannelid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mchannelid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_CHAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_CHAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_CHAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_CHAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_CHAT)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_CHAT::MergeFrom(const PROBUFF_NET_CHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mcontent(from._internal_mcontent());
    }
    if (cached_has_bits & 0x00000002u) {
      mtype_ = from.mtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      mchannelid_ = from.mchannelid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_CHAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_CHAT::CopyFrom(const PROBUFF_NET_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHAT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHAT::InternalSwap(PROBUFF_NET_CHAT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mcontent_.Swap(&other->mcontent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT, mchannelid_)
      + sizeof(PROBUFF_NET_CHAT::mchannelid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT, mtype_)>(
          reinterpret_cast<char*>(&mtype_),
          reinterpret_cast<char*>(&other->mtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHAT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void chatitem::InitAsDefaultInstance() {
}
class chatitem::_Internal {
 public:
  using HasBits = decltype(std::declval<chatitem>()._has_bits_);
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mrolename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mcontent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mutc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

chatitem::chatitem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.chatitem)
}
chatitem::chatitem(const chatitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mrolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mrolename()) {
    mrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mrolename(),
      GetArena());
  }
  mcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mcontent()) {
    mcontent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mcontent(),
      GetArena());
  }
  ::memcpy(&mroleid_, &from.mroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mutc_) -
    reinterpret_cast<char*>(&mroleid_)) + sizeof(mutc_));
  // @@protoc_insertion_point(copy_constructor:pbnet.chatitem)
}

void chatitem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_chatitem_net_2eproto.base);
  mrolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mroleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mutc_) -
      reinterpret_cast<char*>(&mroleid_)) + sizeof(mutc_));
}

chatitem::~chatitem() {
  // @@protoc_insertion_point(destructor:pbnet.chatitem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void chatitem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mrolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mcontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void chatitem::ArenaDtor(void* object) {
  chatitem* _this = reinterpret_cast< chatitem* >(object);
  (void)_this;
}
void chatitem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void chatitem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const chatitem& chatitem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_chatitem_net_2eproto.base);
  return *internal_default_instance();
}


void chatitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.chatitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mrolename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mcontent_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&mroleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mutc_) -
        reinterpret_cast<char*>(&mroleid_)) + sizeof(mutc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* chatitem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mroleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mroleid(&has_bits);
          mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mrolename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mrolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.chatitem.mrolename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mcontent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mcontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.chatitem.mcontent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mutc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mutc(&has_bits);
          mutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* chatitem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.chatitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mroleid = 1;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mroleid(), target);
  }

  // string mrolename = 2;
  if (_internal_has_mrolename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mrolename().data(), static_cast<int>(this->_internal_mrolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.chatitem.mrolename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mrolename(), target);
  }

  // string mcontent = 3;
  if (_internal_has_mcontent()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mcontent().data(), static_cast<int>(this->_internal_mcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.chatitem.mcontent");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mcontent(), target);
  }

  // int32 mutc = 4;
  if (_internal_has_mutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mutc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.chatitem)
  return target;
}

size_t chatitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.chatitem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // string mrolename = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mrolename());
    }

    // string mcontent = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mcontent());
    }

    // int64 mroleid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mroleid());
    }

    // int32 mutc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mutc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void chatitem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.chatitem)
  GOOGLE_DCHECK_NE(&from, this);
  const chatitem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<chatitem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.chatitem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.chatitem)
    MergeFrom(*source);
  }
}

void chatitem::MergeFrom(const chatitem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.chatitem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mrolename(from._internal_mrolename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mcontent(from._internal_mcontent());
    }
    if (cached_has_bits & 0x00000004u) {
      mroleid_ = from.mroleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      mutc_ = from.mutc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void chatitem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.chatitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chatitem::CopyFrom(const chatitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.chatitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatitem::IsInitialized() const {
  return true;
}

void chatitem::InternalSwap(chatitem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mrolename_.Swap(&other->mrolename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mcontent_.Swap(&other->mcontent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(chatitem, mutc_)
      + sizeof(chatitem::mutc_)
      - PROTOBUF_FIELD_OFFSET(chatitem, mroleid_)>(
          reinterpret_cast<char*>(&mroleid_),
          reinterpret_cast<char*>(&other->mroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata chatitem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_CHAT_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_CHAT_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHAT_RESPONSE>()._has_bits_);
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mchannelid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_CHAT_RESPONSE::PROBUFF_NET_CHAT_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mchatlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
}
PROBUFF_NET_CHAT_RESPONSE::PROBUFF_NET_CHAT_RESPONSE(const PROBUFF_NET_CHAT_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mchatlist_(from.mchatlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mtype_, &from.mtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstat_) -
    reinterpret_cast<char*>(&mtype_)) + sizeof(mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
}

void PROBUFF_NET_CHAT_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_CHAT_RESPONSE_net_2eproto.base);
  ::memset(&mtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstat_) -
      reinterpret_cast<char*>(&mtype_)) + sizeof(mstat_));
}

PROBUFF_NET_CHAT_RESPONSE::~PROBUFF_NET_CHAT_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_CHAT_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_CHAT_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_CHAT_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_CHAT_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_CHAT_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_CHAT_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_CHAT_RESPONSE& PROBUFF_NET_CHAT_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_CHAT_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_CHAT_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mchatlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstat_) -
        reinterpret_cast<char*>(&mtype_)) + sizeof(mstat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHAT_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mtype(&has_bits);
          mtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mchannelid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mchannelid(&has_bits);
          mchannelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbnet.chatitem mchatlist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mchatlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool mstat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_CHAT_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mtype = 1;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtype(), target);
  }

  // int32 mchannelid = 2;
  if (_internal_has_mchannelid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mchannelid(), target);
  }

  // repeated .pbnet.chatitem mchatlist = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mchatlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_mchatlist(i), target, stream);
  }

  // bool mstat = 4;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  return target;
}

size_t PROBUFF_NET_CHAT_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.chatitem mchatlist = 3;
  total_size += 1UL * this->_internal_mchatlist_size();
  for (const auto& msg : this->mchatlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // int32 mtype = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mtype());
    }

    // int32 mchannelid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mchannelid());
    }

    // bool mstat = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_CHAT_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_CHAT_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_CHAT_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_CHAT_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_CHAT_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_CHAT_RESPONSE::MergeFrom(const PROBUFF_NET_CHAT_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mchatlist_.MergeFrom(from.mchatlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mtype_ = from.mtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      mchannelid_ = from.mchannelid_;
    }
    if (cached_has_bits & 0x00000004u) {
      mstat_ = from.mstat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_CHAT_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_CHAT_RESPONSE::CopyFrom(const PROBUFF_NET_CHAT_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHAT_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHAT_RESPONSE::InternalSwap(PROBUFF_NET_CHAT_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mchatlist_.InternalSwap(&other->mchatlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT_RESPONSE, mstat_)
      + sizeof(PROBUFF_NET_CHAT_RESPONSE::mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT_RESPONSE, mtype_)>(
          reinterpret_cast<char*>(&mtype_),
          reinterpret_cast<char*>(&other->mtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHAT_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_SWITCH_LINE::InitAsDefaultInstance() {
}
class PROBUFF_NET_SWITCH_LINE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_SWITCH_LINE>()._has_bits_);
  static void set_has_mline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_SWITCH_LINE::PROBUFF_NET_SWITCH_LINE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SWITCH_LINE)
}
PROBUFF_NET_SWITCH_LINE::PROBUFF_NET_SWITCH_LINE(const PROBUFF_NET_SWITCH_LINE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mline_ = from.mline_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SWITCH_LINE)
}

void PROBUFF_NET_SWITCH_LINE::SharedCtor() {
  mline_ = 0;
}

PROBUFF_NET_SWITCH_LINE::~PROBUFF_NET_SWITCH_LINE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SWITCH_LINE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_SWITCH_LINE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_SWITCH_LINE::ArenaDtor(void* object) {
  PROBUFF_NET_SWITCH_LINE* _this = reinterpret_cast< PROBUFF_NET_SWITCH_LINE* >(object);
  (void)_this;
}
void PROBUFF_NET_SWITCH_LINE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_SWITCH_LINE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_SWITCH_LINE& PROBUFF_NET_SWITCH_LINE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_SWITCH_LINE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_SWITCH_LINE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mline_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SWITCH_LINE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mline(&has_bits);
          mline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_SWITCH_LINE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mline = 1;
  if (_internal_has_mline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SWITCH_LINE)
  return target;
}

size_t PROBUFF_NET_SWITCH_LINE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mline = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mline());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_SWITCH_LINE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_SWITCH_LINE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_SWITCH_LINE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_SWITCH_LINE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_SWITCH_LINE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_SWITCH_LINE::MergeFrom(const PROBUFF_NET_SWITCH_LINE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mline()) {
    _internal_set_mline(from._internal_mline());
  }
}

void PROBUFF_NET_SWITCH_LINE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_SWITCH_LINE::CopyFrom(const PROBUFF_NET_SWITCH_LINE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SWITCH_LINE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SWITCH_LINE::InternalSwap(PROBUFF_NET_SWITCH_LINE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mline_, other->mline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SWITCH_LINE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_SWITCH_LINE_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_SWITCH_LINE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_SWITCH_LINE_RESPONSE>()._has_bits_);
  static void set_has_mline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_SWITCH_LINE_RESPONSE::PROBUFF_NET_SWITCH_LINE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
}
PROBUFF_NET_SWITCH_LINE_RESPONSE::PROBUFF_NET_SWITCH_LINE_RESPONSE(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mline_, &from.mline_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstat_) -
    reinterpret_cast<char*>(&mline_)) + sizeof(mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::SharedCtor() {
  ::memset(&mline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstat_) -
      reinterpret_cast<char*>(&mline_)) + sizeof(mstat_));
}

PROBUFF_NET_SWITCH_LINE_RESPONSE::~PROBUFF_NET_SWITCH_LINE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_SWITCH_LINE_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_SWITCH_LINE_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_SWITCH_LINE_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_SWITCH_LINE_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_SWITCH_LINE_RESPONSE& PROBUFF_NET_SWITCH_LINE_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_SWITCH_LINE_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_SWITCH_LINE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mline_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstat_) -
        reinterpret_cast<char*>(&mline_)) + sizeof(mstat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SWITCH_LINE_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mline(&has_bits);
          mline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_SWITCH_LINE_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mline = 1;
  if (_internal_has_mline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mline(), target);
  }

  // bool mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_SWITCH_LINE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 mline = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mline());
    }

    // bool mstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_SWITCH_LINE_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_SWITCH_LINE_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::MergeFrom(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mline_ = from.mline_;
    }
    if (cached_has_bits & 0x00000002u) {
      mstat_ = from.mstat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::CopyFrom(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SWITCH_LINE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::InternalSwap(PROBUFF_NET_SWITCH_LINE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SWITCH_LINE_RESPONSE, mstat_)
      + sizeof(PROBUFF_NET_SWITCH_LINE_RESPONSE::mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SWITCH_LINE_RESPONSE, mline_)>(
          reinterpret_cast<char*>(&mline_),
          reinterpret_cast<char*>(&other->mline_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SWITCH_LINE_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MAIL_LIST::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_LIST::_Internal {
 public:
};

PROBUFF_NET_MAIL_LIST::PROBUFF_NET_MAIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_LIST)
}
PROBUFF_NET_MAIL_LIST::PROBUFF_NET_MAIL_LIST(const PROBUFF_NET_MAIL_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_LIST)
}

void PROBUFF_NET_MAIL_LIST::SharedCtor() {
}

PROBUFF_NET_MAIL_LIST::~PROBUFF_NET_MAIL_LIST() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_LIST)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_LIST::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_LIST::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_LIST* _this = reinterpret_cast< PROBUFF_NET_MAIL_LIST* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_LIST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_LIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_LIST& PROBUFF_NET_MAIL_LIST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_LIST_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_LIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_LIST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_LIST)
  return target;
}

size_t PROBUFF_NET_MAIL_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_LIST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_LIST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_LIST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_LIST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_LIST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_LIST)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_LIST::MergeFrom(const PROBUFF_NET_MAIL_LIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_MAIL_LIST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_LIST::CopyFrom(const PROBUFF_NET_MAIL_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_LIST::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_LIST::InternalSwap(PROBUFF_NET_MAIL_LIST* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse() {}
PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::MergeFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PROBUFF_NET_MAIL_LIST_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_LIST_RESPONSE::_Internal {
 public:
};

void PROBUFF_NET_MAIL_LIST_RESPONSE::clear_mmail() {
  mmail_.Clear();
}
PROBUFF_NET_MAIL_LIST_RESPONSE::PROBUFF_NET_MAIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mmail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
}
PROBUFF_NET_MAIL_LIST_RESPONSE::PROBUFF_NET_MAIL_LIST_RESPONSE(const PROBUFF_NET_MAIL_LIST_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mmail_.MergeFrom(from.mmail_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_net_2eproto.base);
}

PROBUFF_NET_MAIL_LIST_RESPONSE::~PROBUFF_NET_MAIL_LIST_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_LIST_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MAIL_LIST_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_LIST_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_LIST_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_LIST_RESPONSE& PROBUFF_NET_MAIL_LIST_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_LIST_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mmail_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_LIST_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .pbdb.mail> mmail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mmail_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_LIST_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .pbdb.mail> mmail = 1;
  if (!this->_internal_mmail().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mmail().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mmail().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_iterator
          it = this->_internal_mmail().begin();
          it != this->_internal_mmail().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_iterator
          it = this->_internal_mmail().begin();
          it != this->_internal_mmail().end(); ++it) {
        target = PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_LIST_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.mail> mmail = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mmail_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_iterator
      it = this->_internal_mmail().begin();
      it != this->_internal_mmail().end(); ++it) {
    total_size += PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_LIST_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_LIST_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::MergeFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mmail_.MergeFrom(from.mmail_);
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_LIST_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_LIST_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mmail_.Swap(&other->mmail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MAIL_READ::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_READ::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_READ>()._has_bits_);
  static void set_has_mmailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_READ::PROBUFF_NET_MAIL_READ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_READ)
}
PROBUFF_NET_MAIL_READ::PROBUFF_NET_MAIL_READ(const PROBUFF_NET_MAIL_READ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mmailid_ = from.mmailid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_READ)
}

void PROBUFF_NET_MAIL_READ::SharedCtor() {
  mmailid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_MAIL_READ::~PROBUFF_NET_MAIL_READ() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_READ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_READ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_READ::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_READ* _this = reinterpret_cast< PROBUFF_NET_MAIL_READ* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_READ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_READ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_READ& PROBUFF_NET_MAIL_READ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_READ_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_READ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_READ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mmailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_READ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mmailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mmailid(&has_bits);
          mmailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_READ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_READ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mmailid = 1;
  if (_internal_has_mmailid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mmailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_READ)
  return target;
}

size_t PROBUFF_NET_MAIL_READ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_READ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 mmailid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mmailid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_READ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_READ)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_READ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_READ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_READ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_READ)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_READ::MergeFrom(const PROBUFF_NET_MAIL_READ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_READ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mmailid()) {
    _internal_set_mmailid(from._internal_mmailid());
  }
}

void PROBUFF_NET_MAIL_READ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_READ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_READ::CopyFrom(const PROBUFF_NET_MAIL_READ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_READ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_READ::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_READ::InternalSwap(PROBUFF_NET_MAIL_READ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mmailid_, other->mmailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_READ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MAIL_READ_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_READ_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_READ_RESPONSE>()._has_bits_);
  static void set_has_mmailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_READ_RESPONSE::PROBUFF_NET_MAIL_READ_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
}
PROBUFF_NET_MAIL_READ_RESPONSE::PROBUFF_NET_MAIL_READ_RESPONSE(const PROBUFF_NET_MAIL_READ_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mmailid_, &from.mmailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstat_) -
    reinterpret_cast<char*>(&mmailid_)) + sizeof(mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
}

void PROBUFF_NET_MAIL_READ_RESPONSE::SharedCtor() {
  ::memset(&mmailid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstat_) -
      reinterpret_cast<char*>(&mmailid_)) + sizeof(mstat_));
}

PROBUFF_NET_MAIL_READ_RESPONSE::~PROBUFF_NET_MAIL_READ_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_READ_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_READ_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_READ_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MAIL_READ_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_READ_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_READ_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_READ_RESPONSE& PROBUFF_NET_MAIL_READ_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_READ_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_READ_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mmailid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstat_) -
        reinterpret_cast<char*>(&mmailid_)) + sizeof(mstat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_READ_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mmailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mmailid(&has_bits);
          mmailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_READ_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mmailid = 1;
  if (_internal_has_mmailid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mmailid(), target);
  }

  // bool mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_READ_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 mmailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mmailid());
    }

    // bool mstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_READ_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_READ_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_READ_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_READ_RESPONSE::MergeFrom(const PROBUFF_NET_MAIL_READ_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mmailid_ = from.mmailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mstat_ = from.mstat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MAIL_READ_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_READ_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_READ_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_READ_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_READ_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_READ_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_READ_RESPONSE, mstat_)
      + sizeof(PROBUFF_NET_MAIL_READ_RESPONSE::mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_READ_RESPONSE, mmailid_)>(
          reinterpret_cast<char*>(&mmailid_),
          reinterpret_cast<char*>(&other->mmailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_READ_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MAIL_DRAW::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_DRAW::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DRAW>()._has_bits_);
  static void set_has_mmailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_DRAW::PROBUFF_NET_MAIL_DRAW(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DRAW)
}
PROBUFF_NET_MAIL_DRAW::PROBUFF_NET_MAIL_DRAW(const PROBUFF_NET_MAIL_DRAW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mmailid_ = from.mmailid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DRAW)
}

void PROBUFF_NET_MAIL_DRAW::SharedCtor() {
  mmailid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_MAIL_DRAW::~PROBUFF_NET_MAIL_DRAW() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DRAW)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_DRAW::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_DRAW::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_DRAW* _this = reinterpret_cast< PROBUFF_NET_MAIL_DRAW* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_DRAW::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_DRAW::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_DRAW& PROBUFF_NET_MAIL_DRAW::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_DRAW_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_DRAW::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mmailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DRAW::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mmailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mmailid(&has_bits);
          mmailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_DRAW::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mmailid = 1;
  if (_internal_has_mmailid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mmailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DRAW)
  return target;
}

size_t PROBUFF_NET_MAIL_DRAW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 mmailid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mmailid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_DRAW::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_DRAW* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_DRAW>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_DRAW)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_DRAW)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_DRAW::MergeFrom(const PROBUFF_NET_MAIL_DRAW& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mmailid()) {
    _internal_set_mmailid(from._internal_mmailid());
  }
}

void PROBUFF_NET_MAIL_DRAW::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_DRAW::CopyFrom(const PROBUFF_NET_MAIL_DRAW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DRAW::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DRAW::InternalSwap(PROBUFF_NET_MAIL_DRAW* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mmailid_, other->mmailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DRAW::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MAIL_DRAW_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_DRAW_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DRAW_RESPONSE>()._has_bits_);
  static void set_has_mmailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_DRAW_RESPONSE::PROBUFF_NET_MAIL_DRAW_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
}
PROBUFF_NET_MAIL_DRAW_RESPONSE::PROBUFF_NET_MAIL_DRAW_RESPONSE(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mmailid_, &from.mmailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstat_) -
    reinterpret_cast<char*>(&mmailid_)) + sizeof(mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::SharedCtor() {
  ::memset(&mmailid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstat_) -
      reinterpret_cast<char*>(&mmailid_)) + sizeof(mstat_));
}

PROBUFF_NET_MAIL_DRAW_RESPONSE::~PROBUFF_NET_MAIL_DRAW_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_DRAW_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MAIL_DRAW_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_DRAW_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_DRAW_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_DRAW_RESPONSE& PROBUFF_NET_MAIL_DRAW_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_DRAW_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_DRAW_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mmailid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstat_) -
        reinterpret_cast<char*>(&mmailid_)) + sizeof(mstat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DRAW_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mmailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mmailid(&has_bits);
          mmailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_DRAW_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mmailid = 1;
  if (_internal_has_mmailid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mmailid(), target);
  }

  // bool mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_DRAW_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 mmailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mmailid());
    }

    // bool mstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_DRAW_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_DRAW_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::MergeFrom(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mmailid_ = from.mmailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mstat_ = from.mstat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DRAW_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_DRAW_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DRAW_RESPONSE, mstat_)
      + sizeof(PROBUFF_NET_MAIL_DRAW_RESPONSE::mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DRAW_RESPONSE, mmailid_)>(
          reinterpret_cast<char*>(&mmailid_),
          reinterpret_cast<char*>(&other->mmailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DRAW_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MAIL_DEL::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_DEL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DEL>()._has_bits_);
  static void set_has_mmailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_DEL::PROBUFF_NET_MAIL_DEL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DEL)
}
PROBUFF_NET_MAIL_DEL::PROBUFF_NET_MAIL_DEL(const PROBUFF_NET_MAIL_DEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mmailid_ = from.mmailid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DEL)
}

void PROBUFF_NET_MAIL_DEL::SharedCtor() {
  mmailid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_MAIL_DEL::~PROBUFF_NET_MAIL_DEL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DEL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_DEL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_DEL::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_DEL* _this = reinterpret_cast< PROBUFF_NET_MAIL_DEL* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_DEL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_DEL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_DEL& PROBUFF_NET_MAIL_DEL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_DEL_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_DEL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mmailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DEL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mmailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mmailid(&has_bits);
          mmailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_DEL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mmailid = 1;
  if (_internal_has_mmailid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mmailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DEL)
  return target;
}

size_t PROBUFF_NET_MAIL_DEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DEL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 mmailid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mmailid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_DEL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_DEL)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_DEL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_DEL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_DEL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_DEL)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_DEL::MergeFrom(const PROBUFF_NET_MAIL_DEL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DEL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mmailid()) {
    _internal_set_mmailid(from._internal_mmailid());
  }
}

void PROBUFF_NET_MAIL_DEL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_DEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_DEL::CopyFrom(const PROBUFF_NET_MAIL_DEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DEL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DEL::InternalSwap(PROBUFF_NET_MAIL_DEL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mmailid_, other->mmailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DEL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MAIL_DEL_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_DEL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DEL_RESPONSE>()._has_bits_);
  static void set_has_mmailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_DEL_RESPONSE::PROBUFF_NET_MAIL_DEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
}
PROBUFF_NET_MAIL_DEL_RESPONSE::PROBUFF_NET_MAIL_DEL_RESPONSE(const PROBUFF_NET_MAIL_DEL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mmailid_, &from.mmailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstat_) -
    reinterpret_cast<char*>(&mmailid_)) + sizeof(mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::SharedCtor() {
  ::memset(&mmailid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstat_) -
      reinterpret_cast<char*>(&mmailid_)) + sizeof(mstat_));
}

PROBUFF_NET_MAIL_DEL_RESPONSE::~PROBUFF_NET_MAIL_DEL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_DEL_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MAIL_DEL_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_DEL_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_DEL_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_DEL_RESPONSE& PROBUFF_NET_MAIL_DEL_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_DEL_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_DEL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mmailid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstat_) -
        reinterpret_cast<char*>(&mmailid_)) + sizeof(mstat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DEL_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mmailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mmailid(&has_bits);
          mmailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_DEL_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mmailid = 1;
  if (_internal_has_mmailid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mmailid(), target);
  }

  // bool mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_DEL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 mmailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mmailid());
    }

    // bool mstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_DEL_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_DEL_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::MergeFrom(const PROBUFF_NET_MAIL_DEL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mmailid_ = from.mmailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mstat_ = from.mstat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_DEL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DEL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_DEL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DEL_RESPONSE, mstat_)
      + sizeof(PROBUFF_NET_MAIL_DEL_RESPONSE::mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DEL_RESPONSE, mmailid_)>(
          reinterpret_cast<char*>(&mmailid_),
          reinterpret_cast<char*>(&other->mmailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DEL_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_KCPSESSION::InitAsDefaultInstance() {
}
class PROBUFF_NET_KCPSESSION::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_KCPSESSION>()._has_bits_);
  static void set_has_mserverid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_muip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_muport(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mconv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PROBUFF_NET_KCPSESSION::PROBUFF_NET_KCPSESSION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_KCPSESSION)
}
PROBUFF_NET_KCPSESSION::PROBUFF_NET_KCPSESSION(const PROBUFF_NET_KCPSESSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  muip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_muip()) {
    muip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_muip(),
      GetArena());
  }
  ::memcpy(&mserverid_, &from.mserverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mconv_) -
    reinterpret_cast<char*>(&mserverid_)) + sizeof(mconv_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_KCPSESSION)
}

void PROBUFF_NET_KCPSESSION::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_KCPSESSION_net_2eproto.base);
  muip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mserverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mconv_) -
      reinterpret_cast<char*>(&mserverid_)) + sizeof(mconv_));
}

PROBUFF_NET_KCPSESSION::~PROBUFF_NET_KCPSESSION() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_KCPSESSION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_KCPSESSION::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  muip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_KCPSESSION::ArenaDtor(void* object) {
  PROBUFF_NET_KCPSESSION* _this = reinterpret_cast< PROBUFF_NET_KCPSESSION* >(object);
  (void)_this;
}
void PROBUFF_NET_KCPSESSION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_KCPSESSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_KCPSESSION& PROBUFF_NET_KCPSESSION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_KCPSESSION_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_KCPSESSION::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_KCPSESSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    muip_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&mserverid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mconv_) -
        reinterpret_cast<char*>(&mserverid_)) + sizeof(mconv_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_KCPSESSION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mserverid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mserverid(&has_bits);
          mserverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string muip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_muip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_KCPSESSION.muip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 muport = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_muport(&has_bits);
          muport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mconv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mconv(&has_bits);
          mconv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_KCPSESSION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_KCPSESSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mserverid = 1;
  if (_internal_has_mserverid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mserverid(), target);
  }

  // string muip = 2;
  if (_internal_has_muip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_muip().data(), static_cast<int>(this->_internal_muip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_KCPSESSION.muip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_muip(), target);
  }

  // int32 muport = 3;
  if (_internal_has_muport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_muport(), target);
  }

  // int32 mconv = 4;
  if (_internal_has_mconv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mconv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_KCPSESSION)
  return target;
}

size_t PROBUFF_NET_KCPSESSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_KCPSESSION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // string muip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_muip());
    }

    // int64 mserverid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mserverid());
    }

    // int32 muport = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_muport());
    }

    // int32 mconv = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mconv());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_KCPSESSION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_KCPSESSION)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_KCPSESSION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_KCPSESSION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_KCPSESSION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_KCPSESSION)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_KCPSESSION::MergeFrom(const PROBUFF_NET_KCPSESSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_KCPSESSION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_muip(from._internal_muip());
    }
    if (cached_has_bits & 0x00000002u) {
      mserverid_ = from.mserverid_;
    }
    if (cached_has_bits & 0x00000004u) {
      muport_ = from.muport_;
    }
    if (cached_has_bits & 0x00000008u) {
      mconv_ = from.mconv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_KCPSESSION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_KCPSESSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_KCPSESSION::CopyFrom(const PROBUFF_NET_KCPSESSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_KCPSESSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_KCPSESSION::IsInitialized() const {
  return true;
}

void PROBUFF_NET_KCPSESSION::InternalSwap(PROBUFF_NET_KCPSESSION* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  muip_.Swap(&other->muip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_KCPSESSION, mconv_)
      + sizeof(PROBUFF_NET_KCPSESSION::mconv_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_KCPSESSION, mserverid_)>(
          reinterpret_cast<char*>(&mserverid_),
          reinterpret_cast<char*>(&other->mserverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_KCPSESSION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_KCPSESSION_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_KCPSESSION_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_KCPSESSION_RESPONSE>()._has_bits_);
  static void set_has_mkcpsession(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_KCPSESSION_RESPONSE::PROBUFF_NET_KCPSESSION_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
}
PROBUFF_NET_KCPSESSION_RESPONSE::PROBUFF_NET_KCPSESSION_RESPONSE(const PROBUFF_NET_KCPSESSION_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mkcpsession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mkcpsession()) {
    mkcpsession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mkcpsession(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
}

void PROBUFF_NET_KCPSESSION_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_KCPSESSION_RESPONSE_net_2eproto.base);
  mkcpsession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PROBUFF_NET_KCPSESSION_RESPONSE::~PROBUFF_NET_KCPSESSION_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_KCPSESSION_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mkcpsession_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_KCPSESSION_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_KCPSESSION_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_KCPSESSION_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_KCPSESSION_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_KCPSESSION_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_KCPSESSION_RESPONSE& PROBUFF_NET_KCPSESSION_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_KCPSESSION_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_KCPSESSION_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mkcpsession_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_KCPSESSION_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mkcpsession = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mkcpsession();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.mkcpsession"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_KCPSESSION_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mkcpsession = 1;
  if (_internal_has_mkcpsession()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mkcpsession().data(), static_cast<int>(this->_internal_mkcpsession().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.mkcpsession");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mkcpsession(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  return target;
}

size_t PROBUFF_NET_KCPSESSION_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mkcpsession = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mkcpsession());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_KCPSESSION_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_KCPSESSION_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_KCPSESSION_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_KCPSESSION_RESPONSE::MergeFrom(const PROBUFF_NET_KCPSESSION_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mkcpsession()) {
    _internal_set_mkcpsession(from._internal_mkcpsession());
  }
}

void PROBUFF_NET_KCPSESSION_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_KCPSESSION_RESPONSE::CopyFrom(const PROBUFF_NET_KCPSESSION_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_KCPSESSION_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_KCPSESSION_RESPONSE::InternalSwap(PROBUFF_NET_KCPSESSION_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mkcpsession_.Swap(&other->mkcpsession_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_KCPSESSION_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_TASK_RECEIVE_AWARD::InitAsDefaultInstance() {
}
class PROBUFF_NET_TASK_RECEIVE_AWARD::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_TASK_RECEIVE_AWARD>()._has_bits_);
  static void set_has_mtaskid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_TASK_RECEIVE_AWARD::PROBUFF_NET_TASK_RECEIVE_AWARD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
}
PROBUFF_NET_TASK_RECEIVE_AWARD::PROBUFF_NET_TASK_RECEIVE_AWARD(const PROBUFF_NET_TASK_RECEIVE_AWARD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mtaskid_ = from.mtaskid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::SharedCtor() {
  mtaskid_ = 0;
}

PROBUFF_NET_TASK_RECEIVE_AWARD::~PROBUFF_NET_TASK_RECEIVE_AWARD() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::ArenaDtor(void* object) {
  PROBUFF_NET_TASK_RECEIVE_AWARD* _this = reinterpret_cast< PROBUFF_NET_TASK_RECEIVE_AWARD* >(object);
  (void)_this;
}
void PROBUFF_NET_TASK_RECEIVE_AWARD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_TASK_RECEIVE_AWARD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_TASK_RECEIVE_AWARD& PROBUFF_NET_TASK_RECEIVE_AWARD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_TASK_RECEIVE_AWARD::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mtaskid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_TASK_RECEIVE_AWARD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mtaskid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mtaskid(&has_bits);
          mtaskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_TASK_RECEIVE_AWARD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mtaskid = 1;
  if (_internal_has_mtaskid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtaskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  return target;
}

size_t PROBUFF_NET_TASK_RECEIVE_AWARD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mtaskid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mtaskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_TASK_RECEIVE_AWARD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_TASK_RECEIVE_AWARD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::MergeFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mtaskid()) {
    _internal_set_mtaskid(from._internal_mtaskid());
  }
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::CopyFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_TASK_RECEIVE_AWARD::IsInitialized() const {
  return true;
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::InternalSwap(PROBUFF_NET_TASK_RECEIVE_AWARD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mtaskid_, other->mtaskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TASK_RECEIVE_AWARD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void drop_item::InitAsDefaultInstance() {
}
class drop_item::_Internal {
 public:
  using HasBits = decltype(std::declval<drop_item>()._has_bits_);
  static void set_has_mitem(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

drop_item::drop_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.drop_item)
}
drop_item::drop_item(const drop_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mitem_, &from.mitem_,
    static_cast<size_t>(reinterpret_cast<char*>(&mcount_) -
    reinterpret_cast<char*>(&mitem_)) + sizeof(mcount_));
  // @@protoc_insertion_point(copy_constructor:pbnet.drop_item)
}

void drop_item::SharedCtor() {
  ::memset(&mitem_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mcount_) -
      reinterpret_cast<char*>(&mitem_)) + sizeof(mcount_));
}

drop_item::~drop_item() {
  // @@protoc_insertion_point(destructor:pbnet.drop_item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void drop_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void drop_item::ArenaDtor(void* object) {
  drop_item* _this = reinterpret_cast< drop_item* >(object);
  (void)_this;
}
void drop_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void drop_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const drop_item& drop_item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_drop_item_net_2eproto.base);
  return *internal_default_instance();
}


void drop_item::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.drop_item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mitem_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mcount_) -
        reinterpret_cast<char*>(&mitem_)) + sizeof(mcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* drop_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mitem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mitem(&has_bits);
          mitem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mcount(&has_bits);
          mcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* drop_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.drop_item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mitem = 1;
  if (_internal_has_mitem()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mitem(), target);
  }

  // int32 mcount = 2;
  if (_internal_has_mcount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.drop_item)
  return target;
}

size_t drop_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.drop_item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 mitem = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mitem());
    }

    // int32 mcount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void drop_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.drop_item)
  GOOGLE_DCHECK_NE(&from, this);
  const drop_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<drop_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.drop_item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.drop_item)
    MergeFrom(*source);
  }
}

void drop_item::MergeFrom(const drop_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.drop_item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mitem_ = from.mitem_;
    }
    if (cached_has_bits & 0x00000002u) {
      mcount_ = from.mcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void drop_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.drop_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void drop_item::CopyFrom(const drop_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.drop_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool drop_item::IsInitialized() const {
  return true;
}

void drop_item::InternalSwap(drop_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(drop_item, mcount_)
      + sizeof(drop_item::mcount_)
      - PROTOBUF_FIELD_OFFSET(drop_item, mitem_)>(
          reinterpret_cast<char*>(&mitem_),
          reinterpret_cast<char*>(&other->mitem_));
}

::PROTOBUF_NAMESPACE_ID::Metadata drop_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse() {}
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::MergeFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE>()._has_bits_);
  static void set_has_mtaskid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mdrop_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
}
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mdrop_.MergeFrom(from.mdrop_);
  ::memcpy(&mtaskid_, &from.mtaskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstat_) -
    reinterpret_cast<char*>(&mtaskid_)) + sizeof(mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_net_2eproto.base);
  ::memset(&mtaskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstat_) -
      reinterpret_cast<char*>(&mtaskid_)) + sizeof(mstat_));
}

PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::~PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mdrop_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mtaskid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstat_) -
        reinterpret_cast<char*>(&mtaskid_)) + sizeof(mstat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mtaskid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mtaskid(&has_bits);
          mtaskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, int32> mdrop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mdrop_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mtaskid = 1;
  if (_internal_has_mtaskid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtaskid(), target);
  }

  // bool mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mstat(), target);
  }

  // map<int32, int32> mdrop = 3;
  if (!this->_internal_mdrop().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mdrop().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mdrop().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_mdrop().begin();
          it != this->_internal_mdrop().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_mdrop().begin();
          it != this->_internal_mdrop().end(); ++it) {
        target = PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  return target;
}

size_t PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> mdrop = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mdrop_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_mdrop().begin();
      it != this->_internal_mdrop().end(); ++it) {
    total_size += PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 mtaskid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mtaskid());
    }

    // bool mstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::MergeFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mdrop_.MergeFrom(from.mdrop_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mtaskid_ = from.mtaskid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mstat_ = from.mstat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::CopyFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::InternalSwap(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mdrop_.Swap(&other->mdrop_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, mstat_)
      + sizeof(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, mtaskid_)>(
          reinterpret_cast<char*>(&mtaskid_),
          reinterpret_cast<char*>(&other->mtaskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_CREATE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_CREATE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_CREATE>()._has_bits_);
  static void set_has_mname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_CREATE::PROBUFF_NET_FAMIL_CREATE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_CREATE)
}
PROBUFF_NET_FAMIL_CREATE::PROBUFF_NET_FAMIL_CREATE(const PROBUFF_NET_FAMIL_CREATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mname()) {
    mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mname(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_CREATE)
}

void PROBUFF_NET_FAMIL_CREATE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_FAMIL_CREATE_net_2eproto.base);
  mname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PROBUFF_NET_FAMIL_CREATE::~PROBUFF_NET_FAMIL_CREATE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_CREATE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_CREATE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_FAMIL_CREATE::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_CREATE* _this = reinterpret_cast< PROBUFF_NET_FAMIL_CREATE* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_CREATE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_CREATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_CREATE& PROBUFF_NET_FAMIL_CREATE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_CREATE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_CREATE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_CREATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mname_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_CREATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_FAMIL_CREATE.mname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_CREATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_CREATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mname = 1;
  if (_internal_has_mname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mname().data(), static_cast<int>(this->_internal_mname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_FAMIL_CREATE.mname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_CREATE)
  return target;
}

size_t PROBUFF_NET_FAMIL_CREATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_CREATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mname = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_CREATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CREATE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_CREATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_CREATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_CREATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_CREATE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_CREATE::MergeFrom(const PROBUFF_NET_FAMIL_CREATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CREATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mname()) {
    _internal_set_mname(from._internal_mname());
  }
}

void PROBUFF_NET_FAMIL_CREATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CREATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_CREATE::CopyFrom(const PROBUFF_NET_FAMIL_CREATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CREATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_CREATE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_CREATE::InternalSwap(PROBUFF_NET_FAMIL_CREATE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mname_.Swap(&other->mname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_CREATE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_CREATE_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_CREATE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_CREATE_RESPONSE>()._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_CREATE_RESPONSE::PROBUFF_NET_FAMIL_CREATE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
}
PROBUFF_NET_FAMIL_CREATE_RESPONSE::PROBUFF_NET_FAMIL_CREATE_RESPONSE(const PROBUFF_NET_FAMIL_CREATE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mstat_ = from.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
}

void PROBUFF_NET_FAMIL_CREATE_RESPONSE::SharedCtor() {
  mstat_ = 0;
}

PROBUFF_NET_FAMIL_CREATE_RESPONSE::~PROBUFF_NET_FAMIL_CREATE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_CREATE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_CREATE_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_CREATE_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FAMIL_CREATE_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_CREATE_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_CREATE_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_CREATE_RESPONSE& PROBUFF_NET_FAMIL_CREATE_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_CREATE_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_CREATE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mstat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_CREATE_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_CREATE_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_CREATE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mstat = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mstat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_CREATE_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_CREATE_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_CREATE_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_CREATE_RESPONSE::MergeFrom(const PROBUFF_NET_FAMIL_CREATE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _internal_set_mstat(from._internal_mstat());
  }
}

void PROBUFF_NET_FAMIL_CREATE_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_CREATE_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_CREATE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CREATE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_CREATE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_CREATE_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_CREATE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mstat_, other->mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_CREATE_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_INFO::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_INFO::_Internal {
 public:
};

PROBUFF_NET_FAMIL_INFO::PROBUFF_NET_FAMIL_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_INFO)
}
PROBUFF_NET_FAMIL_INFO::PROBUFF_NET_FAMIL_INFO(const PROBUFF_NET_FAMIL_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_INFO)
}

void PROBUFF_NET_FAMIL_INFO::SharedCtor() {
}

PROBUFF_NET_FAMIL_INFO::~PROBUFF_NET_FAMIL_INFO() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_INFO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_INFO::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_INFO* _this = reinterpret_cast< PROBUFF_NET_FAMIL_INFO* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_INFO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_INFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_INFO& PROBUFF_NET_FAMIL_INFO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_INFO_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_INFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_INFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_INFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_INFO)
  return target;
}

size_t PROBUFF_NET_FAMIL_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_INFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_INFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_INFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_INFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_INFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_INFO)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_INFO::MergeFrom(const PROBUFF_NET_FAMIL_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_FAMIL_INFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_INFO::CopyFrom(const PROBUFF_NET_FAMIL_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_INFO::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_INFO::InternalSwap(PROBUFF_NET_FAMIL_INFO* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_INFO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_INFO_RESPONSE::InitAsDefaultInstance() {
  ::pbnet::_PROBUFF_NET_FAMIL_INFO_RESPONSE_default_instance_._instance.get_mutable()->minfo_ = const_cast< ::pbdb::db_family*>(
      ::pbdb::db_family::internal_default_instance());
}
class PROBUFF_NET_FAMIL_INFO_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_INFO_RESPONSE>()._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbdb::db_family& minfo(const PROBUFF_NET_FAMIL_INFO_RESPONSE* msg);
  static void set_has_minfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pbdb::db_family&
PROBUFF_NET_FAMIL_INFO_RESPONSE::_Internal::minfo(const PROBUFF_NET_FAMIL_INFO_RESPONSE* msg) {
  return *msg->minfo_;
}
void PROBUFF_NET_FAMIL_INFO_RESPONSE::clear_minfo() {
  if (GetArena() == nullptr && minfo_ != nullptr) {
    delete minfo_;
  }
  minfo_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
void PROBUFF_NET_FAMIL_INFO_RESPONSE::clear_mmember() {
  mmember_.Clear();
}
PROBUFF_NET_FAMIL_INFO_RESPONSE::PROBUFF_NET_FAMIL_INFO_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mmember_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
}
PROBUFF_NET_FAMIL_INFO_RESPONSE::PROBUFF_NET_FAMIL_INFO_RESPONSE(const PROBUFF_NET_FAMIL_INFO_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mmember_(from.mmember_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_minfo()) {
    minfo_ = new ::pbdb::db_family(*from.minfo_);
  } else {
    minfo_ = nullptr;
  }
  mstat_ = from.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
}

void PROBUFF_NET_FAMIL_INFO_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_FAMIL_INFO_RESPONSE_net_2eproto.base);
  ::memset(&minfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstat_) -
      reinterpret_cast<char*>(&minfo_)) + sizeof(mstat_));
}

PROBUFF_NET_FAMIL_INFO_RESPONSE::~PROBUFF_NET_FAMIL_INFO_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_INFO_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete minfo_;
}

void PROBUFF_NET_FAMIL_INFO_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_INFO_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FAMIL_INFO_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_INFO_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_INFO_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_INFO_RESPONSE& PROBUFF_NET_FAMIL_INFO_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_INFO_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_INFO_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mmember_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && minfo_ != nullptr) {
      delete minfo_;
    }
    minfo_ = nullptr;
  }
  mstat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_INFO_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbdb.db_family minfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_minfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbdb.db_brief mmember = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mmember(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_INFO_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  // .pbdb.db_family minfo = 2;
  if (_internal_has_minfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::minfo(this), target, stream);
  }

  // repeated .pbdb.db_brief mmember = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mmember_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_mmember(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_INFO_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_brief mmember = 3;
  total_size += 1UL * this->_internal_mmember_size();
  for (const auto& msg : this->mmember_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .pbdb.db_family minfo = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *minfo_);
    }

    // int32 mstat = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mstat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_INFO_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_INFO_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_INFO_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_INFO_RESPONSE::MergeFrom(const PROBUFF_NET_FAMIL_INFO_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mmember_.MergeFrom(from.mmember_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_minfo()->::pbdb::db_family::MergeFrom(from._internal_minfo());
    }
    if (cached_has_bits & 0x00000002u) {
      mstat_ = from.mstat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_FAMIL_INFO_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_INFO_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_INFO_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_INFO_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_INFO_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_INFO_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_INFO_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mmember_.InternalSwap(&other->mmember_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FAMIL_INFO_RESPONSE, mstat_)
      + sizeof(PROBUFF_NET_FAMIL_INFO_RESPONSE::mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FAMIL_INFO_RESPONSE, minfo_)>(
          reinterpret_cast<char*>(&minfo_),
          reinterpret_cast<char*>(&other->minfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_INFO_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_JOIN::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_JOIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_JOIN>()._has_bits_);
  static void set_has_mfamilid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mapply(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_FAMIL_JOIN::PROBUFF_NET_FAMIL_JOIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_JOIN)
}
PROBUFF_NET_FAMIL_JOIN::PROBUFF_NET_FAMIL_JOIN(const PROBUFF_NET_FAMIL_JOIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mfamilid_, &from.mfamilid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mapply_) -
    reinterpret_cast<char*>(&mfamilid_)) + sizeof(mapply_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_JOIN)
}

void PROBUFF_NET_FAMIL_JOIN::SharedCtor() {
  ::memset(&mfamilid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapply_) -
      reinterpret_cast<char*>(&mfamilid_)) + sizeof(mapply_));
}

PROBUFF_NET_FAMIL_JOIN::~PROBUFF_NET_FAMIL_JOIN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_JOIN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_JOIN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_JOIN::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_JOIN* _this = reinterpret_cast< PROBUFF_NET_FAMIL_JOIN* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_JOIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_JOIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_JOIN& PROBUFF_NET_FAMIL_JOIN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_JOIN_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_JOIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_JOIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mfamilid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mapply_) -
        reinterpret_cast<char*>(&mfamilid_)) + sizeof(mapply_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_JOIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mfamilid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mfamilid(&has_bits);
          mfamilid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mapply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mapply(&has_bits);
          mapply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_JOIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_JOIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mfamilid = 1;
  if (_internal_has_mfamilid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfamilid(), target);
  }

  // bool mapply = 2;
  if (_internal_has_mapply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mapply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_JOIN)
  return target;
}

size_t PROBUFF_NET_FAMIL_JOIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_JOIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 mfamilid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mfamilid());
    }

    // bool mapply = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_JOIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_JOIN)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_JOIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_JOIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_JOIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_JOIN)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_JOIN::MergeFrom(const PROBUFF_NET_FAMIL_JOIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_JOIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mfamilid_ = from.mfamilid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mapply_ = from.mapply_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_FAMIL_JOIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_JOIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_JOIN::CopyFrom(const PROBUFF_NET_FAMIL_JOIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_JOIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_JOIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_JOIN::InternalSwap(PROBUFF_NET_FAMIL_JOIN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FAMIL_JOIN, mapply_)
      + sizeof(PROBUFF_NET_FAMIL_JOIN::mapply_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FAMIL_JOIN, mfamilid_)>(
          reinterpret_cast<char*>(&mfamilid_),
          reinterpret_cast<char*>(&other->mfamilid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_JOIN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_JOIN_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_JOIN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_JOIN_RESPONSE>()._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_JOIN_RESPONSE::PROBUFF_NET_FAMIL_JOIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
}
PROBUFF_NET_FAMIL_JOIN_RESPONSE::PROBUFF_NET_FAMIL_JOIN_RESPONSE(const PROBUFF_NET_FAMIL_JOIN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mstat_ = from.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
}

void PROBUFF_NET_FAMIL_JOIN_RESPONSE::SharedCtor() {
  mstat_ = 0;
}

PROBUFF_NET_FAMIL_JOIN_RESPONSE::~PROBUFF_NET_FAMIL_JOIN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_JOIN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_JOIN_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_JOIN_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FAMIL_JOIN_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_JOIN_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_JOIN_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_JOIN_RESPONSE& PROBUFF_NET_FAMIL_JOIN_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_JOIN_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_JOIN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mstat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_JOIN_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_JOIN_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_JOIN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mstat = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mstat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_JOIN_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_JOIN_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_JOIN_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_JOIN_RESPONSE::MergeFrom(const PROBUFF_NET_FAMIL_JOIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _internal_set_mstat(from._internal_mstat());
  }
}

void PROBUFF_NET_FAMIL_JOIN_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_JOIN_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_JOIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_JOIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_JOIN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_JOIN_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_JOIN_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mstat_, other->mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_JOIN_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_RATIFY_JOIN::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_RATIFY_JOIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_RATIFY_JOIN>()._has_bits_);
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mratify(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_FAMIL_RATIFY_JOIN::PROBUFF_NET_FAMIL_RATIFY_JOIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
}
PROBUFF_NET_FAMIL_RATIFY_JOIN::PROBUFF_NET_FAMIL_RATIFY_JOIN(const PROBUFF_NET_FAMIL_RATIFY_JOIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mroleid_, &from.mroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mratify_) -
    reinterpret_cast<char*>(&mroleid_)) + sizeof(mratify_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN::SharedCtor() {
  ::memset(&mroleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mratify_) -
      reinterpret_cast<char*>(&mroleid_)) + sizeof(mratify_));
}

PROBUFF_NET_FAMIL_RATIFY_JOIN::~PROBUFF_NET_FAMIL_RATIFY_JOIN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_RATIFY_JOIN* _this = reinterpret_cast< PROBUFF_NET_FAMIL_RATIFY_JOIN* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_RATIFY_JOIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_RATIFY_JOIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_RATIFY_JOIN& PROBUFF_NET_FAMIL_RATIFY_JOIN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_RATIFY_JOIN_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_RATIFY_JOIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mroleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mratify_) -
        reinterpret_cast<char*>(&mroleid_)) + sizeof(mratify_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_RATIFY_JOIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mroleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mroleid(&has_bits);
          mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mratify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mratify(&has_bits);
          mratify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_RATIFY_JOIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mroleid = 1;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mroleid(), target);
  }

  // bool mratify = 2;
  if (_internal_has_mratify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mratify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  return target;
}

size_t PROBUFF_NET_FAMIL_RATIFY_JOIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 mroleid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mroleid());
    }

    // bool mratify = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_RATIFY_JOIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_RATIFY_JOIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN::MergeFrom(const PROBUFF_NET_FAMIL_RATIFY_JOIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mroleid_ = from.mroleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mratify_ = from.mratify_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN::CopyFrom(const PROBUFF_NET_FAMIL_RATIFY_JOIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_RATIFY_JOIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN::InternalSwap(PROBUFF_NET_FAMIL_RATIFY_JOIN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FAMIL_RATIFY_JOIN, mratify_)
      + sizeof(PROBUFF_NET_FAMIL_RATIFY_JOIN::mratify_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FAMIL_RATIFY_JOIN, mroleid_)>(
          reinterpret_cast<char*>(&mroleid_),
          reinterpret_cast<char*>(&other->mroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_RATIFY_JOIN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE>()._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
}
PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE(const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mstat_ = from.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::SharedCtor() {
  mstat_ = 0;
}

PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::~PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mstat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mstat = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mstat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::MergeFrom(const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _internal_set_mstat(from._internal_mstat());
  }
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mstat_, other->mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_CEDE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_CEDE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_CEDE>()._has_bits_);
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_CEDE::PROBUFF_NET_FAMIL_CEDE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_CEDE)
}
PROBUFF_NET_FAMIL_CEDE::PROBUFF_NET_FAMIL_CEDE(const PROBUFF_NET_FAMIL_CEDE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mroleid_ = from.mroleid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_CEDE)
}

void PROBUFF_NET_FAMIL_CEDE::SharedCtor() {
  mroleid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_FAMIL_CEDE::~PROBUFF_NET_FAMIL_CEDE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_CEDE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_CEDE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_CEDE::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_CEDE* _this = reinterpret_cast< PROBUFF_NET_FAMIL_CEDE* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_CEDE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_CEDE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_CEDE& PROBUFF_NET_FAMIL_CEDE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_CEDE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_CEDE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_CEDE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mroleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_CEDE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mroleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mroleid(&has_bits);
          mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_CEDE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_CEDE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mroleid = 1;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mroleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_CEDE)
  return target;
}

size_t PROBUFF_NET_FAMIL_CEDE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_CEDE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 mroleid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mroleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_CEDE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CEDE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_CEDE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_CEDE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_CEDE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_CEDE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_CEDE::MergeFrom(const PROBUFF_NET_FAMIL_CEDE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CEDE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mroleid()) {
    _internal_set_mroleid(from._internal_mroleid());
  }
}

void PROBUFF_NET_FAMIL_CEDE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CEDE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_CEDE::CopyFrom(const PROBUFF_NET_FAMIL_CEDE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CEDE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_CEDE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_CEDE::InternalSwap(PROBUFF_NET_FAMIL_CEDE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mroleid_, other->mroleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_CEDE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_CEDE_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_CEDE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_CEDE_RESPONSE>()._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_CEDE_RESPONSE::PROBUFF_NET_FAMIL_CEDE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
}
PROBUFF_NET_FAMIL_CEDE_RESPONSE::PROBUFF_NET_FAMIL_CEDE_RESPONSE(const PROBUFF_NET_FAMIL_CEDE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mstat_ = from.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
}

void PROBUFF_NET_FAMIL_CEDE_RESPONSE::SharedCtor() {
  mstat_ = 0;
}

PROBUFF_NET_FAMIL_CEDE_RESPONSE::~PROBUFF_NET_FAMIL_CEDE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_CEDE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_CEDE_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_CEDE_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FAMIL_CEDE_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_CEDE_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_CEDE_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_CEDE_RESPONSE& PROBUFF_NET_FAMIL_CEDE_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_CEDE_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_CEDE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mstat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_CEDE_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_CEDE_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_CEDE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mstat = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mstat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_CEDE_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_CEDE_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_CEDE_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_CEDE_RESPONSE::MergeFrom(const PROBUFF_NET_FAMIL_CEDE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _internal_set_mstat(from._internal_mstat());
  }
}

void PROBUFF_NET_FAMIL_CEDE_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_CEDE_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_CEDE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CEDE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_CEDE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_CEDE_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_CEDE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mstat_, other->mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_CEDE_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_LEAVE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_LEAVE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_LEAVE>()._has_bits_);
  static void set_has_mfamilid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_LEAVE::PROBUFF_NET_FAMIL_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_LEAVE)
}
PROBUFF_NET_FAMIL_LEAVE::PROBUFF_NET_FAMIL_LEAVE(const PROBUFF_NET_FAMIL_LEAVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mfamilid_ = from.mfamilid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_LEAVE)
}

void PROBUFF_NET_FAMIL_LEAVE::SharedCtor() {
  mfamilid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_FAMIL_LEAVE::~PROBUFF_NET_FAMIL_LEAVE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_LEAVE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_LEAVE::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_LEAVE* _this = reinterpret_cast< PROBUFF_NET_FAMIL_LEAVE* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_LEAVE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_LEAVE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_LEAVE& PROBUFF_NET_FAMIL_LEAVE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_LEAVE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_LEAVE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mfamilid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_LEAVE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mfamilid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mfamilid(&has_bits);
          mfamilid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_LEAVE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mfamilid = 1;
  if (_internal_has_mfamilid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfamilid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  return target;
}

size_t PROBUFF_NET_FAMIL_LEAVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 mfamilid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mfamilid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_LEAVE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_LEAVE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_LEAVE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_LEAVE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_LEAVE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_LEAVE::MergeFrom(const PROBUFF_NET_FAMIL_LEAVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mfamilid()) {
    _internal_set_mfamilid(from._internal_mfamilid());
  }
}

void PROBUFF_NET_FAMIL_LEAVE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_LEAVE::CopyFrom(const PROBUFF_NET_FAMIL_LEAVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LEAVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_LEAVE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_LEAVE::InternalSwap(PROBUFF_NET_FAMIL_LEAVE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mfamilid_, other->mfamilid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_LEAVE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_LEAVE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_LEAVE_RESPONSE>()._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_LEAVE_RESPONSE::PROBUFF_NET_FAMIL_LEAVE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
}
PROBUFF_NET_FAMIL_LEAVE_RESPONSE::PROBUFF_NET_FAMIL_LEAVE_RESPONSE(const PROBUFF_NET_FAMIL_LEAVE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mstat_ = from.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
}

void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::SharedCtor() {
  mstat_ = 0;
}

PROBUFF_NET_FAMIL_LEAVE_RESPONSE::~PROBUFF_NET_FAMIL_LEAVE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_LEAVE_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FAMIL_LEAVE_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_LEAVE_RESPONSE& PROBUFF_NET_FAMIL_LEAVE_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_LEAVE_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mstat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_LEAVE_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_LEAVE_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_LEAVE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mstat = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mstat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_LEAVE_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_LEAVE_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::MergeFrom(const PROBUFF_NET_FAMIL_LEAVE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _internal_set_mstat(from._internal_mstat());
  }
}

void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_LEAVE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LEAVE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_LEAVE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_LEAVE_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_LEAVE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mstat_, other->mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_LEAVE_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_LIST::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_LIST::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_LIST>()._has_bits_);
  static void set_has_mfamilid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_LIST::PROBUFF_NET_FAMIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_LIST)
}
PROBUFF_NET_FAMIL_LIST::PROBUFF_NET_FAMIL_LIST(const PROBUFF_NET_FAMIL_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mfamilid_ = from.mfamilid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_LIST)
}

void PROBUFF_NET_FAMIL_LIST::SharedCtor() {
  mfamilid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_FAMIL_LIST::~PROBUFF_NET_FAMIL_LIST() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_LIST)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_LIST::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_LIST::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_LIST* _this = reinterpret_cast< PROBUFF_NET_FAMIL_LIST* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_LIST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_LIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_LIST& PROBUFF_NET_FAMIL_LIST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_LIST_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mfamilid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_LIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mfamilid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mfamilid(&has_bits);
          mfamilid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_LIST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mfamilid = 1;
  if (_internal_has_mfamilid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfamilid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_LIST)
  return target;
}

size_t PROBUFF_NET_FAMIL_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 mfamilid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mfamilid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_LIST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_LIST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_LIST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_LIST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_LIST)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_LIST::MergeFrom(const PROBUFF_NET_FAMIL_LIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mfamilid()) {
    _internal_set_mfamilid(from._internal_mfamilid());
  }
}

void PROBUFF_NET_FAMIL_LIST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_LIST::CopyFrom(const PROBUFF_NET_FAMIL_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_LIST::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_LIST::InternalSwap(PROBUFF_NET_FAMIL_LIST* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mfamilid_, other->mfamilid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_LIST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_LIST_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_LIST_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_LIST_RESPONSE>()._has_bits_);
  static void set_has_mfamilid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void PROBUFF_NET_FAMIL_LIST_RESPONSE::clear_mfamily() {
  mfamily_.Clear();
}
PROBUFF_NET_FAMIL_LIST_RESPONSE::PROBUFF_NET_FAMIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mfamily_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
}
PROBUFF_NET_FAMIL_LIST_RESPONSE::PROBUFF_NET_FAMIL_LIST_RESPONSE(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mfamily_(from.mfamily_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mfamilid_ = from.mfamilid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_FAMIL_LIST_RESPONSE_net_2eproto.base);
  mfamilid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_FAMIL_LIST_RESPONSE::~PROBUFF_NET_FAMIL_LIST_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_LIST_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FAMIL_LIST_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_LIST_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_LIST_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_LIST_RESPONSE& PROBUFF_NET_FAMIL_LIST_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_LIST_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_LIST_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mfamily_.Clear();
  mfamilid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_LIST_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mfamilid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mfamilid(&has_bits);
          mfamilid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbdb.db_family mfamily = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mfamily(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_LIST_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mfamilid = 1;
  if (_internal_has_mfamilid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfamilid(), target);
  }

  // repeated .pbdb.db_family mfamily = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mfamily_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mfamily(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_LIST_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_family mfamily = 2;
  total_size += 1UL * this->_internal_mfamily_size();
  for (const auto& msg : this->mfamily_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 mfamilid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mfamilid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_LIST_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_LIST_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::MergeFrom(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mfamily_.MergeFrom(from.mfamily_);
  if (from._internal_has_mfamilid()) {
    _internal_set_mfamilid(from._internal_mfamilid());
  }
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_LIST_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_LIST_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mfamily_.InternalSwap(&other->mfamily_);
  swap(mfamilid_, other->mfamilid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_LIST_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_CHANGENAME::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_CHANGENAME::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_CHANGENAME>()._has_bits_);
  static void set_has_mfamilid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_CHANGENAME::PROBUFF_NET_FAMIL_CHANGENAME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
}
PROBUFF_NET_FAMIL_CHANGENAME::PROBUFF_NET_FAMIL_CHANGENAME(const PROBUFF_NET_FAMIL_CHANGENAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mname()) {
    mname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mname(),
      GetArena());
  }
  mfamilid_ = from.mfamilid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
}

void PROBUFF_NET_FAMIL_CHANGENAME::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_FAMIL_CHANGENAME_net_2eproto.base);
  mname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mfamilid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_FAMIL_CHANGENAME::~PROBUFF_NET_FAMIL_CHANGENAME() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_CHANGENAME::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_FAMIL_CHANGENAME::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_CHANGENAME* _this = reinterpret_cast< PROBUFF_NET_FAMIL_CHANGENAME* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_CHANGENAME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_CHANGENAME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_CHANGENAME& PROBUFF_NET_FAMIL_CHANGENAME::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_CHANGENAME_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_CHANGENAME::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mname_.ClearNonDefaultToEmpty();
  }
  mfamilid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_CHANGENAME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mfamilid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mfamilid(&has_bits);
          mfamilid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_CHANGENAME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mfamilid = 1;
  if (_internal_has_mfamilid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfamilid(), target);
  }

  // string mname = 2;
  if (_internal_has_mname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mname().data(), static_cast<int>(this->_internal_mname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_FAMIL_CHANGENAME.mname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  return target;
}

size_t PROBUFF_NET_FAMIL_CHANGENAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string mname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mname());
    }

    // int64 mfamilid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mfamilid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_CHANGENAME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_CHANGENAME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_CHANGENAME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_CHANGENAME::MergeFrom(const PROBUFF_NET_FAMIL_CHANGENAME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mname(from._internal_mname());
    }
    if (cached_has_bits & 0x00000002u) {
      mfamilid_ = from.mfamilid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_FAMIL_CHANGENAME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_CHANGENAME::CopyFrom(const PROBUFF_NET_FAMIL_CHANGENAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_CHANGENAME::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_CHANGENAME::InternalSwap(PROBUFF_NET_FAMIL_CHANGENAME* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mname_.Swap(&other->mname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mfamilid_, other->mfamilid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_CHANGENAME::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE>()._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
}
PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE(const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mstat_ = from.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
}

void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::SharedCtor() {
  mstat_ = 0;
}

PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::~PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mstat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mstat = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mstat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::MergeFrom(const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _internal_set_mstat(from._internal_mstat());
  }
}

void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mstat_, other->mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_SIGN::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_SIGN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_SIGN>()._has_bits_);
  static void set_has_mfamilid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_SIGN::PROBUFF_NET_FAMIL_SIGN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_SIGN)
}
PROBUFF_NET_FAMIL_SIGN::PROBUFF_NET_FAMIL_SIGN(const PROBUFF_NET_FAMIL_SIGN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mfamilid_ = from.mfamilid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_SIGN)
}

void PROBUFF_NET_FAMIL_SIGN::SharedCtor() {
  mfamilid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_FAMIL_SIGN::~PROBUFF_NET_FAMIL_SIGN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_SIGN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_SIGN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_SIGN::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_SIGN* _this = reinterpret_cast< PROBUFF_NET_FAMIL_SIGN* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_SIGN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_SIGN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_SIGN& PROBUFF_NET_FAMIL_SIGN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_SIGN_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_SIGN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_SIGN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mfamilid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_SIGN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mfamilid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mfamilid(&has_bits);
          mfamilid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_SIGN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_SIGN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mfamilid = 1;
  if (_internal_has_mfamilid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfamilid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_SIGN)
  return target;
}

size_t PROBUFF_NET_FAMIL_SIGN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_SIGN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 mfamilid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mfamilid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_SIGN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_SIGN)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_SIGN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_SIGN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_SIGN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_SIGN)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_SIGN::MergeFrom(const PROBUFF_NET_FAMIL_SIGN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_SIGN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mfamilid()) {
    _internal_set_mfamilid(from._internal_mfamilid());
  }
}

void PROBUFF_NET_FAMIL_SIGN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_SIGN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_SIGN::CopyFrom(const PROBUFF_NET_FAMIL_SIGN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_SIGN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_SIGN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_SIGN::InternalSwap(PROBUFF_NET_FAMIL_SIGN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mfamilid_, other->mfamilid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_SIGN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_SIGN_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_SIGN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_SIGN_RESPONSE>()._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_SIGN_RESPONSE::PROBUFF_NET_FAMIL_SIGN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
}
PROBUFF_NET_FAMIL_SIGN_RESPONSE::PROBUFF_NET_FAMIL_SIGN_RESPONSE(const PROBUFF_NET_FAMIL_SIGN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mstat_ = from.mstat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
}

void PROBUFF_NET_FAMIL_SIGN_RESPONSE::SharedCtor() {
  mstat_ = 0;
}

PROBUFF_NET_FAMIL_SIGN_RESPONSE::~PROBUFF_NET_FAMIL_SIGN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_SIGN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_SIGN_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_SIGN_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FAMIL_SIGN_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_SIGN_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_SIGN_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_SIGN_RESPONSE& PROBUFF_NET_FAMIL_SIGN_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_SIGN_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_SIGN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mstat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_SIGN_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_SIGN_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_SIGN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mstat = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mstat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_SIGN_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_SIGN_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_SIGN_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_SIGN_RESPONSE::MergeFrom(const PROBUFF_NET_FAMIL_SIGN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mstat()) {
    _internal_set_mstat(from._internal_mstat());
  }
}

void PROBUFF_NET_FAMIL_SIGN_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_SIGN_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_SIGN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_SIGN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_SIGN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_SIGN_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_SIGN_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mstat_, other->mstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_SIGN_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse() {}
PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::MergeFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PROBUFF_NET_REWARD_ITEM_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_REWARD_ITEM_RESPONSE::_Internal {
 public:
};

PROBUFF_NET_REWARD_ITEM_RESPONSE::PROBUFF_NET_REWARD_ITEM_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mitems_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
}
PROBUFF_NET_REWARD_ITEM_RESPONSE::PROBUFF_NET_REWARD_ITEM_RESPONSE(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mitems_.MergeFrom(from.mitems_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_net_2eproto.base);
}

PROBUFF_NET_REWARD_ITEM_RESPONSE::~PROBUFF_NET_REWARD_ITEM_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_REWARD_ITEM_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_REWARD_ITEM_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_REWARD_ITEM_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_REWARD_ITEM_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_REWARD_ITEM_RESPONSE& PROBUFF_NET_REWARD_ITEM_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_REWARD_ITEM_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mitems_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_REWARD_ITEM_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, int32> mitems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mitems_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_REWARD_ITEM_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> mitems = 1;
  if (!this->_internal_mitems().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mitems().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mitems().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_mitems().begin();
          it != this->_internal_mitems().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_mitems().begin();
          it != this->_internal_mitems().end(); ++it) {
        target = PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  return target;
}

size_t PROBUFF_NET_REWARD_ITEM_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> mitems = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mitems_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_mitems().begin();
      it != this->_internal_mitems().end(); ++it) {
    total_size += PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_REWARD_ITEM_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_REWARD_ITEM_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::MergeFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mitems_.MergeFrom(from.mitems_);
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::CopyFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_REWARD_ITEM_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::InternalSwap(PROBUFF_NET_REWARD_ITEM_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mitems_.Swap(&other->mitems_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_REWARD_ITEM_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_RANKLIST::InitAsDefaultInstance() {
}
class PROBUFF_NET_RANKLIST::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RANKLIST>()._has_bits_);
  static void set_has_miscross(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mactivityid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mpage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PROBUFF_NET_RANKLIST::PROBUFF_NET_RANKLIST(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RANKLIST)
}
PROBUFF_NET_RANKLIST::PROBUFF_NET_RANKLIST(const PROBUFF_NET_RANKLIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&miscross_, &from.miscross_,
    static_cast<size_t>(reinterpret_cast<char*>(&mpage_) -
    reinterpret_cast<char*>(&miscross_)) + sizeof(mpage_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RANKLIST)
}

void PROBUFF_NET_RANKLIST::SharedCtor() {
  ::memset(&miscross_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mpage_) -
      reinterpret_cast<char*>(&miscross_)) + sizeof(mpage_));
}

PROBUFF_NET_RANKLIST::~PROBUFF_NET_RANKLIST() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RANKLIST)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_RANKLIST::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_RANKLIST::ArenaDtor(void* object) {
  PROBUFF_NET_RANKLIST* _this = reinterpret_cast< PROBUFF_NET_RANKLIST* >(object);
  (void)_this;
}
void PROBUFF_NET_RANKLIST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_RANKLIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_RANKLIST& PROBUFF_NET_RANKLIST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_RANKLIST_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_RANKLIST::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RANKLIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&miscross_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mpage_) -
        reinterpret_cast<char*>(&miscross_)) + sizeof(mpage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RANKLIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool miscross = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_miscross(&has_bits);
          miscross_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbdb.eranklist mtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mtype(static_cast<::pbdb::eranklist>(val));
        } else goto handle_unusual;
        continue;
      // int32 mactivityid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mactivityid(&has_bits);
          mactivityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mpage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mpage(&has_bits);
          mpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_RANKLIST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RANKLIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool miscross = 1;
  if (_internal_has_miscross()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_miscross(), target);
  }

  // .pbdb.eranklist mtype = 2;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mtype(), target);
  }

  // int32 mactivityid = 3;
  if (_internal_has_mactivityid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mactivityid(), target);
  }

  // int32 mpage = 4;
  if (_internal_has_mpage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mpage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RANKLIST)
  return target;
}

size_t PROBUFF_NET_RANKLIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RANKLIST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // bool miscross = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // .pbdb.eranklist mtype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mtype());
    }

    // int32 mactivityid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mactivityid());
    }

    // int32 mpage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mpage());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_RANKLIST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_RANKLIST)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_RANKLIST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_RANKLIST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_RANKLIST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_RANKLIST)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_RANKLIST::MergeFrom(const PROBUFF_NET_RANKLIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RANKLIST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      miscross_ = from.miscross_;
    }
    if (cached_has_bits & 0x00000002u) {
      mtype_ = from.mtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      mactivityid_ = from.mactivityid_;
    }
    if (cached_has_bits & 0x00000008u) {
      mpage_ = from.mpage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_RANKLIST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_RANKLIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_RANKLIST::CopyFrom(const PROBUFF_NET_RANKLIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RANKLIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RANKLIST::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RANKLIST::InternalSwap(PROBUFF_NET_RANKLIST* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RANKLIST, mpage_)
      + sizeof(PROBUFF_NET_RANKLIST::mpage_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RANKLIST, miscross_)>(
          reinterpret_cast<char*>(&miscross_),
          reinterpret_cast<char*>(&other->miscross_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RANKLIST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_RANKLIST_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_RANKLIST_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RANKLIST_RESPONSE>()._has_bits_);
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mpage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mrolerank(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void PROBUFF_NET_RANKLIST_RESPONSE::clear_mitems() {
  mitems_.Clear();
}
PROBUFF_NET_RANKLIST_RESPONSE::PROBUFF_NET_RANKLIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mitems_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
}
PROBUFF_NET_RANKLIST_RESPONSE::PROBUFF_NET_RANKLIST_RESPONSE(const PROBUFF_NET_RANKLIST_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mitems_(from.mitems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mtype_, &from.mtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&mrolerank_) -
    reinterpret_cast<char*>(&mtype_)) + sizeof(mrolerank_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
}

void PROBUFF_NET_RANKLIST_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_RANKLIST_RESPONSE_net_2eproto.base);
  ::memset(&mtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mrolerank_) -
      reinterpret_cast<char*>(&mtype_)) + sizeof(mrolerank_));
}

PROBUFF_NET_RANKLIST_RESPONSE::~PROBUFF_NET_RANKLIST_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_RANKLIST_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_RANKLIST_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_RANKLIST_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_RANKLIST_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_RANKLIST_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_RANKLIST_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_RANKLIST_RESPONSE& PROBUFF_NET_RANKLIST_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_RANKLIST_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_RANKLIST_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mitems_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&mtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mrolerank_) -
        reinterpret_cast<char*>(&mtype_)) + sizeof(mrolerank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RANKLIST_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbdb.eranklist mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mtype(static_cast<::pbdb::eranklist>(val));
        } else goto handle_unusual;
        continue;
      // repeated .pbdb.db_brief mitems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 mpage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mpage(&has_bits);
          mpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mcount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mcount(&has_bits);
          mcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mrolerank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mrolerank(&has_bits);
          mrolerank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_RANKLIST_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbdb.eranklist mtype = 1;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mtype(), target);
  }

  // repeated .pbdb.db_brief mitems = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mitems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mitems(i), target, stream);
  }

  // int32 mpage = 3;
  if (_internal_has_mpage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mpage(), target);
  }

  // int32 mcount = 4;
  if (_internal_has_mcount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mcount(), target);
  }

  // int32 mrolerank = 5;
  if (_internal_has_mrolerank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mrolerank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  return target;
}

size_t PROBUFF_NET_RANKLIST_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_brief mitems = 2;
  total_size += 1UL * this->_internal_mitems_size();
  for (const auto& msg : this->mitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .pbdb.eranklist mtype = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mtype());
    }

    // int32 mpage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mpage());
    }

    // int32 mcount = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mcount());
    }

    // int32 mrolerank = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mrolerank());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_RANKLIST_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_RANKLIST_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_RANKLIST_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_RANKLIST_RESPONSE::MergeFrom(const PROBUFF_NET_RANKLIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mitems_.MergeFrom(from.mitems_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mtype_ = from.mtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      mpage_ = from.mpage_;
    }
    if (cached_has_bits & 0x00000004u) {
      mcount_ = from.mcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      mrolerank_ = from.mrolerank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_RANKLIST_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_RANKLIST_RESPONSE::CopyFrom(const PROBUFF_NET_RANKLIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RANKLIST_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RANKLIST_RESPONSE::InternalSwap(PROBUFF_NET_RANKLIST_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mitems_.InternalSwap(&other->mitems_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RANKLIST_RESPONSE, mrolerank_)
      + sizeof(PROBUFF_NET_RANKLIST_RESPONSE::mrolerank_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RANKLIST_RESPONSE, mtype_)>(
          reinterpret_cast<char*>(&mtype_),
          reinterpret_cast<char*>(&other->mtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RANKLIST_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FRIEND::InitAsDefaultInstance() {
}
class PROBUFF_NET_FRIEND::_Internal {
 public:
};

PROBUFF_NET_FRIEND::PROBUFF_NET_FRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND)
}
PROBUFF_NET_FRIEND::PROBUFF_NET_FRIEND(const PROBUFF_NET_FRIEND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND)
}

void PROBUFF_NET_FRIEND::SharedCtor() {
}

PROBUFF_NET_FRIEND::~PROBUFF_NET_FRIEND() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FRIEND::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FRIEND::ArenaDtor(void* object) {
  PROBUFF_NET_FRIEND* _this = reinterpret_cast< PROBUFF_NET_FRIEND* >(object);
  (void)_this;
}
void PROBUFF_NET_FRIEND::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FRIEND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FRIEND& PROBUFF_NET_FRIEND::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FRIEND_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FRIEND::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FRIEND::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND)
  return target;
}

size_t PROBUFF_NET_FRIEND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FRIEND::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FRIEND)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FRIEND* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FRIEND>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FRIEND)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FRIEND)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FRIEND::MergeFrom(const PROBUFF_NET_FRIEND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_FRIEND::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FRIEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FRIEND::CopyFrom(const PROBUFF_NET_FRIEND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND::InternalSwap(PROBUFF_NET_FRIEND* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FRIEND_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FRIEND_RESPONSE::_Internal {
 public:
};

void PROBUFF_NET_FRIEND_RESPONSE::clear_mfriends() {
  mfriends_.Clear();
}
void PROBUFF_NET_FRIEND_RESPONSE::clear_mapplyfriends() {
  mapplyfriends_.Clear();
}
PROBUFF_NET_FRIEND_RESPONSE::PROBUFF_NET_FRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mfriends_(arena),
  mapplyfriends_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
}
PROBUFF_NET_FRIEND_RESPONSE::PROBUFF_NET_FRIEND_RESPONSE(const PROBUFF_NET_FRIEND_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mfriends_(from.mfriends_),
      mapplyfriends_(from.mapplyfriends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
}

void PROBUFF_NET_FRIEND_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_FRIEND_RESPONSE_net_2eproto.base);
}

PROBUFF_NET_FRIEND_RESPONSE::~PROBUFF_NET_FRIEND_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FRIEND_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FRIEND_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FRIEND_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FRIEND_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FRIEND_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FRIEND_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FRIEND_RESPONSE& PROBUFF_NET_FRIEND_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FRIEND_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FRIEND_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mfriends_.Clear();
  mapplyfriends_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pbdb.db_brief mfriends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mfriends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pbdb.db_brief mapplyfriends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mapplyfriends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FRIEND_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbdb.db_brief mfriends = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mfriends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mfriends(i), target, stream);
  }

  // repeated .pbdb.db_brief mapplyfriends = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mapplyfriends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mapplyfriends(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FRIEND_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_brief mfriends = 1;
  total_size += 1UL * this->_internal_mfriends_size();
  for (const auto& msg : this->mfriends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pbdb.db_brief mapplyfriends = 2;
  total_size += 1UL * this->_internal_mapplyfriends_size();
  for (const auto& msg : this->mapplyfriends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FRIEND_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FRIEND_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FRIEND_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FRIEND_RESPONSE::MergeFrom(const PROBUFF_NET_FRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mfriends_.MergeFrom(from.mfriends_);
  mapplyfriends_.MergeFrom(from.mapplyfriends_);
}

void PROBUFF_NET_FRIEND_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FRIEND_RESPONSE::CopyFrom(const PROBUFF_NET_FRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_RESPONSE::InternalSwap(PROBUFF_NET_FRIEND_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mfriends_.InternalSwap(&other->mfriends_);
  mapplyfriends_.InternalSwap(&other->mapplyfriends_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FRIEND_ADD::InitAsDefaultInstance() {
}
class PROBUFF_NET_FRIEND_ADD::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FRIEND_ADD>()._has_bits_);
  static void set_has_mfriedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FRIEND_ADD::PROBUFF_NET_FRIEND_ADD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_ADD)
}
PROBUFF_NET_FRIEND_ADD::PROBUFF_NET_FRIEND_ADD(const PROBUFF_NET_FRIEND_ADD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mfriedid_ = from.mfriedid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_ADD)
}

void PROBUFF_NET_FRIEND_ADD::SharedCtor() {
  mfriedid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_FRIEND_ADD::~PROBUFF_NET_FRIEND_ADD() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_ADD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FRIEND_ADD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FRIEND_ADD::ArenaDtor(void* object) {
  PROBUFF_NET_FRIEND_ADD* _this = reinterpret_cast< PROBUFF_NET_FRIEND_ADD* >(object);
  (void)_this;
}
void PROBUFF_NET_FRIEND_ADD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FRIEND_ADD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FRIEND_ADD& PROBUFF_NET_FRIEND_ADD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FRIEND_ADD_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FRIEND_ADD::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_ADD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mfriedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_ADD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mfriedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mfriedid(&has_bits);
          mfriedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FRIEND_ADD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_ADD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mfriedid = 1;
  if (_internal_has_mfriedid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfriedid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_ADD)
  return target;
}

size_t PROBUFF_NET_FRIEND_ADD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_ADD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 mfriedid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mfriedid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FRIEND_ADD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FRIEND_ADD)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FRIEND_ADD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FRIEND_ADD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FRIEND_ADD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FRIEND_ADD)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FRIEND_ADD::MergeFrom(const PROBUFF_NET_FRIEND_ADD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_ADD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mfriedid()) {
    _internal_set_mfriedid(from._internal_mfriedid());
  }
}

void PROBUFF_NET_FRIEND_ADD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FRIEND_ADD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FRIEND_ADD::CopyFrom(const PROBUFF_NET_FRIEND_ADD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_ADD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_ADD::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_ADD::InternalSwap(PROBUFF_NET_FRIEND_ADD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mfriedid_, other->mfriedid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_ADD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FRIEND_ADD_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FRIEND_ADD_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FRIEND_ADD_RESPONSE>()._has_bits_);
  static void set_has_mfriedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_FRIEND_ADD_RESPONSE::PROBUFF_NET_FRIEND_ADD_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
}
PROBUFF_NET_FRIEND_ADD_RESPONSE::PROBUFF_NET_FRIEND_ADD_RESPONSE(const PROBUFF_NET_FRIEND_ADD_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mfriedid_, &from.mfriedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstat_) -
    reinterpret_cast<char*>(&mfriedid_)) + sizeof(mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
}

void PROBUFF_NET_FRIEND_ADD_RESPONSE::SharedCtor() {
  ::memset(&mfriedid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstat_) -
      reinterpret_cast<char*>(&mfriedid_)) + sizeof(mstat_));
}

PROBUFF_NET_FRIEND_ADD_RESPONSE::~PROBUFF_NET_FRIEND_ADD_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FRIEND_ADD_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FRIEND_ADD_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FRIEND_ADD_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FRIEND_ADD_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FRIEND_ADD_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FRIEND_ADD_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FRIEND_ADD_RESPONSE& PROBUFF_NET_FRIEND_ADD_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FRIEND_ADD_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FRIEND_ADD_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mfriedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstat_) -
        reinterpret_cast<char*>(&mfriedid_)) + sizeof(mstat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_ADD_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mfriedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mfriedid(&has_bits);
          mfriedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FRIEND_ADD_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mfriedid = 1;
  if (_internal_has_mfriedid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfriedid(), target);
  }

  // int32 mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FRIEND_ADD_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 mfriedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mfriedid());
    }

    // int32 mstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mstat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FRIEND_ADD_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FRIEND_ADD_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FRIEND_ADD_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FRIEND_ADD_RESPONSE::MergeFrom(const PROBUFF_NET_FRIEND_ADD_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mfriedid_ = from.mfriedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mstat_ = from.mstat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_FRIEND_ADD_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FRIEND_ADD_RESPONSE::CopyFrom(const PROBUFF_NET_FRIEND_ADD_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_ADD_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_ADD_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_ADD_RESPONSE::InternalSwap(PROBUFF_NET_FRIEND_ADD_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_ADD_RESPONSE, mstat_)
      + sizeof(PROBUFF_NET_FRIEND_ADD_RESPONSE::mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_ADD_RESPONSE, mfriedid_)>(
          reinterpret_cast<char*>(&mfriedid_),
          reinterpret_cast<char*>(&other->mfriedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_ADD_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FRIEND_RATIFY_ADD::InitAsDefaultInstance() {
}
class PROBUFF_NET_FRIEND_RATIFY_ADD::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FRIEND_RATIFY_ADD>()._has_bits_);
  static void set_has_mfriedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mratify(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_FRIEND_RATIFY_ADD::PROBUFF_NET_FRIEND_RATIFY_ADD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
}
PROBUFF_NET_FRIEND_RATIFY_ADD::PROBUFF_NET_FRIEND_RATIFY_ADD(const PROBUFF_NET_FRIEND_RATIFY_ADD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mfriedid_, &from.mfriedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mratify_) -
    reinterpret_cast<char*>(&mfriedid_)) + sizeof(mratify_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
}

void PROBUFF_NET_FRIEND_RATIFY_ADD::SharedCtor() {
  ::memset(&mfriedid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mratify_) -
      reinterpret_cast<char*>(&mfriedid_)) + sizeof(mratify_));
}

PROBUFF_NET_FRIEND_RATIFY_ADD::~PROBUFF_NET_FRIEND_RATIFY_ADD() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FRIEND_RATIFY_ADD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FRIEND_RATIFY_ADD::ArenaDtor(void* object) {
  PROBUFF_NET_FRIEND_RATIFY_ADD* _this = reinterpret_cast< PROBUFF_NET_FRIEND_RATIFY_ADD* >(object);
  (void)_this;
}
void PROBUFF_NET_FRIEND_RATIFY_ADD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FRIEND_RATIFY_ADD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FRIEND_RATIFY_ADD& PROBUFF_NET_FRIEND_RATIFY_ADD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FRIEND_RATIFY_ADD_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FRIEND_RATIFY_ADD::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mfriedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mratify_) -
        reinterpret_cast<char*>(&mfriedid_)) + sizeof(mratify_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_RATIFY_ADD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mfriedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mfriedid(&has_bits);
          mfriedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mratify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mratify(&has_bits);
          mratify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FRIEND_RATIFY_ADD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mfriedid = 1;
  if (_internal_has_mfriedid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfriedid(), target);
  }

  // bool mratify = 2;
  if (_internal_has_mratify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mratify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  return target;
}

size_t PROBUFF_NET_FRIEND_RATIFY_ADD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 mfriedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mfriedid());
    }

    // bool mratify = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FRIEND_RATIFY_ADD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FRIEND_RATIFY_ADD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FRIEND_RATIFY_ADD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FRIEND_RATIFY_ADD::MergeFrom(const PROBUFF_NET_FRIEND_RATIFY_ADD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mfriedid_ = from.mfriedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mratify_ = from.mratify_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_FRIEND_RATIFY_ADD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FRIEND_RATIFY_ADD::CopyFrom(const PROBUFF_NET_FRIEND_RATIFY_ADD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_RATIFY_ADD::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_RATIFY_ADD::InternalSwap(PROBUFF_NET_FRIEND_RATIFY_ADD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_RATIFY_ADD, mratify_)
      + sizeof(PROBUFF_NET_FRIEND_RATIFY_ADD::mratify_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_RATIFY_ADD, mfriedid_)>(
          reinterpret_cast<char*>(&mfriedid_),
          reinterpret_cast<char*>(&other->mfriedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_RATIFY_ADD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE>()._has_bits_);
  static void set_has_mfriedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mratify(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
}
PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE(const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mfriedid_, &from.mfriedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstat_) -
    reinterpret_cast<char*>(&mfriedid_)) + sizeof(mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
}

void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::SharedCtor() {
  ::memset(&mfriedid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstat_) -
      reinterpret_cast<char*>(&mfriedid_)) + sizeof(mstat_));
}

PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::~PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mfriedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstat_) -
        reinterpret_cast<char*>(&mfriedid_)) + sizeof(mstat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mfriedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mfriedid(&has_bits);
          mfriedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mratify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mratify(&has_bits);
          mratify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mstat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mfriedid = 1;
  if (_internal_has_mfriedid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfriedid(), target);
  }

  // bool mratify = 2;
  if (_internal_has_mratify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mratify(), target);
  }

  // int32 mstat = 3;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // int64 mfriedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mfriedid());
    }

    // bool mratify = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // int32 mstat = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mstat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::MergeFrom(const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mfriedid_ = from.mfriedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mratify_ = from.mratify_;
    }
    if (cached_has_bits & 0x00000004u) {
      mstat_ = from.mstat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::CopyFrom(const PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::InternalSwap(PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE, mstat_)
      + sizeof(PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE, mfriedid_)>(
          reinterpret_cast<char*>(&mfriedid_),
          reinterpret_cast<char*>(&other->mfriedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FRIEND_ERASE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FRIEND_ERASE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FRIEND_ERASE>()._has_bits_);
  static void set_has_mfriedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FRIEND_ERASE::PROBUFF_NET_FRIEND_ERASE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_ERASE)
}
PROBUFF_NET_FRIEND_ERASE::PROBUFF_NET_FRIEND_ERASE(const PROBUFF_NET_FRIEND_ERASE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mfriedid_ = from.mfriedid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_ERASE)
}

void PROBUFF_NET_FRIEND_ERASE::SharedCtor() {
  mfriedid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_FRIEND_ERASE::~PROBUFF_NET_FRIEND_ERASE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_ERASE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FRIEND_ERASE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FRIEND_ERASE::ArenaDtor(void* object) {
  PROBUFF_NET_FRIEND_ERASE* _this = reinterpret_cast< PROBUFF_NET_FRIEND_ERASE* >(object);
  (void)_this;
}
void PROBUFF_NET_FRIEND_ERASE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FRIEND_ERASE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FRIEND_ERASE& PROBUFF_NET_FRIEND_ERASE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FRIEND_ERASE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FRIEND_ERASE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_ERASE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mfriedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_ERASE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mfriedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mfriedid(&has_bits);
          mfriedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FRIEND_ERASE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_ERASE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mfriedid = 1;
  if (_internal_has_mfriedid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfriedid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_ERASE)
  return target;
}

size_t PROBUFF_NET_FRIEND_ERASE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_ERASE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 mfriedid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mfriedid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FRIEND_ERASE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FRIEND_ERASE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FRIEND_ERASE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FRIEND_ERASE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FRIEND_ERASE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FRIEND_ERASE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FRIEND_ERASE::MergeFrom(const PROBUFF_NET_FRIEND_ERASE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_ERASE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mfriedid()) {
    _internal_set_mfriedid(from._internal_mfriedid());
  }
}

void PROBUFF_NET_FRIEND_ERASE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FRIEND_ERASE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FRIEND_ERASE::CopyFrom(const PROBUFF_NET_FRIEND_ERASE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_ERASE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_ERASE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_ERASE::InternalSwap(PROBUFF_NET_FRIEND_ERASE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mfriedid_, other->mfriedid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_ERASE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FRIEND_ERASE_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FRIEND_ERASE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FRIEND_ERASE_RESPONSE>()._has_bits_);
  static void set_has_mfriedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_FRIEND_ERASE_RESPONSE::PROBUFF_NET_FRIEND_ERASE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
}
PROBUFF_NET_FRIEND_ERASE_RESPONSE::PROBUFF_NET_FRIEND_ERASE_RESPONSE(const PROBUFF_NET_FRIEND_ERASE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mfriedid_, &from.mfriedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstat_) -
    reinterpret_cast<char*>(&mfriedid_)) + sizeof(mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
}

void PROBUFF_NET_FRIEND_ERASE_RESPONSE::SharedCtor() {
  ::memset(&mfriedid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstat_) -
      reinterpret_cast<char*>(&mfriedid_)) + sizeof(mstat_));
}

PROBUFF_NET_FRIEND_ERASE_RESPONSE::~PROBUFF_NET_FRIEND_ERASE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FRIEND_ERASE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FRIEND_ERASE_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FRIEND_ERASE_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FRIEND_ERASE_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FRIEND_ERASE_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FRIEND_ERASE_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FRIEND_ERASE_RESPONSE& PROBUFF_NET_FRIEND_ERASE_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FRIEND_ERASE_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FRIEND_ERASE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mfriedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstat_) -
        reinterpret_cast<char*>(&mfriedid_)) + sizeof(mstat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_ERASE_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mfriedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mfriedid(&has_bits);
          mfriedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mstat(&has_bits);
          mstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FRIEND_ERASE_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mfriedid = 1;
  if (_internal_has_mfriedid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mfriedid(), target);
  }

  // int32 mstat = 2;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FRIEND_ERASE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 mfriedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mfriedid());
    }

    // int32 mstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mstat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FRIEND_ERASE_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FRIEND_ERASE_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FRIEND_ERASE_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FRIEND_ERASE_RESPONSE::MergeFrom(const PROBUFF_NET_FRIEND_ERASE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mfriedid_ = from.mfriedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mstat_ = from.mstat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_FRIEND_ERASE_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FRIEND_ERASE_RESPONSE::CopyFrom(const PROBUFF_NET_FRIEND_ERASE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_ERASE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_ERASE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_ERASE_RESPONSE::InternalSwap(PROBUFF_NET_FRIEND_ERASE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_ERASE_RESPONSE, mstat_)
      + sizeof(PROBUFF_NET_FRIEND_ERASE_RESPONSE::mstat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_FRIEND_ERASE_RESPONSE, mfriedid_)>(
          reinterpret_cast<char*>(&mfriedid_),
          reinterpret_cast<char*>(&other->mfriedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_ERASE_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ROLESTAT::InitAsDefaultInstance() {
}
class PROBUFF_NET_ROLESTAT::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ROLESTAT>()._has_bits_);
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mlogicstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_ROLESTAT::PROBUFF_NET_ROLESTAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLESTAT)
}
PROBUFF_NET_ROLESTAT::PROBUFF_NET_ROLESTAT(const PROBUFF_NET_ROLESTAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mstat_, &from.mstat_,
    static_cast<size_t>(reinterpret_cast<char*>(&mroleid_) -
    reinterpret_cast<char*>(&mstat_)) + sizeof(mroleid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLESTAT)
}

void PROBUFF_NET_ROLESTAT::SharedCtor() {
  ::memset(&mstat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mroleid_) -
      reinterpret_cast<char*>(&mstat_)) + sizeof(mroleid_));
}

PROBUFF_NET_ROLESTAT::~PROBUFF_NET_ROLESTAT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLESTAT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ROLESTAT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_ROLESTAT::ArenaDtor(void* object) {
  PROBUFF_NET_ROLESTAT* _this = reinterpret_cast< PROBUFF_NET_ROLESTAT* >(object);
  (void)_this;
}
void PROBUFF_NET_ROLESTAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ROLESTAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ROLESTAT& PROBUFF_NET_ROLESTAT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ROLESTAT_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ROLESTAT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLESTAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mstat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mroleid_) -
        reinterpret_cast<char*>(&mstat_)) + sizeof(mroleid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLESTAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.PROBUFF_NET_ROLESTAT.stat mstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mstat(static_cast<::pbnet::PROBUFF_NET_ROLESTAT_stat>(val));
        } else goto handle_unusual;
        continue;
      // .pbnet.PROBUFF_NET_ROLESTAT.logic_stat mlogicstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mlogicstat(static_cast<::pbnet::PROBUFF_NET_ROLESTAT_logic_stat>(val));
        } else goto handle_unusual;
        continue;
      // int64 mroleid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mroleid(&has_bits);
          mroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ROLESTAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLESTAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.PROBUFF_NET_ROLESTAT.stat mstat = 1;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mstat(), target);
  }

  // .pbnet.PROBUFF_NET_ROLESTAT.logic_stat mlogicstat = 2;
  if (_internal_has_mlogicstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mlogicstat(), target);
  }

  // int64 mroleid = 3;
  if (_internal_has_mroleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_mroleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLESTAT)
  return target;
}

size_t PROBUFF_NET_ROLESTAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLESTAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .pbnet.PROBUFF_NET_ROLESTAT.stat mstat = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mstat());
    }

    // .pbnet.PROBUFF_NET_ROLESTAT.logic_stat mlogicstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mlogicstat());
    }

    // int64 mroleid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mroleid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ROLESTAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ROLESTAT)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ROLESTAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ROLESTAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ROLESTAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ROLESTAT)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ROLESTAT::MergeFrom(const PROBUFF_NET_ROLESTAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLESTAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mstat_ = from.mstat_;
    }
    if (cached_has_bits & 0x00000002u) {
      mlogicstat_ = from.mlogicstat_;
    }
    if (cached_has_bits & 0x00000004u) {
      mroleid_ = from.mroleid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_ROLESTAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ROLESTAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ROLESTAT::CopyFrom(const PROBUFF_NET_ROLESTAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLESTAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLESTAT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLESTAT::InternalSwap(PROBUFF_NET_ROLESTAT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLESTAT, mroleid_)
      + sizeof(PROBUFF_NET_ROLESTAT::mroleid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLESTAT, mstat_)>(
          reinterpret_cast<char*>(&mstat_),
          reinterpret_cast<char*>(&other->mstat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLESTAT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VECTOR2::InitAsDefaultInstance() {
}
class VECTOR2::_Internal {
 public:
  using HasBits = decltype(std::declval<VECTOR2>()._has_bits_);
  static void set_has_mx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_my(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VECTOR2::VECTOR2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.VECTOR2)
}
VECTOR2::VECTOR2(const VECTOR2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mx_, &from.mx_,
    static_cast<size_t>(reinterpret_cast<char*>(&my_) -
    reinterpret_cast<char*>(&mx_)) + sizeof(my_));
  // @@protoc_insertion_point(copy_constructor:pbnet.VECTOR2)
}

void VECTOR2::SharedCtor() {
  ::memset(&mx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&my_) -
      reinterpret_cast<char*>(&mx_)) + sizeof(my_));
}

VECTOR2::~VECTOR2() {
  // @@protoc_insertion_point(destructor:pbnet.VECTOR2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VECTOR2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VECTOR2::ArenaDtor(void* object) {
  VECTOR2* _this = reinterpret_cast< VECTOR2* >(object);
  (void)_this;
}
void VECTOR2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VECTOR2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VECTOR2& VECTOR2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VECTOR2_net_2eproto.base);
  return *internal_default_instance();
}


void VECTOR2::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.VECTOR2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&my_) -
        reinterpret_cast<char*>(&mx_)) + sizeof(my_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VECTOR2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mx(&has_bits);
          mx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 my = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_my(&has_bits);
          my_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VECTOR2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.VECTOR2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mx = 1;
  if (_internal_has_mx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mx(), target);
  }

  // int32 my = 2;
  if (_internal_has_my()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_my(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.VECTOR2)
  return target;
}

size_t VECTOR2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.VECTOR2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 mx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mx());
    }

    // int32 my = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_my());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VECTOR2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.VECTOR2)
  GOOGLE_DCHECK_NE(&from, this);
  const VECTOR2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VECTOR2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.VECTOR2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.VECTOR2)
    MergeFrom(*source);
  }
}

void VECTOR2::MergeFrom(const VECTOR2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.VECTOR2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mx_ = from.mx_;
    }
    if (cached_has_bits & 0x00000002u) {
      my_ = from.my_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VECTOR2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.VECTOR2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VECTOR2::CopyFrom(const VECTOR2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.VECTOR2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VECTOR2::IsInitialized() const {
  return true;
}

void VECTOR2::InternalSwap(VECTOR2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VECTOR2, my_)
      + sizeof(VECTOR2::my_)
      - PROTOBUF_FIELD_OFFSET(VECTOR2, mx_)>(
          reinterpret_cast<char*>(&mx_),
          reinterpret_cast<char*>(&other->mx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VECTOR2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VECTOR3::InitAsDefaultInstance() {
}
class VECTOR3::_Internal {
 public:
  using HasBits = decltype(std::declval<VECTOR3>()._has_bits_);
  static void set_has_mx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_my(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VECTOR3::VECTOR3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.VECTOR3)
}
VECTOR3::VECTOR3(const VECTOR3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mx_, &from.mx_,
    static_cast<size_t>(reinterpret_cast<char*>(&mz_) -
    reinterpret_cast<char*>(&mx_)) + sizeof(mz_));
  // @@protoc_insertion_point(copy_constructor:pbnet.VECTOR3)
}

void VECTOR3::SharedCtor() {
  ::memset(&mx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mz_) -
      reinterpret_cast<char*>(&mx_)) + sizeof(mz_));
}

VECTOR3::~VECTOR3() {
  // @@protoc_insertion_point(destructor:pbnet.VECTOR3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VECTOR3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VECTOR3::ArenaDtor(void* object) {
  VECTOR3* _this = reinterpret_cast< VECTOR3* >(object);
  (void)_this;
}
void VECTOR3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VECTOR3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VECTOR3& VECTOR3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VECTOR3_net_2eproto.base);
  return *internal_default_instance();
}


void VECTOR3::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.VECTOR3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mz_) -
        reinterpret_cast<char*>(&mx_)) + sizeof(mz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VECTOR3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mx(&has_bits);
          mx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 my = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_my(&has_bits);
          my_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mz(&has_bits);
          mz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VECTOR3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.VECTOR3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mx = 1;
  if (_internal_has_mx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mx(), target);
  }

  // int32 my = 2;
  if (_internal_has_my()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_my(), target);
  }

  // int32 mz = 3;
  if (_internal_has_mz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.VECTOR3)
  return target;
}

size_t VECTOR3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.VECTOR3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // int32 mx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mx());
    }

    // int32 my = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_my());
    }

    // int32 mz = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mz());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VECTOR3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.VECTOR3)
  GOOGLE_DCHECK_NE(&from, this);
  const VECTOR3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VECTOR3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.VECTOR3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.VECTOR3)
    MergeFrom(*source);
  }
}

void VECTOR3::MergeFrom(const VECTOR3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.VECTOR3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mx_ = from.mx_;
    }
    if (cached_has_bits & 0x00000002u) {
      my_ = from.my_;
    }
    if (cached_has_bits & 0x00000004u) {
      mz_ = from.mz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VECTOR3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.VECTOR3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VECTOR3::CopyFrom(const VECTOR3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.VECTOR3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VECTOR3::IsInitialized() const {
  return true;
}

void VECTOR3::InternalSwap(VECTOR3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VECTOR3, mz_)
      + sizeof(VECTOR3::mz_)
      - PROTOBUF_FIELD_OFFSET(VECTOR3, mx_)>(
          reinterpret_cast<char*>(&mx_),
          reinterpret_cast<char*>(&other->mx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VECTOR3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UNIT_POSITION::InitAsDefaultInstance() {
  ::pbnet::_UNIT_POSITION_default_instance_._instance.get_mutable()->mposition_ = const_cast< ::pbnet::VECTOR2*>(
      ::pbnet::VECTOR2::internal_default_instance());
}
class UNIT_POSITION::_Internal {
 public:
  using HasBits = decltype(std::declval<UNIT_POSITION>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbnet::VECTOR2& mposition(const UNIT_POSITION* msg);
  static void set_has_mposition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mangle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mspeed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pbnet::VECTOR2&
UNIT_POSITION::_Internal::mposition(const UNIT_POSITION* msg) {
  return *msg->mposition_;
}
UNIT_POSITION::UNIT_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.UNIT_POSITION)
}
UNIT_POSITION::UNIT_POSITION(const UNIT_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mposition()) {
    mposition_ = new ::pbnet::VECTOR2(*from.mposition_);
  } else {
    mposition_ = nullptr;
  }
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mspeed_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(mspeed_));
  // @@protoc_insertion_point(copy_constructor:pbnet.UNIT_POSITION)
}

void UNIT_POSITION::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UNIT_POSITION_net_2eproto.base);
  ::memset(&mposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mspeed_) -
      reinterpret_cast<char*>(&mposition_)) + sizeof(mspeed_));
}

UNIT_POSITION::~UNIT_POSITION() {
  // @@protoc_insertion_point(destructor:pbnet.UNIT_POSITION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UNIT_POSITION::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mposition_;
}

void UNIT_POSITION::ArenaDtor(void* object) {
  UNIT_POSITION* _this = reinterpret_cast< UNIT_POSITION* >(object);
  (void)_this;
}
void UNIT_POSITION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UNIT_POSITION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UNIT_POSITION& UNIT_POSITION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UNIT_POSITION_net_2eproto.base);
  return *internal_default_instance();
}


void UNIT_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UNIT_POSITION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && mposition_ != nullptr) {
      delete mposition_;
    }
    mposition_ = nullptr;
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mspeed_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(mspeed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UNIT_POSITION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbnet.VECTOR2 mposition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mangle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mangle(&has_bits);
          mangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mspeed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mspeed(&has_bits);
          mspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UNIT_POSITION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UNIT_POSITION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 2;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_mid(), target);
  }

  // .pbnet.VECTOR2 mposition = 3;
  if (_internal_has_mposition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mposition(this), target, stream);
  }

  // int32 mangle = 4;
  if (_internal_has_mangle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mangle(), target);
  }

  // int32 mspeed = 5;
  if (_internal_has_mspeed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mspeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UNIT_POSITION)
  return target;
}

size_t UNIT_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UNIT_POSITION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .pbnet.VECTOR2 mposition = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mposition_);
    }

    // int64 mid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mid());
    }

    // int32 mangle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mangle());
    }

    // int32 mspeed = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mspeed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UNIT_POSITION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.UNIT_POSITION)
  GOOGLE_DCHECK_NE(&from, this);
  const UNIT_POSITION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UNIT_POSITION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.UNIT_POSITION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.UNIT_POSITION)
    MergeFrom(*source);
  }
}

void UNIT_POSITION::MergeFrom(const UNIT_POSITION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UNIT_POSITION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mposition()->::pbnet::VECTOR2::MergeFrom(from._internal_mposition());
    }
    if (cached_has_bits & 0x00000002u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000004u) {
      mangle_ = from.mangle_;
    }
    if (cached_has_bits & 0x00000008u) {
      mspeed_ = from.mspeed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UNIT_POSITION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.UNIT_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UNIT_POSITION::CopyFrom(const UNIT_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UNIT_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UNIT_POSITION::IsInitialized() const {
  return true;
}

void UNIT_POSITION::InternalSwap(UNIT_POSITION* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UNIT_POSITION, mspeed_)
      + sizeof(UNIT_POSITION::mspeed_)
      - PROTOBUF_FIELD_OFFSET(UNIT_POSITION, mposition_)>(
          reinterpret_cast<char*>(&mposition_),
          reinterpret_cast<char*>(&other->mposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UNIT_POSITION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnitAttribute::InitAsDefaultInstance() {
}
class UnitAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitAttribute>()._has_bits_);
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitAttribute::UnitAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.UnitAttribute)
}
UnitAttribute::UnitAttribute(const UnitAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mvalue_, &from.mvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&mtype_) -
    reinterpret_cast<char*>(&mvalue_)) + sizeof(mtype_));
  // @@protoc_insertion_point(copy_constructor:pbnet.UnitAttribute)
}

void UnitAttribute::SharedCtor() {
  ::memset(&mvalue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mtype_) -
      reinterpret_cast<char*>(&mvalue_)) + sizeof(mtype_));
}

UnitAttribute::~UnitAttribute() {
  // @@protoc_insertion_point(destructor:pbnet.UnitAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnitAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnitAttribute::ArenaDtor(void* object) {
  UnitAttribute* _this = reinterpret_cast< UnitAttribute* >(object);
  (void)_this;
}
void UnitAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnitAttribute& UnitAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnitAttribute_net_2eproto.base);
  return *internal_default_instance();
}


void UnitAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UnitAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mtype_) -
        reinterpret_cast<char*>(&mvalue_)) + sizeof(mtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mtype(&has_bits);
          mtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mvalue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mvalue(&has_bits);
          mvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UnitAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mtype = 1;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtype(), target);
  }

  // int64 mvalue = 2;
  if (_internal_has_mvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_mvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UnitAttribute)
  return target;
}

size_t UnitAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UnitAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 mvalue = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mvalue());
    }

    // int32 mtype = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.UnitAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnitAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.UnitAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.UnitAttribute)
    MergeFrom(*source);
  }
}

void UnitAttribute::MergeFrom(const UnitAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UnitAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mvalue_ = from.mvalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      mtype_ = from.mtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnitAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.UnitAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitAttribute::CopyFrom(const UnitAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UnitAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitAttribute::IsInitialized() const {
  return true;
}

void UnitAttribute::InternalSwap(UnitAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnitAttribute, mtype_)
      + sizeof(UnitAttribute::mtype_)
      - PROTOBUF_FIELD_OFFSET(UnitAttribute, mvalue_)>(
          reinterpret_cast<char*>(&mvalue_),
          reinterpret_cast<char*>(&other->mvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnitModule::InitAsDefaultInstance() {
}
class UnitModule::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitModule>()._has_bits_);
  static void set_has_mmtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitModule::UnitModule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mmodules_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.UnitModule)
}
UnitModule::UnitModule(const UnitModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mmodules_(from.mmodules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mmtype_ = from.mmtype_;
  // @@protoc_insertion_point(copy_constructor:pbnet.UnitModule)
}

void UnitModule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnitModule_net_2eproto.base);
  mmtype_ = 0;
}

UnitModule::~UnitModule() {
  // @@protoc_insertion_point(destructor:pbnet.UnitModule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnitModule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnitModule::ArenaDtor(void* object) {
  UnitModule* _this = reinterpret_cast< UnitModule* >(object);
  (void)_this;
}
void UnitModule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnitModule& UnitModule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnitModule_net_2eproto.base);
  return *internal_default_instance();
}


void UnitModule::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UnitModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mmodules_.Clear();
  mmtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitModule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mmtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mmtype(&has_bits);
          mmtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbnet.UnitAttribute mmodules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mmodules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitModule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UnitModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mmtype = 1;
  if (_internal_has_mmtype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mmtype(), target);
  }

  // repeated .pbnet.UnitAttribute mmodules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mmodules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mmodules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UnitModule)
  return target;
}

size_t UnitModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UnitModule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UnitAttribute mmodules = 2;
  total_size += 1UL * this->_internal_mmodules_size();
  for (const auto& msg : this->mmodules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 mmtype = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mmtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitModule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.UnitModule)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitModule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnitModule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.UnitModule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.UnitModule)
    MergeFrom(*source);
  }
}

void UnitModule::MergeFrom(const UnitModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UnitModule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mmodules_.MergeFrom(from.mmodules_);
  if (from._internal_has_mmtype()) {
    _internal_set_mmtype(from._internal_mmtype());
  }
}

void UnitModule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.UnitModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitModule::CopyFrom(const UnitModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UnitModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitModule::IsInitialized() const {
  return true;
}

void UnitModule::InternalSwap(UnitModule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mmodules_.InternalSwap(&other->mmodules_);
  swap(mmtype_, other->mmtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitModule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UNIT::InitAsDefaultInstance() {
  ::pbnet::_UNIT_default_instance_._instance.get_mutable()->mposition_ = const_cast< ::pbnet::UNIT_POSITION*>(
      ::pbnet::UNIT_POSITION::internal_default_instance());
}
class UNIT::_Internal {
 public:
  using HasBits = decltype(std::declval<UNIT>()._has_bits_);
  static void set_has_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbnet::UNIT_POSITION& mposition(const UNIT* msg);
  static void set_has_mposition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pbnet::UNIT_POSITION&
UNIT::_Internal::mposition(const UNIT* msg) {
  return *msg->mposition_;
}
UNIT::UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mmodules_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.UNIT)
}
UNIT::UNIT(const UNIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mmodules_(from.mmodules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mposition()) {
    mposition_ = new ::pbnet::UNIT_POSITION(*from.mposition_);
  } else {
    mposition_ = nullptr;
  }
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mstat_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(mstat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.UNIT)
}

void UNIT::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UNIT_net_2eproto.base);
  ::memset(&mposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mstat_) -
      reinterpret_cast<char*>(&mposition_)) + sizeof(mstat_));
}

UNIT::~UNIT() {
  // @@protoc_insertion_point(destructor:pbnet.UNIT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UNIT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mposition_;
}

void UNIT::ArenaDtor(void* object) {
  UNIT* _this = reinterpret_cast< UNIT* >(object);
  (void)_this;
}
void UNIT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UNIT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UNIT& UNIT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UNIT_net_2eproto.base);
  return *internal_default_instance();
}


void UNIT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UNIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mmodules_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && mposition_ != nullptr) {
      delete mposition_;
    }
    mposition_ = nullptr;
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&mid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mstat_) -
        reinterpret_cast<char*>(&mid_)) + sizeof(mstat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UNIT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.eunit mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mtype(static_cast<::pbnet::eunit>(val));
        } else goto handle_unusual;
        continue;
      // int64 mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbnet.UNIT_POSITION mposition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbnet.UnitModule mmodules = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mmodules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .pbnet.eunitstat mstat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mstat(static_cast<::pbnet::eunitstat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UNIT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UNIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.eunit mtype = 1;
  if (_internal_has_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mtype(), target);
  }

  // int64 mid = 2;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_mid(), target);
  }

  // .pbnet.UNIT_POSITION mposition = 3;
  if (_internal_has_mposition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mposition(this), target, stream);
  }

  // repeated .pbnet.UnitModule mmodules = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mmodules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_mmodules(i), target, stream);
  }

  // .pbnet.eunitstat mstat = 5;
  if (_internal_has_mstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mstat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UNIT)
  return target;
}

size_t UNIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UNIT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UnitModule mmodules = 4;
  total_size += 1UL * this->_internal_mmodules_size();
  for (const auto& msg : this->mmodules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .pbnet.UNIT_POSITION mposition = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mposition_);
    }

    // int64 mid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mid());
    }

    // .pbnet.eunit mtype = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mtype());
    }

    // .pbnet.eunitstat mstat = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mstat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UNIT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.UNIT)
  GOOGLE_DCHECK_NE(&from, this);
  const UNIT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UNIT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.UNIT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.UNIT)
    MergeFrom(*source);
  }
}

void UNIT::MergeFrom(const UNIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UNIT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mmodules_.MergeFrom(from.mmodules_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mposition()->::pbnet::UNIT_POSITION::MergeFrom(from._internal_mposition());
    }
    if (cached_has_bits & 0x00000002u) {
      mid_ = from.mid_;
    }
    if (cached_has_bits & 0x00000004u) {
      mtype_ = from.mtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      mstat_ = from.mstat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UNIT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UNIT::CopyFrom(const UNIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UNIT::IsInitialized() const {
  return true;
}

void UNIT::InternalSwap(UNIT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mmodules_.InternalSwap(&other->mmodules_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UNIT, mstat_)
      + sizeof(UNIT::mstat_)
      - PROTOBUF_FIELD_OFFSET(UNIT, mposition_)>(
          reinterpret_cast<char*>(&mposition_),
          reinterpret_cast<char*>(&other->mposition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UNIT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_SYNC_ATTRIBUTE::InitAsDefaultInstance() {
}
class PROBUFF_NET_SYNC_ATTRIBUTE::_Internal {
 public:
};

PROBUFF_NET_SYNC_ATTRIBUTE::PROBUFF_NET_SYNC_ATTRIBUTE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mmodules_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
}
PROBUFF_NET_SYNC_ATTRIBUTE::PROBUFF_NET_SYNC_ATTRIBUTE(const PROBUFF_NET_SYNC_ATTRIBUTE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mmodules_(from.mmodules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
}

void PROBUFF_NET_SYNC_ATTRIBUTE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_SYNC_ATTRIBUTE_net_2eproto.base);
}

PROBUFF_NET_SYNC_ATTRIBUTE::~PROBUFF_NET_SYNC_ATTRIBUTE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_SYNC_ATTRIBUTE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_SYNC_ATTRIBUTE::ArenaDtor(void* object) {
  PROBUFF_NET_SYNC_ATTRIBUTE* _this = reinterpret_cast< PROBUFF_NET_SYNC_ATTRIBUTE* >(object);
  (void)_this;
}
void PROBUFF_NET_SYNC_ATTRIBUTE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_SYNC_ATTRIBUTE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_SYNC_ATTRIBUTE& PROBUFF_NET_SYNC_ATTRIBUTE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_SYNC_ATTRIBUTE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_SYNC_ATTRIBUTE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mmodules_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_ATTRIBUTE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pbnet.UnitModule mmodules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mmodules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_SYNC_ATTRIBUTE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnet.UnitModule mmodules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mmodules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mmodules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  return target;
}

size_t PROBUFF_NET_SYNC_ATTRIBUTE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UnitModule mmodules = 1;
  total_size += 1UL * this->_internal_mmodules_size();
  for (const auto& msg : this->mmodules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_SYNC_ATTRIBUTE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_SYNC_ATTRIBUTE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_SYNC_ATTRIBUTE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_SYNC_ATTRIBUTE::MergeFrom(const PROBUFF_NET_SYNC_ATTRIBUTE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mmodules_.MergeFrom(from.mmodules_);
}

void PROBUFF_NET_SYNC_ATTRIBUTE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_SYNC_ATTRIBUTE::CopyFrom(const PROBUFF_NET_SYNC_ATTRIBUTE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_ATTRIBUTE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_ATTRIBUTE::InternalSwap(PROBUFF_NET_SYNC_ATTRIBUTE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mmodules_.InternalSwap(&other->mmodules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_ATTRIBUTE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_SYNC_UNIT::InitAsDefaultInstance() {
}
class PROBUFF_NET_SYNC_UNIT::_Internal {
 public:
};

PROBUFF_NET_SYNC_UNIT::PROBUFF_NET_SYNC_UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  munits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_UNIT)
}
PROBUFF_NET_SYNC_UNIT::PROBUFF_NET_SYNC_UNIT(const PROBUFF_NET_SYNC_UNIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      munits_(from.munits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_UNIT)
}

void PROBUFF_NET_SYNC_UNIT::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_SYNC_UNIT_net_2eproto.base);
}

PROBUFF_NET_SYNC_UNIT::~PROBUFF_NET_SYNC_UNIT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_UNIT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_SYNC_UNIT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_SYNC_UNIT::ArenaDtor(void* object) {
  PROBUFF_NET_SYNC_UNIT* _this = reinterpret_cast< PROBUFF_NET_SYNC_UNIT* >(object);
  (void)_this;
}
void PROBUFF_NET_SYNC_UNIT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_SYNC_UNIT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_SYNC_UNIT& PROBUFF_NET_SYNC_UNIT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_SYNC_UNIT_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_SYNC_UNIT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  munits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_UNIT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pbnet.UNIT munits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_munits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_SYNC_UNIT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnet.UNIT munits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_munits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_munits(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_UNIT)
  return target;
}

size_t PROBUFF_NET_SYNC_UNIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UNIT munits = 1;
  total_size += 1UL * this->_internal_munits_size();
  for (const auto& msg : this->munits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_SYNC_UNIT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_SYNC_UNIT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_SYNC_UNIT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_SYNC_UNIT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_SYNC_UNIT)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_SYNC_UNIT::MergeFrom(const PROBUFF_NET_SYNC_UNIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  munits_.MergeFrom(from.munits_);
}

void PROBUFF_NET_SYNC_UNIT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_SYNC_UNIT::CopyFrom(const PROBUFF_NET_SYNC_UNIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_UNIT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_UNIT::InternalSwap(PROBUFF_NET_SYNC_UNIT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  munits_.InternalSwap(&other->munits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_UNIT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ENTER_LEAVE_VIEW::InitAsDefaultInstance() {
}
class PROBUFF_NET_ENTER_LEAVE_VIEW::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ENTER_LEAVE_VIEW>()._has_bits_);
  static void set_has_misenter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ENTER_LEAVE_VIEW::PROBUFF_NET_ENTER_LEAVE_VIEW(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  munits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
}
PROBUFF_NET_ENTER_LEAVE_VIEW::PROBUFF_NET_ENTER_LEAVE_VIEW(const PROBUFF_NET_ENTER_LEAVE_VIEW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      munits_(from.munits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  misenter_ = from.misenter_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::SharedCtor() {
  misenter_ = false;
}

PROBUFF_NET_ENTER_LEAVE_VIEW::~PROBUFF_NET_ENTER_LEAVE_VIEW() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::ArenaDtor(void* object) {
  PROBUFF_NET_ENTER_LEAVE_VIEW* _this = reinterpret_cast< PROBUFF_NET_ENTER_LEAVE_VIEW* >(object);
  (void)_this;
}
void PROBUFF_NET_ENTER_LEAVE_VIEW::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ENTER_LEAVE_VIEW::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ENTER_LEAVE_VIEW& PROBUFF_NET_ENTER_LEAVE_VIEW::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ENTER_LEAVE_VIEW_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ENTER_LEAVE_VIEW::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  munits_.Clear();
  misenter_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ENTER_LEAVE_VIEW::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool misenter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_misenter(&has_bits);
          misenter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 munits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_munits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_munits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ENTER_LEAVE_VIEW::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool misenter = 1;
  if (_internal_has_misenter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_misenter(), target);
  }

  // repeated int64 munits = 2;
  {
    int byte_size = _munits_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_munits(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  return target;
}

size_t PROBUFF_NET_ENTER_LEAVE_VIEW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 munits = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->munits_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _munits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool misenter = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ENTER_LEAVE_VIEW* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ENTER_LEAVE_VIEW>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::MergeFrom(const PROBUFF_NET_ENTER_LEAVE_VIEW& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  munits_.MergeFrom(from.munits_);
  if (from._internal_has_misenter()) {
    _internal_set_misenter(from._internal_misenter());
  }
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::CopyFrom(const PROBUFF_NET_ENTER_LEAVE_VIEW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ENTER_LEAVE_VIEW::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::InternalSwap(PROBUFF_NET_ENTER_LEAVE_VIEW* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  munits_.InternalSwap(&other->munits_);
  swap(misenter_, other->misenter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ENTER_LEAVE_VIEW::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse() {}
PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::MergeFrom(const PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PROBUFF_NET_SYNC_POSITION::InitAsDefaultInstance() {
}
class PROBUFF_NET_SYNC_POSITION::_Internal {
 public:
};

PROBUFF_NET_SYNC_POSITION::PROBUFF_NET_SYNC_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mposition_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_POSITION)
}
PROBUFF_NET_SYNC_POSITION::PROBUFF_NET_SYNC_POSITION(const PROBUFF_NET_SYNC_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mposition_.MergeFrom(from.mposition_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_POSITION)
}

void PROBUFF_NET_SYNC_POSITION::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_SYNC_POSITION_net_2eproto.base);
}

PROBUFF_NET_SYNC_POSITION::~PROBUFF_NET_SYNC_POSITION() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_POSITION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_SYNC_POSITION::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_SYNC_POSITION::ArenaDtor(void* object) {
  PROBUFF_NET_SYNC_POSITION* _this = reinterpret_cast< PROBUFF_NET_SYNC_POSITION* >(object);
  (void)_this;
}
void PROBUFF_NET_SYNC_POSITION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_SYNC_POSITION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_SYNC_POSITION& PROBUFF_NET_SYNC_POSITION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_SYNC_POSITION_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_SYNC_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mposition_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_POSITION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int64, .pbnet.UNIT_POSITION> mposition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mposition_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_SYNC_POSITION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .pbnet.UNIT_POSITION> mposition = 1;
  if (!this->_internal_mposition().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mposition().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mposition().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >::const_iterator
          it = this->_internal_mposition().begin();
          it != this->_internal_mposition().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >::const_iterator
          it = this->_internal_mposition().begin();
          it != this->_internal_mposition().end(); ++it) {
        target = PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_POSITION)
  return target;
}

size_t PROBUFF_NET_SYNC_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .pbnet.UNIT_POSITION> mposition = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mposition_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >::const_iterator
      it = this->_internal_mposition().begin();
      it != this->_internal_mposition().end(); ++it) {
    total_size += PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_SYNC_POSITION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_SYNC_POSITION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_SYNC_POSITION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_SYNC_POSITION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_SYNC_POSITION)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_SYNC_POSITION::MergeFrom(const PROBUFF_NET_SYNC_POSITION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mposition_.MergeFrom(from.mposition_);
}

void PROBUFF_NET_SYNC_POSITION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_SYNC_POSITION::CopyFrom(const PROBUFF_NET_SYNC_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_POSITION::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_POSITION::InternalSwap(PROBUFF_NET_SYNC_POSITION* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mposition_.Swap(&other->mposition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_POSITION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_CHANGE_ANGLE::InitAsDefaultInstance() {
  ::pbnet::_PROBUFF_NET_CHANGE_ANGLE_default_instance_._instance.get_mutable()->mposition_ = const_cast< ::pbnet::UNIT_POSITION*>(
      ::pbnet::UNIT_POSITION::internal_default_instance());
}
class PROBUFF_NET_CHANGE_ANGLE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHANGE_ANGLE>()._has_bits_);
  static const ::pbnet::UNIT_POSITION& mposition(const PROBUFF_NET_CHANGE_ANGLE* msg);
  static void set_has_mposition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pbnet::UNIT_POSITION&
PROBUFF_NET_CHANGE_ANGLE::_Internal::mposition(const PROBUFF_NET_CHANGE_ANGLE* msg) {
  return *msg->mposition_;
}
PROBUFF_NET_CHANGE_ANGLE::PROBUFF_NET_CHANGE_ANGLE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHANGE_ANGLE)
}
PROBUFF_NET_CHANGE_ANGLE::PROBUFF_NET_CHANGE_ANGLE(const PROBUFF_NET_CHANGE_ANGLE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mposition()) {
    mposition_ = new ::pbnet::UNIT_POSITION(*from.mposition_);
  } else {
    mposition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHANGE_ANGLE)
}

void PROBUFF_NET_CHANGE_ANGLE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_CHANGE_ANGLE_net_2eproto.base);
  mposition_ = nullptr;
}

PROBUFF_NET_CHANGE_ANGLE::~PROBUFF_NET_CHANGE_ANGLE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_CHANGE_ANGLE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mposition_;
}

void PROBUFF_NET_CHANGE_ANGLE::ArenaDtor(void* object) {
  PROBUFF_NET_CHANGE_ANGLE* _this = reinterpret_cast< PROBUFF_NET_CHANGE_ANGLE* >(object);
  (void)_this;
}
void PROBUFF_NET_CHANGE_ANGLE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_CHANGE_ANGLE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_CHANGE_ANGLE& PROBUFF_NET_CHANGE_ANGLE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_CHANGE_ANGLE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_CHANGE_ANGLE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && mposition_ != nullptr) {
      delete mposition_;
    }
    mposition_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHANGE_ANGLE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.UNIT_POSITION mposition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_CHANGE_ANGLE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.UNIT_POSITION mposition = 1;
  if (_internal_has_mposition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mposition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  return target;
}

size_t PROBUFF_NET_CHANGE_ANGLE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pbnet.UNIT_POSITION mposition = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mposition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_CHANGE_ANGLE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_CHANGE_ANGLE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_CHANGE_ANGLE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_CHANGE_ANGLE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_CHANGE_ANGLE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_CHANGE_ANGLE::MergeFrom(const PROBUFF_NET_CHANGE_ANGLE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mposition()) {
    _internal_mutable_mposition()->::pbnet::UNIT_POSITION::MergeFrom(from._internal_mposition());
  }
}

void PROBUFF_NET_CHANGE_ANGLE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_CHANGE_ANGLE::CopyFrom(const PROBUFF_NET_CHANGE_ANGLE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHANGE_ANGLE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHANGE_ANGLE::InternalSwap(PROBUFF_NET_CHANGE_ANGLE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mposition_, other->mposition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHANGE_ANGLE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse() {}
PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::MergeFrom(const PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PROBUFF_NET_TESTLUA::InitAsDefaultInstance() {
}
class PROBUFF_NET_TESTLUA::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_TESTLUA>()._has_bits_);
  static void set_has_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_TESTLUA::PROBUFF_NET_TESTLUA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mdata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_TESTLUA)
}
PROBUFF_NET_TESTLUA::PROBUFF_NET_TESTLUA(const PROBUFF_NET_TESTLUA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mdata_.MergeFrom(from.mdata_);
  mvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mvalue()) {
    mvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mvalue(),
      GetArena());
  }
  mid_ = from.mid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_TESTLUA)
}

void PROBUFF_NET_TESTLUA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_TESTLUA_net_2eproto.base);
  mvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_TESTLUA::~PROBUFF_NET_TESTLUA() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_TESTLUA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_TESTLUA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_TESTLUA::ArenaDtor(void* object) {
  PROBUFF_NET_TESTLUA* _this = reinterpret_cast< PROBUFF_NET_TESTLUA* >(object);
  (void)_this;
}
void PROBUFF_NET_TESTLUA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_TESTLUA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_TESTLUA& PROBUFF_NET_TESTLUA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_TESTLUA_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_TESTLUA::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_TESTLUA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mdata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mvalue_.ClearNonDefaultToEmpty();
  }
  mid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_TESTLUA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mid(&has_bits);
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mvalue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_TESTLUA.mvalue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int64, string> mdata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&mdata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_TESTLUA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_TESTLUA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (_internal_has_mid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // string mvalue = 2;
  if (_internal_has_mvalue()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mvalue().data(), static_cast<int>(this->_internal_mvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_TESTLUA.mvalue");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mvalue(), target);
  }

  // map<int64, string> mdata = 3;
  if (!this->_internal_mdata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pbnet.PROBUFF_NET_TESTLUA.MdataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_mdata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_mdata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::const_iterator
          it = this->_internal_mdata().begin();
          it != this->_internal_mdata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::const_iterator
          it = this->_internal_mdata().begin();
          it != this->_internal_mdata().end(); ++it) {
        target = PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_TESTLUA)
  return target;
}

size_t PROBUFF_NET_TESTLUA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_TESTLUA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, string> mdata = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mdata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, std::string >::const_iterator
      it = this->_internal_mdata().begin();
      it != this->_internal_mdata().end(); ++it) {
    total_size += PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string mvalue = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mvalue());
    }

    // int64 mid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_TESTLUA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_TESTLUA)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_TESTLUA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_TESTLUA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_TESTLUA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_TESTLUA)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_TESTLUA::MergeFrom(const PROBUFF_NET_TESTLUA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_TESTLUA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mdata_.MergeFrom(from.mdata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mvalue(from._internal_mvalue());
    }
    if (cached_has_bits & 0x00000002u) {
      mid_ = from.mid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_TESTLUA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_TESTLUA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_TESTLUA::CopyFrom(const PROBUFF_NET_TESTLUA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_TESTLUA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_TESTLUA::IsInitialized() const {
  return true;
}

void PROBUFF_NET_TESTLUA::InternalSwap(PROBUFF_NET_TESTLUA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mdata_.Swap(&other->mdata_);
  mvalue_.Swap(&other->mvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mid_, other->mid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TESTLUA::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pbnet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MSG_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MSG_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MSG_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_HEARTBEAT* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_HEARTBEAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_HEARTBEAT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RECHARGE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RECHARGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RECHARGE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MitemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ERROR* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ERROR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ERROR >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_GET_TIME* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_GET_TIME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_GET_TIME >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_NOTICE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_NOTICE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_NOTICE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_NOTICE_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_NOTICE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_NOTICE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ACOUNT_LOGIN* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_LOGIN* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_SYNC* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_SYNC* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE_delitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE_additem* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE_additem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE_additem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CMD* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CMD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CMD >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHAT* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::chatitem* Arena::CreateMaybeMessage< ::pbnet::chatitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::chatitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHAT_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHAT_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHAT_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SWITCH_LINE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SWITCH_LINE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SWITCH_LINE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MmailEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_READ* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_READ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_READ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DRAW* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DRAW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DRAW >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DEL* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DEL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_KCPSESSION* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_KCPSESSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_KCPSESSION >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::drop_item* Arena::CreateMaybeMessage< ::pbnet::drop_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::drop_item >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MdropEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_CREATE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_CREATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_CREATE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_CREATE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_INFO* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_INFO_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_JOIN* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_JOIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_JOIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_JOIN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_RATIFY_JOIN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_CEDE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_CEDE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_CEDE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_CEDE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_LEAVE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_LEAVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_LEAVE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_LEAVE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_LIST* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_CHANGENAME_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_SIGN* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_SIGN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_SIGN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_SIGN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MitemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RANKLIST* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RANKLIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RANKLIST >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_ADD* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_ADD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_ADD >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_ADD_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_RATIFY_ADD_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_ERASE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_ERASE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_ERASE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_ERASE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLESTAT* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLESTAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLESTAT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::VECTOR2* Arena::CreateMaybeMessage< ::pbnet::VECTOR2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::VECTOR2 >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::VECTOR3* Arena::CreateMaybeMessage< ::pbnet::VECTOR3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::VECTOR3 >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UNIT_POSITION* Arena::CreateMaybeMessage< ::pbnet::UNIT_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UNIT_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UnitAttribute* Arena::CreateMaybeMessage< ::pbnet::UnitAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UnitAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UnitModule* Arena::CreateMaybeMessage< ::pbnet::UnitModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UnitModule >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UNIT* Arena::CreateMaybeMessage< ::pbnet::UNIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UNIT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_UNIT* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_UNIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_UNIT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_POSITION_MpositionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_POSITION* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHANGE_ANGLE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHANGE_ANGLE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHANGE_ANGLE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TESTLUA_MdataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TESTLUA* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TESTLUA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TESTLUA >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
