// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_net_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_net_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "db.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_net_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_net_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[96]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_net_2eproto;
namespace pbnet {
class MATCHING_MEMBER;
class MATCHING_MEMBERDefaultTypeInternal;
extern MATCHING_MEMBERDefaultTypeInternal _MATCHING_MEMBER_default_instance_;
class PROBUFF_NET_ACOUNT_LOGIN;
class PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal;
extern PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal _PROBUFF_NET_ACOUNT_LOGIN_default_instance_;
class PROBUFF_NET_ACOUNT_LOGIN_RESPONSE;
class PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal _PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_;
class PROBUFF_NET_ADDFRIEND;
class PROBUFF_NET_ADDFRIENDDefaultTypeInternal;
extern PROBUFF_NET_ADDFRIENDDefaultTypeInternal _PROBUFF_NET_ADDFRIEND_default_instance_;
class PROBUFF_NET_ADDFRIEND_RESPONSE;
class PROBUFF_NET_ADDFRIEND_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_ADDFRIEND_RESPONSEDefaultTypeInternal _PROBUFF_NET_ADDFRIEND_RESPONSE_default_instance_;
class PROBUFF_NET_BAG_SYNC;
class PROBUFF_NET_BAG_SYNCDefaultTypeInternal;
extern PROBUFF_NET_BAG_SYNCDefaultTypeInternal _PROBUFF_NET_BAG_SYNC_default_instance_;
class PROBUFF_NET_BAG_SYNC_RESPONSE;
class PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal _PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_;
class PROBUFF_NET_BAG_UPDATE;
class PROBUFF_NET_BAG_UPDATEDefaultTypeInternal;
extern PROBUFF_NET_BAG_UPDATEDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_default_instance_;
class PROBUFF_NET_BAG_UPDATE_RESPONSE;
class PROBUFF_NET_BAG_UPDATE_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_BAG_UPDATE_RESPONSEDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_RESPONSE_default_instance_;
class PROBUFF_NET_BAG_UPDATE_RESPONSE_additem;
class PROBUFF_NET_BAG_UPDATE_RESPONSE_additemDefaultTypeInternal;
extern PROBUFF_NET_BAG_UPDATE_RESPONSE_additemDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_default_instance_;
class PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem;
class PROBUFF_NET_BAG_UPDATE_RESPONSE_delitemDefaultTypeInternal;
extern PROBUFF_NET_BAG_UPDATE_RESPONSE_delitemDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_default_instance_;
class PROBUFF_NET_CEDE_FAMIL;
class PROBUFF_NET_CEDE_FAMILDefaultTypeInternal;
extern PROBUFF_NET_CEDE_FAMILDefaultTypeInternal _PROBUFF_NET_CEDE_FAMIL_default_instance_;
class PROBUFF_NET_CEDE_FAMIL_RESPONSE;
class PROBUFF_NET_CEDE_FAMIL_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_CEDE_FAMIL_RESPONSEDefaultTypeInternal _PROBUFF_NET_CEDE_FAMIL_RESPONSE_default_instance_;
class PROBUFF_NET_CHANGE_ANGLE;
class PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal;
extern PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal _PROBUFF_NET_CHANGE_ANGLE_default_instance_;
class PROBUFF_NET_CHANGE_FAMILNAME;
class PROBUFF_NET_CHANGE_FAMILNAMEDefaultTypeInternal;
extern PROBUFF_NET_CHANGE_FAMILNAMEDefaultTypeInternal _PROBUFF_NET_CHANGE_FAMILNAME_default_instance_;
class PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE;
class PROBUFF_NET_CHANGE_FAMILNAME_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_CHANGE_FAMILNAME_RESPONSEDefaultTypeInternal _PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE_default_instance_;
class PROBUFF_NET_CHAT;
class PROBUFF_NET_CHATDefaultTypeInternal;
extern PROBUFF_NET_CHATDefaultTypeInternal _PROBUFF_NET_CHAT_default_instance_;
class PROBUFF_NET_CHAT_RESPONSE;
class PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal _PROBUFF_NET_CHAT_RESPONSE_default_instance_;
class PROBUFF_NET_CMD;
class PROBUFF_NET_CMDDefaultTypeInternal;
extern PROBUFF_NET_CMDDefaultTypeInternal _PROBUFF_NET_CMD_default_instance_;
class PROBUFF_NET_CREATE_FAMIL;
class PROBUFF_NET_CREATE_FAMILDefaultTypeInternal;
extern PROBUFF_NET_CREATE_FAMILDefaultTypeInternal _PROBUFF_NET_CREATE_FAMIL_default_instance_;
class PROBUFF_NET_CREATE_FAMIL_RESPONSE;
class PROBUFF_NET_CREATE_FAMIL_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_CREATE_FAMIL_RESPONSEDefaultTypeInternal _PROBUFF_NET_CREATE_FAMIL_RESPONSE_default_instance_;
class PROBUFF_NET_DELIVER_GOODS_RECHARGE;
class PROBUFF_NET_DELIVER_GOODS_RECHARGEDefaultTypeInternal;
extern PROBUFF_NET_DELIVER_GOODS_RECHARGEDefaultTypeInternal _PROBUFF_NET_DELIVER_GOODS_RECHARGE_default_instance_;
class PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse;
class PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUseDefaultTypeInternal;
extern PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse_default_instance_;
class PROBUFF_NET_ENTER_LEAVE_VIEW;
class PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal;
extern PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal _PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_;
class PROBUFF_NET_ENTER_PLAYS;
class PROBUFF_NET_ENTER_PLAYSDefaultTypeInternal;
extern PROBUFF_NET_ENTER_PLAYSDefaultTypeInternal _PROBUFF_NET_ENTER_PLAYS_default_instance_;
class PROBUFF_NET_ERASEFRIEND;
class PROBUFF_NET_ERASEFRIENDDefaultTypeInternal;
extern PROBUFF_NET_ERASEFRIENDDefaultTypeInternal _PROBUFF_NET_ERASEFRIEND_default_instance_;
class PROBUFF_NET_ERASEFRIEND_RESPONSE;
class PROBUFF_NET_ERASEFRIEND_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_ERASEFRIEND_RESPONSEDefaultTypeInternal _PROBUFF_NET_ERASEFRIEND_RESPONSE_default_instance_;
class PROBUFF_NET_ERROR;
class PROBUFF_NET_ERRORDefaultTypeInternal;
extern PROBUFF_NET_ERRORDefaultTypeInternal _PROBUFF_NET_ERROR_default_instance_;
class PROBUFF_NET_FAMILSIGN;
class PROBUFF_NET_FAMILSIGNDefaultTypeInternal;
extern PROBUFF_NET_FAMILSIGNDefaultTypeInternal _PROBUFF_NET_FAMILSIGN_default_instance_;
class PROBUFF_NET_FAMILSIGN_RESPONSE;
class PROBUFF_NET_FAMILSIGN_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FAMILSIGN_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMILSIGN_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_LIST;
class PROBUFF_NET_FAMIL_LISTDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_LISTDefaultTypeInternal _PROBUFF_NET_FAMIL_LIST_default_instance_;
class PROBUFF_NET_FAMIL_LIST_RESPONSE;
class PROBUFF_NET_FAMIL_LIST_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FAMIL_LIST_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_LIST_RESPONSE_default_instance_;
class PROBUFF_NET_FRIEND;
class PROBUFF_NET_FRIENDDefaultTypeInternal;
extern PROBUFF_NET_FRIENDDefaultTypeInternal _PROBUFF_NET_FRIEND_default_instance_;
class PROBUFF_NET_FRIEND_RESPONSE;
class PROBUFF_NET_FRIEND_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_FRIEND_RESPONSEDefaultTypeInternal _PROBUFF_NET_FRIEND_RESPONSE_default_instance_;
class PROBUFF_NET_GET_TIME;
class PROBUFF_NET_GET_TIMEDefaultTypeInternal;
extern PROBUFF_NET_GET_TIMEDefaultTypeInternal _PROBUFF_NET_GET_TIME_default_instance_;
class PROBUFF_NET_GET_TIME_RESPONSE;
class PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal _PROBUFF_NET_GET_TIME_RESPONSE_default_instance_;
class PROBUFF_NET_HEARTBEAT;
class PROBUFF_NET_HEARTBEATDefaultTypeInternal;
extern PROBUFF_NET_HEARTBEATDefaultTypeInternal _PROBUFF_NET_HEARTBEAT_default_instance_;
class PROBUFF_NET_JOIN_FAMIL;
class PROBUFF_NET_JOIN_FAMILDefaultTypeInternal;
extern PROBUFF_NET_JOIN_FAMILDefaultTypeInternal _PROBUFF_NET_JOIN_FAMIL_default_instance_;
class PROBUFF_NET_JOIN_FAMIL_RESPONSE;
class PROBUFF_NET_JOIN_FAMIL_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_JOIN_FAMIL_RESPONSEDefaultTypeInternal _PROBUFF_NET_JOIN_FAMIL_RESPONSE_default_instance_;
class PROBUFF_NET_KCPSESSION;
class PROBUFF_NET_KCPSESSIONDefaultTypeInternal;
extern PROBUFF_NET_KCPSESSIONDefaultTypeInternal _PROBUFF_NET_KCPSESSION_default_instance_;
class PROBUFF_NET_KCPSESSION_RESPONSE;
class PROBUFF_NET_KCPSESSION_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_KCPSESSION_RESPONSEDefaultTypeInternal _PROBUFF_NET_KCPSESSION_RESPONSE_default_instance_;
class PROBUFF_NET_LEAVE_FAMIL;
class PROBUFF_NET_LEAVE_FAMILDefaultTypeInternal;
extern PROBUFF_NET_LEAVE_FAMILDefaultTypeInternal _PROBUFF_NET_LEAVE_FAMIL_default_instance_;
class PROBUFF_NET_LEAVE_FAMIL_RESPONSE;
class PROBUFF_NET_LEAVE_FAMIL_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_LEAVE_FAMIL_RESPONSEDefaultTypeInternal _PROBUFF_NET_LEAVE_FAMIL_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_DEL;
class PROBUFF_NET_MAIL_DELDefaultTypeInternal;
extern PROBUFF_NET_MAIL_DELDefaultTypeInternal _PROBUFF_NET_MAIL_DEL_default_instance_;
class PROBUFF_NET_MAIL_DEL_RESPONSE;
class PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_DRAW;
class PROBUFF_NET_MAIL_DRAWDefaultTypeInternal;
extern PROBUFF_NET_MAIL_DRAWDefaultTypeInternal _PROBUFF_NET_MAIL_DRAW_default_instance_;
class PROBUFF_NET_MAIL_DRAW_RESPONSE;
class PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_LIST;
class PROBUFF_NET_MAIL_LISTDefaultTypeInternal;
extern PROBUFF_NET_MAIL_LISTDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_default_instance_;
class PROBUFF_NET_MAIL_LIST_RESPONSE;
class PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse;
class PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUseDefaultTypeInternal;
extern PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_default_instance_;
class PROBUFF_NET_MAIL_READ;
class PROBUFF_NET_MAIL_READDefaultTypeInternal;
extern PROBUFF_NET_MAIL_READDefaultTypeInternal _PROBUFF_NET_MAIL_READ_default_instance_;
class PROBUFF_NET_MAIL_READ_RESPONSE;
class PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_;
class PROBUFF_NET_MATCHING;
class PROBUFF_NET_MATCHINGDefaultTypeInternal;
extern PROBUFF_NET_MATCHINGDefaultTypeInternal _PROBUFF_NET_MATCHING_default_instance_;
class PROBUFF_NET_MATCHING_CANCEL;
class PROBUFF_NET_MATCHING_CANCELDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_CANCELDefaultTypeInternal _PROBUFF_NET_MATCHING_CANCEL_default_instance_;
class PROBUFF_NET_MATCHING_CANCEL_RESPONSE;
class PROBUFF_NET_MATCHING_CANCEL_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_CANCEL_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_CANCEL_RESPONSE_default_instance_;
class PROBUFF_NET_MATCHING_CONFIRM;
class PROBUFF_NET_MATCHING_CONFIRMDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_CONFIRMDefaultTypeInternal _PROBUFF_NET_MATCHING_CONFIRM_default_instance_;
class PROBUFF_NET_MATCHING_CONFIRM_RESPONSE;
class PROBUFF_NET_MATCHING_CONFIRM_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_CONFIRM_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_default_instance_;
class PROBUFF_NET_MATCHING_RESPONSE;
class PROBUFF_NET_MATCHING_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_RESPONSE_default_instance_;
class PROBUFF_NET_MATCHING_SUCCESS;
class PROBUFF_NET_MATCHING_SUCCESSDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_SUCCESSDefaultTypeInternal _PROBUFF_NET_MATCHING_SUCCESS_default_instance_;
class PROBUFF_NET_MATCHING_SUCCESS_RESPONSE;
class PROBUFF_NET_MATCHING_SUCCESS_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_SUCCESS_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_default_instance_;
class PROBUFF_NET_MATCHING_SYNC;
class PROBUFF_NET_MATCHING_SYNCDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_SYNCDefaultTypeInternal _PROBUFF_NET_MATCHING_SYNC_default_instance_;
class PROBUFF_NET_MATCHING_WAITCONFIRM;
class PROBUFF_NET_MATCHING_WAITCONFIRMDefaultTypeInternal;
extern PROBUFF_NET_MATCHING_WAITCONFIRMDefaultTypeInternal _PROBUFF_NET_MATCHING_WAITCONFIRM_default_instance_;
class PROBUFF_NET_MEMBER_MATCHING_CANCEL;
class PROBUFF_NET_MEMBER_MATCHING_CANCELDefaultTypeInternal;
extern PROBUFF_NET_MEMBER_MATCHING_CANCELDefaultTypeInternal _PROBUFF_NET_MEMBER_MATCHING_CANCEL_default_instance_;
class PROBUFF_NET_NOTICE;
class PROBUFF_NET_NOTICEDefaultTypeInternal;
extern PROBUFF_NET_NOTICEDefaultTypeInternal _PROBUFF_NET_NOTICE_default_instance_;
class PROBUFF_NET_NOTICE_RESPONSE;
class PROBUFF_NET_NOTICE_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_NOTICE_RESPONSEDefaultTypeInternal _PROBUFF_NET_NOTICE_RESPONSE_default_instance_;
class PROBUFF_NET_RANKLIST;
class PROBUFF_NET_RANKLISTDefaultTypeInternal;
extern PROBUFF_NET_RANKLISTDefaultTypeInternal _PROBUFF_NET_RANKLIST_default_instance_;
class PROBUFF_NET_RANKLIST_RESPONSE;
class PROBUFF_NET_RANKLIST_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_RANKLIST_RESPONSEDefaultTypeInternal _PROBUFF_NET_RANKLIST_RESPONSE_default_instance_;
class PROBUFF_NET_RATIFY_ADDFRIEND;
class PROBUFF_NET_RATIFY_ADDFRIENDDefaultTypeInternal;
extern PROBUFF_NET_RATIFY_ADDFRIENDDefaultTypeInternal _PROBUFF_NET_RATIFY_ADDFRIEND_default_instance_;
class PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE;
class PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSEDefaultTypeInternal _PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE_default_instance_;
class PROBUFF_NET_RATIFY_JOIN_FAMIL;
class PROBUFF_NET_RATIFY_JOIN_FAMILDefaultTypeInternal;
extern PROBUFF_NET_RATIFY_JOIN_FAMILDefaultTypeInternal _PROBUFF_NET_RATIFY_JOIN_FAMIL_default_instance_;
class PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE;
class PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSEDefaultTypeInternal _PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE_default_instance_;
class PROBUFF_NET_RECHARGE;
class PROBUFF_NET_RECHARGEDefaultTypeInternal;
extern PROBUFF_NET_RECHARGEDefaultTypeInternal _PROBUFF_NET_RECHARGE_default_instance_;
class PROBUFF_NET_RECHARGE_RESPONSE;
class PROBUFF_NET_RECHARGE_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_RECHARGE_RESPONSEDefaultTypeInternal _PROBUFF_NET_RECHARGE_RESPONSE_default_instance_;
class PROBUFF_NET_REWARD_ITEM_RESPONSE;
class PROBUFF_NET_REWARD_ITEM_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_REWARD_ITEM_RESPONSEDefaultTypeInternal _PROBUFF_NET_REWARD_ITEM_RESPONSE_default_instance_;
class PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse;
class PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUseDefaultTypeInternal;
extern PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse_default_instance_;
class PROBUFF_NET_ROLE_LOGIN;
class PROBUFF_NET_ROLE_LOGINDefaultTypeInternal;
extern PROBUFF_NET_ROLE_LOGINDefaultTypeInternal _PROBUFF_NET_ROLE_LOGIN_default_instance_;
class PROBUFF_NET_ROLE_SYNC;
class PROBUFF_NET_ROLE_SYNCDefaultTypeInternal;
extern PROBUFF_NET_ROLE_SYNCDefaultTypeInternal _PROBUFF_NET_ROLE_SYNC_default_instance_;
class PROBUFF_NET_ROLE_SYNC_RESPONSE;
class PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal _PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_;
class PROBUFF_NET_SWITCH_LINE;
class PROBUFF_NET_SWITCH_LINEDefaultTypeInternal;
extern PROBUFF_NET_SWITCH_LINEDefaultTypeInternal _PROBUFF_NET_SWITCH_LINE_default_instance_;
class PROBUFF_NET_SWITCH_LINE_RESPONSE;
class PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal _PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_;
class PROBUFF_NET_SYNC_ATTRIBUTE;
class PROBUFF_NET_SYNC_ATTRIBUTEDefaultTypeInternal;
extern PROBUFF_NET_SYNC_ATTRIBUTEDefaultTypeInternal _PROBUFF_NET_SYNC_ATTRIBUTE_default_instance_;
class PROBUFF_NET_SYNC_MATCHING_CONFIRM;
class PROBUFF_NET_SYNC_MATCHING_CONFIRMDefaultTypeInternal;
extern PROBUFF_NET_SYNC_MATCHING_CONFIRMDefaultTypeInternal _PROBUFF_NET_SYNC_MATCHING_CONFIRM_default_instance_;
class PROBUFF_NET_SYNC_POSITION;
class PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal;
extern PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal _PROBUFF_NET_SYNC_POSITION_default_instance_;
class PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse;
class PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUseDefaultTypeInternal;
extern PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_default_instance_;
class PROBUFF_NET_SYNC_UNIT;
class PROBUFF_NET_SYNC_UNITDefaultTypeInternal;
extern PROBUFF_NET_SYNC_UNITDefaultTypeInternal _PROBUFF_NET_SYNC_UNIT_default_instance_;
class PROBUFF_NET_TASK_RECEIVE_AWARD;
class PROBUFF_NET_TASK_RECEIVE_AWARDDefaultTypeInternal;
extern PROBUFF_NET_TASK_RECEIVE_AWARDDefaultTypeInternal _PROBUFF_NET_TASK_RECEIVE_AWARD_default_instance_;
class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE;
class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSEDefaultTypeInternal _PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_default_instance_;
class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse;
class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUseDefaultTypeInternal;
extern PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse_default_instance_;
class UNIT;
class UNITDefaultTypeInternal;
extern UNITDefaultTypeInternal _UNIT_default_instance_;
class UNIT_POSITION;
class UNIT_POSITIONDefaultTypeInternal;
extern UNIT_POSITIONDefaultTypeInternal _UNIT_POSITION_default_instance_;
class UnitAttribute;
class UnitAttributeDefaultTypeInternal;
extern UnitAttributeDefaultTypeInternal _UnitAttribute_default_instance_;
class UnitModule;
class UnitModuleDefaultTypeInternal;
extern UnitModuleDefaultTypeInternal _UnitModule_default_instance_;
class VECTOR2;
class VECTOR2DefaultTypeInternal;
extern VECTOR2DefaultTypeInternal _VECTOR2_default_instance_;
class VECTOR3;
class VECTOR3DefaultTypeInternal;
extern VECTOR3DefaultTypeInternal _VECTOR3_default_instance_;
class chatitem;
class chatitemDefaultTypeInternal;
extern chatitemDefaultTypeInternal _chatitem_default_instance_;
class drop_item;
class drop_itemDefaultTypeInternal;
extern drop_itemDefaultTypeInternal _drop_item_default_instance_;
}  // namespace pbnet
PROTOBUF_NAMESPACE_OPEN
template<> ::pbnet::MATCHING_MEMBER* Arena::CreateMaybeMessage<::pbnet::MATCHING_MEMBER>(Arena*);
template<> ::pbnet::PROBUFF_NET_ACOUNT_LOGIN* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ACOUNT_LOGIN>(Arena*);
template<> ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_ADDFRIEND* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ADDFRIEND>(Arena*);
template<> ::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_BAG_SYNC* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_SYNC>(Arena*);
template<> ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_BAG_UPDATE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_UPDATE>(Arena*);
template<> ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem>(Arena*);
template<> ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem>(Arena*);
template<> ::pbnet::PROBUFF_NET_CEDE_FAMIL* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CEDE_FAMIL>(Arena*);
template<> ::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_CHANGE_ANGLE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CHANGE_ANGLE>(Arena*);
template<> ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CHANGE_FAMILNAME>(Arena*);
template<> ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_CHAT* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CHAT>(Arena*);
template<> ::pbnet::PROBUFF_NET_CHAT_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CHAT_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_CMD* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CMD>(Arena*);
template<> ::pbnet::PROBUFF_NET_CREATE_FAMIL* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CREATE_FAMIL>(Arena*);
template<> ::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE>(Arena*);
template<> ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse>(Arena*);
template<> ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW>(Arena*);
template<> ::pbnet::PROBUFF_NET_ENTER_PLAYS* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ENTER_PLAYS>(Arena*);
template<> ::pbnet::PROBUFF_NET_ERASEFRIEND* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ERASEFRIEND>(Arena*);
template<> ::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_ERROR* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ERROR>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMILSIGN* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMILSIGN>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_LIST* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_LIST>(Arena*);
template<> ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_FRIEND* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FRIEND>(Arena*);
template<> ::pbnet::PROBUFF_NET_FRIEND_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_FRIEND_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_GET_TIME* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_GET_TIME>(Arena*);
template<> ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_GET_TIME_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_HEARTBEAT* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_HEARTBEAT>(Arena*);
template<> ::pbnet::PROBUFF_NET_JOIN_FAMIL* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_JOIN_FAMIL>(Arena*);
template<> ::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_KCPSESSION* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_KCPSESSION>(Arena*);
template<> ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_LEAVE_FAMIL* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_LEAVE_FAMIL>(Arena*);
template<> ::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_DEL* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_DEL>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_DRAW* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_DRAW>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_LIST* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_LIST>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_READ* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_READ>(Arena*);
template<> ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_MATCHING* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING>(Arena*);
template<> ::pbnet::PROBUFF_NET_MATCHING_CANCEL* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_CANCEL>(Arena*);
template<> ::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_MATCHING_CONFIRM* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_CONFIRM>(Arena*);
template<> ::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_MATCHING_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_MATCHING_SUCCESS* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_SUCCESS>(Arena*);
template<> ::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_MATCHING_SYNC* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_SYNC>(Arena*);
template<> ::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM>(Arena*);
template<> ::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL>(Arena*);
template<> ::pbnet::PROBUFF_NET_NOTICE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_NOTICE>(Arena*);
template<> ::pbnet::PROBUFF_NET_NOTICE_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_NOTICE_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_RANKLIST* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_RANKLIST>(Arena*);
template<> ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_RANKLIST_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND>(Arena*);
template<> ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL>(Arena*);
template<> ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_RECHARGE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_RECHARGE>(Arena*);
template<> ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_RECHARGE_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse>(Arena*);
template<> ::pbnet::PROBUFF_NET_ROLE_LOGIN* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ROLE_LOGIN>(Arena*);
template<> ::pbnet::PROBUFF_NET_ROLE_SYNC* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ROLE_SYNC>(Arena*);
template<> ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_SWITCH_LINE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SWITCH_LINE>(Arena*);
template<> ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE>(Arena*);
template<> ::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM>(Arena*);
template<> ::pbnet::PROBUFF_NET_SYNC_POSITION* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SYNC_POSITION>(Arena*);
template<> ::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse>(Arena*);
template<> ::pbnet::PROBUFF_NET_SYNC_UNIT* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_SYNC_UNIT>(Arena*);
template<> ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD>(Arena*);
template<> ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE>(Arena*);
template<> ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse* Arena::CreateMaybeMessage<::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse>(Arena*);
template<> ::pbnet::UNIT* Arena::CreateMaybeMessage<::pbnet::UNIT>(Arena*);
template<> ::pbnet::UNIT_POSITION* Arena::CreateMaybeMessage<::pbnet::UNIT_POSITION>(Arena*);
template<> ::pbnet::UnitAttribute* Arena::CreateMaybeMessage<::pbnet::UnitAttribute>(Arena*);
template<> ::pbnet::UnitModule* Arena::CreateMaybeMessage<::pbnet::UnitModule>(Arena*);
template<> ::pbnet::VECTOR2* Arena::CreateMaybeMessage<::pbnet::VECTOR2>(Arena*);
template<> ::pbnet::VECTOR3* Arena::CreateMaybeMessage<::pbnet::VECTOR3>(Arena*);
template<> ::pbnet::chatitem* Arena::CreateMaybeMessage<::pbnet::chatitem>(Arena*);
template<> ::pbnet::drop_item* Arena::CreateMaybeMessage<::pbnet::drop_item>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pbnet {

enum PROBUFF_NET_RECHARGE_RESPONSE_Estat : int {
  PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_Success = 0,
  PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_NotRechargeId = 1,
  PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MaxCount = 2,
  PROBUFF_NET_RECHARGE_RESPONSE_Estat_PROBUFF_NET_RECHARGE_RESPONSE_Estat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PROBUFF_NET_RECHARGE_RESPONSE_Estat_PROBUFF_NET_RECHARGE_RESPONSE_Estat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PROBUFF_NET_RECHARGE_RESPONSE_Estat_IsValid(int value);
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MIN = PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_Success;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MAX = PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MaxCount;
constexpr int PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_ARRAYSIZE = PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_RECHARGE_RESPONSE_Estat_descriptor();
template<typename T>
inline const std::string& PROBUFF_NET_RECHARGE_RESPONSE_Estat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PROBUFF_NET_RECHARGE_RESPONSE_Estat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PROBUFF_NET_RECHARGE_RESPONSE_Estat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_descriptor(), enum_t_value);
}
inline bool PROBUFF_NET_RECHARGE_RESPONSE_Estat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PROBUFF_NET_RECHARGE_RESPONSE_Estat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PROBUFF_NET_RECHARGE_RESPONSE_Estat>(
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_descriptor(), name, value);
}
enum enum_logic_chat : int {
  get_chat_list = 0,
  chat_speak = 1,
  updata_speck = 2,
  enum_logic_chat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  enum_logic_chat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool enum_logic_chat_IsValid(int value);
constexpr enum_logic_chat enum_logic_chat_MIN = get_chat_list;
constexpr enum_logic_chat enum_logic_chat_MAX = updata_speck;
constexpr int enum_logic_chat_ARRAYSIZE = enum_logic_chat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enum_logic_chat_descriptor();
template<typename T>
inline const std::string& enum_logic_chat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enum_logic_chat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enum_logic_chat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enum_logic_chat_descriptor(), enum_t_value);
}
inline bool enum_logic_chat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enum_logic_chat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enum_logic_chat>(
    enum_logic_chat_descriptor(), name, value);
}
enum enum_chat_channel : int {
  enum_chat_zero = 0,
  enum_chat_ordinary = 1,
  enum_chat_cross_ordinary = 2,
  enum_chat_none = 3,
  enum_chat_channel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  enum_chat_channel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool enum_chat_channel_IsValid(int value);
constexpr enum_chat_channel enum_chat_channel_MIN = enum_chat_zero;
constexpr enum_chat_channel enum_chat_channel_MAX = enum_chat_none;
constexpr int enum_chat_channel_ARRAYSIZE = enum_chat_channel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enum_chat_channel_descriptor();
template<typename T>
inline const std::string& enum_chat_channel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, enum_chat_channel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function enum_chat_channel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    enum_chat_channel_descriptor(), enum_t_value);
}
inline bool enum_chat_channel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, enum_chat_channel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<enum_chat_channel>(
    enum_chat_channel_descriptor(), name, value);
}
enum eunit : int {
  eunit_role = 0,
  eunit_monster = 1,
  eunit_region = 2,
  eunit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eunit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eunit_IsValid(int value);
constexpr eunit eunit_MIN = eunit_role;
constexpr eunit eunit_MAX = eunit_region;
constexpr int eunit_ARRAYSIZE = eunit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eunit_descriptor();
template<typename T>
inline const std::string& eunit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eunit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eunit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eunit_descriptor(), enum_t_value);
}
inline bool eunit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eunit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eunit>(
    eunit_descriptor(), name, value);
}
enum eunitstat : int {
  eunitstat_normal = 0,
  eunitstat_nomove = 1,
  eunitstat_nonormalattack = 2,
  eunitstat_noreleaseskill = 4,
  eunitstat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eunitstat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eunitstat_IsValid(int value);
constexpr eunitstat eunitstat_MIN = eunitstat_normal;
constexpr eunitstat eunitstat_MAX = eunitstat_noreleaseskill;
constexpr int eunitstat_ARRAYSIZE = eunitstat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eunitstat_descriptor();
template<typename T>
inline const std::string& eunitstat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eunitstat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eunitstat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eunitstat_descriptor(), enum_t_value);
}
inline bool eunitstat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eunitstat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eunitstat>(
    eunitstat_descriptor(), name, value);
}
enum eplays : int {
  eplays_go_undergroundpalace = 0,
  eplays_count = 1,
  eplays_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eplays_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eplays_IsValid(int value);
constexpr eplays eplays_MIN = eplays_go_undergroundpalace;
constexpr eplays eplays_MAX = eplays_count;
constexpr int eplays_ARRAYSIZE = eplays_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eplays_descriptor();
template<typename T>
inline const std::string& eplays_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eplays>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eplays_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eplays_descriptor(), enum_t_value);
}
inline bool eplays_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eplays* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eplays>(
    eplays_descriptor(), name, value);
}
enum ematching_cancel_stat : int {
  ematching_cancel_success = 0,
  ematching_cancel_stage = 1,
  ematching_cancel_roomnotfind = 2,
  ematching_cancel_roommembernotfind = 3,
  ematching_cancel_stat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ematching_cancel_stat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ematching_cancel_stat_IsValid(int value);
constexpr ematching_cancel_stat ematching_cancel_stat_MIN = ematching_cancel_success;
constexpr ematching_cancel_stat ematching_cancel_stat_MAX = ematching_cancel_roommembernotfind;
constexpr int ematching_cancel_stat_ARRAYSIZE = ematching_cancel_stat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ematching_cancel_stat_descriptor();
template<typename T>
inline const std::string& ematching_cancel_stat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ematching_cancel_stat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ematching_cancel_stat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ematching_cancel_stat_descriptor(), enum_t_value);
}
inline bool ematching_cancel_stat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ematching_cancel_stat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ematching_cancel_stat>(
    ematching_cancel_stat_descriptor(), name, value);
}
enum etype_matching_cancel : int {
  etype_matching_cancel_active = 0,
  etype_matching_cancel_timeout = 1,
  etype_matching_waitconfirm_timeout = 2,
  etype_matching_waitcreate_timeout = 3,
  etype_matching_cancel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  etype_matching_cancel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool etype_matching_cancel_IsValid(int value);
constexpr etype_matching_cancel etype_matching_cancel_MIN = etype_matching_cancel_active;
constexpr etype_matching_cancel etype_matching_cancel_MAX = etype_matching_waitcreate_timeout;
constexpr int etype_matching_cancel_ARRAYSIZE = etype_matching_cancel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* etype_matching_cancel_descriptor();
template<typename T>
inline const std::string& etype_matching_cancel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, etype_matching_cancel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function etype_matching_cancel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    etype_matching_cancel_descriptor(), enum_t_value);
}
inline bool etype_matching_cancel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, etype_matching_cancel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<etype_matching_cancel>(
    etype_matching_cancel_descriptor(), name, value);
}
enum ematching_confirm_stat : int {
  ematching_confirm_success = 0,
  ematching_confirm_stage = 1,
  ematching_confirm_roomnotfind = 2,
  ematching_confirm_roommembernotfind = 3,
  ematching_confirm_stat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ematching_confirm_stat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ematching_confirm_stat_IsValid(int value);
constexpr ematching_confirm_stat ematching_confirm_stat_MIN = ematching_confirm_success;
constexpr ematching_confirm_stat ematching_confirm_stat_MAX = ematching_confirm_roommembernotfind;
constexpr int ematching_confirm_stat_ARRAYSIZE = ematching_confirm_stat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ematching_confirm_stat_descriptor();
template<typename T>
inline const std::string& ematching_confirm_stat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ematching_confirm_stat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ematching_confirm_stat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ematching_confirm_stat_descriptor(), enum_t_value);
}
inline bool ematching_confirm_stat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ematching_confirm_stat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ematching_confirm_stat>(
    ematching_confirm_stat_descriptor(), name, value);
}
// ===================================================================

class PROBUFF_NET_HEARTBEAT PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_HEARTBEAT) */ {
 public:
  inline PROBUFF_NET_HEARTBEAT() : PROBUFF_NET_HEARTBEAT(nullptr) {}
  virtual ~PROBUFF_NET_HEARTBEAT();

  PROBUFF_NET_HEARTBEAT(const PROBUFF_NET_HEARTBEAT& from);
  PROBUFF_NET_HEARTBEAT(PROBUFF_NET_HEARTBEAT&& from) noexcept
    : PROBUFF_NET_HEARTBEAT() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_HEARTBEAT& operator=(const PROBUFF_NET_HEARTBEAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_HEARTBEAT& operator=(PROBUFF_NET_HEARTBEAT&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_HEARTBEAT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_HEARTBEAT* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_HEARTBEAT*>(
               &_PROBUFF_NET_HEARTBEAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PROBUFF_NET_HEARTBEAT& a, PROBUFF_NET_HEARTBEAT& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_HEARTBEAT* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_HEARTBEAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_HEARTBEAT* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_HEARTBEAT>(nullptr);
  }

  PROBUFF_NET_HEARTBEAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_HEARTBEAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_HEARTBEAT& from);
  void MergeFrom(const PROBUFF_NET_HEARTBEAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_HEARTBEAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_HEARTBEAT";
  }
  protected:
  explicit PROBUFF_NET_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_HEARTBEAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_RECHARGE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_RECHARGE) */ {
 public:
  inline PROBUFF_NET_RECHARGE() : PROBUFF_NET_RECHARGE(nullptr) {}
  virtual ~PROBUFF_NET_RECHARGE();

  PROBUFF_NET_RECHARGE(const PROBUFF_NET_RECHARGE& from);
  PROBUFF_NET_RECHARGE(PROBUFF_NET_RECHARGE&& from) noexcept
    : PROBUFF_NET_RECHARGE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_RECHARGE& operator=(const PROBUFF_NET_RECHARGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_RECHARGE& operator=(PROBUFF_NET_RECHARGE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_RECHARGE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_RECHARGE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_RECHARGE*>(
               &_PROBUFF_NET_RECHARGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PROBUFF_NET_RECHARGE& a, PROBUFF_NET_RECHARGE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_RECHARGE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_RECHARGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_RECHARGE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_RECHARGE>(nullptr);
  }

  PROBUFF_NET_RECHARGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_RECHARGE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_RECHARGE& from);
  void MergeFrom(const PROBUFF_NET_RECHARGE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_RECHARGE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_RECHARGE";
  }
  protected:
  explicit PROBUFF_NET_RECHARGE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRechargeidFieldNumber = 1,
  };
  // int32 m_rechargeid = 1;
  bool has_m_rechargeid() const;
  private:
  bool _internal_has_m_rechargeid() const;
  public:
  void clear_m_rechargeid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_rechargeid() const;
  void set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_rechargeid() const;
  void _internal_set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_RECHARGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_rechargeid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_RECHARGE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_RECHARGE_RESPONSE) */ {
 public:
  inline PROBUFF_NET_RECHARGE_RESPONSE() : PROBUFF_NET_RECHARGE_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_RECHARGE_RESPONSE();

  PROBUFF_NET_RECHARGE_RESPONSE(const PROBUFF_NET_RECHARGE_RESPONSE& from);
  PROBUFF_NET_RECHARGE_RESPONSE(PROBUFF_NET_RECHARGE_RESPONSE&& from) noexcept
    : PROBUFF_NET_RECHARGE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_RECHARGE_RESPONSE& operator=(const PROBUFF_NET_RECHARGE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_RECHARGE_RESPONSE& operator=(PROBUFF_NET_RECHARGE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_RECHARGE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_RECHARGE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_RECHARGE_RESPONSE*>(
               &_PROBUFF_NET_RECHARGE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PROBUFF_NET_RECHARGE_RESPONSE& a, PROBUFF_NET_RECHARGE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_RECHARGE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_RECHARGE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_RECHARGE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_RECHARGE_RESPONSE>(nullptr);
  }

  PROBUFF_NET_RECHARGE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_RECHARGE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_RECHARGE_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_RECHARGE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_RECHARGE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_RECHARGE_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_RECHARGE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PROBUFF_NET_RECHARGE_RESPONSE_Estat Estat;
  static constexpr Estat Estat_Success =
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_Success;
  static constexpr Estat Estat_NotRechargeId =
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_NotRechargeId;
  static constexpr Estat Estat_MaxCount =
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MaxCount;
  static inline bool Estat_IsValid(int value) {
    return PROBUFF_NET_RECHARGE_RESPONSE_Estat_IsValid(value);
  }
  static constexpr Estat Estat_MIN =
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MIN;
  static constexpr Estat Estat_MAX =
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_MAX;
  static constexpr int Estat_ARRAYSIZE =
    PROBUFF_NET_RECHARGE_RESPONSE_Estat_Estat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Estat_descriptor() {
    return PROBUFF_NET_RECHARGE_RESPONSE_Estat_descriptor();
  }
  template<typename T>
  static inline const std::string& Estat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Estat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Estat_Name.");
    return PROBUFF_NET_RECHARGE_RESPONSE_Estat_Name(enum_t_value);
  }
  static inline bool Estat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Estat* value) {
    return PROBUFF_NET_RECHARGE_RESPONSE_Estat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMOrderidFieldNumber = 3,
    kMRechargeidFieldNumber = 1,
    kMStatFieldNumber = 2,
  };
  // string m_orderid = 3;
  bool has_m_orderid() const;
  private:
  bool _internal_has_m_orderid() const;
  public:
  void clear_m_orderid();
  const std::string& m_orderid() const;
  void set_m_orderid(const std::string& value);
  void set_m_orderid(std::string&& value);
  void set_m_orderid(const char* value);
  void set_m_orderid(const char* value, size_t size);
  std::string* mutable_m_orderid();
  std::string* release_m_orderid();
  void set_allocated_m_orderid(std::string* m_orderid);
  private:
  const std::string& _internal_m_orderid() const;
  void _internal_set_m_orderid(const std::string& value);
  std::string* _internal_mutable_m_orderid();
  public:

  // int32 m_rechargeid = 1;
  bool has_m_rechargeid() const;
  private:
  bool _internal_has_m_rechargeid() const;
  public:
  void clear_m_rechargeid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_rechargeid() const;
  void set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_rechargeid() const;
  void _internal_set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat m_stat = 2;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat m_stat() const;
  void set_m_stat(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat value);
  private:
  ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat _internal_m_stat() const;
  void _internal_set_m_stat(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_orderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_rechargeid_;
  int m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse();
  explicit PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse& other);
  static const PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse*>(&_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class PROBUFF_NET_DELIVER_GOODS_RECHARGE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE) */ {
 public:
  inline PROBUFF_NET_DELIVER_GOODS_RECHARGE() : PROBUFF_NET_DELIVER_GOODS_RECHARGE(nullptr) {}
  virtual ~PROBUFF_NET_DELIVER_GOODS_RECHARGE();

  PROBUFF_NET_DELIVER_GOODS_RECHARGE(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from);
  PROBUFF_NET_DELIVER_GOODS_RECHARGE(PROBUFF_NET_DELIVER_GOODS_RECHARGE&& from) noexcept
    : PROBUFF_NET_DELIVER_GOODS_RECHARGE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_DELIVER_GOODS_RECHARGE& operator=(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_DELIVER_GOODS_RECHARGE& operator=(PROBUFF_NET_DELIVER_GOODS_RECHARGE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_DELIVER_GOODS_RECHARGE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_DELIVER_GOODS_RECHARGE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_DELIVER_GOODS_RECHARGE*>(
               &_PROBUFF_NET_DELIVER_GOODS_RECHARGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PROBUFF_NET_DELIVER_GOODS_RECHARGE& a, PROBUFF_NET_DELIVER_GOODS_RECHARGE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_DELIVER_GOODS_RECHARGE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_DELIVER_GOODS_RECHARGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_DELIVER_GOODS_RECHARGE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_DELIVER_GOODS_RECHARGE>(nullptr);
  }

  PROBUFF_NET_DELIVER_GOODS_RECHARGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_DELIVER_GOODS_RECHARGE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from);
  void MergeFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_DELIVER_GOODS_RECHARGE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE";
  }
  protected:
  explicit PROBUFF_NET_DELIVER_GOODS_RECHARGE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMItemsFieldNumber = 4,
    kMOrderidFieldNumber = 2,
    kMRechargeidFieldNumber = 1,
    kMGoldFieldNumber = 3,
  };
  // map<int32, int32> m_items = 4;
  int m_items_size() const;
  private:
  int _internal_m_items_size() const;
  public:
  void clear_m_items();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_m_items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_m_items();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      m_items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_m_items();

  // string m_orderid = 2;
  bool has_m_orderid() const;
  private:
  bool _internal_has_m_orderid() const;
  public:
  void clear_m_orderid();
  const std::string& m_orderid() const;
  void set_m_orderid(const std::string& value);
  void set_m_orderid(std::string&& value);
  void set_m_orderid(const char* value);
  void set_m_orderid(const char* value, size_t size);
  std::string* mutable_m_orderid();
  std::string* release_m_orderid();
  void set_allocated_m_orderid(std::string* m_orderid);
  private:
  const std::string& _internal_m_orderid() const;
  void _internal_set_m_orderid(const std::string& value);
  std::string* _internal_mutable_m_orderid();
  public:

  // int32 m_rechargeid = 1;
  bool has_m_rechargeid() const;
  private:
  bool _internal_has_m_rechargeid() const;
  public:
  void clear_m_rechargeid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_rechargeid() const;
  void set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_rechargeid() const;
  void _internal_set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_gold = 3;
  bool has_m_gold() const;
  private:
  bool _internal_has_m_gold() const;
  public:
  void clear_m_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 m_gold() const;
  void set_m_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_gold() const;
  void _internal_set_m_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > m_items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_orderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_rechargeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_gold_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ERROR PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ERROR) */ {
 public:
  inline PROBUFF_NET_ERROR() : PROBUFF_NET_ERROR(nullptr) {}
  virtual ~PROBUFF_NET_ERROR();

  PROBUFF_NET_ERROR(const PROBUFF_NET_ERROR& from);
  PROBUFF_NET_ERROR(PROBUFF_NET_ERROR&& from) noexcept
    : PROBUFF_NET_ERROR() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ERROR& operator=(const PROBUFF_NET_ERROR& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ERROR& operator=(PROBUFF_NET_ERROR&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ERROR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ERROR* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ERROR*>(
               &_PROBUFF_NET_ERROR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PROBUFF_NET_ERROR& a, PROBUFF_NET_ERROR& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ERROR* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ERROR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ERROR* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ERROR>(nullptr);
  }

  PROBUFF_NET_ERROR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ERROR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ERROR& from);
  void MergeFrom(const PROBUFF_NET_ERROR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ERROR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ERROR";
  }
  protected:
  explicit PROBUFF_NET_ERROR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMErrmessageFieldNumber = 2,
  };
  // string m_errmessage = 2;
  bool has_m_errmessage() const;
  private:
  bool _internal_has_m_errmessage() const;
  public:
  void clear_m_errmessage();
  const std::string& m_errmessage() const;
  void set_m_errmessage(const std::string& value);
  void set_m_errmessage(std::string&& value);
  void set_m_errmessage(const char* value);
  void set_m_errmessage(const char* value, size_t size);
  std::string* mutable_m_errmessage();
  std::string* release_m_errmessage();
  void set_allocated_m_errmessage(std::string* m_errmessage);
  private:
  const std::string& _internal_m_errmessage() const;
  void _internal_set_m_errmessage(const std::string& value);
  std::string* _internal_mutable_m_errmessage();
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ERROR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_errmessage_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_GET_TIME PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_GET_TIME) */ {
 public:
  inline PROBUFF_NET_GET_TIME() : PROBUFF_NET_GET_TIME(nullptr) {}
  virtual ~PROBUFF_NET_GET_TIME();

  PROBUFF_NET_GET_TIME(const PROBUFF_NET_GET_TIME& from);
  PROBUFF_NET_GET_TIME(PROBUFF_NET_GET_TIME&& from) noexcept
    : PROBUFF_NET_GET_TIME() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_GET_TIME& operator=(const PROBUFF_NET_GET_TIME& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_GET_TIME& operator=(PROBUFF_NET_GET_TIME&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_GET_TIME& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_GET_TIME* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_GET_TIME*>(
               &_PROBUFF_NET_GET_TIME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PROBUFF_NET_GET_TIME& a, PROBUFF_NET_GET_TIME& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_GET_TIME* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_GET_TIME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_GET_TIME* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_GET_TIME>(nullptr);
  }

  PROBUFF_NET_GET_TIME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_GET_TIME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_GET_TIME& from);
  void MergeFrom(const PROBUFF_NET_GET_TIME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_GET_TIME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_GET_TIME";
  }
  protected:
  explicit PROBUFF_NET_GET_TIME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_GET_TIME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_GET_TIME_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_GET_TIME_RESPONSE) */ {
 public:
  inline PROBUFF_NET_GET_TIME_RESPONSE() : PROBUFF_NET_GET_TIME_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_GET_TIME_RESPONSE();

  PROBUFF_NET_GET_TIME_RESPONSE(const PROBUFF_NET_GET_TIME_RESPONSE& from);
  PROBUFF_NET_GET_TIME_RESPONSE(PROBUFF_NET_GET_TIME_RESPONSE&& from) noexcept
    : PROBUFF_NET_GET_TIME_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_GET_TIME_RESPONSE& operator=(const PROBUFF_NET_GET_TIME_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_GET_TIME_RESPONSE& operator=(PROBUFF_NET_GET_TIME_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_GET_TIME_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_GET_TIME_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_GET_TIME_RESPONSE*>(
               &_PROBUFF_NET_GET_TIME_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PROBUFF_NET_GET_TIME_RESPONSE& a, PROBUFF_NET_GET_TIME_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_GET_TIME_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_GET_TIME_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_GET_TIME_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_GET_TIME_RESPONSE>(nullptr);
  }

  PROBUFF_NET_GET_TIME_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_GET_TIME_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_GET_TIME_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_GET_TIME_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_GET_TIME_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_GET_TIME_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_GET_TIME_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMUtcFieldNumber = 1,
  };
  // int32 m_utc = 1;
  bool has_m_utc() const;
  private:
  bool _internal_has_m_utc() const;
  public:
  void clear_m_utc();
  ::PROTOBUF_NAMESPACE_ID::int32 m_utc() const;
  void set_m_utc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_utc() const;
  void _internal_set_m_utc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_utc_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_NOTICE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_NOTICE) */ {
 public:
  inline PROBUFF_NET_NOTICE() : PROBUFF_NET_NOTICE(nullptr) {}
  virtual ~PROBUFF_NET_NOTICE();

  PROBUFF_NET_NOTICE(const PROBUFF_NET_NOTICE& from);
  PROBUFF_NET_NOTICE(PROBUFF_NET_NOTICE&& from) noexcept
    : PROBUFF_NET_NOTICE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_NOTICE& operator=(const PROBUFF_NET_NOTICE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_NOTICE& operator=(PROBUFF_NET_NOTICE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_NOTICE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_NOTICE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_NOTICE*>(
               &_PROBUFF_NET_NOTICE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PROBUFF_NET_NOTICE& a, PROBUFF_NET_NOTICE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_NOTICE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_NOTICE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_NOTICE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_NOTICE>(nullptr);
  }

  PROBUFF_NET_NOTICE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_NOTICE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_NOTICE& from);
  void MergeFrom(const PROBUFF_NET_NOTICE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_NOTICE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_NOTICE";
  }
  protected:
  explicit PROBUFF_NET_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_NOTICE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_NOTICE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_NOTICE_RESPONSE) */ {
 public:
  inline PROBUFF_NET_NOTICE_RESPONSE() : PROBUFF_NET_NOTICE_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_NOTICE_RESPONSE();

  PROBUFF_NET_NOTICE_RESPONSE(const PROBUFF_NET_NOTICE_RESPONSE& from);
  PROBUFF_NET_NOTICE_RESPONSE(PROBUFF_NET_NOTICE_RESPONSE&& from) noexcept
    : PROBUFF_NET_NOTICE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_NOTICE_RESPONSE& operator=(const PROBUFF_NET_NOTICE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_NOTICE_RESPONSE& operator=(PROBUFF_NET_NOTICE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_NOTICE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_NOTICE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_NOTICE_RESPONSE*>(
               &_PROBUFF_NET_NOTICE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PROBUFF_NET_NOTICE_RESPONSE& a, PROBUFF_NET_NOTICE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_NOTICE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_NOTICE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_NOTICE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_NOTICE_RESPONSE>(nullptr);
  }

  PROBUFF_NET_NOTICE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_NOTICE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_NOTICE_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_NOTICE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_NOTICE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_NOTICE_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_NOTICE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMNoticesFieldNumber = 1,
  };
  // repeated .pbdb.db_notice m_notices = 1;
  int m_notices_size() const;
  private:
  int _internal_m_notices_size() const;
  public:
  void clear_m_notices();
  ::pbdb::db_notice* mutable_m_notices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice >*
      mutable_m_notices();
  private:
  const ::pbdb::db_notice& _internal_m_notices(int index) const;
  ::pbdb::db_notice* _internal_add_m_notices();
  public:
  const ::pbdb::db_notice& m_notices(int index) const;
  ::pbdb::db_notice* add_m_notices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice >&
      m_notices() const;

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice > m_notices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ACOUNT_LOGIN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ACOUNT_LOGIN) */ {
 public:
  inline PROBUFF_NET_ACOUNT_LOGIN() : PROBUFF_NET_ACOUNT_LOGIN(nullptr) {}
  virtual ~PROBUFF_NET_ACOUNT_LOGIN();

  PROBUFF_NET_ACOUNT_LOGIN(const PROBUFF_NET_ACOUNT_LOGIN& from);
  PROBUFF_NET_ACOUNT_LOGIN(PROBUFF_NET_ACOUNT_LOGIN&& from) noexcept
    : PROBUFF_NET_ACOUNT_LOGIN() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ACOUNT_LOGIN& operator=(const PROBUFF_NET_ACOUNT_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ACOUNT_LOGIN& operator=(PROBUFF_NET_ACOUNT_LOGIN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ACOUNT_LOGIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ACOUNT_LOGIN* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ACOUNT_LOGIN*>(
               &_PROBUFF_NET_ACOUNT_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PROBUFF_NET_ACOUNT_LOGIN& a, PROBUFF_NET_ACOUNT_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ACOUNT_LOGIN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ACOUNT_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ACOUNT_LOGIN* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ACOUNT_LOGIN>(nullptr);
  }

  PROBUFF_NET_ACOUNT_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ACOUNT_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN& from);
  void MergeFrom(const PROBUFF_NET_ACOUNT_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ACOUNT_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ACOUNT_LOGIN";
  }
  protected:
  explicit PROBUFF_NET_ACOUNT_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMAccountFieldNumber = 2,
    kMPasswordFieldNumber = 3,
    kMAreaFieldNumber = 1,
  };
  // string m_account = 2;
  bool has_m_account() const;
  private:
  bool _internal_has_m_account() const;
  public:
  void clear_m_account();
  const std::string& m_account() const;
  void set_m_account(const std::string& value);
  void set_m_account(std::string&& value);
  void set_m_account(const char* value);
  void set_m_account(const char* value, size_t size);
  std::string* mutable_m_account();
  std::string* release_m_account();
  void set_allocated_m_account(std::string* m_account);
  private:
  const std::string& _internal_m_account() const;
  void _internal_set_m_account(const std::string& value);
  std::string* _internal_mutable_m_account();
  public:

  // string m_password = 3;
  bool has_m_password() const;
  private:
  bool _internal_has_m_password() const;
  public:
  void clear_m_password();
  const std::string& m_password() const;
  void set_m_password(const std::string& value);
  void set_m_password(std::string&& value);
  void set_m_password(const char* value);
  void set_m_password(const char* value, size_t size);
  std::string* mutable_m_password();
  std::string* release_m_password();
  void set_allocated_m_password(std::string* m_password);
  private:
  const std::string& _internal_m_password() const;
  void _internal_set_m_password(const std::string& value);
  std::string* _internal_mutable_m_password();
  public:

  // int32 m_area = 1;
  bool has_m_area() const;
  private:
  bool _internal_has_m_area() const;
  public:
  void clear_m_area();
  ::PROTOBUF_NAMESPACE_ID::int32 m_area() const;
  void set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_area() const;
  void _internal_set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_password_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_area_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ACOUNT_LOGIN_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE) */ {
 public:
  inline PROBUFF_NET_ACOUNT_LOGIN_RESPONSE() : PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_ACOUNT_LOGIN_RESPONSE();

  PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from);
  PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE&& from) noexcept
    : PROBUFF_NET_ACOUNT_LOGIN_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& operator=(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& operator=(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE*>(
               &_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& a, PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>(nullptr);
  }

  PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMSessionFieldNumber = 3,
    kMAccountFieldNumber = 4,
    kMRoleidFieldNumber = 2,
    kMAreaFieldNumber = 1,
    kMGatewayidFieldNumber = 5,
  };
  // string m_session = 3;
  bool has_m_session() const;
  private:
  bool _internal_has_m_session() const;
  public:
  void clear_m_session();
  const std::string& m_session() const;
  void set_m_session(const std::string& value);
  void set_m_session(std::string&& value);
  void set_m_session(const char* value);
  void set_m_session(const char* value, size_t size);
  std::string* mutable_m_session();
  std::string* release_m_session();
  void set_allocated_m_session(std::string* m_session);
  private:
  const std::string& _internal_m_session() const;
  void _internal_set_m_session(const std::string& value);
  std::string* _internal_mutable_m_session();
  public:

  // string m_account = 4;
  bool has_m_account() const;
  private:
  bool _internal_has_m_account() const;
  public:
  void clear_m_account();
  const std::string& m_account() const;
  void set_m_account(const std::string& value);
  void set_m_account(std::string&& value);
  void set_m_account(const char* value);
  void set_m_account(const char* value, size_t size);
  std::string* mutable_m_account();
  std::string* release_m_account();
  void set_allocated_m_account(std::string* m_account);
  private:
  const std::string& _internal_m_account() const;
  void _internal_set_m_account(const std::string& value);
  std::string* _internal_mutable_m_account();
  public:

  // int64 m_roleid = 2;
  bool has_m_roleid() const;
  private:
  bool _internal_has_m_roleid() const;
  public:
  void clear_m_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid() const;
  void set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_roleid() const;
  void _internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_area = 1;
  bool has_m_area() const;
  private:
  bool _internal_has_m_area() const;
  public:
  void clear_m_area();
  ::PROTOBUF_NAMESPACE_ID::int32 m_area() const;
  void set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_area() const;
  void _internal_set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_gatewayid = 5;
  bool has_m_gatewayid() const;
  private:
  bool _internal_has_m_gatewayid() const;
  public:
  void clear_m_gatewayid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_gatewayid() const;
  void set_m_gatewayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_gatewayid() const;
  void _internal_set_m_gatewayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_account_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_area_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_gatewayid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ROLE_LOGIN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ROLE_LOGIN) */ {
 public:
  inline PROBUFF_NET_ROLE_LOGIN() : PROBUFF_NET_ROLE_LOGIN(nullptr) {}
  virtual ~PROBUFF_NET_ROLE_LOGIN();

  PROBUFF_NET_ROLE_LOGIN(const PROBUFF_NET_ROLE_LOGIN& from);
  PROBUFF_NET_ROLE_LOGIN(PROBUFF_NET_ROLE_LOGIN&& from) noexcept
    : PROBUFF_NET_ROLE_LOGIN() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ROLE_LOGIN& operator=(const PROBUFF_NET_ROLE_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ROLE_LOGIN& operator=(PROBUFF_NET_ROLE_LOGIN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ROLE_LOGIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ROLE_LOGIN* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ROLE_LOGIN*>(
               &_PROBUFF_NET_ROLE_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PROBUFF_NET_ROLE_LOGIN& a, PROBUFF_NET_ROLE_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ROLE_LOGIN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ROLE_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ROLE_LOGIN* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_LOGIN>(nullptr);
  }

  PROBUFF_NET_ROLE_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ROLE_LOGIN& from);
  void MergeFrom(const PROBUFF_NET_ROLE_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ROLE_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ROLE_LOGIN";
  }
  protected:
  explicit PROBUFF_NET_ROLE_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMSessionFieldNumber = 2,
    kMRoleidFieldNumber = 1,
    kMIscreateFieldNumber = 3,
    kMAreaFieldNumber = 4,
    kMGatewayidFieldNumber = 5,
  };
  // string m_session = 2;
  bool has_m_session() const;
  private:
  bool _internal_has_m_session() const;
  public:
  void clear_m_session();
  const std::string& m_session() const;
  void set_m_session(const std::string& value);
  void set_m_session(std::string&& value);
  void set_m_session(const char* value);
  void set_m_session(const char* value, size_t size);
  std::string* mutable_m_session();
  std::string* release_m_session();
  void set_allocated_m_session(std::string* m_session);
  private:
  const std::string& _internal_m_session() const;
  void _internal_set_m_session(const std::string& value);
  std::string* _internal_mutable_m_session();
  public:

  // int64 m_roleid = 1;
  bool has_m_roleid() const;
  private:
  bool _internal_has_m_roleid() const;
  public:
  void clear_m_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid() const;
  void set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_roleid() const;
  void _internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool m_iscreate = 3;
  bool has_m_iscreate() const;
  private:
  bool _internal_has_m_iscreate() const;
  public:
  void clear_m_iscreate();
  bool m_iscreate() const;
  void set_m_iscreate(bool value);
  private:
  bool _internal_m_iscreate() const;
  void _internal_set_m_iscreate(bool value);
  public:

  // int32 m_area = 4;
  bool has_m_area() const;
  private:
  bool _internal_has_m_area() const;
  public:
  void clear_m_area();
  ::PROTOBUF_NAMESPACE_ID::int32 m_area() const;
  void set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_area() const;
  void _internal_set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_gatewayid = 5;
  bool has_m_gatewayid() const;
  private:
  bool _internal_has_m_gatewayid() const;
  public:
  void clear_m_gatewayid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_gatewayid() const;
  void set_m_gatewayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_gatewayid() const;
  void _internal_set_m_gatewayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ROLE_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_session_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid_;
  bool m_iscreate_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_area_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_gatewayid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ROLE_SYNC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ROLE_SYNC) */ {
 public:
  inline PROBUFF_NET_ROLE_SYNC() : PROBUFF_NET_ROLE_SYNC(nullptr) {}
  virtual ~PROBUFF_NET_ROLE_SYNC();

  PROBUFF_NET_ROLE_SYNC(const PROBUFF_NET_ROLE_SYNC& from);
  PROBUFF_NET_ROLE_SYNC(PROBUFF_NET_ROLE_SYNC&& from) noexcept
    : PROBUFF_NET_ROLE_SYNC() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ROLE_SYNC& operator=(const PROBUFF_NET_ROLE_SYNC& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ROLE_SYNC& operator=(PROBUFF_NET_ROLE_SYNC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ROLE_SYNC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ROLE_SYNC* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ROLE_SYNC*>(
               &_PROBUFF_NET_ROLE_SYNC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PROBUFF_NET_ROLE_SYNC& a, PROBUFF_NET_ROLE_SYNC& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ROLE_SYNC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ROLE_SYNC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ROLE_SYNC* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_SYNC>(nullptr);
  }

  PROBUFF_NET_ROLE_SYNC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_SYNC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ROLE_SYNC& from);
  void MergeFrom(const PROBUFF_NET_ROLE_SYNC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ROLE_SYNC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ROLE_SYNC";
  }
  protected:
  explicit PROBUFF_NET_ROLE_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ROLE_SYNC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ROLE_SYNC_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE) */ {
 public:
  inline PROBUFF_NET_ROLE_SYNC_RESPONSE() : PROBUFF_NET_ROLE_SYNC_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_ROLE_SYNC_RESPONSE();

  PROBUFF_NET_ROLE_SYNC_RESPONSE(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from);
  PROBUFF_NET_ROLE_SYNC_RESPONSE(PROBUFF_NET_ROLE_SYNC_RESPONSE&& from) noexcept
    : PROBUFF_NET_ROLE_SYNC_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ROLE_SYNC_RESPONSE& operator=(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ROLE_SYNC_RESPONSE& operator=(PROBUFF_NET_ROLE_SYNC_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ROLE_SYNC_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ROLE_SYNC_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ROLE_SYNC_RESPONSE*>(
               &_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PROBUFF_NET_ROLE_SYNC_RESPONSE& a, PROBUFF_NET_ROLE_SYNC_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ROLE_SYNC_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ROLE_SYNC_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ROLE_SYNC_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_SYNC_RESPONSE>(nullptr);
  }

  PROBUFF_NET_ROLE_SYNC_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ROLE_SYNC_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ROLE_SYNC_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_ROLE_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRoleFieldNumber = 1,
    kMBagFieldNumber = 2,
    kMTaskFieldNumber = 3,
  };
  // .pbdb.db_role m_role = 1;
  bool has_m_role() const;
  private:
  bool _internal_has_m_role() const;
  public:
  void clear_m_role();
  const ::pbdb::db_role& m_role() const;
  ::pbdb::db_role* release_m_role();
  ::pbdb::db_role* mutable_m_role();
  void set_allocated_m_role(::pbdb::db_role* m_role);
  private:
  const ::pbdb::db_role& _internal_m_role() const;
  ::pbdb::db_role* _internal_mutable_m_role();
  public:
  void unsafe_arena_set_allocated_m_role(
      ::pbdb::db_role* m_role);
  ::pbdb::db_role* unsafe_arena_release_m_role();

  // .pbdb.db_bag m_bag = 2;
  bool has_m_bag() const;
  private:
  bool _internal_has_m_bag() const;
  public:
  void clear_m_bag();
  const ::pbdb::db_bag& m_bag() const;
  ::pbdb::db_bag* release_m_bag();
  ::pbdb::db_bag* mutable_m_bag();
  void set_allocated_m_bag(::pbdb::db_bag* m_bag);
  private:
  const ::pbdb::db_bag& _internal_m_bag() const;
  ::pbdb::db_bag* _internal_mutable_m_bag();
  public:
  void unsafe_arena_set_allocated_m_bag(
      ::pbdb::db_bag* m_bag);
  ::pbdb::db_bag* unsafe_arena_release_m_bag();

  // .pbdb.db_task m_task = 3;
  bool has_m_task() const;
  private:
  bool _internal_has_m_task() const;
  public:
  void clear_m_task();
  const ::pbdb::db_task& m_task() const;
  ::pbdb::db_task* release_m_task();
  ::pbdb::db_task* mutable_m_task();
  void set_allocated_m_task(::pbdb::db_task* m_task);
  private:
  const ::pbdb::db_task& _internal_m_task() const;
  ::pbdb::db_task* _internal_mutable_m_task();
  public:
  void unsafe_arena_set_allocated_m_task(
      ::pbdb::db_task* m_task);
  ::pbdb::db_task* unsafe_arena_release_m_task();

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pbdb::db_role* m_role_;
  ::pbdb::db_bag* m_bag_;
  ::pbdb::db_task* m_task_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_BAG_SYNC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_SYNC) */ {
 public:
  inline PROBUFF_NET_BAG_SYNC() : PROBUFF_NET_BAG_SYNC(nullptr) {}
  virtual ~PROBUFF_NET_BAG_SYNC();

  PROBUFF_NET_BAG_SYNC(const PROBUFF_NET_BAG_SYNC& from);
  PROBUFF_NET_BAG_SYNC(PROBUFF_NET_BAG_SYNC&& from) noexcept
    : PROBUFF_NET_BAG_SYNC() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_SYNC& operator=(const PROBUFF_NET_BAG_SYNC& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_SYNC& operator=(PROBUFF_NET_BAG_SYNC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_BAG_SYNC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_BAG_SYNC* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_SYNC*>(
               &_PROBUFF_NET_BAG_SYNC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PROBUFF_NET_BAG_SYNC& a, PROBUFF_NET_BAG_SYNC& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_SYNC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_SYNC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_BAG_SYNC* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_SYNC>(nullptr);
  }

  PROBUFF_NET_BAG_SYNC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_SYNC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_BAG_SYNC& from);
  void MergeFrom(const PROBUFF_NET_BAG_SYNC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_SYNC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_SYNC";
  }
  protected:
  explicit PROBUFF_NET_BAG_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_SYNC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_BAG_SYNC_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE) */ {
 public:
  inline PROBUFF_NET_BAG_SYNC_RESPONSE() : PROBUFF_NET_BAG_SYNC_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_BAG_SYNC_RESPONSE();

  PROBUFF_NET_BAG_SYNC_RESPONSE(const PROBUFF_NET_BAG_SYNC_RESPONSE& from);
  PROBUFF_NET_BAG_SYNC_RESPONSE(PROBUFF_NET_BAG_SYNC_RESPONSE&& from) noexcept
    : PROBUFF_NET_BAG_SYNC_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_SYNC_RESPONSE& operator=(const PROBUFF_NET_BAG_SYNC_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_SYNC_RESPONSE& operator=(PROBUFF_NET_BAG_SYNC_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_BAG_SYNC_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_BAG_SYNC_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_SYNC_RESPONSE*>(
               &_PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PROBUFF_NET_BAG_SYNC_RESPONSE& a, PROBUFF_NET_BAG_SYNC_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_SYNC_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_SYNC_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_BAG_SYNC_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_SYNC_RESPONSE>(nullptr);
  }

  PROBUFF_NET_BAG_SYNC_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_SYNC_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_BAG_SYNC_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_BAG_SYNC_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_SYNC_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_BAG_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMBagFieldNumber = 1,
  };
  // .pbdb.db_bag m_bag = 1;
  bool has_m_bag() const;
  private:
  bool _internal_has_m_bag() const;
  public:
  void clear_m_bag();
  const ::pbdb::db_bag& m_bag() const;
  ::pbdb::db_bag* release_m_bag();
  ::pbdb::db_bag* mutable_m_bag();
  void set_allocated_m_bag(::pbdb::db_bag* m_bag);
  private:
  const ::pbdb::db_bag& _internal_m_bag() const;
  ::pbdb::db_bag* _internal_mutable_m_bag();
  public:
  void unsafe_arena_set_allocated_m_bag(
      ::pbdb::db_bag* m_bag);
  ::pbdb::db_bag* unsafe_arena_release_m_bag();

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pbdb::db_bag* m_bag_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_BAG_UPDATE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_UPDATE) */ {
 public:
  inline PROBUFF_NET_BAG_UPDATE() : PROBUFF_NET_BAG_UPDATE(nullptr) {}
  virtual ~PROBUFF_NET_BAG_UPDATE();

  PROBUFF_NET_BAG_UPDATE(const PROBUFF_NET_BAG_UPDATE& from);
  PROBUFF_NET_BAG_UPDATE(PROBUFF_NET_BAG_UPDATE&& from) noexcept
    : PROBUFF_NET_BAG_UPDATE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_UPDATE& operator=(const PROBUFF_NET_BAG_UPDATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_UPDATE& operator=(PROBUFF_NET_BAG_UPDATE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_BAG_UPDATE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_BAG_UPDATE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_UPDATE*>(
               &_PROBUFF_NET_BAG_UPDATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PROBUFF_NET_BAG_UPDATE& a, PROBUFF_NET_BAG_UPDATE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_UPDATE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_UPDATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_BAG_UPDATE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE>(nullptr);
  }

  PROBUFF_NET_BAG_UPDATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_BAG_UPDATE& from);
  void MergeFrom(const PROBUFF_NET_BAG_UPDATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_UPDATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_UPDATE";
  }
  protected:
  explicit PROBUFF_NET_BAG_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_UPDATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem) */ {
 public:
  inline PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem() : PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(nullptr) {}
  virtual ~PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem();

  PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from);
  PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem&& from) noexcept
    : PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& operator=(const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& operator=(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem*>(
               &_PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& a, PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem>(nullptr);
  }

  PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from);
  void MergeFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem";
  }
  protected:
  explicit PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMIdFieldNumber = 1,
    kMCountFieldNumber = 2,
  };
  // int32 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int32 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_count = 2;
  bool has_m_count() const;
  private:
  bool _internal_has_m_count() const;
  public:
  void clear_m_count();
  ::PROTOBUF_NAMESPACE_ID::int32 m_count() const;
  void set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_count() const;
  void _internal_set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_count_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_BAG_UPDATE_RESPONSE_additem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem) */ {
 public:
  inline PROBUFF_NET_BAG_UPDATE_RESPONSE_additem() : PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(nullptr) {}
  virtual ~PROBUFF_NET_BAG_UPDATE_RESPONSE_additem();

  PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from);
  PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem&& from) noexcept
    : PROBUFF_NET_BAG_UPDATE_RESPONSE_additem() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& operator=(const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& operator=(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem*>(
               &_PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& a, PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE_RESPONSE_additem>(nullptr);
  }

  PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE_RESPONSE_additem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from);
  void MergeFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem";
  }
  protected:
  explicit PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMIdFieldNumber = 1,
    kMCountFieldNumber = 2,
  };
  // int32 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int32 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_count = 2;
  bool has_m_count() const;
  private:
  bool _internal_has_m_count() const;
  public:
  void clear_m_count();
  ::PROTOBUF_NAMESPACE_ID::int32 m_count() const;
  void set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_count() const;
  void _internal_set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_count_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_BAG_UPDATE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE) */ {
 public:
  inline PROBUFF_NET_BAG_UPDATE_RESPONSE() : PROBUFF_NET_BAG_UPDATE_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_BAG_UPDATE_RESPONSE();

  PROBUFF_NET_BAG_UPDATE_RESPONSE(const PROBUFF_NET_BAG_UPDATE_RESPONSE& from);
  PROBUFF_NET_BAG_UPDATE_RESPONSE(PROBUFF_NET_BAG_UPDATE_RESPONSE&& from) noexcept
    : PROBUFF_NET_BAG_UPDATE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_BAG_UPDATE_RESPONSE& operator=(const PROBUFF_NET_BAG_UPDATE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_BAG_UPDATE_RESPONSE& operator=(PROBUFF_NET_BAG_UPDATE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_BAG_UPDATE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_BAG_UPDATE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_BAG_UPDATE_RESPONSE*>(
               &_PROBUFF_NET_BAG_UPDATE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PROBUFF_NET_BAG_UPDATE_RESPONSE& a, PROBUFF_NET_BAG_UPDATE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_BAG_UPDATE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_BAG_UPDATE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE_RESPONSE>(nullptr);
  }

  PROBUFF_NET_BAG_UPDATE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_BAG_UPDATE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_BAG_UPDATE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem delitem;
  typedef PROBUFF_NET_BAG_UPDATE_RESPONSE_additem additem;

  // accessors -------------------------------------------------------

  enum : int {
    kMDelitemsFieldNumber = 1,
    kMDelnostackitemsFieldNumber = 2,
    kMAdditemsFieldNumber = 3,
    kMAddnostackitemsFieldNumber = 4,
  };
  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem m_delitems = 1;
  int m_delitems_size() const;
  private:
  int _internal_m_delitems_size() const;
  public:
  void clear_m_delitems();
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* mutable_m_delitems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem >*
      mutable_m_delitems();
  private:
  const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& _internal_m_delitems(int index) const;
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* _internal_add_m_delitems();
  public:
  const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& m_delitems(int index) const;
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* add_m_delitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem >&
      m_delitems() const;

  // repeated int32 m_delnostackitems = 2;
  int m_delnostackitems_size() const;
  private:
  int _internal_m_delnostackitems_size() const;
  public:
  void clear_m_delnostackitems();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_delnostackitems(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_m_delnostackitems() const;
  void _internal_add_m_delnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_m_delnostackitems();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 m_delnostackitems(int index) const;
  void set_m_delnostackitems(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_m_delnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      m_delnostackitems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_m_delnostackitems();

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem m_additems = 3;
  int m_additems_size() const;
  private:
  int _internal_m_additems_size() const;
  public:
  void clear_m_additems();
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* mutable_m_additems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem >*
      mutable_m_additems();
  private:
  const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& _internal_m_additems(int index) const;
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* _internal_add_m_additems();
  public:
  const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& m_additems(int index) const;
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* add_m_additems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem >&
      m_additems() const;

  // repeated int32 m_addnostackitems = 4;
  int m_addnostackitems_size() const;
  private:
  int _internal_m_addnostackitems_size() const;
  public:
  void clear_m_addnostackitems();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_addnostackitems(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_m_addnostackitems() const;
  void _internal_add_m_addnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_m_addnostackitems();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 m_addnostackitems(int index) const;
  void set_m_addnostackitems(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_m_addnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      m_addnostackitems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_m_addnostackitems();

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem > m_delitems_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > m_delnostackitems_;
  mutable std::atomic<int> _m_delnostackitems_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem > m_additems_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > m_addnostackitems_;
  mutable std::atomic<int> _m_addnostackitems_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_CMD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CMD) */ {
 public:
  inline PROBUFF_NET_CMD() : PROBUFF_NET_CMD(nullptr) {}
  virtual ~PROBUFF_NET_CMD();

  PROBUFF_NET_CMD(const PROBUFF_NET_CMD& from);
  PROBUFF_NET_CMD(PROBUFF_NET_CMD&& from) noexcept
    : PROBUFF_NET_CMD() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CMD& operator=(const PROBUFF_NET_CMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CMD& operator=(PROBUFF_NET_CMD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_CMD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_CMD* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CMD*>(
               &_PROBUFF_NET_CMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PROBUFF_NET_CMD& a, PROBUFF_NET_CMD& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CMD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CMD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_CMD* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_CMD>(nullptr);
  }

  PROBUFF_NET_CMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_CMD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_CMD& from);
  void MergeFrom(const PROBUFF_NET_CMD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CMD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_CMD";
  }
  protected:
  explicit PROBUFF_NET_CMD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMCmdFieldNumber = 1,
  };
  // string m_cmd = 1;
  bool has_m_cmd() const;
  private:
  bool _internal_has_m_cmd() const;
  public:
  void clear_m_cmd();
  const std::string& m_cmd() const;
  void set_m_cmd(const std::string& value);
  void set_m_cmd(std::string&& value);
  void set_m_cmd(const char* value);
  void set_m_cmd(const char* value, size_t size);
  std::string* mutable_m_cmd();
  std::string* release_m_cmd();
  void set_allocated_m_cmd(std::string* m_cmd);
  private:
  const std::string& _internal_m_cmd() const;
  void _internal_set_m_cmd(const std::string& value);
  std::string* _internal_mutable_m_cmd();
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CMD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_cmd_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_CHAT PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CHAT) */ {
 public:
  inline PROBUFF_NET_CHAT() : PROBUFF_NET_CHAT(nullptr) {}
  virtual ~PROBUFF_NET_CHAT();

  PROBUFF_NET_CHAT(const PROBUFF_NET_CHAT& from);
  PROBUFF_NET_CHAT(PROBUFF_NET_CHAT&& from) noexcept
    : PROBUFF_NET_CHAT() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CHAT& operator=(const PROBUFF_NET_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CHAT& operator=(PROBUFF_NET_CHAT&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_CHAT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_CHAT* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CHAT*>(
               &_PROBUFF_NET_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PROBUFF_NET_CHAT& a, PROBUFF_NET_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CHAT* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_CHAT* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_CHAT>(nullptr);
  }

  PROBUFF_NET_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_CHAT& from);
  void MergeFrom(const PROBUFF_NET_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_CHAT";
  }
  protected:
  explicit PROBUFF_NET_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMContentFieldNumber = 3,
    kMTypeFieldNumber = 1,
    kMChannelidFieldNumber = 2,
  };
  // string m_content = 3;
  bool has_m_content() const;
  private:
  bool _internal_has_m_content() const;
  public:
  void clear_m_content();
  const std::string& m_content() const;
  void set_m_content(const std::string& value);
  void set_m_content(std::string&& value);
  void set_m_content(const char* value);
  void set_m_content(const char* value, size_t size);
  std::string* mutable_m_content();
  std::string* release_m_content();
  void set_allocated_m_content(std::string* m_content);
  private:
  const std::string& _internal_m_content() const;
  void _internal_set_m_content(const std::string& value);
  std::string* _internal_mutable_m_content();
  public:

  // int32 m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::PROTOBUF_NAMESPACE_ID::int32 m_type() const;
  void set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_type() const;
  void _internal_set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_channelid = 2;
  bool has_m_channelid() const;
  private:
  bool _internal_has_m_channelid() const;
  public:
  void clear_m_channelid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_channelid() const;
  void set_m_channelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_channelid() const;
  void _internal_set_m_channelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_content_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_channelid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class chatitem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.chatitem) */ {
 public:
  inline chatitem() : chatitem(nullptr) {}
  virtual ~chatitem();

  chatitem(const chatitem& from);
  chatitem(chatitem&& from) noexcept
    : chatitem() {
    *this = ::std::move(from);
  }

  inline chatitem& operator=(const chatitem& from) {
    CopyFrom(from);
    return *this;
  }
  inline chatitem& operator=(chatitem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chatitem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chatitem* internal_default_instance() {
    return reinterpret_cast<const chatitem*>(
               &_chatitem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(chatitem& a, chatitem& b) {
    a.Swap(&b);
  }
  inline void Swap(chatitem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(chatitem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chatitem* New() const final {
    return CreateMaybeMessage<chatitem>(nullptr);
  }

  chatitem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chatitem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chatitem& from);
  void MergeFrom(const chatitem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chatitem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.chatitem";
  }
  protected:
  explicit chatitem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRolenameFieldNumber = 2,
    kMContentFieldNumber = 3,
    kMRoleidFieldNumber = 1,
    kMUtcFieldNumber = 4,
  };
  // string m_rolename = 2;
  bool has_m_rolename() const;
  private:
  bool _internal_has_m_rolename() const;
  public:
  void clear_m_rolename();
  const std::string& m_rolename() const;
  void set_m_rolename(const std::string& value);
  void set_m_rolename(std::string&& value);
  void set_m_rolename(const char* value);
  void set_m_rolename(const char* value, size_t size);
  std::string* mutable_m_rolename();
  std::string* release_m_rolename();
  void set_allocated_m_rolename(std::string* m_rolename);
  private:
  const std::string& _internal_m_rolename() const;
  void _internal_set_m_rolename(const std::string& value);
  std::string* _internal_mutable_m_rolename();
  public:

  // string m_content = 3;
  bool has_m_content() const;
  private:
  bool _internal_has_m_content() const;
  public:
  void clear_m_content();
  const std::string& m_content() const;
  void set_m_content(const std::string& value);
  void set_m_content(std::string&& value);
  void set_m_content(const char* value);
  void set_m_content(const char* value, size_t size);
  std::string* mutable_m_content();
  std::string* release_m_content();
  void set_allocated_m_content(std::string* m_content);
  private:
  const std::string& _internal_m_content() const;
  void _internal_set_m_content(const std::string& value);
  std::string* _internal_mutable_m_content();
  public:

  // int64 m_roleid = 1;
  bool has_m_roleid() const;
  private:
  bool _internal_has_m_roleid() const;
  public:
  void clear_m_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid() const;
  void set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_roleid() const;
  void _internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_utc = 4;
  bool has_m_utc() const;
  private:
  bool _internal_has_m_utc() const;
  public:
  void clear_m_utc();
  ::PROTOBUF_NAMESPACE_ID::int32 m_utc() const;
  void set_m_utc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_utc() const;
  void _internal_set_m_utc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.chatitem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_rolename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_content_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_utc_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_CHAT_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CHAT_RESPONSE) */ {
 public:
  inline PROBUFF_NET_CHAT_RESPONSE() : PROBUFF_NET_CHAT_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_CHAT_RESPONSE();

  PROBUFF_NET_CHAT_RESPONSE(const PROBUFF_NET_CHAT_RESPONSE& from);
  PROBUFF_NET_CHAT_RESPONSE(PROBUFF_NET_CHAT_RESPONSE&& from) noexcept
    : PROBUFF_NET_CHAT_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CHAT_RESPONSE& operator=(const PROBUFF_NET_CHAT_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CHAT_RESPONSE& operator=(PROBUFF_NET_CHAT_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_CHAT_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_CHAT_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CHAT_RESPONSE*>(
               &_PROBUFF_NET_CHAT_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PROBUFF_NET_CHAT_RESPONSE& a, PROBUFF_NET_CHAT_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CHAT_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CHAT_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_CHAT_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_CHAT_RESPONSE>(nullptr);
  }

  PROBUFF_NET_CHAT_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_CHAT_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_CHAT_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_CHAT_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CHAT_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_CHAT_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_CHAT_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMChatlistFieldNumber = 3,
    kMTypeFieldNumber = 1,
    kMChannelidFieldNumber = 2,
    kMStatFieldNumber = 4,
  };
  // repeated .pbnet.chatitem m_chatlist = 3;
  int m_chatlist_size() const;
  private:
  int _internal_m_chatlist_size() const;
  public:
  void clear_m_chatlist();
  ::pbnet::chatitem* mutable_m_chatlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem >*
      mutable_m_chatlist();
  private:
  const ::pbnet::chatitem& _internal_m_chatlist(int index) const;
  ::pbnet::chatitem* _internal_add_m_chatlist();
  public:
  const ::pbnet::chatitem& m_chatlist(int index) const;
  ::pbnet::chatitem* add_m_chatlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem >&
      m_chatlist() const;

  // int32 m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::PROTOBUF_NAMESPACE_ID::int32 m_type() const;
  void set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_type() const;
  void _internal_set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_channelid = 2;
  bool has_m_channelid() const;
  private:
  bool _internal_has_m_channelid() const;
  public:
  void clear_m_channelid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_channelid() const;
  void set_m_channelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_channelid() const;
  void _internal_set_m_channelid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool m_stat = 4;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  bool m_stat() const;
  void set_m_stat(bool value);
  private:
  bool _internal_m_stat() const;
  void _internal_set_m_stat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CHAT_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem > m_chatlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_channelid_;
  bool m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_SWITCH_LINE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SWITCH_LINE) */ {
 public:
  inline PROBUFF_NET_SWITCH_LINE() : PROBUFF_NET_SWITCH_LINE(nullptr) {}
  virtual ~PROBUFF_NET_SWITCH_LINE();

  PROBUFF_NET_SWITCH_LINE(const PROBUFF_NET_SWITCH_LINE& from);
  PROBUFF_NET_SWITCH_LINE(PROBUFF_NET_SWITCH_LINE&& from) noexcept
    : PROBUFF_NET_SWITCH_LINE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SWITCH_LINE& operator=(const PROBUFF_NET_SWITCH_LINE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SWITCH_LINE& operator=(PROBUFF_NET_SWITCH_LINE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_SWITCH_LINE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_SWITCH_LINE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SWITCH_LINE*>(
               &_PROBUFF_NET_SWITCH_LINE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PROBUFF_NET_SWITCH_LINE& a, PROBUFF_NET_SWITCH_LINE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SWITCH_LINE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SWITCH_LINE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_SWITCH_LINE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_SWITCH_LINE>(nullptr);
  }

  PROBUFF_NET_SWITCH_LINE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_SWITCH_LINE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_SWITCH_LINE& from);
  void MergeFrom(const PROBUFF_NET_SWITCH_LINE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SWITCH_LINE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_SWITCH_LINE";
  }
  protected:
  explicit PROBUFF_NET_SWITCH_LINE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMLineFieldNumber = 1,
  };
  // int32 m_line = 1;
  bool has_m_line() const;
  private:
  bool _internal_has_m_line() const;
  public:
  void clear_m_line();
  ::PROTOBUF_NAMESPACE_ID::int32 m_line() const;
  void set_m_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_line() const;
  void _internal_set_m_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SWITCH_LINE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_line_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_SWITCH_LINE_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE) */ {
 public:
  inline PROBUFF_NET_SWITCH_LINE_RESPONSE() : PROBUFF_NET_SWITCH_LINE_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_SWITCH_LINE_RESPONSE();

  PROBUFF_NET_SWITCH_LINE_RESPONSE(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from);
  PROBUFF_NET_SWITCH_LINE_RESPONSE(PROBUFF_NET_SWITCH_LINE_RESPONSE&& from) noexcept
    : PROBUFF_NET_SWITCH_LINE_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SWITCH_LINE_RESPONSE& operator=(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SWITCH_LINE_RESPONSE& operator=(PROBUFF_NET_SWITCH_LINE_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_SWITCH_LINE_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_SWITCH_LINE_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SWITCH_LINE_RESPONSE*>(
               &_PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PROBUFF_NET_SWITCH_LINE_RESPONSE& a, PROBUFF_NET_SWITCH_LINE_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SWITCH_LINE_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SWITCH_LINE_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_SWITCH_LINE_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_SWITCH_LINE_RESPONSE>(nullptr);
  }

  PROBUFF_NET_SWITCH_LINE_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_SWITCH_LINE_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SWITCH_LINE_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_SWITCH_LINE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMLineFieldNumber = 1,
    kMStatFieldNumber = 2,
  };
  // int32 m_line = 1;
  bool has_m_line() const;
  private:
  bool _internal_has_m_line() const;
  public:
  void clear_m_line();
  ::PROTOBUF_NAMESPACE_ID::int32 m_line() const;
  void set_m_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_line() const;
  void _internal_set_m_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool m_stat = 2;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  bool m_stat() const;
  void set_m_stat(bool value);
  private:
  bool _internal_m_stat() const;
  void _internal_set_m_stat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_line_;
  bool m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_LIST PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_LIST) */ {
 public:
  inline PROBUFF_NET_MAIL_LIST() : PROBUFF_NET_MAIL_LIST(nullptr) {}
  virtual ~PROBUFF_NET_MAIL_LIST();

  PROBUFF_NET_MAIL_LIST(const PROBUFF_NET_MAIL_LIST& from);
  PROBUFF_NET_MAIL_LIST(PROBUFF_NET_MAIL_LIST&& from) noexcept
    : PROBUFF_NET_MAIL_LIST() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_LIST& operator=(const PROBUFF_NET_MAIL_LIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_LIST& operator=(PROBUFF_NET_MAIL_LIST&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_LIST& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_LIST* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_LIST*>(
               &_PROBUFF_NET_MAIL_LIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PROBUFF_NET_MAIL_LIST& a, PROBUFF_NET_MAIL_LIST& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_LIST* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_LIST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_LIST* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_LIST>(nullptr);
  }

  PROBUFF_NET_MAIL_LIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_LIST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_LIST& from);
  void MergeFrom(const PROBUFF_NET_MAIL_LIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_LIST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_LIST";
  }
  protected:
  explicit PROBUFF_NET_MAIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_LIST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse();
  explicit PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse& other);
  static const PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse*>(&_PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[28];
  }

  public:
};

// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_LIST_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MAIL_LIST_RESPONSE() : PROBUFF_NET_MAIL_LIST_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_MAIL_LIST_RESPONSE();

  PROBUFF_NET_MAIL_LIST_RESPONSE(const PROBUFF_NET_MAIL_LIST_RESPONSE& from);
  PROBUFF_NET_MAIL_LIST_RESPONSE(PROBUFF_NET_MAIL_LIST_RESPONSE&& from) noexcept
    : PROBUFF_NET_MAIL_LIST_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_LIST_RESPONSE& operator=(const PROBUFF_NET_MAIL_LIST_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_LIST_RESPONSE& operator=(PROBUFF_NET_MAIL_LIST_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_LIST_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_LIST_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_LIST_RESPONSE*>(
               &_PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PROBUFF_NET_MAIL_LIST_RESPONSE& a, PROBUFF_NET_MAIL_LIST_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_LIST_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_LIST_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_LIST_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_LIST_RESPONSE>(nullptr);
  }

  PROBUFF_NET_MAIL_LIST_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_LIST_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_LIST_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MAIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMMailFieldNumber = 1,
  };
  // map<int32, .pbdb.mail> m_mail = 1;
  int m_mail_size() const;
  private:
  int _internal_m_mail_size() const;
  public:
  void clear_m_mail();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
      _internal_m_mail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
      _internal_mutable_m_mail();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
      m_mail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
      mutable_m_mail();

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > m_mail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_READ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_READ) */ {
 public:
  inline PROBUFF_NET_MAIL_READ() : PROBUFF_NET_MAIL_READ(nullptr) {}
  virtual ~PROBUFF_NET_MAIL_READ();

  PROBUFF_NET_MAIL_READ(const PROBUFF_NET_MAIL_READ& from);
  PROBUFF_NET_MAIL_READ(PROBUFF_NET_MAIL_READ&& from) noexcept
    : PROBUFF_NET_MAIL_READ() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_READ& operator=(const PROBUFF_NET_MAIL_READ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_READ& operator=(PROBUFF_NET_MAIL_READ&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_READ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_READ* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_READ*>(
               &_PROBUFF_NET_MAIL_READ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PROBUFF_NET_MAIL_READ& a, PROBUFF_NET_MAIL_READ& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_READ* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_READ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_READ* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_READ>(nullptr);
  }

  PROBUFF_NET_MAIL_READ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_READ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_READ& from);
  void MergeFrom(const PROBUFF_NET_MAIL_READ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_READ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_READ";
  }
  protected:
  explicit PROBUFF_NET_MAIL_READ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMailidFieldNumber = 1,
  };
  // int64 m_mailid = 1;
  bool has_m_mailid() const;
  private:
  bool _internal_has_m_mailid() const;
  public:
  void clear_m_mailid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_mailid() const;
  void set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_mailid() const;
  void _internal_set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_READ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_mailid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_READ_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MAIL_READ_RESPONSE() : PROBUFF_NET_MAIL_READ_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_MAIL_READ_RESPONSE();

  PROBUFF_NET_MAIL_READ_RESPONSE(const PROBUFF_NET_MAIL_READ_RESPONSE& from);
  PROBUFF_NET_MAIL_READ_RESPONSE(PROBUFF_NET_MAIL_READ_RESPONSE&& from) noexcept
    : PROBUFF_NET_MAIL_READ_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_READ_RESPONSE& operator=(const PROBUFF_NET_MAIL_READ_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_READ_RESPONSE& operator=(PROBUFF_NET_MAIL_READ_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_READ_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_READ_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_READ_RESPONSE*>(
               &_PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PROBUFF_NET_MAIL_READ_RESPONSE& a, PROBUFF_NET_MAIL_READ_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_READ_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_READ_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_READ_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_READ_RESPONSE>(nullptr);
  }

  PROBUFF_NET_MAIL_READ_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_READ_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_READ_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_MAIL_READ_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_READ_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_READ_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MAIL_READ_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMailidFieldNumber = 1,
    kMStatFieldNumber = 2,
  };
  // int64 m_mailid = 1;
  bool has_m_mailid() const;
  private:
  bool _internal_has_m_mailid() const;
  public:
  void clear_m_mailid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_mailid() const;
  void set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_mailid() const;
  void _internal_set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool m_stat = 2;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  bool m_stat() const;
  void set_m_stat(bool value);
  private:
  bool _internal_m_stat() const;
  void _internal_set_m_stat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_mailid_;
  bool m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_DRAW PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_DRAW) */ {
 public:
  inline PROBUFF_NET_MAIL_DRAW() : PROBUFF_NET_MAIL_DRAW(nullptr) {}
  virtual ~PROBUFF_NET_MAIL_DRAW();

  PROBUFF_NET_MAIL_DRAW(const PROBUFF_NET_MAIL_DRAW& from);
  PROBUFF_NET_MAIL_DRAW(PROBUFF_NET_MAIL_DRAW&& from) noexcept
    : PROBUFF_NET_MAIL_DRAW() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_DRAW& operator=(const PROBUFF_NET_MAIL_DRAW& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_DRAW& operator=(PROBUFF_NET_MAIL_DRAW&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_DRAW& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_DRAW* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_DRAW*>(
               &_PROBUFF_NET_MAIL_DRAW_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(PROBUFF_NET_MAIL_DRAW& a, PROBUFF_NET_MAIL_DRAW& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_DRAW* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_DRAW* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_DRAW* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DRAW>(nullptr);
  }

  PROBUFF_NET_MAIL_DRAW* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DRAW>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_DRAW& from);
  void MergeFrom(const PROBUFF_NET_MAIL_DRAW& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_DRAW* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_DRAW";
  }
  protected:
  explicit PROBUFF_NET_MAIL_DRAW(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMailidFieldNumber = 1,
  };
  // int64 m_mailid = 1;
  bool has_m_mailid() const;
  private:
  bool _internal_has_m_mailid() const;
  public:
  void clear_m_mailid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_mailid() const;
  void set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_mailid() const;
  void _internal_set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_DRAW)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_mailid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_DRAW_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MAIL_DRAW_RESPONSE() : PROBUFF_NET_MAIL_DRAW_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_MAIL_DRAW_RESPONSE();

  PROBUFF_NET_MAIL_DRAW_RESPONSE(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from);
  PROBUFF_NET_MAIL_DRAW_RESPONSE(PROBUFF_NET_MAIL_DRAW_RESPONSE&& from) noexcept
    : PROBUFF_NET_MAIL_DRAW_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_DRAW_RESPONSE& operator=(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_DRAW_RESPONSE& operator=(PROBUFF_NET_MAIL_DRAW_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_DRAW_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_DRAW_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_DRAW_RESPONSE*>(
               &_PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PROBUFF_NET_MAIL_DRAW_RESPONSE& a, PROBUFF_NET_MAIL_DRAW_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_DRAW_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_DRAW_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_DRAW_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DRAW_RESPONSE>(nullptr);
  }

  PROBUFF_NET_MAIL_DRAW_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DRAW_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_DRAW_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MAIL_DRAW_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMailidFieldNumber = 1,
    kMStatFieldNumber = 2,
  };
  // int64 m_mailid = 1;
  bool has_m_mailid() const;
  private:
  bool _internal_has_m_mailid() const;
  public:
  void clear_m_mailid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_mailid() const;
  void set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_mailid() const;
  void _internal_set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool m_stat = 2;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  bool m_stat() const;
  void set_m_stat(bool value);
  private:
  bool _internal_m_stat() const;
  void _internal_set_m_stat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_mailid_;
  bool m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_DEL PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_DEL) */ {
 public:
  inline PROBUFF_NET_MAIL_DEL() : PROBUFF_NET_MAIL_DEL(nullptr) {}
  virtual ~PROBUFF_NET_MAIL_DEL();

  PROBUFF_NET_MAIL_DEL(const PROBUFF_NET_MAIL_DEL& from);
  PROBUFF_NET_MAIL_DEL(PROBUFF_NET_MAIL_DEL&& from) noexcept
    : PROBUFF_NET_MAIL_DEL() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_DEL& operator=(const PROBUFF_NET_MAIL_DEL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_DEL& operator=(PROBUFF_NET_MAIL_DEL&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_DEL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_DEL* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_DEL*>(
               &_PROBUFF_NET_MAIL_DEL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(PROBUFF_NET_MAIL_DEL& a, PROBUFF_NET_MAIL_DEL& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_DEL* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_DEL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_DEL* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DEL>(nullptr);
  }

  PROBUFF_NET_MAIL_DEL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DEL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_DEL& from);
  void MergeFrom(const PROBUFF_NET_MAIL_DEL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_DEL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_DEL";
  }
  protected:
  explicit PROBUFF_NET_MAIL_DEL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMailidFieldNumber = 1,
  };
  // int64 m_mailid = 1;
  bool has_m_mailid() const;
  private:
  bool _internal_has_m_mailid() const;
  public:
  void clear_m_mailid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_mailid() const;
  void set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_mailid() const;
  void _internal_set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_DEL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_mailid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MAIL_DEL_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MAIL_DEL_RESPONSE() : PROBUFF_NET_MAIL_DEL_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_MAIL_DEL_RESPONSE();

  PROBUFF_NET_MAIL_DEL_RESPONSE(const PROBUFF_NET_MAIL_DEL_RESPONSE& from);
  PROBUFF_NET_MAIL_DEL_RESPONSE(PROBUFF_NET_MAIL_DEL_RESPONSE&& from) noexcept
    : PROBUFF_NET_MAIL_DEL_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MAIL_DEL_RESPONSE& operator=(const PROBUFF_NET_MAIL_DEL_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MAIL_DEL_RESPONSE& operator=(PROBUFF_NET_MAIL_DEL_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MAIL_DEL_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MAIL_DEL_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MAIL_DEL_RESPONSE*>(
               &_PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(PROBUFF_NET_MAIL_DEL_RESPONSE& a, PROBUFF_NET_MAIL_DEL_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MAIL_DEL_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MAIL_DEL_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MAIL_DEL_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DEL_RESPONSE>(nullptr);
  }

  PROBUFF_NET_MAIL_DEL_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MAIL_DEL_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MAIL_DEL_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_MAIL_DEL_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MAIL_DEL_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MAIL_DEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMailidFieldNumber = 1,
    kMStatFieldNumber = 2,
  };
  // int64 m_mailid = 1;
  bool has_m_mailid() const;
  private:
  bool _internal_has_m_mailid() const;
  public:
  void clear_m_mailid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_mailid() const;
  void set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_mailid() const;
  void _internal_set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool m_stat = 2;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  bool m_stat() const;
  void set_m_stat(bool value);
  private:
  bool _internal_m_stat() const;
  void _internal_set_m_stat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_mailid_;
  bool m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class VECTOR2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.VECTOR2) */ {
 public:
  inline VECTOR2() : VECTOR2(nullptr) {}
  virtual ~VECTOR2();

  VECTOR2(const VECTOR2& from);
  VECTOR2(VECTOR2&& from) noexcept
    : VECTOR2() {
    *this = ::std::move(from);
  }

  inline VECTOR2& operator=(const VECTOR2& from) {
    CopyFrom(from);
    return *this;
  }
  inline VECTOR2& operator=(VECTOR2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VECTOR2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VECTOR2* internal_default_instance() {
    return reinterpret_cast<const VECTOR2*>(
               &_VECTOR2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(VECTOR2& a, VECTOR2& b) {
    a.Swap(&b);
  }
  inline void Swap(VECTOR2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VECTOR2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VECTOR2* New() const final {
    return CreateMaybeMessage<VECTOR2>(nullptr);
  }

  VECTOR2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VECTOR2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VECTOR2& from);
  void MergeFrom(const VECTOR2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VECTOR2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.VECTOR2";
  }
  protected:
  explicit VECTOR2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMXFieldNumber = 1,
    kMYFieldNumber = 2,
  };
  // int32 m_x = 1;
  bool has_m_x() const;
  private:
  bool _internal_has_m_x() const;
  public:
  void clear_m_x();
  ::PROTOBUF_NAMESPACE_ID::int32 m_x() const;
  void set_m_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_x() const;
  void _internal_set_m_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_y = 2;
  bool has_m_y() const;
  private:
  bool _internal_has_m_y() const;
  public:
  void clear_m_y();
  ::PROTOBUF_NAMESPACE_ID::int32 m_y() const;
  void set_m_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_y() const;
  void _internal_set_m_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.VECTOR2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_y_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class VECTOR3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.VECTOR3) */ {
 public:
  inline VECTOR3() : VECTOR3(nullptr) {}
  virtual ~VECTOR3();

  VECTOR3(const VECTOR3& from);
  VECTOR3(VECTOR3&& from) noexcept
    : VECTOR3() {
    *this = ::std::move(from);
  }

  inline VECTOR3& operator=(const VECTOR3& from) {
    CopyFrom(from);
    return *this;
  }
  inline VECTOR3& operator=(VECTOR3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VECTOR3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VECTOR3* internal_default_instance() {
    return reinterpret_cast<const VECTOR3*>(
               &_VECTOR3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(VECTOR3& a, VECTOR3& b) {
    a.Swap(&b);
  }
  inline void Swap(VECTOR3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VECTOR3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VECTOR3* New() const final {
    return CreateMaybeMessage<VECTOR3>(nullptr);
  }

  VECTOR3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VECTOR3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VECTOR3& from);
  void MergeFrom(const VECTOR3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VECTOR3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.VECTOR3";
  }
  protected:
  explicit VECTOR3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMXFieldNumber = 1,
    kMYFieldNumber = 2,
    kMZFieldNumber = 3,
  };
  // int32 m_x = 1;
  bool has_m_x() const;
  private:
  bool _internal_has_m_x() const;
  public:
  void clear_m_x();
  ::PROTOBUF_NAMESPACE_ID::int32 m_x() const;
  void set_m_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_x() const;
  void _internal_set_m_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_y = 2;
  bool has_m_y() const;
  private:
  bool _internal_has_m_y() const;
  public:
  void clear_m_y();
  ::PROTOBUF_NAMESPACE_ID::int32 m_y() const;
  void set_m_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_y() const;
  void _internal_set_m_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_z = 3;
  bool has_m_z() const;
  private:
  bool _internal_has_m_z() const;
  public:
  void clear_m_z();
  ::PROTOBUF_NAMESPACE_ID::int32 m_z() const;
  void set_m_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_z() const;
  void _internal_set_m_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.VECTOR3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_z_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class UNIT_POSITION PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.UNIT_POSITION) */ {
 public:
  inline UNIT_POSITION() : UNIT_POSITION(nullptr) {}
  virtual ~UNIT_POSITION();

  UNIT_POSITION(const UNIT_POSITION& from);
  UNIT_POSITION(UNIT_POSITION&& from) noexcept
    : UNIT_POSITION() {
    *this = ::std::move(from);
  }

  inline UNIT_POSITION& operator=(const UNIT_POSITION& from) {
    CopyFrom(from);
    return *this;
  }
  inline UNIT_POSITION& operator=(UNIT_POSITION&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UNIT_POSITION& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UNIT_POSITION* internal_default_instance() {
    return reinterpret_cast<const UNIT_POSITION*>(
               &_UNIT_POSITION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(UNIT_POSITION& a, UNIT_POSITION& b) {
    a.Swap(&b);
  }
  inline void Swap(UNIT_POSITION* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UNIT_POSITION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UNIT_POSITION* New() const final {
    return CreateMaybeMessage<UNIT_POSITION>(nullptr);
  }

  UNIT_POSITION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UNIT_POSITION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UNIT_POSITION& from);
  void MergeFrom(const UNIT_POSITION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UNIT_POSITION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.UNIT_POSITION";
  }
  protected:
  explicit UNIT_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMPositionFieldNumber = 3,
    kMIdFieldNumber = 2,
    kMAngleFieldNumber = 4,
    kMSpeedFieldNumber = 5,
  };
  // .pbnet.VECTOR2 m_position = 3;
  bool has_m_position() const;
  private:
  bool _internal_has_m_position() const;
  public:
  void clear_m_position();
  const ::pbnet::VECTOR2& m_position() const;
  ::pbnet::VECTOR2* release_m_position();
  ::pbnet::VECTOR2* mutable_m_position();
  void set_allocated_m_position(::pbnet::VECTOR2* m_position);
  private:
  const ::pbnet::VECTOR2& _internal_m_position() const;
  ::pbnet::VECTOR2* _internal_mutable_m_position();
  public:
  void unsafe_arena_set_allocated_m_position(
      ::pbnet::VECTOR2* m_position);
  ::pbnet::VECTOR2* unsafe_arena_release_m_position();

  // int64 m_id = 2;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_angle = 4;
  bool has_m_angle() const;
  private:
  bool _internal_has_m_angle() const;
  public:
  void clear_m_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 m_angle() const;
  void set_m_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_angle() const;
  void _internal_set_m_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_speed = 5;
  bool has_m_speed() const;
  private:
  bool _internal_has_m_speed() const;
  public:
  void clear_m_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 m_speed() const;
  void set_m_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_speed() const;
  void _internal_set_m_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.UNIT_POSITION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pbnet::VECTOR2* m_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_speed_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class UnitAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.UnitAttribute) */ {
 public:
  inline UnitAttribute() : UnitAttribute(nullptr) {}
  virtual ~UnitAttribute();

  UnitAttribute(const UnitAttribute& from);
  UnitAttribute(UnitAttribute&& from) noexcept
    : UnitAttribute() {
    *this = ::std::move(from);
  }

  inline UnitAttribute& operator=(const UnitAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnitAttribute& operator=(UnitAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnitAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnitAttribute* internal_default_instance() {
    return reinterpret_cast<const UnitAttribute*>(
               &_UnitAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(UnitAttribute& a, UnitAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(UnitAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnitAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnitAttribute* New() const final {
    return CreateMaybeMessage<UnitAttribute>(nullptr);
  }

  UnitAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnitAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnitAttribute& from);
  void MergeFrom(const UnitAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnitAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.UnitAttribute";
  }
  protected:
  explicit UnitAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMValueFieldNumber = 2,
    kMTypeFieldNumber = 1,
  };
  // int64 m_value = 2;
  bool has_m_value() const;
  private:
  bool _internal_has_m_value() const;
  public:
  void clear_m_value();
  ::PROTOBUF_NAMESPACE_ID::int64 m_value() const;
  void set_m_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_value() const;
  void _internal_set_m_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::PROTOBUF_NAMESPACE_ID::int32 m_type() const;
  void set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_type() const;
  void _internal_set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.UnitAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_type_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class UnitModule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.UnitModule) */ {
 public:
  inline UnitModule() : UnitModule(nullptr) {}
  virtual ~UnitModule();

  UnitModule(const UnitModule& from);
  UnitModule(UnitModule&& from) noexcept
    : UnitModule() {
    *this = ::std::move(from);
  }

  inline UnitModule& operator=(const UnitModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnitModule& operator=(UnitModule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnitModule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnitModule* internal_default_instance() {
    return reinterpret_cast<const UnitModule*>(
               &_UnitModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(UnitModule& a, UnitModule& b) {
    a.Swap(&b);
  }
  inline void Swap(UnitModule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnitModule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnitModule* New() const final {
    return CreateMaybeMessage<UnitModule>(nullptr);
  }

  UnitModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnitModule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnitModule& from);
  void MergeFrom(const UnitModule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnitModule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.UnitModule";
  }
  protected:
  explicit UnitModule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMModulesFieldNumber = 2,
    kMMtypeFieldNumber = 1,
  };
  // repeated .pbnet.UnitAttribute m_modules = 2;
  int m_modules_size() const;
  private:
  int _internal_m_modules_size() const;
  public:
  void clear_m_modules();
  ::pbnet::UnitAttribute* mutable_m_modules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitAttribute >*
      mutable_m_modules();
  private:
  const ::pbnet::UnitAttribute& _internal_m_modules(int index) const;
  ::pbnet::UnitAttribute* _internal_add_m_modules();
  public:
  const ::pbnet::UnitAttribute& m_modules(int index) const;
  ::pbnet::UnitAttribute* add_m_modules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitAttribute >&
      m_modules() const;

  // int32 m_mtype = 1;
  bool has_m_mtype() const;
  private:
  bool _internal_has_m_mtype() const;
  public:
  void clear_m_mtype();
  ::PROTOBUF_NAMESPACE_ID::int32 m_mtype() const;
  void set_m_mtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_mtype() const;
  void _internal_set_m_mtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.UnitModule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitAttribute > m_modules_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_mtype_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class UNIT PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.UNIT) */ {
 public:
  inline UNIT() : UNIT(nullptr) {}
  virtual ~UNIT();

  UNIT(const UNIT& from);
  UNIT(UNIT&& from) noexcept
    : UNIT() {
    *this = ::std::move(from);
  }

  inline UNIT& operator=(const UNIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline UNIT& operator=(UNIT&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UNIT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UNIT* internal_default_instance() {
    return reinterpret_cast<const UNIT*>(
               &_UNIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(UNIT& a, UNIT& b) {
    a.Swap(&b);
  }
  inline void Swap(UNIT* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UNIT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UNIT* New() const final {
    return CreateMaybeMessage<UNIT>(nullptr);
  }

  UNIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UNIT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UNIT& from);
  void MergeFrom(const UNIT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UNIT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.UNIT";
  }
  protected:
  explicit UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMModulesFieldNumber = 4,
    kMPositionFieldNumber = 3,
    kMIdFieldNumber = 2,
    kMTypeFieldNumber = 1,
    kMStatFieldNumber = 5,
  };
  // repeated .pbnet.UnitModule m_modules = 4;
  int m_modules_size() const;
  private:
  int _internal_m_modules_size() const;
  public:
  void clear_m_modules();
  ::pbnet::UnitModule* mutable_m_modules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >*
      mutable_m_modules();
  private:
  const ::pbnet::UnitModule& _internal_m_modules(int index) const;
  ::pbnet::UnitModule* _internal_add_m_modules();
  public:
  const ::pbnet::UnitModule& m_modules(int index) const;
  ::pbnet::UnitModule* add_m_modules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >&
      m_modules() const;

  // .pbnet.UNIT_POSITION m_position = 3;
  bool has_m_position() const;
  private:
  bool _internal_has_m_position() const;
  public:
  void clear_m_position();
  const ::pbnet::UNIT_POSITION& m_position() const;
  ::pbnet::UNIT_POSITION* release_m_position();
  ::pbnet::UNIT_POSITION* mutable_m_position();
  void set_allocated_m_position(::pbnet::UNIT_POSITION* m_position);
  private:
  const ::pbnet::UNIT_POSITION& _internal_m_position() const;
  ::pbnet::UNIT_POSITION* _internal_mutable_m_position();
  public:
  void unsafe_arena_set_allocated_m_position(
      ::pbnet::UNIT_POSITION* m_position);
  ::pbnet::UNIT_POSITION* unsafe_arena_release_m_position();

  // int64 m_id = 2;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .pbnet.eunit m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbnet::eunit m_type() const;
  void set_m_type(::pbnet::eunit value);
  private:
  ::pbnet::eunit _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eunit value);
  public:

  // .pbnet.eunitstat m_stat = 5;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::pbnet::eunitstat m_stat() const;
  void set_m_stat(::pbnet::eunitstat value);
  private:
  ::pbnet::eunitstat _internal_m_stat() const;
  void _internal_set_m_stat(::pbnet::eunitstat value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.UNIT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule > m_modules_;
  ::pbnet::UNIT_POSITION* m_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  int m_type_;
  int m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_SYNC_ATTRIBUTE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE) */ {
 public:
  inline PROBUFF_NET_SYNC_ATTRIBUTE() : PROBUFF_NET_SYNC_ATTRIBUTE(nullptr) {}
  virtual ~PROBUFF_NET_SYNC_ATTRIBUTE();

  PROBUFF_NET_SYNC_ATTRIBUTE(const PROBUFF_NET_SYNC_ATTRIBUTE& from);
  PROBUFF_NET_SYNC_ATTRIBUTE(PROBUFF_NET_SYNC_ATTRIBUTE&& from) noexcept
    : PROBUFF_NET_SYNC_ATTRIBUTE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SYNC_ATTRIBUTE& operator=(const PROBUFF_NET_SYNC_ATTRIBUTE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SYNC_ATTRIBUTE& operator=(PROBUFF_NET_SYNC_ATTRIBUTE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_SYNC_ATTRIBUTE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_SYNC_ATTRIBUTE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SYNC_ATTRIBUTE*>(
               &_PROBUFF_NET_SYNC_ATTRIBUTE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(PROBUFF_NET_SYNC_ATTRIBUTE& a, PROBUFF_NET_SYNC_ATTRIBUTE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SYNC_ATTRIBUTE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SYNC_ATTRIBUTE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_SYNC_ATTRIBUTE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_ATTRIBUTE>(nullptr);
  }

  PROBUFF_NET_SYNC_ATTRIBUTE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_ATTRIBUTE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_SYNC_ATTRIBUTE& from);
  void MergeFrom(const PROBUFF_NET_SYNC_ATTRIBUTE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SYNC_ATTRIBUTE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_SYNC_ATTRIBUTE";
  }
  protected:
  explicit PROBUFF_NET_SYNC_ATTRIBUTE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMModulesFieldNumber = 1,
  };
  // repeated .pbnet.UnitModule m_modules = 1;
  int m_modules_size() const;
  private:
  int _internal_m_modules_size() const;
  public:
  void clear_m_modules();
  ::pbnet::UnitModule* mutable_m_modules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >*
      mutable_m_modules();
  private:
  const ::pbnet::UnitModule& _internal_m_modules(int index) const;
  ::pbnet::UnitModule* _internal_add_m_modules();
  public:
  const ::pbnet::UnitModule& m_modules(int index) const;
  ::pbnet::UnitModule* add_m_modules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >&
      m_modules() const;

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule > m_modules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_SYNC_UNIT PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SYNC_UNIT) */ {
 public:
  inline PROBUFF_NET_SYNC_UNIT() : PROBUFF_NET_SYNC_UNIT(nullptr) {}
  virtual ~PROBUFF_NET_SYNC_UNIT();

  PROBUFF_NET_SYNC_UNIT(const PROBUFF_NET_SYNC_UNIT& from);
  PROBUFF_NET_SYNC_UNIT(PROBUFF_NET_SYNC_UNIT&& from) noexcept
    : PROBUFF_NET_SYNC_UNIT() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SYNC_UNIT& operator=(const PROBUFF_NET_SYNC_UNIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SYNC_UNIT& operator=(PROBUFF_NET_SYNC_UNIT&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_SYNC_UNIT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_SYNC_UNIT* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SYNC_UNIT*>(
               &_PROBUFF_NET_SYNC_UNIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(PROBUFF_NET_SYNC_UNIT& a, PROBUFF_NET_SYNC_UNIT& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SYNC_UNIT* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SYNC_UNIT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_SYNC_UNIT* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_UNIT>(nullptr);
  }

  PROBUFF_NET_SYNC_UNIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_UNIT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_SYNC_UNIT& from);
  void MergeFrom(const PROBUFF_NET_SYNC_UNIT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SYNC_UNIT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_SYNC_UNIT";
  }
  protected:
  explicit PROBUFF_NET_SYNC_UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMUnitsFieldNumber = 1,
  };
  // repeated .pbnet.UNIT m_units = 1;
  int m_units_size() const;
  private:
  int _internal_m_units_size() const;
  public:
  void clear_m_units();
  ::pbnet::UNIT* mutable_m_units(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT >*
      mutable_m_units();
  private:
  const ::pbnet::UNIT& _internal_m_units(int index) const;
  ::pbnet::UNIT* _internal_add_m_units();
  public:
  const ::pbnet::UNIT& m_units(int index) const;
  ::pbnet::UNIT* add_m_units();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT >&
      m_units() const;

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SYNC_UNIT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT > m_units_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ENTER_LEAVE_VIEW PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW) */ {
 public:
  inline PROBUFF_NET_ENTER_LEAVE_VIEW() : PROBUFF_NET_ENTER_LEAVE_VIEW(nullptr) {}
  virtual ~PROBUFF_NET_ENTER_LEAVE_VIEW();

  PROBUFF_NET_ENTER_LEAVE_VIEW(const PROBUFF_NET_ENTER_LEAVE_VIEW& from);
  PROBUFF_NET_ENTER_LEAVE_VIEW(PROBUFF_NET_ENTER_LEAVE_VIEW&& from) noexcept
    : PROBUFF_NET_ENTER_LEAVE_VIEW() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ENTER_LEAVE_VIEW& operator=(const PROBUFF_NET_ENTER_LEAVE_VIEW& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ENTER_LEAVE_VIEW& operator=(PROBUFF_NET_ENTER_LEAVE_VIEW&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ENTER_LEAVE_VIEW& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ENTER_LEAVE_VIEW* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ENTER_LEAVE_VIEW*>(
               &_PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(PROBUFF_NET_ENTER_LEAVE_VIEW& a, PROBUFF_NET_ENTER_LEAVE_VIEW& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ENTER_LEAVE_VIEW* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ENTER_LEAVE_VIEW* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ENTER_LEAVE_VIEW* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ENTER_LEAVE_VIEW>(nullptr);
  }

  PROBUFF_NET_ENTER_LEAVE_VIEW* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ENTER_LEAVE_VIEW>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ENTER_LEAVE_VIEW& from);
  void MergeFrom(const PROBUFF_NET_ENTER_LEAVE_VIEW& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ENTER_LEAVE_VIEW* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW";
  }
  protected:
  explicit PROBUFF_NET_ENTER_LEAVE_VIEW(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMUnitsFieldNumber = 2,
    kMIsenterFieldNumber = 1,
  };
  // repeated int64 m_units = 2;
  int m_units_size() const;
  private:
  int _internal_m_units_size() const;
  public:
  void clear_m_units();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_units(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_m_units() const;
  void _internal_add_m_units(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_m_units();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 m_units(int index) const;
  void set_m_units(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_m_units(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      m_units() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_m_units();

  // bool m_isenter = 1;
  bool has_m_isenter() const;
  private:
  bool _internal_has_m_isenter() const;
  public:
  void clear_m_isenter();
  bool m_isenter() const;
  void set_m_isenter(bool value);
  private:
  bool _internal_m_isenter() const;
  void _internal_set_m_isenter(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > m_units_;
  mutable std::atomic<int> _m_units_cached_byte_size_;
  bool m_isenter_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse();
  explicit PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse& other);
  static const PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse*>(&_PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[45];
  }

  public:
};

// -------------------------------------------------------------------

class PROBUFF_NET_SYNC_POSITION PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SYNC_POSITION) */ {
 public:
  inline PROBUFF_NET_SYNC_POSITION() : PROBUFF_NET_SYNC_POSITION(nullptr) {}
  virtual ~PROBUFF_NET_SYNC_POSITION();

  PROBUFF_NET_SYNC_POSITION(const PROBUFF_NET_SYNC_POSITION& from);
  PROBUFF_NET_SYNC_POSITION(PROBUFF_NET_SYNC_POSITION&& from) noexcept
    : PROBUFF_NET_SYNC_POSITION() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SYNC_POSITION& operator=(const PROBUFF_NET_SYNC_POSITION& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SYNC_POSITION& operator=(PROBUFF_NET_SYNC_POSITION&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_SYNC_POSITION& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_SYNC_POSITION* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SYNC_POSITION*>(
               &_PROBUFF_NET_SYNC_POSITION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(PROBUFF_NET_SYNC_POSITION& a, PROBUFF_NET_SYNC_POSITION& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SYNC_POSITION* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SYNC_POSITION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_SYNC_POSITION* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_POSITION>(nullptr);
  }

  PROBUFF_NET_SYNC_POSITION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_POSITION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_SYNC_POSITION& from);
  void MergeFrom(const PROBUFF_NET_SYNC_POSITION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SYNC_POSITION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_SYNC_POSITION";
  }
  protected:
  explicit PROBUFF_NET_SYNC_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMPositionFieldNumber = 1,
  };
  // map<int64, .pbnet.UNIT_POSITION> m_position = 1;
  int m_position_size() const;
  private:
  int _internal_m_position_size() const;
  public:
  void clear_m_position();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >&
      _internal_m_position() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >*
      _internal_mutable_m_position();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >&
      m_position() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >*
      mutable_m_position();

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SYNC_POSITION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > m_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_CHANGE_ANGLE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CHANGE_ANGLE) */ {
 public:
  inline PROBUFF_NET_CHANGE_ANGLE() : PROBUFF_NET_CHANGE_ANGLE(nullptr) {}
  virtual ~PROBUFF_NET_CHANGE_ANGLE();

  PROBUFF_NET_CHANGE_ANGLE(const PROBUFF_NET_CHANGE_ANGLE& from);
  PROBUFF_NET_CHANGE_ANGLE(PROBUFF_NET_CHANGE_ANGLE&& from) noexcept
    : PROBUFF_NET_CHANGE_ANGLE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CHANGE_ANGLE& operator=(const PROBUFF_NET_CHANGE_ANGLE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CHANGE_ANGLE& operator=(PROBUFF_NET_CHANGE_ANGLE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_CHANGE_ANGLE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_CHANGE_ANGLE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CHANGE_ANGLE*>(
               &_PROBUFF_NET_CHANGE_ANGLE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(PROBUFF_NET_CHANGE_ANGLE& a, PROBUFF_NET_CHANGE_ANGLE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CHANGE_ANGLE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CHANGE_ANGLE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_CHANGE_ANGLE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_CHANGE_ANGLE>(nullptr);
  }

  PROBUFF_NET_CHANGE_ANGLE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_CHANGE_ANGLE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_CHANGE_ANGLE& from);
  void MergeFrom(const PROBUFF_NET_CHANGE_ANGLE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CHANGE_ANGLE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_CHANGE_ANGLE";
  }
  protected:
  explicit PROBUFF_NET_CHANGE_ANGLE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMPositionFieldNumber = 1,
  };
  // .pbnet.UNIT_POSITION m_position = 1;
  bool has_m_position() const;
  private:
  bool _internal_has_m_position() const;
  public:
  void clear_m_position();
  const ::pbnet::UNIT_POSITION& m_position() const;
  ::pbnet::UNIT_POSITION* release_m_position();
  ::pbnet::UNIT_POSITION* mutable_m_position();
  void set_allocated_m_position(::pbnet::UNIT_POSITION* m_position);
  private:
  const ::pbnet::UNIT_POSITION& _internal_m_position() const;
  ::pbnet::UNIT_POSITION* _internal_mutable_m_position();
  public:
  void unsafe_arena_set_allocated_m_position(
      ::pbnet::UNIT_POSITION* m_position);
  ::pbnet::UNIT_POSITION* unsafe_arena_release_m_position();

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CHANGE_ANGLE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pbnet::UNIT_POSITION* m_position_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING) */ {
 public:
  inline PROBUFF_NET_MATCHING() : PROBUFF_NET_MATCHING(nullptr) {}
  virtual ~PROBUFF_NET_MATCHING();

  PROBUFF_NET_MATCHING(const PROBUFF_NET_MATCHING& from);
  PROBUFF_NET_MATCHING(PROBUFF_NET_MATCHING&& from) noexcept
    : PROBUFF_NET_MATCHING() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING& operator=(const PROBUFF_NET_MATCHING& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING& operator=(PROBUFF_NET_MATCHING&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MATCHING& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MATCHING* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING*>(
               &_PROBUFF_NET_MATCHING_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(PROBUFF_NET_MATCHING& a, PROBUFF_NET_MATCHING& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MATCHING* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING>(nullptr);
  }

  PROBUFF_NET_MATCHING* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MATCHING& from);
  void MergeFrom(const PROBUFF_NET_MATCHING& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING";
  }
  protected:
  explicit PROBUFF_NET_MATCHING(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMTidFieldNumber = 2,
  };
  // .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);
  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);
  public:

  // int32 m_tid = 2;
  bool has_m_tid() const;
  private:
  bool _internal_has_m_tid() const;
  public:
  void clear_m_tid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_tid() const;
  void set_m_tid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_tid() const;
  void _internal_set_m_tid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int m_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_tid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class MATCHING_MEMBER PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.MATCHING_MEMBER) */ {
 public:
  inline MATCHING_MEMBER() : MATCHING_MEMBER(nullptr) {}
  virtual ~MATCHING_MEMBER();

  MATCHING_MEMBER(const MATCHING_MEMBER& from);
  MATCHING_MEMBER(MATCHING_MEMBER&& from) noexcept
    : MATCHING_MEMBER() {
    *this = ::std::move(from);
  }

  inline MATCHING_MEMBER& operator=(const MATCHING_MEMBER& from) {
    CopyFrom(from);
    return *this;
  }
  inline MATCHING_MEMBER& operator=(MATCHING_MEMBER&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MATCHING_MEMBER& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MATCHING_MEMBER* internal_default_instance() {
    return reinterpret_cast<const MATCHING_MEMBER*>(
               &_MATCHING_MEMBER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(MATCHING_MEMBER& a, MATCHING_MEMBER& b) {
    a.Swap(&b);
  }
  inline void Swap(MATCHING_MEMBER* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MATCHING_MEMBER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MATCHING_MEMBER* New() const final {
    return CreateMaybeMessage<MATCHING_MEMBER>(nullptr);
  }

  MATCHING_MEMBER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MATCHING_MEMBER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MATCHING_MEMBER& from);
  void MergeFrom(const MATCHING_MEMBER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MATCHING_MEMBER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.MATCHING_MEMBER";
  }
  protected:
  explicit MATCHING_MEMBER(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMNameFieldNumber = 2,
    kMIdFieldNumber = 1,
    kMLvFieldNumber = 3,
    kMBegmatchFieldNumber = 4,
    kMIsconfirmFieldNumber = 5,
  };
  // string m_name = 2;
  bool has_m_name() const;
  private:
  bool _internal_has_m_name() const;
  public:
  void clear_m_name();
  const std::string& m_name() const;
  void set_m_name(const std::string& value);
  void set_m_name(std::string&& value);
  void set_m_name(const char* value);
  void set_m_name(const char* value, size_t size);
  std::string* mutable_m_name();
  std::string* release_m_name();
  void set_allocated_m_name(std::string* m_name);
  private:
  const std::string& _internal_m_name() const;
  void _internal_set_m_name(const std::string& value);
  std::string* _internal_mutable_m_name();
  public:

  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_lv = 3;
  bool has_m_lv() const;
  private:
  bool _internal_has_m_lv() const;
  public:
  void clear_m_lv();
  ::PROTOBUF_NAMESPACE_ID::int32 m_lv() const;
  void set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_lv() const;
  void _internal_set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_begmatch = 4;
  bool has_m_begmatch() const;
  private:
  bool _internal_has_m_begmatch() const;
  public:
  void clear_m_begmatch();
  ::PROTOBUF_NAMESPACE_ID::int32 m_begmatch() const;
  void set_m_begmatch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_begmatch() const;
  void _internal_set_m_begmatch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool m_isconfirm = 5;
  bool has_m_isconfirm() const;
  private:
  bool _internal_has_m_isconfirm() const;
  public:
  void clear_m_isconfirm();
  bool m_isconfirm() const;
  void set_m_isconfirm(bool value);
  private:
  bool _internal_m_isconfirm() const;
  void _internal_set_m_isconfirm(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.MATCHING_MEMBER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_lv_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_begmatch_;
  bool m_isconfirm_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MATCHING_RESPONSE() : PROBUFF_NET_MATCHING_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_MATCHING_RESPONSE();

  PROBUFF_NET_MATCHING_RESPONSE(const PROBUFF_NET_MATCHING_RESPONSE& from);
  PROBUFF_NET_MATCHING_RESPONSE(PROBUFF_NET_MATCHING_RESPONSE&& from) noexcept
    : PROBUFF_NET_MATCHING_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_RESPONSE& operator=(const PROBUFF_NET_MATCHING_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_RESPONSE& operator=(PROBUFF_NET_MATCHING_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MATCHING_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MATCHING_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_RESPONSE*>(
               &_PROBUFF_NET_MATCHING_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(PROBUFF_NET_MATCHING_RESPONSE& a, PROBUFF_NET_MATCHING_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MATCHING_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_RESPONSE>(nullptr);
  }

  PROBUFF_NET_MATCHING_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MATCHING_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_MATCHING_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMIdFieldNumber = 1,
  };
  // int64 m_id = 1;
  bool has_m_id() const;
  private:
  bool _internal_has_m_id() const;
  public:
  void clear_m_id();
  ::PROTOBUF_NAMESPACE_ID::int64 m_id() const;
  void set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_id() const;
  void _internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_id_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_CANCEL PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_CANCEL) */ {
 public:
  inline PROBUFF_NET_MATCHING_CANCEL() : PROBUFF_NET_MATCHING_CANCEL(nullptr) {}
  virtual ~PROBUFF_NET_MATCHING_CANCEL();

  PROBUFF_NET_MATCHING_CANCEL(const PROBUFF_NET_MATCHING_CANCEL& from);
  PROBUFF_NET_MATCHING_CANCEL(PROBUFF_NET_MATCHING_CANCEL&& from) noexcept
    : PROBUFF_NET_MATCHING_CANCEL() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_CANCEL& operator=(const PROBUFF_NET_MATCHING_CANCEL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_CANCEL& operator=(PROBUFF_NET_MATCHING_CANCEL&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MATCHING_CANCEL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MATCHING_CANCEL* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_CANCEL*>(
               &_PROBUFF_NET_MATCHING_CANCEL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(PROBUFF_NET_MATCHING_CANCEL& a, PROBUFF_NET_MATCHING_CANCEL& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_CANCEL* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_CANCEL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MATCHING_CANCEL* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_CANCEL>(nullptr);
  }

  PROBUFF_NET_MATCHING_CANCEL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_CANCEL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MATCHING_CANCEL& from);
  void MergeFrom(const PROBUFF_NET_MATCHING_CANCEL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_CANCEL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_CANCEL";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_CANCEL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRoomidFieldNumber = 2,
    kMTypeFieldNumber = 1,
  };
  // int64 m_roomid = 2;
  bool has_m_roomid() const;
  private:
  bool _internal_has_m_roomid() const;
  public:
  void clear_m_roomid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_roomid() const;
  void set_m_roomid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_roomid() const;
  void _internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);
  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_CANCEL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_roomid_;
  int m_type_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_CANCEL_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MATCHING_CANCEL_RESPONSE() : PROBUFF_NET_MATCHING_CANCEL_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_MATCHING_CANCEL_RESPONSE();

  PROBUFF_NET_MATCHING_CANCEL_RESPONSE(const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from);
  PROBUFF_NET_MATCHING_CANCEL_RESPONSE(PROBUFF_NET_MATCHING_CANCEL_RESPONSE&& from) noexcept
    : PROBUFF_NET_MATCHING_CANCEL_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_CANCEL_RESPONSE& operator=(const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_CANCEL_RESPONSE& operator=(PROBUFF_NET_MATCHING_CANCEL_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MATCHING_CANCEL_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_CANCEL_RESPONSE*>(
               &_PROBUFF_NET_MATCHING_CANCEL_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(PROBUFF_NET_MATCHING_CANCEL_RESPONSE& a, PROBUFF_NET_MATCHING_CANCEL_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_CANCEL_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_CANCEL_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MATCHING_CANCEL_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_CANCEL_RESPONSE>(nullptr);
  }

  PROBUFF_NET_MATCHING_CANCEL_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_CANCEL_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_CANCEL_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_CANCEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMStatFieldNumber = 2,
  };
  // .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);
  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);
  public:

  // .pbnet.ematching_cancel_stat m_stat = 2;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::pbnet::ematching_cancel_stat m_stat() const;
  void set_m_stat(::pbnet::ematching_cancel_stat value);
  private:
  ::pbnet::ematching_cancel_stat _internal_m_stat() const;
  void _internal_set_m_stat(::pbnet::ematching_cancel_stat value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int m_type_;
  int m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MEMBER_MATCHING_CANCEL PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL) */ {
 public:
  inline PROBUFF_NET_MEMBER_MATCHING_CANCEL() : PROBUFF_NET_MEMBER_MATCHING_CANCEL(nullptr) {}
  virtual ~PROBUFF_NET_MEMBER_MATCHING_CANCEL();

  PROBUFF_NET_MEMBER_MATCHING_CANCEL(const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from);
  PROBUFF_NET_MEMBER_MATCHING_CANCEL(PROBUFF_NET_MEMBER_MATCHING_CANCEL&& from) noexcept
    : PROBUFF_NET_MEMBER_MATCHING_CANCEL() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MEMBER_MATCHING_CANCEL& operator=(const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MEMBER_MATCHING_CANCEL& operator=(PROBUFF_NET_MEMBER_MATCHING_CANCEL&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MEMBER_MATCHING_CANCEL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MEMBER_MATCHING_CANCEL* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MEMBER_MATCHING_CANCEL*>(
               &_PROBUFF_NET_MEMBER_MATCHING_CANCEL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(PROBUFF_NET_MEMBER_MATCHING_CANCEL& a, PROBUFF_NET_MEMBER_MATCHING_CANCEL& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MEMBER_MATCHING_CANCEL* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MEMBER_MATCHING_CANCEL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MEMBER_MATCHING_CANCEL* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MEMBER_MATCHING_CANCEL>(nullptr);
  }

  PROBUFF_NET_MEMBER_MATCHING_CANCEL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MEMBER_MATCHING_CANCEL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from);
  void MergeFrom(const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MEMBER_MATCHING_CANCEL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL";
  }
  protected:
  explicit PROBUFF_NET_MEMBER_MATCHING_CANCEL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMCancelmemberFieldNumber = 3,
    kMTypeFieldNumber = 1,
    kMCanceltypeFieldNumber = 2,
  };
  // repeated int64 m_cancelmember = 3;
  int m_cancelmember_size() const;
  private:
  int _internal_m_cancelmember_size() const;
  public:
  void clear_m_cancelmember();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_cancelmember(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_m_cancelmember() const;
  void _internal_add_m_cancelmember(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_m_cancelmember();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 m_cancelmember(int index) const;
  void set_m_cancelmember(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_m_cancelmember(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      m_cancelmember() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_m_cancelmember();

  // .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);
  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);
  public:

  // .pbnet.etype_matching_cancel m_canceltype = 2;
  bool has_m_canceltype() const;
  private:
  bool _internal_has_m_canceltype() const;
  public:
  void clear_m_canceltype();
  ::pbnet::etype_matching_cancel m_canceltype() const;
  void set_m_canceltype(::pbnet::etype_matching_cancel value);
  private:
  ::pbnet::etype_matching_cancel _internal_m_canceltype() const;
  void _internal_set_m_canceltype(::pbnet::etype_matching_cancel value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > m_cancelmember_;
  mutable std::atomic<int> _m_cancelmember_cached_byte_size_;
  int m_type_;
  int m_canceltype_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_WAITCONFIRM PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM) */ {
 public:
  inline PROBUFF_NET_MATCHING_WAITCONFIRM() : PROBUFF_NET_MATCHING_WAITCONFIRM(nullptr) {}
  virtual ~PROBUFF_NET_MATCHING_WAITCONFIRM();

  PROBUFF_NET_MATCHING_WAITCONFIRM(const PROBUFF_NET_MATCHING_WAITCONFIRM& from);
  PROBUFF_NET_MATCHING_WAITCONFIRM(PROBUFF_NET_MATCHING_WAITCONFIRM&& from) noexcept
    : PROBUFF_NET_MATCHING_WAITCONFIRM() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_WAITCONFIRM& operator=(const PROBUFF_NET_MATCHING_WAITCONFIRM& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_WAITCONFIRM& operator=(PROBUFF_NET_MATCHING_WAITCONFIRM&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MATCHING_WAITCONFIRM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MATCHING_WAITCONFIRM* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_WAITCONFIRM*>(
               &_PROBUFF_NET_MATCHING_WAITCONFIRM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(PROBUFF_NET_MATCHING_WAITCONFIRM& a, PROBUFF_NET_MATCHING_WAITCONFIRM& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_WAITCONFIRM* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_WAITCONFIRM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MATCHING_WAITCONFIRM* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_WAITCONFIRM>(nullptr);
  }

  PROBUFF_NET_MATCHING_WAITCONFIRM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_WAITCONFIRM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MATCHING_WAITCONFIRM& from);
  void MergeFrom(const PROBUFF_NET_MATCHING_WAITCONFIRM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_WAITCONFIRM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_WAITCONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
  };
  // .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);
  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);
  public:

  // int32 m_roomid = 2;
  bool has_m_roomid() const;
  private:
  bool _internal_has_m_roomid() const;
  public:
  void clear_m_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid() const;
  void set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_roomid() const;
  void _internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int m_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_CONFIRM PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_CONFIRM) */ {
 public:
  inline PROBUFF_NET_MATCHING_CONFIRM() : PROBUFF_NET_MATCHING_CONFIRM(nullptr) {}
  virtual ~PROBUFF_NET_MATCHING_CONFIRM();

  PROBUFF_NET_MATCHING_CONFIRM(const PROBUFF_NET_MATCHING_CONFIRM& from);
  PROBUFF_NET_MATCHING_CONFIRM(PROBUFF_NET_MATCHING_CONFIRM&& from) noexcept
    : PROBUFF_NET_MATCHING_CONFIRM() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_CONFIRM& operator=(const PROBUFF_NET_MATCHING_CONFIRM& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_CONFIRM& operator=(PROBUFF_NET_MATCHING_CONFIRM&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MATCHING_CONFIRM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MATCHING_CONFIRM* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_CONFIRM*>(
               &_PROBUFF_NET_MATCHING_CONFIRM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(PROBUFF_NET_MATCHING_CONFIRM& a, PROBUFF_NET_MATCHING_CONFIRM& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_CONFIRM* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_CONFIRM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MATCHING_CONFIRM* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_CONFIRM>(nullptr);
  }

  PROBUFF_NET_MATCHING_CONFIRM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_CONFIRM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MATCHING_CONFIRM& from);
  void MergeFrom(const PROBUFF_NET_MATCHING_CONFIRM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_CONFIRM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_CONFIRM";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_CONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
  };
  // .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);
  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);
  public:

  // int32 m_roomid = 2;
  bool has_m_roomid() const;
  private:
  bool _internal_has_m_roomid() const;
  public:
  void clear_m_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid() const;
  void set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_roomid() const;
  void _internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int m_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_CONFIRM_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MATCHING_CONFIRM_RESPONSE() : PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_MATCHING_CONFIRM_RESPONSE();

  PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from);
  PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE&& from) noexcept
    : PROBUFF_NET_MATCHING_CONFIRM_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& operator=(const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& operator=(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE*>(
               &_PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& a, PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_CONFIRM_RESPONSE>(nullptr);
  }

  PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_CONFIRM_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
    kMStatFieldNumber = 3,
  };
  // .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);
  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);
  public:

  // int32 m_roomid = 2;
  bool has_m_roomid() const;
  private:
  bool _internal_has_m_roomid() const;
  public:
  void clear_m_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid() const;
  void set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_roomid() const;
  void _internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .pbnet.ematching_confirm_stat m_stat = 3;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::pbnet::ematching_confirm_stat m_stat() const;
  void set_m_stat(::pbnet::ematching_confirm_stat value);
  private:
  ::pbnet::ematching_confirm_stat _internal_m_stat() const;
  void _internal_set_m_stat(::pbnet::ematching_confirm_stat value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int m_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid_;
  int m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_SYNC_MATCHING_CONFIRM PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM) */ {
 public:
  inline PROBUFF_NET_SYNC_MATCHING_CONFIRM() : PROBUFF_NET_SYNC_MATCHING_CONFIRM(nullptr) {}
  virtual ~PROBUFF_NET_SYNC_MATCHING_CONFIRM();

  PROBUFF_NET_SYNC_MATCHING_CONFIRM(const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from);
  PROBUFF_NET_SYNC_MATCHING_CONFIRM(PROBUFF_NET_SYNC_MATCHING_CONFIRM&& from) noexcept
    : PROBUFF_NET_SYNC_MATCHING_CONFIRM() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_SYNC_MATCHING_CONFIRM& operator=(const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_SYNC_MATCHING_CONFIRM& operator=(PROBUFF_NET_SYNC_MATCHING_CONFIRM&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_SYNC_MATCHING_CONFIRM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_SYNC_MATCHING_CONFIRM* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_SYNC_MATCHING_CONFIRM*>(
               &_PROBUFF_NET_SYNC_MATCHING_CONFIRM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(PROBUFF_NET_SYNC_MATCHING_CONFIRM& a, PROBUFF_NET_SYNC_MATCHING_CONFIRM& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_SYNC_MATCHING_CONFIRM* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_SYNC_MATCHING_CONFIRM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_SYNC_MATCHING_CONFIRM* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_MATCHING_CONFIRM>(nullptr);
  }

  PROBUFF_NET_SYNC_MATCHING_CONFIRM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_SYNC_MATCHING_CONFIRM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from);
  void MergeFrom(const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_SYNC_MATCHING_CONFIRM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM";
  }
  protected:
  explicit PROBUFF_NET_SYNC_MATCHING_CONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRoleidFieldNumber = 3,
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
  };
  // repeated int64 m_roleid = 3;
  int m_roleid_size() const;
  private:
  int _internal_m_roleid_size() const;
  public:
  void clear_m_roleid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_roleid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_m_roleid() const;
  void _internal_add_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_m_roleid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid(int index) const;
  void set_m_roleid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      m_roleid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_m_roleid();

  // .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);
  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);
  public:

  // int32 m_roomid = 2;
  bool has_m_roomid() const;
  private:
  bool _internal_has_m_roomid() const;
  public:
  void clear_m_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid() const;
  void set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_roomid() const;
  void _internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > m_roleid_;
  mutable std::atomic<int> _m_roleid_cached_byte_size_;
  int m_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_SYNC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_SYNC) */ {
 public:
  inline PROBUFF_NET_MATCHING_SYNC() : PROBUFF_NET_MATCHING_SYNC(nullptr) {}
  virtual ~PROBUFF_NET_MATCHING_SYNC();

  PROBUFF_NET_MATCHING_SYNC(const PROBUFF_NET_MATCHING_SYNC& from);
  PROBUFF_NET_MATCHING_SYNC(PROBUFF_NET_MATCHING_SYNC&& from) noexcept
    : PROBUFF_NET_MATCHING_SYNC() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_SYNC& operator=(const PROBUFF_NET_MATCHING_SYNC& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_SYNC& operator=(PROBUFF_NET_MATCHING_SYNC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MATCHING_SYNC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MATCHING_SYNC* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_SYNC*>(
               &_PROBUFF_NET_MATCHING_SYNC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(PROBUFF_NET_MATCHING_SYNC& a, PROBUFF_NET_MATCHING_SYNC& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_SYNC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_SYNC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MATCHING_SYNC* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_SYNC>(nullptr);
  }

  PROBUFF_NET_MATCHING_SYNC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_SYNC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MATCHING_SYNC& from);
  void MergeFrom(const PROBUFF_NET_MATCHING_SYNC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_SYNC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_SYNC";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMemberFieldNumber = 3,
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
  };
  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  int m_member_size() const;
  private:
  int _internal_m_member_size() const;
  public:
  void clear_m_member();
  ::pbnet::MATCHING_MEMBER* mutable_m_member(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >*
      mutable_m_member();
  private:
  const ::pbnet::MATCHING_MEMBER& _internal_m_member(int index) const;
  ::pbnet::MATCHING_MEMBER* _internal_add_m_member();
  public:
  const ::pbnet::MATCHING_MEMBER& m_member(int index) const;
  ::pbnet::MATCHING_MEMBER* add_m_member();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >&
      m_member() const;

  // .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);
  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);
  public:

  // int32 m_roomid = 2;
  bool has_m_roomid() const;
  private:
  bool _internal_has_m_roomid() const;
  public:
  void clear_m_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid() const;
  void set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_roomid() const;
  void _internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_SYNC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER > m_member_;
  int m_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_SUCCESS_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE) */ {
 public:
  inline PROBUFF_NET_MATCHING_SUCCESS_RESPONSE() : PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_MATCHING_SUCCESS_RESPONSE();

  PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from);
  PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE&& from) noexcept
    : PROBUFF_NET_MATCHING_SUCCESS_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& operator=(const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& operator=(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE*>(
               &_PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& a, PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_SUCCESS_RESPONSE>(nullptr);
  }

  PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_SUCCESS_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
    kMPlaysactoridFieldNumber = 3,
  };
  // .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);
  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);
  public:

  // int32 m_roomid = 2;
  bool has_m_roomid() const;
  private:
  bool _internal_has_m_roomid() const;
  public:
  void clear_m_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid() const;
  void set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_roomid() const;
  void _internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 m_playsactorid = 3;
  bool has_m_playsactorid() const;
  private:
  bool _internal_has_m_playsactorid() const;
  public:
  void clear_m_playsactorid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_playsactorid() const;
  void set_m_playsactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_playsactorid() const;
  void _internal_set_m_playsactorid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int m_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_playsactorid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_MATCHING_SUCCESS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_MATCHING_SUCCESS) */ {
 public:
  inline PROBUFF_NET_MATCHING_SUCCESS() : PROBUFF_NET_MATCHING_SUCCESS(nullptr) {}
  virtual ~PROBUFF_NET_MATCHING_SUCCESS();

  PROBUFF_NET_MATCHING_SUCCESS(const PROBUFF_NET_MATCHING_SUCCESS& from);
  PROBUFF_NET_MATCHING_SUCCESS(PROBUFF_NET_MATCHING_SUCCESS&& from) noexcept
    : PROBUFF_NET_MATCHING_SUCCESS() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_MATCHING_SUCCESS& operator=(const PROBUFF_NET_MATCHING_SUCCESS& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_MATCHING_SUCCESS& operator=(PROBUFF_NET_MATCHING_SUCCESS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_MATCHING_SUCCESS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_MATCHING_SUCCESS* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_MATCHING_SUCCESS*>(
               &_PROBUFF_NET_MATCHING_SUCCESS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(PROBUFF_NET_MATCHING_SUCCESS& a, PROBUFF_NET_MATCHING_SUCCESS& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_MATCHING_SUCCESS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_MATCHING_SUCCESS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_MATCHING_SUCCESS* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_SUCCESS>(nullptr);
  }

  PROBUFF_NET_MATCHING_SUCCESS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_MATCHING_SUCCESS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_MATCHING_SUCCESS& from);
  void MergeFrom(const PROBUFF_NET_MATCHING_SUCCESS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_MATCHING_SUCCESS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_MATCHING_SUCCESS";
  }
  protected:
  explicit PROBUFF_NET_MATCHING_SUCCESS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMMemberFieldNumber = 3,
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
    kMDataidFieldNumber = 4,
  };
  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  int m_member_size() const;
  private:
  int _internal_m_member_size() const;
  public:
  void clear_m_member();
  ::pbnet::MATCHING_MEMBER* mutable_m_member(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >*
      mutable_m_member();
  private:
  const ::pbnet::MATCHING_MEMBER& _internal_m_member(int index) const;
  ::pbnet::MATCHING_MEMBER* _internal_add_m_member();
  public:
  const ::pbnet::MATCHING_MEMBER& m_member(int index) const;
  ::pbnet::MATCHING_MEMBER* add_m_member();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >&
      m_member() const;

  // .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);
  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);
  public:

  // int32 m_roomid = 2;
  bool has_m_roomid() const;
  private:
  bool _internal_has_m_roomid() const;
  public:
  void clear_m_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid() const;
  void set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_roomid() const;
  void _internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_dataid = 4;
  bool has_m_dataid() const;
  private:
  bool _internal_has_m_dataid() const;
  public:
  void clear_m_dataid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_dataid() const;
  void set_m_dataid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_dataid() const;
  void _internal_set_m_dataid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER > m_member_;
  int m_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_dataid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ENTER_PLAYS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ENTER_PLAYS) */ {
 public:
  inline PROBUFF_NET_ENTER_PLAYS() : PROBUFF_NET_ENTER_PLAYS(nullptr) {}
  virtual ~PROBUFF_NET_ENTER_PLAYS();

  PROBUFF_NET_ENTER_PLAYS(const PROBUFF_NET_ENTER_PLAYS& from);
  PROBUFF_NET_ENTER_PLAYS(PROBUFF_NET_ENTER_PLAYS&& from) noexcept
    : PROBUFF_NET_ENTER_PLAYS() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ENTER_PLAYS& operator=(const PROBUFF_NET_ENTER_PLAYS& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ENTER_PLAYS& operator=(PROBUFF_NET_ENTER_PLAYS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ENTER_PLAYS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ENTER_PLAYS* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ENTER_PLAYS*>(
               &_PROBUFF_NET_ENTER_PLAYS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(PROBUFF_NET_ENTER_PLAYS& a, PROBUFF_NET_ENTER_PLAYS& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ENTER_PLAYS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ENTER_PLAYS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ENTER_PLAYS* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ENTER_PLAYS>(nullptr);
  }

  PROBUFF_NET_ENTER_PLAYS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ENTER_PLAYS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ENTER_PLAYS& from);
  void MergeFrom(const PROBUFF_NET_ENTER_PLAYS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ENTER_PLAYS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ENTER_PLAYS";
  }
  protected:
  explicit PROBUFF_NET_ENTER_PLAYS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
  };
  // .pbnet.eplays m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbnet::eplays m_type() const;
  void set_m_type(::pbnet::eplays value);
  private:
  ::pbnet::eplays _internal_m_type() const;
  void _internal_set_m_type(::pbnet::eplays value);
  public:

  // int32 m_roomid = 2;
  bool has_m_roomid() const;
  private:
  bool _internal_has_m_roomid() const;
  public:
  void clear_m_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid() const;
  void set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_roomid() const;
  void _internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ENTER_PLAYS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int m_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_roomid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_KCPSESSION PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_KCPSESSION) */ {
 public:
  inline PROBUFF_NET_KCPSESSION() : PROBUFF_NET_KCPSESSION(nullptr) {}
  virtual ~PROBUFF_NET_KCPSESSION();

  PROBUFF_NET_KCPSESSION(const PROBUFF_NET_KCPSESSION& from);
  PROBUFF_NET_KCPSESSION(PROBUFF_NET_KCPSESSION&& from) noexcept
    : PROBUFF_NET_KCPSESSION() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_KCPSESSION& operator=(const PROBUFF_NET_KCPSESSION& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_KCPSESSION& operator=(PROBUFF_NET_KCPSESSION&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_KCPSESSION& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_KCPSESSION* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_KCPSESSION*>(
               &_PROBUFF_NET_KCPSESSION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(PROBUFF_NET_KCPSESSION& a, PROBUFF_NET_KCPSESSION& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_KCPSESSION* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_KCPSESSION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_KCPSESSION* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_KCPSESSION>(nullptr);
  }

  PROBUFF_NET_KCPSESSION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_KCPSESSION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_KCPSESSION& from);
  void MergeFrom(const PROBUFF_NET_KCPSESSION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_KCPSESSION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_KCPSESSION";
  }
  protected:
  explicit PROBUFF_NET_KCPSESSION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMUipFieldNumber = 2,
    kMServeridFieldNumber = 1,
    kMUportFieldNumber = 3,
    kMConvFieldNumber = 4,
  };
  // string m_uip = 2;
  bool has_m_uip() const;
  private:
  bool _internal_has_m_uip() const;
  public:
  void clear_m_uip();
  const std::string& m_uip() const;
  void set_m_uip(const std::string& value);
  void set_m_uip(std::string&& value);
  void set_m_uip(const char* value);
  void set_m_uip(const char* value, size_t size);
  std::string* mutable_m_uip();
  std::string* release_m_uip();
  void set_allocated_m_uip(std::string* m_uip);
  private:
  const std::string& _internal_m_uip() const;
  void _internal_set_m_uip(const std::string& value);
  std::string* _internal_mutable_m_uip();
  public:

  // int64 m_serverid = 1;
  bool has_m_serverid() const;
  private:
  bool _internal_has_m_serverid() const;
  public:
  void clear_m_serverid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_serverid() const;
  void set_m_serverid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_serverid() const;
  void _internal_set_m_serverid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_uport = 3;
  bool has_m_uport() const;
  private:
  bool _internal_has_m_uport() const;
  public:
  void clear_m_uport();
  ::PROTOBUF_NAMESPACE_ID::int32 m_uport() const;
  void set_m_uport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_uport() const;
  void _internal_set_m_uport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_conv = 4;
  bool has_m_conv() const;
  private:
  bool _internal_has_m_conv() const;
  public:
  void clear_m_conv();
  ::PROTOBUF_NAMESPACE_ID::int32 m_conv() const;
  void set_m_conv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_conv() const;
  void _internal_set_m_conv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_KCPSESSION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_uip_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_serverid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_uport_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_conv_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_KCPSESSION_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE) */ {
 public:
  inline PROBUFF_NET_KCPSESSION_RESPONSE() : PROBUFF_NET_KCPSESSION_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_KCPSESSION_RESPONSE();

  PROBUFF_NET_KCPSESSION_RESPONSE(const PROBUFF_NET_KCPSESSION_RESPONSE& from);
  PROBUFF_NET_KCPSESSION_RESPONSE(PROBUFF_NET_KCPSESSION_RESPONSE&& from) noexcept
    : PROBUFF_NET_KCPSESSION_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_KCPSESSION_RESPONSE& operator=(const PROBUFF_NET_KCPSESSION_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_KCPSESSION_RESPONSE& operator=(PROBUFF_NET_KCPSESSION_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_KCPSESSION_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_KCPSESSION_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_KCPSESSION_RESPONSE*>(
               &_PROBUFF_NET_KCPSESSION_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(PROBUFF_NET_KCPSESSION_RESPONSE& a, PROBUFF_NET_KCPSESSION_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_KCPSESSION_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_KCPSESSION_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_KCPSESSION_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_KCPSESSION_RESPONSE>(nullptr);
  }

  PROBUFF_NET_KCPSESSION_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_KCPSESSION_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_KCPSESSION_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_KCPSESSION_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_KCPSESSION_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_KCPSESSION_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_KCPSESSION_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMKcpsessionFieldNumber = 1,
  };
  // string m_kcpsession = 1;
  bool has_m_kcpsession() const;
  private:
  bool _internal_has_m_kcpsession() const;
  public:
  void clear_m_kcpsession();
  const std::string& m_kcpsession() const;
  void set_m_kcpsession(const std::string& value);
  void set_m_kcpsession(std::string&& value);
  void set_m_kcpsession(const char* value);
  void set_m_kcpsession(const char* value, size_t size);
  std::string* mutable_m_kcpsession();
  std::string* release_m_kcpsession();
  void set_allocated_m_kcpsession(std::string* m_kcpsession);
  private:
  const std::string& _internal_m_kcpsession() const;
  void _internal_set_m_kcpsession(const std::string& value);
  std::string* _internal_mutable_m_kcpsession();
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_kcpsession_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_TASK_RECEIVE_AWARD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD) */ {
 public:
  inline PROBUFF_NET_TASK_RECEIVE_AWARD() : PROBUFF_NET_TASK_RECEIVE_AWARD(nullptr) {}
  virtual ~PROBUFF_NET_TASK_RECEIVE_AWARD();

  PROBUFF_NET_TASK_RECEIVE_AWARD(const PROBUFF_NET_TASK_RECEIVE_AWARD& from);
  PROBUFF_NET_TASK_RECEIVE_AWARD(PROBUFF_NET_TASK_RECEIVE_AWARD&& from) noexcept
    : PROBUFF_NET_TASK_RECEIVE_AWARD() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_TASK_RECEIVE_AWARD& operator=(const PROBUFF_NET_TASK_RECEIVE_AWARD& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_TASK_RECEIVE_AWARD& operator=(PROBUFF_NET_TASK_RECEIVE_AWARD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_TASK_RECEIVE_AWARD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_TASK_RECEIVE_AWARD* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_TASK_RECEIVE_AWARD*>(
               &_PROBUFF_NET_TASK_RECEIVE_AWARD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(PROBUFF_NET_TASK_RECEIVE_AWARD& a, PROBUFF_NET_TASK_RECEIVE_AWARD& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_TASK_RECEIVE_AWARD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_TASK_RECEIVE_AWARD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_TASK_RECEIVE_AWARD* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_TASK_RECEIVE_AWARD>(nullptr);
  }

  PROBUFF_NET_TASK_RECEIVE_AWARD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_TASK_RECEIVE_AWARD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD& from);
  void MergeFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_TASK_RECEIVE_AWARD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD";
  }
  protected:
  explicit PROBUFF_NET_TASK_RECEIVE_AWARD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTaskidFieldNumber = 1,
  };
  // int32 m_taskid = 1;
  bool has_m_taskid() const;
  private:
  bool _internal_has_m_taskid() const;
  public:
  void clear_m_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_taskid() const;
  void set_m_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_taskid() const;
  void _internal_set_m_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_taskid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class drop_item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.drop_item) */ {
 public:
  inline drop_item() : drop_item(nullptr) {}
  virtual ~drop_item();

  drop_item(const drop_item& from);
  drop_item(drop_item&& from) noexcept
    : drop_item() {
    *this = ::std::move(from);
  }

  inline drop_item& operator=(const drop_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline drop_item& operator=(drop_item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const drop_item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const drop_item* internal_default_instance() {
    return reinterpret_cast<const drop_item*>(
               &_drop_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(drop_item& a, drop_item& b) {
    a.Swap(&b);
  }
  inline void Swap(drop_item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(drop_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline drop_item* New() const final {
    return CreateMaybeMessage<drop_item>(nullptr);
  }

  drop_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<drop_item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const drop_item& from);
  void MergeFrom(const drop_item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(drop_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.drop_item";
  }
  protected:
  explicit drop_item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMItemFieldNumber = 1,
    kMCountFieldNumber = 2,
  };
  // int32 m_item = 1;
  bool has_m_item() const;
  private:
  bool _internal_has_m_item() const;
  public:
  void clear_m_item();
  ::PROTOBUF_NAMESPACE_ID::int32 m_item() const;
  void set_m_item(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_item() const;
  void _internal_set_m_item(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_count = 2;
  bool has_m_count() const;
  private:
  bool _internal_has_m_count() const;
  public:
  void clear_m_count();
  ::PROTOBUF_NAMESPACE_ID::int32 m_count() const;
  void set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_count() const;
  void _internal_set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.drop_item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_item_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_count_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse();
  explicit PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse& other);
  static const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse*>(&_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[66];
  }

  public:
};

// -------------------------------------------------------------------

class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE) */ {
 public:
  inline PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE() : PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE();

  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from);
  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE&& from) noexcept
    : PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& operator=(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& operator=(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE*>(
               &_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& a, PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE>(nullptr);
  }

  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMDropFieldNumber = 3,
    kMTaskidFieldNumber = 1,
    kMStatFieldNumber = 2,
  };
  // map<int32, int32> m_drop = 3;
  int m_drop_size() const;
  private:
  int _internal_m_drop_size() const;
  public:
  void clear_m_drop();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_m_drop() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_m_drop();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      m_drop() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_m_drop();

  // int32 m_taskid = 1;
  bool has_m_taskid() const;
  private:
  bool _internal_has_m_taskid() const;
  public:
  void clear_m_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_taskid() const;
  void set_m_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_taskid() const;
  void _internal_set_m_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool m_stat = 2;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  bool m_stat() const;
  void set_m_stat(bool value);
  private:
  bool _internal_m_stat() const;
  void _internal_set_m_stat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > m_drop_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_taskid_;
  bool m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_CREATE_FAMIL PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CREATE_FAMIL) */ {
 public:
  inline PROBUFF_NET_CREATE_FAMIL() : PROBUFF_NET_CREATE_FAMIL(nullptr) {}
  virtual ~PROBUFF_NET_CREATE_FAMIL();

  PROBUFF_NET_CREATE_FAMIL(const PROBUFF_NET_CREATE_FAMIL& from);
  PROBUFF_NET_CREATE_FAMIL(PROBUFF_NET_CREATE_FAMIL&& from) noexcept
    : PROBUFF_NET_CREATE_FAMIL() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CREATE_FAMIL& operator=(const PROBUFF_NET_CREATE_FAMIL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CREATE_FAMIL& operator=(PROBUFF_NET_CREATE_FAMIL&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_CREATE_FAMIL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_CREATE_FAMIL* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CREATE_FAMIL*>(
               &_PROBUFF_NET_CREATE_FAMIL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(PROBUFF_NET_CREATE_FAMIL& a, PROBUFF_NET_CREATE_FAMIL& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CREATE_FAMIL* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CREATE_FAMIL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_CREATE_FAMIL* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_CREATE_FAMIL>(nullptr);
  }

  PROBUFF_NET_CREATE_FAMIL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_CREATE_FAMIL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_CREATE_FAMIL& from);
  void MergeFrom(const PROBUFF_NET_CREATE_FAMIL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CREATE_FAMIL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_CREATE_FAMIL";
  }
  protected:
  explicit PROBUFF_NET_CREATE_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMNameFieldNumber = 1,
  };
  // string m_name = 1;
  bool has_m_name() const;
  private:
  bool _internal_has_m_name() const;
  public:
  void clear_m_name();
  const std::string& m_name() const;
  void set_m_name(const std::string& value);
  void set_m_name(std::string&& value);
  void set_m_name(const char* value);
  void set_m_name(const char* value, size_t size);
  std::string* mutable_m_name();
  std::string* release_m_name();
  void set_allocated_m_name(std::string* m_name);
  private:
  const std::string& _internal_m_name() const;
  void _internal_set_m_name(const std::string& value);
  std::string* _internal_mutable_m_name();
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CREATE_FAMIL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_name_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_CREATE_FAMIL_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE) */ {
 public:
  inline PROBUFF_NET_CREATE_FAMIL_RESPONSE() : PROBUFF_NET_CREATE_FAMIL_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_CREATE_FAMIL_RESPONSE();

  PROBUFF_NET_CREATE_FAMIL_RESPONSE(const PROBUFF_NET_CREATE_FAMIL_RESPONSE& from);
  PROBUFF_NET_CREATE_FAMIL_RESPONSE(PROBUFF_NET_CREATE_FAMIL_RESPONSE&& from) noexcept
    : PROBUFF_NET_CREATE_FAMIL_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CREATE_FAMIL_RESPONSE& operator=(const PROBUFF_NET_CREATE_FAMIL_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CREATE_FAMIL_RESPONSE& operator=(PROBUFF_NET_CREATE_FAMIL_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_CREATE_FAMIL_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_CREATE_FAMIL_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CREATE_FAMIL_RESPONSE*>(
               &_PROBUFF_NET_CREATE_FAMIL_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(PROBUFF_NET_CREATE_FAMIL_RESPONSE& a, PROBUFF_NET_CREATE_FAMIL_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CREATE_FAMIL_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CREATE_FAMIL_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_CREATE_FAMIL_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_CREATE_FAMIL_RESPONSE>(nullptr);
  }

  PROBUFF_NET_CREATE_FAMIL_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_CREATE_FAMIL_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_CREATE_FAMIL_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_CREATE_FAMIL_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CREATE_FAMIL_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_CREATE_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMStatFieldNumber = 1,
  };
  // int32 m_stat = 1;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat() const;
  void set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_stat() const;
  void _internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_JOIN_FAMIL PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_JOIN_FAMIL) */ {
 public:
  inline PROBUFF_NET_JOIN_FAMIL() : PROBUFF_NET_JOIN_FAMIL(nullptr) {}
  virtual ~PROBUFF_NET_JOIN_FAMIL();

  PROBUFF_NET_JOIN_FAMIL(const PROBUFF_NET_JOIN_FAMIL& from);
  PROBUFF_NET_JOIN_FAMIL(PROBUFF_NET_JOIN_FAMIL&& from) noexcept
    : PROBUFF_NET_JOIN_FAMIL() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_JOIN_FAMIL& operator=(const PROBUFF_NET_JOIN_FAMIL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_JOIN_FAMIL& operator=(PROBUFF_NET_JOIN_FAMIL&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_JOIN_FAMIL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_JOIN_FAMIL* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_JOIN_FAMIL*>(
               &_PROBUFF_NET_JOIN_FAMIL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(PROBUFF_NET_JOIN_FAMIL& a, PROBUFF_NET_JOIN_FAMIL& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_JOIN_FAMIL* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_JOIN_FAMIL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_JOIN_FAMIL* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_JOIN_FAMIL>(nullptr);
  }

  PROBUFF_NET_JOIN_FAMIL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_JOIN_FAMIL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_JOIN_FAMIL& from);
  void MergeFrom(const PROBUFF_NET_JOIN_FAMIL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_JOIN_FAMIL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_JOIN_FAMIL";
  }
  protected:
  explicit PROBUFF_NET_JOIN_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFamilidFieldNumber = 1,
    kMApplyFieldNumber = 2,
  };
  // int64 m_familid = 1;
  bool has_m_familid() const;
  private:
  bool _internal_has_m_familid() const;
  public:
  void clear_m_familid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_familid() const;
  void set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_familid() const;
  void _internal_set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool m_apply = 2;
  bool has_m_apply() const;
  private:
  bool _internal_has_m_apply() const;
  public:
  void clear_m_apply();
  bool m_apply() const;
  void set_m_apply(bool value);
  private:
  bool _internal_m_apply() const;
  void _internal_set_m_apply(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_JOIN_FAMIL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_familid_;
  bool m_apply_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_JOIN_FAMIL_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE) */ {
 public:
  inline PROBUFF_NET_JOIN_FAMIL_RESPONSE() : PROBUFF_NET_JOIN_FAMIL_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_JOIN_FAMIL_RESPONSE();

  PROBUFF_NET_JOIN_FAMIL_RESPONSE(const PROBUFF_NET_JOIN_FAMIL_RESPONSE& from);
  PROBUFF_NET_JOIN_FAMIL_RESPONSE(PROBUFF_NET_JOIN_FAMIL_RESPONSE&& from) noexcept
    : PROBUFF_NET_JOIN_FAMIL_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_JOIN_FAMIL_RESPONSE& operator=(const PROBUFF_NET_JOIN_FAMIL_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_JOIN_FAMIL_RESPONSE& operator=(PROBUFF_NET_JOIN_FAMIL_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_JOIN_FAMIL_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_JOIN_FAMIL_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_JOIN_FAMIL_RESPONSE*>(
               &_PROBUFF_NET_JOIN_FAMIL_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(PROBUFF_NET_JOIN_FAMIL_RESPONSE& a, PROBUFF_NET_JOIN_FAMIL_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_JOIN_FAMIL_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_JOIN_FAMIL_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_JOIN_FAMIL_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_JOIN_FAMIL_RESPONSE>(nullptr);
  }

  PROBUFF_NET_JOIN_FAMIL_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_JOIN_FAMIL_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_JOIN_FAMIL_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_JOIN_FAMIL_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_JOIN_FAMIL_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_JOIN_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMStatFieldNumber = 1,
  };
  // int32 m_stat = 1;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat() const;
  void set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_stat() const;
  void _internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_RATIFY_JOIN_FAMIL PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL) */ {
 public:
  inline PROBUFF_NET_RATIFY_JOIN_FAMIL() : PROBUFF_NET_RATIFY_JOIN_FAMIL(nullptr) {}
  virtual ~PROBUFF_NET_RATIFY_JOIN_FAMIL();

  PROBUFF_NET_RATIFY_JOIN_FAMIL(const PROBUFF_NET_RATIFY_JOIN_FAMIL& from);
  PROBUFF_NET_RATIFY_JOIN_FAMIL(PROBUFF_NET_RATIFY_JOIN_FAMIL&& from) noexcept
    : PROBUFF_NET_RATIFY_JOIN_FAMIL() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_RATIFY_JOIN_FAMIL& operator=(const PROBUFF_NET_RATIFY_JOIN_FAMIL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_RATIFY_JOIN_FAMIL& operator=(PROBUFF_NET_RATIFY_JOIN_FAMIL&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_RATIFY_JOIN_FAMIL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_RATIFY_JOIN_FAMIL* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_RATIFY_JOIN_FAMIL*>(
               &_PROBUFF_NET_RATIFY_JOIN_FAMIL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(PROBUFF_NET_RATIFY_JOIN_FAMIL& a, PROBUFF_NET_RATIFY_JOIN_FAMIL& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_RATIFY_JOIN_FAMIL* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_RATIFY_JOIN_FAMIL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_RATIFY_JOIN_FAMIL* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_RATIFY_JOIN_FAMIL>(nullptr);
  }

  PROBUFF_NET_RATIFY_JOIN_FAMIL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_RATIFY_JOIN_FAMIL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_RATIFY_JOIN_FAMIL& from);
  void MergeFrom(const PROBUFF_NET_RATIFY_JOIN_FAMIL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_RATIFY_JOIN_FAMIL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL";
  }
  protected:
  explicit PROBUFF_NET_RATIFY_JOIN_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRoleidFieldNumber = 1,
    kMRatifyFieldNumber = 2,
  };
  // int64 m_roleid = 1;
  bool has_m_roleid() const;
  private:
  bool _internal_has_m_roleid() const;
  public:
  void clear_m_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid() const;
  void set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_roleid() const;
  void _internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool m_ratify = 2;
  bool has_m_ratify() const;
  private:
  bool _internal_has_m_ratify() const;
  public:
  void clear_m_ratify();
  bool m_ratify() const;
  void set_m_ratify(bool value);
  private:
  bool _internal_m_ratify() const;
  void _internal_set_m_ratify(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid_;
  bool m_ratify_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE) */ {
 public:
  inline PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE() : PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE();

  PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE(const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& from);
  PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE(PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE&& from) noexcept
    : PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& operator=(const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& operator=(PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE*>(
               &_PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& a, PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE>(nullptr);
  }

  PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMStatFieldNumber = 1,
  };
  // int32 m_stat = 1;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat() const;
  void set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_stat() const;
  void _internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_CEDE_FAMIL PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CEDE_FAMIL) */ {
 public:
  inline PROBUFF_NET_CEDE_FAMIL() : PROBUFF_NET_CEDE_FAMIL(nullptr) {}
  virtual ~PROBUFF_NET_CEDE_FAMIL();

  PROBUFF_NET_CEDE_FAMIL(const PROBUFF_NET_CEDE_FAMIL& from);
  PROBUFF_NET_CEDE_FAMIL(PROBUFF_NET_CEDE_FAMIL&& from) noexcept
    : PROBUFF_NET_CEDE_FAMIL() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CEDE_FAMIL& operator=(const PROBUFF_NET_CEDE_FAMIL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CEDE_FAMIL& operator=(PROBUFF_NET_CEDE_FAMIL&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_CEDE_FAMIL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_CEDE_FAMIL* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CEDE_FAMIL*>(
               &_PROBUFF_NET_CEDE_FAMIL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(PROBUFF_NET_CEDE_FAMIL& a, PROBUFF_NET_CEDE_FAMIL& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CEDE_FAMIL* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CEDE_FAMIL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_CEDE_FAMIL* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_CEDE_FAMIL>(nullptr);
  }

  PROBUFF_NET_CEDE_FAMIL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_CEDE_FAMIL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_CEDE_FAMIL& from);
  void MergeFrom(const PROBUFF_NET_CEDE_FAMIL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CEDE_FAMIL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_CEDE_FAMIL";
  }
  protected:
  explicit PROBUFF_NET_CEDE_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRoleidFieldNumber = 1,
  };
  // int64 m_roleid = 1;
  bool has_m_roleid() const;
  private:
  bool _internal_has_m_roleid() const;
  public:
  void clear_m_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid() const;
  void set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_roleid() const;
  void _internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CEDE_FAMIL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_roleid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_CEDE_FAMIL_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE) */ {
 public:
  inline PROBUFF_NET_CEDE_FAMIL_RESPONSE() : PROBUFF_NET_CEDE_FAMIL_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_CEDE_FAMIL_RESPONSE();

  PROBUFF_NET_CEDE_FAMIL_RESPONSE(const PROBUFF_NET_CEDE_FAMIL_RESPONSE& from);
  PROBUFF_NET_CEDE_FAMIL_RESPONSE(PROBUFF_NET_CEDE_FAMIL_RESPONSE&& from) noexcept
    : PROBUFF_NET_CEDE_FAMIL_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CEDE_FAMIL_RESPONSE& operator=(const PROBUFF_NET_CEDE_FAMIL_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CEDE_FAMIL_RESPONSE& operator=(PROBUFF_NET_CEDE_FAMIL_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_CEDE_FAMIL_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_CEDE_FAMIL_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CEDE_FAMIL_RESPONSE*>(
               &_PROBUFF_NET_CEDE_FAMIL_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(PROBUFF_NET_CEDE_FAMIL_RESPONSE& a, PROBUFF_NET_CEDE_FAMIL_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CEDE_FAMIL_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CEDE_FAMIL_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_CEDE_FAMIL_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_CEDE_FAMIL_RESPONSE>(nullptr);
  }

  PROBUFF_NET_CEDE_FAMIL_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_CEDE_FAMIL_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_CEDE_FAMIL_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_CEDE_FAMIL_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CEDE_FAMIL_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_CEDE_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMStatFieldNumber = 1,
  };
  // int32 m_stat = 1;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat() const;
  void set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_stat() const;
  void _internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_LEAVE_FAMIL PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_LEAVE_FAMIL) */ {
 public:
  inline PROBUFF_NET_LEAVE_FAMIL() : PROBUFF_NET_LEAVE_FAMIL(nullptr) {}
  virtual ~PROBUFF_NET_LEAVE_FAMIL();

  PROBUFF_NET_LEAVE_FAMIL(const PROBUFF_NET_LEAVE_FAMIL& from);
  PROBUFF_NET_LEAVE_FAMIL(PROBUFF_NET_LEAVE_FAMIL&& from) noexcept
    : PROBUFF_NET_LEAVE_FAMIL() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_LEAVE_FAMIL& operator=(const PROBUFF_NET_LEAVE_FAMIL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_LEAVE_FAMIL& operator=(PROBUFF_NET_LEAVE_FAMIL&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_LEAVE_FAMIL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_LEAVE_FAMIL* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_LEAVE_FAMIL*>(
               &_PROBUFF_NET_LEAVE_FAMIL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(PROBUFF_NET_LEAVE_FAMIL& a, PROBUFF_NET_LEAVE_FAMIL& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_LEAVE_FAMIL* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_LEAVE_FAMIL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_LEAVE_FAMIL* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_LEAVE_FAMIL>(nullptr);
  }

  PROBUFF_NET_LEAVE_FAMIL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_LEAVE_FAMIL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_LEAVE_FAMIL& from);
  void MergeFrom(const PROBUFF_NET_LEAVE_FAMIL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_LEAVE_FAMIL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_LEAVE_FAMIL";
  }
  protected:
  explicit PROBUFF_NET_LEAVE_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFamilidFieldNumber = 1,
  };
  // int64 m_familid = 1;
  bool has_m_familid() const;
  private:
  bool _internal_has_m_familid() const;
  public:
  void clear_m_familid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_familid() const;
  void set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_familid() const;
  void _internal_set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_LEAVE_FAMIL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_familid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_LEAVE_FAMIL_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE) */ {
 public:
  inline PROBUFF_NET_LEAVE_FAMIL_RESPONSE() : PROBUFF_NET_LEAVE_FAMIL_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_LEAVE_FAMIL_RESPONSE();

  PROBUFF_NET_LEAVE_FAMIL_RESPONSE(const PROBUFF_NET_LEAVE_FAMIL_RESPONSE& from);
  PROBUFF_NET_LEAVE_FAMIL_RESPONSE(PROBUFF_NET_LEAVE_FAMIL_RESPONSE&& from) noexcept
    : PROBUFF_NET_LEAVE_FAMIL_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_LEAVE_FAMIL_RESPONSE& operator=(const PROBUFF_NET_LEAVE_FAMIL_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_LEAVE_FAMIL_RESPONSE& operator=(PROBUFF_NET_LEAVE_FAMIL_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_LEAVE_FAMIL_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_LEAVE_FAMIL_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_LEAVE_FAMIL_RESPONSE*>(
               &_PROBUFF_NET_LEAVE_FAMIL_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(PROBUFF_NET_LEAVE_FAMIL_RESPONSE& a, PROBUFF_NET_LEAVE_FAMIL_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_LEAVE_FAMIL_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_LEAVE_FAMIL_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_LEAVE_FAMIL_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_LEAVE_FAMIL_RESPONSE>(nullptr);
  }

  PROBUFF_NET_LEAVE_FAMIL_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_LEAVE_FAMIL_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_LEAVE_FAMIL_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_LEAVE_FAMIL_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_LEAVE_FAMIL_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_LEAVE_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMStatFieldNumber = 1,
  };
  // int32 m_stat = 1;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat() const;
  void set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_stat() const;
  void _internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_LIST PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_LIST) */ {
 public:
  inline PROBUFF_NET_FAMIL_LIST() : PROBUFF_NET_FAMIL_LIST(nullptr) {}
  virtual ~PROBUFF_NET_FAMIL_LIST();

  PROBUFF_NET_FAMIL_LIST(const PROBUFF_NET_FAMIL_LIST& from);
  PROBUFF_NET_FAMIL_LIST(PROBUFF_NET_FAMIL_LIST&& from) noexcept
    : PROBUFF_NET_FAMIL_LIST() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_LIST& operator=(const PROBUFF_NET_FAMIL_LIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_LIST& operator=(PROBUFF_NET_FAMIL_LIST&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_LIST& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_LIST* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_LIST*>(
               &_PROBUFF_NET_FAMIL_LIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(PROBUFF_NET_FAMIL_LIST& a, PROBUFF_NET_FAMIL_LIST& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_LIST* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_LIST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_LIST* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_LIST>(nullptr);
  }

  PROBUFF_NET_FAMIL_LIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_LIST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_LIST& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_LIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_LIST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_LIST";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFamilidFieldNumber = 1,
  };
  // int64 m_familid = 1;
  bool has_m_familid() const;
  private:
  bool _internal_has_m_familid() const;
  public:
  void clear_m_familid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_familid() const;
  void set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_familid() const;
  void _internal_set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_LIST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_familid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMIL_LIST_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FAMIL_LIST_RESPONSE() : PROBUFF_NET_FAMIL_LIST_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_FAMIL_LIST_RESPONSE();

  PROBUFF_NET_FAMIL_LIST_RESPONSE(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from);
  PROBUFF_NET_FAMIL_LIST_RESPONSE(PROBUFF_NET_FAMIL_LIST_RESPONSE&& from) noexcept
    : PROBUFF_NET_FAMIL_LIST_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMIL_LIST_RESPONSE& operator=(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMIL_LIST_RESPONSE& operator=(PROBUFF_NET_FAMIL_LIST_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMIL_LIST_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMIL_LIST_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMIL_LIST_RESPONSE*>(
               &_PROBUFF_NET_FAMIL_LIST_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(PROBUFF_NET_FAMIL_LIST_RESPONSE& a, PROBUFF_NET_FAMIL_LIST_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMIL_LIST_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMIL_LIST_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMIL_LIST_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_LIST_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FAMIL_LIST_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMIL_LIST_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMIL_LIST_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FAMIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFamilyFieldNumber = 2,
    kMFamilidFieldNumber = 1,
  };
  // repeated .pbdb.db_family m_family = 2;
  int m_family_size() const;
  private:
  int _internal_m_family_size() const;
  public:
  void clear_m_family();
  ::pbdb::db_family* mutable_m_family(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_family >*
      mutable_m_family();
  private:
  const ::pbdb::db_family& _internal_m_family(int index) const;
  ::pbdb::db_family* _internal_add_m_family();
  public:
  const ::pbdb::db_family& m_family(int index) const;
  ::pbdb::db_family* add_m_family();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_family >&
      m_family() const;

  // int64 m_familid = 1;
  bool has_m_familid() const;
  private:
  bool _internal_has_m_familid() const;
  public:
  void clear_m_familid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_familid() const;
  void set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_familid() const;
  void _internal_set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_family > m_family_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_familid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_CHANGE_FAMILNAME PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CHANGE_FAMILNAME) */ {
 public:
  inline PROBUFF_NET_CHANGE_FAMILNAME() : PROBUFF_NET_CHANGE_FAMILNAME(nullptr) {}
  virtual ~PROBUFF_NET_CHANGE_FAMILNAME();

  PROBUFF_NET_CHANGE_FAMILNAME(const PROBUFF_NET_CHANGE_FAMILNAME& from);
  PROBUFF_NET_CHANGE_FAMILNAME(PROBUFF_NET_CHANGE_FAMILNAME&& from) noexcept
    : PROBUFF_NET_CHANGE_FAMILNAME() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CHANGE_FAMILNAME& operator=(const PROBUFF_NET_CHANGE_FAMILNAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CHANGE_FAMILNAME& operator=(PROBUFF_NET_CHANGE_FAMILNAME&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_CHANGE_FAMILNAME& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_CHANGE_FAMILNAME* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CHANGE_FAMILNAME*>(
               &_PROBUFF_NET_CHANGE_FAMILNAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(PROBUFF_NET_CHANGE_FAMILNAME& a, PROBUFF_NET_CHANGE_FAMILNAME& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CHANGE_FAMILNAME* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CHANGE_FAMILNAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_CHANGE_FAMILNAME* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_CHANGE_FAMILNAME>(nullptr);
  }

  PROBUFF_NET_CHANGE_FAMILNAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_CHANGE_FAMILNAME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_CHANGE_FAMILNAME& from);
  void MergeFrom(const PROBUFF_NET_CHANGE_FAMILNAME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CHANGE_FAMILNAME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_CHANGE_FAMILNAME";
  }
  protected:
  explicit PROBUFF_NET_CHANGE_FAMILNAME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMNameFieldNumber = 2,
    kMFamilidFieldNumber = 1,
  };
  // string m_name = 2;
  bool has_m_name() const;
  private:
  bool _internal_has_m_name() const;
  public:
  void clear_m_name();
  const std::string& m_name() const;
  void set_m_name(const std::string& value);
  void set_m_name(std::string&& value);
  void set_m_name(const char* value);
  void set_m_name(const char* value, size_t size);
  std::string* mutable_m_name();
  std::string* release_m_name();
  void set_allocated_m_name(std::string* m_name);
  private:
  const std::string& _internal_m_name() const;
  void _internal_set_m_name(const std::string& value);
  std::string* _internal_mutable_m_name();
  public:

  // int64 m_familid = 1;
  bool has_m_familid() const;
  private:
  bool _internal_has_m_familid() const;
  public:
  void clear_m_familid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_familid() const;
  void set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_familid() const;
  void _internal_set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_familid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE) */ {
 public:
  inline PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE() : PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE();

  PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE(const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& from);
  PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE(PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE&& from) noexcept
    : PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& operator=(const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& operator=(PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE*>(
               &_PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& a, PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE>(nullptr);
  }

  PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMStatFieldNumber = 1,
  };
  // int32 m_stat = 1;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat() const;
  void set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_stat() const;
  void _internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMILSIGN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMILSIGN) */ {
 public:
  inline PROBUFF_NET_FAMILSIGN() : PROBUFF_NET_FAMILSIGN(nullptr) {}
  virtual ~PROBUFF_NET_FAMILSIGN();

  PROBUFF_NET_FAMILSIGN(const PROBUFF_NET_FAMILSIGN& from);
  PROBUFF_NET_FAMILSIGN(PROBUFF_NET_FAMILSIGN&& from) noexcept
    : PROBUFF_NET_FAMILSIGN() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMILSIGN& operator=(const PROBUFF_NET_FAMILSIGN& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMILSIGN& operator=(PROBUFF_NET_FAMILSIGN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMILSIGN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMILSIGN* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMILSIGN*>(
               &_PROBUFF_NET_FAMILSIGN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(PROBUFF_NET_FAMILSIGN& a, PROBUFF_NET_FAMILSIGN& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMILSIGN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMILSIGN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMILSIGN* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMILSIGN>(nullptr);
  }

  PROBUFF_NET_FAMILSIGN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMILSIGN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMILSIGN& from);
  void MergeFrom(const PROBUFF_NET_FAMILSIGN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMILSIGN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMILSIGN";
  }
  protected:
  explicit PROBUFF_NET_FAMILSIGN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFamilidFieldNumber = 1,
  };
  // int64 m_familid = 1;
  bool has_m_familid() const;
  private:
  bool _internal_has_m_familid() const;
  public:
  void clear_m_familid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_familid() const;
  void set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_familid() const;
  void _internal_set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMILSIGN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_familid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FAMILSIGN_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FAMILSIGN_RESPONSE() : PROBUFF_NET_FAMILSIGN_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_FAMILSIGN_RESPONSE();

  PROBUFF_NET_FAMILSIGN_RESPONSE(const PROBUFF_NET_FAMILSIGN_RESPONSE& from);
  PROBUFF_NET_FAMILSIGN_RESPONSE(PROBUFF_NET_FAMILSIGN_RESPONSE&& from) noexcept
    : PROBUFF_NET_FAMILSIGN_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FAMILSIGN_RESPONSE& operator=(const PROBUFF_NET_FAMILSIGN_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FAMILSIGN_RESPONSE& operator=(PROBUFF_NET_FAMILSIGN_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FAMILSIGN_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FAMILSIGN_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FAMILSIGN_RESPONSE*>(
               &_PROBUFF_NET_FAMILSIGN_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(PROBUFF_NET_FAMILSIGN_RESPONSE& a, PROBUFF_NET_FAMILSIGN_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FAMILSIGN_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FAMILSIGN_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FAMILSIGN_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMILSIGN_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FAMILSIGN_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FAMILSIGN_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FAMILSIGN_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FAMILSIGN_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FAMILSIGN_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FAMILSIGN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMStatFieldNumber = 1,
  };
  // int32 m_stat = 1;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat() const;
  void set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_stat() const;
  void _internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse();
  explicit PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse& other);
  static const PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse*>(&_PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[84];
  }

  public:
};

// -------------------------------------------------------------------

class PROBUFF_NET_REWARD_ITEM_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE) */ {
 public:
  inline PROBUFF_NET_REWARD_ITEM_RESPONSE() : PROBUFF_NET_REWARD_ITEM_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_REWARD_ITEM_RESPONSE();

  PROBUFF_NET_REWARD_ITEM_RESPONSE(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from);
  PROBUFF_NET_REWARD_ITEM_RESPONSE(PROBUFF_NET_REWARD_ITEM_RESPONSE&& from) noexcept
    : PROBUFF_NET_REWARD_ITEM_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_REWARD_ITEM_RESPONSE& operator=(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_REWARD_ITEM_RESPONSE& operator=(PROBUFF_NET_REWARD_ITEM_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_REWARD_ITEM_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_REWARD_ITEM_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_REWARD_ITEM_RESPONSE*>(
               &_PROBUFF_NET_REWARD_ITEM_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(PROBUFF_NET_REWARD_ITEM_RESPONSE& a, PROBUFF_NET_REWARD_ITEM_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_REWARD_ITEM_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_REWARD_ITEM_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_REWARD_ITEM_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_REWARD_ITEM_RESPONSE>(nullptr);
  }

  PROBUFF_NET_REWARD_ITEM_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_REWARD_ITEM_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_REWARD_ITEM_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_REWARD_ITEM_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMItemsFieldNumber = 1,
  };
  // map<int32, int32> m_items = 1;
  int m_items_size() const;
  private:
  int _internal_m_items_size() const;
  public:
  void clear_m_items();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_m_items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_m_items();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      m_items() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_m_items();

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > m_items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_RANKLIST PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_RANKLIST) */ {
 public:
  inline PROBUFF_NET_RANKLIST() : PROBUFF_NET_RANKLIST(nullptr) {}
  virtual ~PROBUFF_NET_RANKLIST();

  PROBUFF_NET_RANKLIST(const PROBUFF_NET_RANKLIST& from);
  PROBUFF_NET_RANKLIST(PROBUFF_NET_RANKLIST&& from) noexcept
    : PROBUFF_NET_RANKLIST() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_RANKLIST& operator=(const PROBUFF_NET_RANKLIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_RANKLIST& operator=(PROBUFF_NET_RANKLIST&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_RANKLIST& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_RANKLIST* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_RANKLIST*>(
               &_PROBUFF_NET_RANKLIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(PROBUFF_NET_RANKLIST& a, PROBUFF_NET_RANKLIST& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_RANKLIST* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_RANKLIST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_RANKLIST* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_RANKLIST>(nullptr);
  }

  PROBUFF_NET_RANKLIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_RANKLIST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_RANKLIST& from);
  void MergeFrom(const PROBUFF_NET_RANKLIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_RANKLIST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_RANKLIST";
  }
  protected:
  explicit PROBUFF_NET_RANKLIST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
  };
  // .pbdb.eranklist m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbdb::eranklist m_type() const;
  void set_m_type(::pbdb::eranklist value);
  private:
  ::pbdb::eranklist _internal_m_type() const;
  void _internal_set_m_type(::pbdb::eranklist value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_RANKLIST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int m_type_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_RANKLIST_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_RANKLIST_RESPONSE) */ {
 public:
  inline PROBUFF_NET_RANKLIST_RESPONSE() : PROBUFF_NET_RANKLIST_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_RANKLIST_RESPONSE();

  PROBUFF_NET_RANKLIST_RESPONSE(const PROBUFF_NET_RANKLIST_RESPONSE& from);
  PROBUFF_NET_RANKLIST_RESPONSE(PROBUFF_NET_RANKLIST_RESPONSE&& from) noexcept
    : PROBUFF_NET_RANKLIST_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_RANKLIST_RESPONSE& operator=(const PROBUFF_NET_RANKLIST_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_RANKLIST_RESPONSE& operator=(PROBUFF_NET_RANKLIST_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_RANKLIST_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_RANKLIST_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_RANKLIST_RESPONSE*>(
               &_PROBUFF_NET_RANKLIST_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(PROBUFF_NET_RANKLIST_RESPONSE& a, PROBUFF_NET_RANKLIST_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_RANKLIST_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_RANKLIST_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_RANKLIST_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_RANKLIST_RESPONSE>(nullptr);
  }

  PROBUFF_NET_RANKLIST_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_RANKLIST_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_RANKLIST_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_RANKLIST_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_RANKLIST_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_RANKLIST_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_RANKLIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMItemsFieldNumber = 2,
    kMTypeFieldNumber = 1,
  };
  // repeated .pbdb.db_brief m_items = 2;
  int m_items_size() const;
  private:
  int _internal_m_items_size() const;
  public:
  void clear_m_items();
  ::pbdb::db_brief* mutable_m_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >*
      mutable_m_items();
  private:
  const ::pbdb::db_brief& _internal_m_items(int index) const;
  ::pbdb::db_brief* _internal_add_m_items();
  public:
  const ::pbdb::db_brief& m_items(int index) const;
  ::pbdb::db_brief* add_m_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >&
      m_items() const;

  // .pbdb.eranklist m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbdb::eranklist m_type() const;
  void set_m_type(::pbdb::eranklist value);
  private:
  ::pbdb::eranklist _internal_m_type() const;
  void _internal_set_m_type(::pbdb::eranklist value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief > m_items_;
  int m_type_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FRIEND PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FRIEND) */ {
 public:
  inline PROBUFF_NET_FRIEND() : PROBUFF_NET_FRIEND(nullptr) {}
  virtual ~PROBUFF_NET_FRIEND();

  PROBUFF_NET_FRIEND(const PROBUFF_NET_FRIEND& from);
  PROBUFF_NET_FRIEND(PROBUFF_NET_FRIEND&& from) noexcept
    : PROBUFF_NET_FRIEND() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FRIEND& operator=(const PROBUFF_NET_FRIEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FRIEND& operator=(PROBUFF_NET_FRIEND&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FRIEND& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FRIEND* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FRIEND*>(
               &_PROBUFF_NET_FRIEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(PROBUFF_NET_FRIEND& a, PROBUFF_NET_FRIEND& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FRIEND* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FRIEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FRIEND* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND>(nullptr);
  }

  PROBUFF_NET_FRIEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FRIEND& from);
  void MergeFrom(const PROBUFF_NET_FRIEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FRIEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FRIEND";
  }
  protected:
  explicit PROBUFF_NET_FRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FRIEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_FRIEND_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_FRIEND_RESPONSE) */ {
 public:
  inline PROBUFF_NET_FRIEND_RESPONSE() : PROBUFF_NET_FRIEND_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_FRIEND_RESPONSE();

  PROBUFF_NET_FRIEND_RESPONSE(const PROBUFF_NET_FRIEND_RESPONSE& from);
  PROBUFF_NET_FRIEND_RESPONSE(PROBUFF_NET_FRIEND_RESPONSE&& from) noexcept
    : PROBUFF_NET_FRIEND_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_FRIEND_RESPONSE& operator=(const PROBUFF_NET_FRIEND_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_FRIEND_RESPONSE& operator=(PROBUFF_NET_FRIEND_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_FRIEND_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_FRIEND_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_FRIEND_RESPONSE*>(
               &_PROBUFF_NET_FRIEND_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(PROBUFF_NET_FRIEND_RESPONSE& a, PROBUFF_NET_FRIEND_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_FRIEND_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_FRIEND_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_FRIEND_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_RESPONSE>(nullptr);
  }

  PROBUFF_NET_FRIEND_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_FRIEND_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_FRIEND_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_FRIEND_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_FRIEND_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_FRIEND_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_FRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFriendsFieldNumber = 1,
    kMApplyfriendsFieldNumber = 2,
  };
  // repeated .pbdb.db_brief m_friends = 1;
  int m_friends_size() const;
  private:
  int _internal_m_friends_size() const;
  public:
  void clear_m_friends();
  ::pbdb::db_brief* mutable_m_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >*
      mutable_m_friends();
  private:
  const ::pbdb::db_brief& _internal_m_friends(int index) const;
  ::pbdb::db_brief* _internal_add_m_friends();
  public:
  const ::pbdb::db_brief& m_friends(int index) const;
  ::pbdb::db_brief* add_m_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >&
      m_friends() const;

  // repeated .pbdb.db_brief m_applyfriends = 2;
  int m_applyfriends_size() const;
  private:
  int _internal_m_applyfriends_size() const;
  public:
  void clear_m_applyfriends();
  ::pbdb::db_brief* mutable_m_applyfriends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >*
      mutable_m_applyfriends();
  private:
  const ::pbdb::db_brief& _internal_m_applyfriends(int index) const;
  ::pbdb::db_brief* _internal_add_m_applyfriends();
  public:
  const ::pbdb::db_brief& m_applyfriends(int index) const;
  ::pbdb::db_brief* add_m_applyfriends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >&
      m_applyfriends() const;

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief > m_friends_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief > m_applyfriends_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ADDFRIEND PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ADDFRIEND) */ {
 public:
  inline PROBUFF_NET_ADDFRIEND() : PROBUFF_NET_ADDFRIEND(nullptr) {}
  virtual ~PROBUFF_NET_ADDFRIEND();

  PROBUFF_NET_ADDFRIEND(const PROBUFF_NET_ADDFRIEND& from);
  PROBUFF_NET_ADDFRIEND(PROBUFF_NET_ADDFRIEND&& from) noexcept
    : PROBUFF_NET_ADDFRIEND() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ADDFRIEND& operator=(const PROBUFF_NET_ADDFRIEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ADDFRIEND& operator=(PROBUFF_NET_ADDFRIEND&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ADDFRIEND& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ADDFRIEND* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ADDFRIEND*>(
               &_PROBUFF_NET_ADDFRIEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(PROBUFF_NET_ADDFRIEND& a, PROBUFF_NET_ADDFRIEND& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ADDFRIEND* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ADDFRIEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ADDFRIEND* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ADDFRIEND>(nullptr);
  }

  PROBUFF_NET_ADDFRIEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ADDFRIEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ADDFRIEND& from);
  void MergeFrom(const PROBUFF_NET_ADDFRIEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ADDFRIEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ADDFRIEND";
  }
  protected:
  explicit PROBUFF_NET_ADDFRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFriedidFieldNumber = 1,
  };
  // int64 m_friedid = 1;
  bool has_m_friedid() const;
  private:
  bool _internal_has_m_friedid() const;
  public:
  void clear_m_friedid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_friedid() const;
  void set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_friedid() const;
  void _internal_set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ADDFRIEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_friedid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ADDFRIEND_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE) */ {
 public:
  inline PROBUFF_NET_ADDFRIEND_RESPONSE() : PROBUFF_NET_ADDFRIEND_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_ADDFRIEND_RESPONSE();

  PROBUFF_NET_ADDFRIEND_RESPONSE(const PROBUFF_NET_ADDFRIEND_RESPONSE& from);
  PROBUFF_NET_ADDFRIEND_RESPONSE(PROBUFF_NET_ADDFRIEND_RESPONSE&& from) noexcept
    : PROBUFF_NET_ADDFRIEND_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ADDFRIEND_RESPONSE& operator=(const PROBUFF_NET_ADDFRIEND_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ADDFRIEND_RESPONSE& operator=(PROBUFF_NET_ADDFRIEND_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ADDFRIEND_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ADDFRIEND_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ADDFRIEND_RESPONSE*>(
               &_PROBUFF_NET_ADDFRIEND_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(PROBUFF_NET_ADDFRIEND_RESPONSE& a, PROBUFF_NET_ADDFRIEND_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ADDFRIEND_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ADDFRIEND_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ADDFRIEND_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ADDFRIEND_RESPONSE>(nullptr);
  }

  PROBUFF_NET_ADDFRIEND_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ADDFRIEND_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ADDFRIEND_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_ADDFRIEND_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ADDFRIEND_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_ADDFRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFriedidFieldNumber = 1,
    kMStatFieldNumber = 2,
  };
  // int64 m_friedid = 1;
  bool has_m_friedid() const;
  private:
  bool _internal_has_m_friedid() const;
  public:
  void clear_m_friedid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_friedid() const;
  void set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_friedid() const;
  void _internal_set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_stat = 2;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat() const;
  void set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_stat() const;
  void _internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_friedid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_RATIFY_ADDFRIEND PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND) */ {
 public:
  inline PROBUFF_NET_RATIFY_ADDFRIEND() : PROBUFF_NET_RATIFY_ADDFRIEND(nullptr) {}
  virtual ~PROBUFF_NET_RATIFY_ADDFRIEND();

  PROBUFF_NET_RATIFY_ADDFRIEND(const PROBUFF_NET_RATIFY_ADDFRIEND& from);
  PROBUFF_NET_RATIFY_ADDFRIEND(PROBUFF_NET_RATIFY_ADDFRIEND&& from) noexcept
    : PROBUFF_NET_RATIFY_ADDFRIEND() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_RATIFY_ADDFRIEND& operator=(const PROBUFF_NET_RATIFY_ADDFRIEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_RATIFY_ADDFRIEND& operator=(PROBUFF_NET_RATIFY_ADDFRIEND&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_RATIFY_ADDFRIEND& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_RATIFY_ADDFRIEND* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_RATIFY_ADDFRIEND*>(
               &_PROBUFF_NET_RATIFY_ADDFRIEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(PROBUFF_NET_RATIFY_ADDFRIEND& a, PROBUFF_NET_RATIFY_ADDFRIEND& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_RATIFY_ADDFRIEND* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_RATIFY_ADDFRIEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_RATIFY_ADDFRIEND* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_RATIFY_ADDFRIEND>(nullptr);
  }

  PROBUFF_NET_RATIFY_ADDFRIEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_RATIFY_ADDFRIEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_RATIFY_ADDFRIEND& from);
  void MergeFrom(const PROBUFF_NET_RATIFY_ADDFRIEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_RATIFY_ADDFRIEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_RATIFY_ADDFRIEND";
  }
  protected:
  explicit PROBUFF_NET_RATIFY_ADDFRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFriedidFieldNumber = 1,
    kMRatifyFieldNumber = 2,
  };
  // int64 m_friedid = 1;
  bool has_m_friedid() const;
  private:
  bool _internal_has_m_friedid() const;
  public:
  void clear_m_friedid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_friedid() const;
  void set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_friedid() const;
  void _internal_set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool m_ratify = 2;
  bool has_m_ratify() const;
  private:
  bool _internal_has_m_ratify() const;
  public:
  void clear_m_ratify();
  bool m_ratify() const;
  void set_m_ratify(bool value);
  private:
  bool _internal_m_ratify() const;
  void _internal_set_m_ratify(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_friedid_;
  bool m_ratify_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE) */ {
 public:
  inline PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE() : PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE();

  PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE(const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& from);
  PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE(PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE&& from) noexcept
    : PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& operator=(const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& operator=(PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE*>(
               &_PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& a, PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE>(nullptr);
  }

  PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFriedidFieldNumber = 1,
    kMRatifyFieldNumber = 2,
    kMStatFieldNumber = 3,
  };
  // int64 m_friedid = 1;
  bool has_m_friedid() const;
  private:
  bool _internal_has_m_friedid() const;
  public:
  void clear_m_friedid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_friedid() const;
  void set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_friedid() const;
  void _internal_set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool m_ratify = 2;
  bool has_m_ratify() const;
  private:
  bool _internal_has_m_ratify() const;
  public:
  void clear_m_ratify();
  bool m_ratify() const;
  void set_m_ratify(bool value);
  private:
  bool _internal_m_ratify() const;
  void _internal_set_m_ratify(bool value);
  public:

  // int32 m_stat = 3;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat() const;
  void set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_stat() const;
  void _internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_friedid_;
  bool m_ratify_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ERASEFRIEND PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ERASEFRIEND) */ {
 public:
  inline PROBUFF_NET_ERASEFRIEND() : PROBUFF_NET_ERASEFRIEND(nullptr) {}
  virtual ~PROBUFF_NET_ERASEFRIEND();

  PROBUFF_NET_ERASEFRIEND(const PROBUFF_NET_ERASEFRIEND& from);
  PROBUFF_NET_ERASEFRIEND(PROBUFF_NET_ERASEFRIEND&& from) noexcept
    : PROBUFF_NET_ERASEFRIEND() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ERASEFRIEND& operator=(const PROBUFF_NET_ERASEFRIEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ERASEFRIEND& operator=(PROBUFF_NET_ERASEFRIEND&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ERASEFRIEND& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ERASEFRIEND* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ERASEFRIEND*>(
               &_PROBUFF_NET_ERASEFRIEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(PROBUFF_NET_ERASEFRIEND& a, PROBUFF_NET_ERASEFRIEND& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ERASEFRIEND* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ERASEFRIEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ERASEFRIEND* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ERASEFRIEND>(nullptr);
  }

  PROBUFF_NET_ERASEFRIEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ERASEFRIEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ERASEFRIEND& from);
  void MergeFrom(const PROBUFF_NET_ERASEFRIEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ERASEFRIEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ERASEFRIEND";
  }
  protected:
  explicit PROBUFF_NET_ERASEFRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFriedidFieldNumber = 1,
  };
  // int64 m_friedid = 1;
  bool has_m_friedid() const;
  private:
  bool _internal_has_m_friedid() const;
  public:
  void clear_m_friedid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_friedid() const;
  void set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_friedid() const;
  void _internal_set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ERASEFRIEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_friedid_;
  friend struct ::TableStruct_net_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_ERASEFRIEND_RESPONSE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE) */ {
 public:
  inline PROBUFF_NET_ERASEFRIEND_RESPONSE() : PROBUFF_NET_ERASEFRIEND_RESPONSE(nullptr) {}
  virtual ~PROBUFF_NET_ERASEFRIEND_RESPONSE();

  PROBUFF_NET_ERASEFRIEND_RESPONSE(const PROBUFF_NET_ERASEFRIEND_RESPONSE& from);
  PROBUFF_NET_ERASEFRIEND_RESPONSE(PROBUFF_NET_ERASEFRIEND_RESPONSE&& from) noexcept
    : PROBUFF_NET_ERASEFRIEND_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_ERASEFRIEND_RESPONSE& operator=(const PROBUFF_NET_ERASEFRIEND_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_ERASEFRIEND_RESPONSE& operator=(PROBUFF_NET_ERASEFRIEND_RESPONSE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PROBUFF_NET_ERASEFRIEND_RESPONSE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PROBUFF_NET_ERASEFRIEND_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_ERASEFRIEND_RESPONSE*>(
               &_PROBUFF_NET_ERASEFRIEND_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(PROBUFF_NET_ERASEFRIEND_RESPONSE& a, PROBUFF_NET_ERASEFRIEND_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_ERASEFRIEND_RESPONSE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_ERASEFRIEND_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROBUFF_NET_ERASEFRIEND_RESPONSE* New() const final {
    return CreateMaybeMessage<PROBUFF_NET_ERASEFRIEND_RESPONSE>(nullptr);
  }

  PROBUFF_NET_ERASEFRIEND_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROBUFF_NET_ERASEFRIEND_RESPONSE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROBUFF_NET_ERASEFRIEND_RESPONSE& from);
  void MergeFrom(const PROBUFF_NET_ERASEFRIEND_RESPONSE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_ERASEFRIEND_RESPONSE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_ERASEFRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_net_2eproto);
    return ::descriptor_table_net_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFriedidFieldNumber = 1,
    kMStatFieldNumber = 2,
  };
  // int64 m_friedid = 1;
  bool has_m_friedid() const;
  private:
  bool _internal_has_m_friedid() const;
  public:
  void clear_m_friedid();
  ::PROTOBUF_NAMESPACE_ID::int64 m_friedid() const;
  void set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_m_friedid() const;
  void _internal_set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 m_stat = 2;
  bool has_m_stat() const;
  private:
  bool _internal_has_m_stat() const;
  public:
  void clear_m_stat();
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat() const;
  void set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_stat() const;
  void _internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 m_friedid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_stat_;
  friend struct ::TableStruct_net_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PROBUFF_NET_HEARTBEAT

// -------------------------------------------------------------------

// PROBUFF_NET_RECHARGE

// int32 m_rechargeid = 1;
inline bool PROBUFF_NET_RECHARGE::_internal_has_m_rechargeid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_RECHARGE::has_m_rechargeid() const {
  return _internal_has_m_rechargeid();
}
inline void PROBUFF_NET_RECHARGE::clear_m_rechargeid() {
  m_rechargeid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RECHARGE::_internal_m_rechargeid() const {
  return m_rechargeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RECHARGE::m_rechargeid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RECHARGE.m_rechargeid)
  return _internal_m_rechargeid();
}
inline void PROBUFF_NET_RECHARGE::_internal_set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_rechargeid_ = value;
}
inline void PROBUFF_NET_RECHARGE::set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_rechargeid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RECHARGE.m_rechargeid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_RECHARGE_RESPONSE

// int32 m_rechargeid = 1;
inline bool PROBUFF_NET_RECHARGE_RESPONSE::_internal_has_m_rechargeid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_RECHARGE_RESPONSE::has_m_rechargeid() const {
  return _internal_has_m_rechargeid();
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::clear_m_rechargeid() {
  m_rechargeid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RECHARGE_RESPONSE::_internal_m_rechargeid() const {
  return m_rechargeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RECHARGE_RESPONSE::m_rechargeid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_rechargeid)
  return _internal_m_rechargeid();
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::_internal_set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_rechargeid_ = value;
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_rechargeid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_rechargeid)
}

// .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat m_stat = 2;
inline bool PROBUFF_NET_RECHARGE_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_RECHARGE_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::_internal_m_stat() const {
  return static_cast< ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat >(m_stat_);
}
inline ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::_internal_set_m_stat(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat value) {
  _has_bits_[0] |= 0x00000004u;
  m_stat_ = value;
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::set_m_stat(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_stat)
}

// string m_orderid = 3;
inline bool PROBUFF_NET_RECHARGE_RESPONSE::_internal_has_m_orderid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_RECHARGE_RESPONSE::has_m_orderid() const {
  return _internal_has_m_orderid();
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::clear_m_orderid() {
  m_orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_RECHARGE_RESPONSE::m_orderid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_orderid)
  return _internal_m_orderid();
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::set_m_orderid(const std::string& value) {
  _internal_set_m_orderid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_orderid)
}
inline std::string* PROBUFF_NET_RECHARGE_RESPONSE::mutable_m_orderid() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_orderid)
  return _internal_mutable_m_orderid();
}
inline const std::string& PROBUFF_NET_RECHARGE_RESPONSE::_internal_m_orderid() const {
  return m_orderid_.Get();
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::_internal_set_m_orderid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::set_m_orderid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_orderid)
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::set_m_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_orderid)
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::set_m_orderid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_orderid)
}
inline std::string* PROBUFF_NET_RECHARGE_RESPONSE::_internal_mutable_m_orderid() {
  _has_bits_[0] |= 0x00000001u;
  return m_orderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_RECHARGE_RESPONSE::release_m_orderid() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_orderid)
  if (!_internal_has_m_orderid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_orderid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_RECHARGE_RESPONSE::set_allocated_m_orderid(std::string* m_orderid) {
  if (m_orderid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_orderid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PROBUFF_NET_DELIVER_GOODS_RECHARGE

// int32 m_rechargeid = 1;
inline bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_has_m_rechargeid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::has_m_rechargeid() const {
  return _internal_has_m_rechargeid();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::clear_m_rechargeid() {
  m_rechargeid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_m_rechargeid() const {
  return m_rechargeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_DELIVER_GOODS_RECHARGE::m_rechargeid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_rechargeid)
  return _internal_m_rechargeid();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_rechargeid_ = value;
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::set_m_rechargeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_rechargeid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_rechargeid)
}

// string m_orderid = 2;
inline bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_has_m_orderid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::has_m_orderid() const {
  return _internal_has_m_orderid();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::clear_m_orderid() {
  m_orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_DELIVER_GOODS_RECHARGE::m_orderid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_orderid)
  return _internal_m_orderid();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::set_m_orderid(const std::string& value) {
  _internal_set_m_orderid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_orderid)
}
inline std::string* PROBUFF_NET_DELIVER_GOODS_RECHARGE::mutable_m_orderid() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_orderid)
  return _internal_mutable_m_orderid();
}
inline const std::string& PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_m_orderid() const {
  return m_orderid_.Get();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_set_m_orderid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::set_m_orderid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_orderid)
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::set_m_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_orderid)
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::set_m_orderid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_orderid)
}
inline std::string* PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_mutable_m_orderid() {
  _has_bits_[0] |= 0x00000001u;
  return m_orderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_DELIVER_GOODS_RECHARGE::release_m_orderid() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_orderid)
  if (!_internal_has_m_orderid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_orderid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::set_allocated_m_orderid(std::string* m_orderid) {
  if (m_orderid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_orderid)
}

// int32 m_gold = 3;
inline bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_has_m_gold() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::has_m_gold() const {
  return _internal_has_m_gold();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::clear_m_gold() {
  m_gold_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_m_gold() const {
  return m_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_DELIVER_GOODS_RECHARGE::m_gold() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_gold)
  return _internal_m_gold();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_set_m_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_gold_ = value;
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::set_m_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_gold(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_gold)
}

// map<int32, int32> m_items = 4;
inline int PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_m_items_size() const {
  return m_items_.size();
}
inline int PROBUFF_NET_DELIVER_GOODS_RECHARGE::m_items_size() const {
  return _internal_m_items_size();
}
inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::clear_m_items() {
  m_items_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_m_items() const {
  return m_items_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_DELIVER_GOODS_RECHARGE::m_items() const {
  // @@protoc_insertion_point(field_map:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_items)
  return _internal_m_items();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_DELIVER_GOODS_RECHARGE::_internal_mutable_m_items() {
  return m_items_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_DELIVER_GOODS_RECHARGE::mutable_m_items() {
  // @@protoc_insertion_point(field_mutable_map:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_items)
  return _internal_mutable_m_items();
}

// -------------------------------------------------------------------

// PROBUFF_NET_ERROR

// string m_errmessage = 2;
inline bool PROBUFF_NET_ERROR::_internal_has_m_errmessage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ERROR::has_m_errmessage() const {
  return _internal_has_m_errmessage();
}
inline void PROBUFF_NET_ERROR::clear_m_errmessage() {
  m_errmessage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_ERROR::m_errmessage() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ERROR.m_errmessage)
  return _internal_m_errmessage();
}
inline void PROBUFF_NET_ERROR::set_m_errmessage(const std::string& value) {
  _internal_set_m_errmessage(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ERROR.m_errmessage)
}
inline std::string* PROBUFF_NET_ERROR::mutable_m_errmessage() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ERROR.m_errmessage)
  return _internal_mutable_m_errmessage();
}
inline const std::string& PROBUFF_NET_ERROR::_internal_m_errmessage() const {
  return m_errmessage_.Get();
}
inline void PROBUFF_NET_ERROR::_internal_set_m_errmessage(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_errmessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_ERROR::set_m_errmessage(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_errmessage_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_ERROR.m_errmessage)
}
inline void PROBUFF_NET_ERROR::set_m_errmessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_errmessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_ERROR.m_errmessage)
}
inline void PROBUFF_NET_ERROR::set_m_errmessage(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_errmessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_ERROR.m_errmessage)
}
inline std::string* PROBUFF_NET_ERROR::_internal_mutable_m_errmessage() {
  _has_bits_[0] |= 0x00000001u;
  return m_errmessage_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_ERROR::release_m_errmessage() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ERROR.m_errmessage)
  if (!_internal_has_m_errmessage()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_errmessage_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_ERROR::set_allocated_m_errmessage(std::string* m_errmessage) {
  if (m_errmessage != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_errmessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_errmessage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ERROR.m_errmessage)
}

// -------------------------------------------------------------------

// PROBUFF_NET_GET_TIME

// -------------------------------------------------------------------

// PROBUFF_NET_GET_TIME_RESPONSE

// int32 m_utc = 1;
inline bool PROBUFF_NET_GET_TIME_RESPONSE::_internal_has_m_utc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_GET_TIME_RESPONSE::has_m_utc() const {
  return _internal_has_m_utc();
}
inline void PROBUFF_NET_GET_TIME_RESPONSE::clear_m_utc() {
  m_utc_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_GET_TIME_RESPONSE::_internal_m_utc() const {
  return m_utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_GET_TIME_RESPONSE::m_utc() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_GET_TIME_RESPONSE.m_utc)
  return _internal_m_utc();
}
inline void PROBUFF_NET_GET_TIME_RESPONSE::_internal_set_m_utc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_utc_ = value;
}
inline void PROBUFF_NET_GET_TIME_RESPONSE::set_m_utc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_utc(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_GET_TIME_RESPONSE.m_utc)
}

// -------------------------------------------------------------------

// PROBUFF_NET_NOTICE

// -------------------------------------------------------------------

// PROBUFF_NET_NOTICE_RESPONSE

// repeated .pbdb.db_notice m_notices = 1;
inline int PROBUFF_NET_NOTICE_RESPONSE::_internal_m_notices_size() const {
  return m_notices_.size();
}
inline int PROBUFF_NET_NOTICE_RESPONSE::m_notices_size() const {
  return _internal_m_notices_size();
}
inline ::pbdb::db_notice* PROBUFF_NET_NOTICE_RESPONSE::mutable_m_notices(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_NOTICE_RESPONSE.m_notices)
  return m_notices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice >*
PROBUFF_NET_NOTICE_RESPONSE::mutable_m_notices() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_NOTICE_RESPONSE.m_notices)
  return &m_notices_;
}
inline const ::pbdb::db_notice& PROBUFF_NET_NOTICE_RESPONSE::_internal_m_notices(int index) const {
  return m_notices_.Get(index);
}
inline const ::pbdb::db_notice& PROBUFF_NET_NOTICE_RESPONSE::m_notices(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_NOTICE_RESPONSE.m_notices)
  return _internal_m_notices(index);
}
inline ::pbdb::db_notice* PROBUFF_NET_NOTICE_RESPONSE::_internal_add_m_notices() {
  return m_notices_.Add();
}
inline ::pbdb::db_notice* PROBUFF_NET_NOTICE_RESPONSE::add_m_notices() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_NOTICE_RESPONSE.m_notices)
  return _internal_add_m_notices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_notice >&
PROBUFF_NET_NOTICE_RESPONSE::m_notices() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_NOTICE_RESPONSE.m_notices)
  return m_notices_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_ACOUNT_LOGIN

// int32 m_area = 1;
inline bool PROBUFF_NET_ACOUNT_LOGIN::_internal_has_m_area() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN::has_m_area() const {
  return _internal_has_m_area();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::clear_m_area() {
  m_area_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ACOUNT_LOGIN::_internal_m_area() const {
  return m_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ACOUNT_LOGIN::m_area() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_area)
  return _internal_m_area();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::_internal_set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_area_ = value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_area(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_area)
}

// string m_account = 2;
inline bool PROBUFF_NET_ACOUNT_LOGIN::_internal_has_m_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN::has_m_account() const {
  return _internal_has_m_account();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::clear_m_account() {
  m_account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN::m_account() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account)
  return _internal_m_account();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_m_account(const std::string& value) {
  _internal_set_m_account(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::mutable_m_account() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account)
  return _internal_mutable_m_account();
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN::_internal_m_account() const {
  return m_account_.Get();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::_internal_set_m_account(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_m_account(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_account_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account)
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_m_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account)
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_m_account(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::_internal_mutable_m_account() {
  _has_bits_[0] |= 0x00000001u;
  return m_account_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::release_m_account() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account)
  if (!_internal_has_m_account()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_account_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_allocated_m_account(std::string* m_account) {
  if (m_account != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account)
}

// string m_password = 3;
inline bool PROBUFF_NET_ACOUNT_LOGIN::_internal_has_m_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN::has_m_password() const {
  return _internal_has_m_password();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::clear_m_password() {
  m_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN::m_password() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password)
  return _internal_m_password();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_m_password(const std::string& value) {
  _internal_set_m_password(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::mutable_m_password() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password)
  return _internal_mutable_m_password();
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN::_internal_m_password() const {
  return m_password_.Get();
}
inline void PROBUFF_NET_ACOUNT_LOGIN::_internal_set_m_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  m_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_m_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  m_password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password)
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_m_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  m_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password)
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_m_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  m_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::_internal_mutable_m_password() {
  _has_bits_[0] |= 0x00000002u;
  return m_password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN::release_m_password() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password)
  if (!_internal_has_m_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return m_password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN::set_allocated_m_password(std::string* m_password) {
  if (m_password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  m_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password)
}

// -------------------------------------------------------------------

// PROBUFF_NET_ACOUNT_LOGIN_RESPONSE

// int32 m_area = 1;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_has_m_area() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_m_area() const {
  return _internal_has_m_area();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_m_area() {
  m_area_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_m_area() const {
  return m_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::m_area() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_area)
  return _internal_m_area();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_area_ = value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_area(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_area)
}

// int64 m_roleid = 2;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_has_m_roleid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_m_roleid() const {
  return _internal_has_m_roleid();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_m_roleid() {
  m_roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_m_roleid() const {
  return m_roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::m_roleid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_roleid)
  return _internal_m_roleid();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  m_roleid_ = value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_roleid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_roleid)
}

// string m_session = 3;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_has_m_session() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_m_session() const {
  return _internal_has_m_session();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_m_session() {
  m_session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::m_session() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session)
  return _internal_m_session();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_session(const std::string& value) {
  _internal_set_m_session(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::mutable_m_session() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session)
  return _internal_mutable_m_session();
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_m_session() const {
  return m_session_.Get();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_m_session(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_session(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_session_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session)
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session)
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_session(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_mutable_m_session() {
  _has_bits_[0] |= 0x00000001u;
  return m_session_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::release_m_session() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session)
  if (!_internal_has_m_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_allocated_m_session(std::string* m_session) {
  if (m_session != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session)
}

// string m_account = 4;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_has_m_account() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_m_account() const {
  return _internal_has_m_account();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_m_account() {
  m_account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::m_account() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account)
  return _internal_m_account();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_account(const std::string& value) {
  _internal_set_m_account(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::mutable_m_account() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account)
  return _internal_mutable_m_account();
}
inline const std::string& PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_m_account() const {
  return m_account_.Get();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_m_account(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  m_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_account(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  m_account_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account)
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  m_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account)
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_account(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  m_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account)
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_mutable_m_account() {
  _has_bits_[0] |= 0x00000002u;
  return m_account_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::release_m_account() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account)
  if (!_internal_has_m_account()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return m_account_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_allocated_m_account(std::string* m_account) {
  if (m_account != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  m_account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account)
}

// int32 m_gatewayid = 5;
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_has_m_gatewayid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::has_m_gatewayid() const {
  return _internal_has_m_gatewayid();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::clear_m_gatewayid() {
  m_gatewayid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_m_gatewayid() const {
  return m_gatewayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::m_gatewayid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_gatewayid)
  return _internal_m_gatewayid();
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_internal_set_m_gatewayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  m_gatewayid_ = value;
}
inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::set_m_gatewayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_gatewayid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_gatewayid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_ROLE_LOGIN

// int64 m_roleid = 1;
inline bool PROBUFF_NET_ROLE_LOGIN::_internal_has_m_roleid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_ROLE_LOGIN::has_m_roleid() const {
  return _internal_has_m_roleid();
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_m_roleid() {
  m_roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ROLE_LOGIN::_internal_m_roleid() const {
  return m_roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ROLE_LOGIN::m_roleid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.m_roleid)
  return _internal_m_roleid();
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  m_roleid_ = value;
}
inline void PROBUFF_NET_ROLE_LOGIN::set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_roleid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.m_roleid)
}

// string m_session = 2;
inline bool PROBUFF_NET_ROLE_LOGIN::_internal_has_m_session() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ROLE_LOGIN::has_m_session() const {
  return _internal_has_m_session();
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_m_session() {
  m_session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_ROLE_LOGIN::m_session() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.m_session)
  return _internal_m_session();
}
inline void PROBUFF_NET_ROLE_LOGIN::set_m_session(const std::string& value) {
  _internal_set_m_session(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.m_session)
}
inline std::string* PROBUFF_NET_ROLE_LOGIN::mutable_m_session() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ROLE_LOGIN.m_session)
  return _internal_mutable_m_session();
}
inline const std::string& PROBUFF_NET_ROLE_LOGIN::_internal_m_session() const {
  return m_session_.Get();
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_m_session(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_ROLE_LOGIN::set_m_session(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_session_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_ROLE_LOGIN.m_session)
}
inline void PROBUFF_NET_ROLE_LOGIN::set_m_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_ROLE_LOGIN.m_session)
}
inline void PROBUFF_NET_ROLE_LOGIN::set_m_session(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_ROLE_LOGIN.m_session)
}
inline std::string* PROBUFF_NET_ROLE_LOGIN::_internal_mutable_m_session() {
  _has_bits_[0] |= 0x00000001u;
  return m_session_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_ROLE_LOGIN::release_m_session() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ROLE_LOGIN.m_session)
  if (!_internal_has_m_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_session_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_ROLE_LOGIN::set_allocated_m_session(std::string* m_session) {
  if (m_session != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ROLE_LOGIN.m_session)
}

// bool m_iscreate = 3;
inline bool PROBUFF_NET_ROLE_LOGIN::_internal_has_m_iscreate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_ROLE_LOGIN::has_m_iscreate() const {
  return _internal_has_m_iscreate();
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_m_iscreate() {
  m_iscreate_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PROBUFF_NET_ROLE_LOGIN::_internal_m_iscreate() const {
  return m_iscreate_;
}
inline bool PROBUFF_NET_ROLE_LOGIN::m_iscreate() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.m_iscreate)
  return _internal_m_iscreate();
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_m_iscreate(bool value) {
  _has_bits_[0] |= 0x00000004u;
  m_iscreate_ = value;
}
inline void PROBUFF_NET_ROLE_LOGIN::set_m_iscreate(bool value) {
  _internal_set_m_iscreate(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.m_iscreate)
}

// int32 m_area = 4;
inline bool PROBUFF_NET_ROLE_LOGIN::_internal_has_m_area() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PROBUFF_NET_ROLE_LOGIN::has_m_area() const {
  return _internal_has_m_area();
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_m_area() {
  m_area_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ROLE_LOGIN::_internal_m_area() const {
  return m_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ROLE_LOGIN::m_area() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.m_area)
  return _internal_m_area();
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_area_ = value;
}
inline void PROBUFF_NET_ROLE_LOGIN::set_m_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_area(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.m_area)
}

// int32 m_gatewayid = 5;
inline bool PROBUFF_NET_ROLE_LOGIN::_internal_has_m_gatewayid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PROBUFF_NET_ROLE_LOGIN::has_m_gatewayid() const {
  return _internal_has_m_gatewayid();
}
inline void PROBUFF_NET_ROLE_LOGIN::clear_m_gatewayid() {
  m_gatewayid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ROLE_LOGIN::_internal_m_gatewayid() const {
  return m_gatewayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ROLE_LOGIN::m_gatewayid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_LOGIN.m_gatewayid)
  return _internal_m_gatewayid();
}
inline void PROBUFF_NET_ROLE_LOGIN::_internal_set_m_gatewayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  m_gatewayid_ = value;
}
inline void PROBUFF_NET_ROLE_LOGIN::set_m_gatewayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_gatewayid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ROLE_LOGIN.m_gatewayid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_ROLE_SYNC

// -------------------------------------------------------------------

// PROBUFF_NET_ROLE_SYNC_RESPONSE

// .pbdb.db_role m_role = 1;
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_has_m_role() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || m_role_ != nullptr);
  return value;
}
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::has_m_role() const {
  return _internal_has_m_role();
}
inline const ::pbdb::db_role& PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_m_role() const {
  const ::pbdb::db_role* p = m_role_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbdb::db_role*>(
      &::pbdb::_db_role_default_instance_);
}
inline const ::pbdb::db_role& PROBUFF_NET_ROLE_SYNC_RESPONSE::m_role() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_role)
  return _internal_m_role();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_set_allocated_m_role(
    ::pbdb::db_role* m_role) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_role_);
  }
  m_role_ = m_role;
  if (m_role) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_role)
}
inline ::pbdb::db_role* PROBUFF_NET_ROLE_SYNC_RESPONSE::release_m_role() {
  _has_bits_[0] &= ~0x00000001u;
  ::pbdb::db_role* temp = m_role_;
  m_role_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbdb::db_role* PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_release_m_role() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_role)
  _has_bits_[0] &= ~0x00000001u;
  ::pbdb::db_role* temp = m_role_;
  m_role_ = nullptr;
  return temp;
}
inline ::pbdb::db_role* PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_mutable_m_role() {
  _has_bits_[0] |= 0x00000001u;
  if (m_role_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_role>(GetArena());
    m_role_ = p;
  }
  return m_role_;
}
inline ::pbdb::db_role* PROBUFF_NET_ROLE_SYNC_RESPONSE::mutable_m_role() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_role)
  return _internal_mutable_m_role();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::set_allocated_m_role(::pbdb::db_role* m_role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_role_);
  }
  if (m_role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_role)->GetArena();
    if (message_arena != submessage_arena) {
      m_role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_role, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_role_ = m_role;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_role)
}

// .pbdb.db_bag m_bag = 2;
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_has_m_bag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || m_bag_ != nullptr);
  return value;
}
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::has_m_bag() const {
  return _internal_has_m_bag();
}
inline const ::pbdb::db_bag& PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_m_bag() const {
  const ::pbdb::db_bag* p = m_bag_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbdb::db_bag*>(
      &::pbdb::_db_bag_default_instance_);
}
inline const ::pbdb::db_bag& PROBUFF_NET_ROLE_SYNC_RESPONSE::m_bag() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_bag)
  return _internal_m_bag();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_set_allocated_m_bag(
    ::pbdb::db_bag* m_bag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_bag_);
  }
  m_bag_ = m_bag;
  if (m_bag) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_bag)
}
inline ::pbdb::db_bag* PROBUFF_NET_ROLE_SYNC_RESPONSE::release_m_bag() {
  _has_bits_[0] &= ~0x00000002u;
  ::pbdb::db_bag* temp = m_bag_;
  m_bag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbdb::db_bag* PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_release_m_bag() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_bag)
  _has_bits_[0] &= ~0x00000002u;
  ::pbdb::db_bag* temp = m_bag_;
  m_bag_ = nullptr;
  return temp;
}
inline ::pbdb::db_bag* PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_mutable_m_bag() {
  _has_bits_[0] |= 0x00000002u;
  if (m_bag_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_bag>(GetArena());
    m_bag_ = p;
  }
  return m_bag_;
}
inline ::pbdb::db_bag* PROBUFF_NET_ROLE_SYNC_RESPONSE::mutable_m_bag() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_bag)
  return _internal_mutable_m_bag();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::set_allocated_m_bag(::pbdb::db_bag* m_bag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_bag_);
  }
  if (m_bag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_bag)->GetArena();
    if (message_arena != submessage_arena) {
      m_bag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_bag, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  m_bag_ = m_bag;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_bag)
}

// .pbdb.db_task m_task = 3;
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_has_m_task() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || m_task_ != nullptr);
  return value;
}
inline bool PROBUFF_NET_ROLE_SYNC_RESPONSE::has_m_task() const {
  return _internal_has_m_task();
}
inline const ::pbdb::db_task& PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_m_task() const {
  const ::pbdb::db_task* p = m_task_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbdb::db_task*>(
      &::pbdb::_db_task_default_instance_);
}
inline const ::pbdb::db_task& PROBUFF_NET_ROLE_SYNC_RESPONSE::m_task() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_task)
  return _internal_m_task();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_set_allocated_m_task(
    ::pbdb::db_task* m_task) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_task_);
  }
  m_task_ = m_task;
  if (m_task) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_task)
}
inline ::pbdb::db_task* PROBUFF_NET_ROLE_SYNC_RESPONSE::release_m_task() {
  _has_bits_[0] &= ~0x00000004u;
  ::pbdb::db_task* temp = m_task_;
  m_task_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbdb::db_task* PROBUFF_NET_ROLE_SYNC_RESPONSE::unsafe_arena_release_m_task() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_task)
  _has_bits_[0] &= ~0x00000004u;
  ::pbdb::db_task* temp = m_task_;
  m_task_ = nullptr;
  return temp;
}
inline ::pbdb::db_task* PROBUFF_NET_ROLE_SYNC_RESPONSE::_internal_mutable_m_task() {
  _has_bits_[0] |= 0x00000004u;
  if (m_task_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_task>(GetArena());
    m_task_ = p;
  }
  return m_task_;
}
inline ::pbdb::db_task* PROBUFF_NET_ROLE_SYNC_RESPONSE::mutable_m_task() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_task)
  return _internal_mutable_m_task();
}
inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::set_allocated_m_task(::pbdb::db_task* m_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_task_);
  }
  if (m_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_task)->GetArena();
    if (message_arena != submessage_arena) {
      m_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_task, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  m_task_ = m_task;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE.m_task)
}

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_SYNC

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_SYNC_RESPONSE

// .pbdb.db_bag m_bag = 1;
inline bool PROBUFF_NET_BAG_SYNC_RESPONSE::_internal_has_m_bag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || m_bag_ != nullptr);
  return value;
}
inline bool PROBUFF_NET_BAG_SYNC_RESPONSE::has_m_bag() const {
  return _internal_has_m_bag();
}
inline const ::pbdb::db_bag& PROBUFF_NET_BAG_SYNC_RESPONSE::_internal_m_bag() const {
  const ::pbdb::db_bag* p = m_bag_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbdb::db_bag*>(
      &::pbdb::_db_bag_default_instance_);
}
inline const ::pbdb::db_bag& PROBUFF_NET_BAG_SYNC_RESPONSE::m_bag() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.m_bag)
  return _internal_m_bag();
}
inline void PROBUFF_NET_BAG_SYNC_RESPONSE::unsafe_arena_set_allocated_m_bag(
    ::pbdb::db_bag* m_bag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_bag_);
  }
  m_bag_ = m_bag;
  if (m_bag) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.m_bag)
}
inline ::pbdb::db_bag* PROBUFF_NET_BAG_SYNC_RESPONSE::release_m_bag() {
  _has_bits_[0] &= ~0x00000001u;
  ::pbdb::db_bag* temp = m_bag_;
  m_bag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbdb::db_bag* PROBUFF_NET_BAG_SYNC_RESPONSE::unsafe_arena_release_m_bag() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.m_bag)
  _has_bits_[0] &= ~0x00000001u;
  ::pbdb::db_bag* temp = m_bag_;
  m_bag_ = nullptr;
  return temp;
}
inline ::pbdb::db_bag* PROBUFF_NET_BAG_SYNC_RESPONSE::_internal_mutable_m_bag() {
  _has_bits_[0] |= 0x00000001u;
  if (m_bag_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_bag>(GetArena());
    m_bag_ = p;
  }
  return m_bag_;
}
inline ::pbdb::db_bag* PROBUFF_NET_BAG_SYNC_RESPONSE::mutable_m_bag() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.m_bag)
  return _internal_mutable_m_bag();
}
inline void PROBUFF_NET_BAG_SYNC_RESPONSE::set_allocated_m_bag(::pbdb::db_bag* m_bag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_bag_);
  }
  if (m_bag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_bag)->GetArena();
    if (message_arena != submessage_arena) {
      m_bag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_bag, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_bag_ = m_bag;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE.m_bag)
}

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_UPDATE

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem

// int32 m_id = 1;
inline bool PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::has_m_id() const {
  return _internal_has_m_id();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::clear_m_id() {
  m_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::m_id() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem.m_id)
  return _internal_m_id();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_id_ = value;
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem.m_id)
}

// int32 m_count = 2;
inline bool PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_internal_has_m_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::has_m_count() const {
  return _internal_has_m_count();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::clear_m_count() {
  m_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_internal_m_count() const {
  return m_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::m_count() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem.m_count)
  return _internal_m_count();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_internal_set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_count_ = value;
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_count(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem.m_count)
}

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_UPDATE_RESPONSE_additem

// int32 m_id = 1;
inline bool PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::has_m_id() const {
  return _internal_has_m_id();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::clear_m_id() {
  m_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::m_id() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem.m_id)
  return _internal_m_id();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_id_ = value;
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::set_m_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem.m_id)
}

// int32 m_count = 2;
inline bool PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_internal_has_m_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::has_m_count() const {
  return _internal_has_m_count();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::clear_m_count() {
  m_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_internal_m_count() const {
  return m_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::m_count() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem.m_count)
  return _internal_m_count();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_internal_set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_count_ = value;
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_count(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem.m_count)
}

// -------------------------------------------------------------------

// PROBUFF_NET_BAG_UPDATE_RESPONSE

// repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem m_delitems = 1;
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_delitems_size() const {
  return m_delitems_.size();
}
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::m_delitems_size() const {
  return _internal_m_delitems_size();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::clear_m_delitems() {
  m_delitems_.Clear();
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* PROBUFF_NET_BAG_UPDATE_RESPONSE::mutable_m_delitems(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delitems)
  return m_delitems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem >*
PROBUFF_NET_BAG_UPDATE_RESPONSE::mutable_m_delitems() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delitems)
  return &m_delitems_;
}
inline const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_delitems(int index) const {
  return m_delitems_.Get(index);
}
inline const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& PROBUFF_NET_BAG_UPDATE_RESPONSE::m_delitems(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delitems)
  return _internal_m_delitems(index);
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_add_m_delitems() {
  return m_delitems_.Add();
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* PROBUFF_NET_BAG_UPDATE_RESPONSE::add_m_delitems() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delitems)
  return _internal_add_m_delitems();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem >&
PROBUFF_NET_BAG_UPDATE_RESPONSE::m_delitems() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delitems)
  return m_delitems_;
}

// repeated int32 m_delnostackitems = 2;
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_delnostackitems_size() const {
  return m_delnostackitems_.size();
}
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::m_delnostackitems_size() const {
  return _internal_m_delnostackitems_size();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::clear_m_delnostackitems() {
  m_delnostackitems_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_delnostackitems(int index) const {
  return m_delnostackitems_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_RESPONSE::m_delnostackitems(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delnostackitems)
  return _internal_m_delnostackitems(index);
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::set_m_delnostackitems(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  m_delnostackitems_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delnostackitems)
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_add_m_delnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value) {
  m_delnostackitems_.Add(value);
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::add_m_delnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_m_delnostackitems(value);
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delnostackitems)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_delnostackitems() const {
  return m_delnostackitems_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_BAG_UPDATE_RESPONSE::m_delnostackitems() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delnostackitems)
  return _internal_m_delnostackitems();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_mutable_m_delnostackitems() {
  return &m_delnostackitems_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_BAG_UPDATE_RESPONSE::mutable_m_delnostackitems() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_delnostackitems)
  return _internal_mutable_m_delnostackitems();
}

// repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem m_additems = 3;
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_additems_size() const {
  return m_additems_.size();
}
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::m_additems_size() const {
  return _internal_m_additems_size();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::clear_m_additems() {
  m_additems_.Clear();
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* PROBUFF_NET_BAG_UPDATE_RESPONSE::mutable_m_additems(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_additems)
  return m_additems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem >*
PROBUFF_NET_BAG_UPDATE_RESPONSE::mutable_m_additems() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_additems)
  return &m_additems_;
}
inline const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_additems(int index) const {
  return m_additems_.Get(index);
}
inline const ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& PROBUFF_NET_BAG_UPDATE_RESPONSE::m_additems(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_additems)
  return _internal_m_additems(index);
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_add_m_additems() {
  return m_additems_.Add();
}
inline ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* PROBUFF_NET_BAG_UPDATE_RESPONSE::add_m_additems() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_additems)
  return _internal_add_m_additems();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem >&
PROBUFF_NET_BAG_UPDATE_RESPONSE::m_additems() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_additems)
  return m_additems_;
}

// repeated int32 m_addnostackitems = 4;
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_addnostackitems_size() const {
  return m_addnostackitems_.size();
}
inline int PROBUFF_NET_BAG_UPDATE_RESPONSE::m_addnostackitems_size() const {
  return _internal_m_addnostackitems_size();
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::clear_m_addnostackitems() {
  m_addnostackitems_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_addnostackitems(int index) const {
  return m_addnostackitems_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_BAG_UPDATE_RESPONSE::m_addnostackitems(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_addnostackitems)
  return _internal_m_addnostackitems(index);
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::set_m_addnostackitems(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  m_addnostackitems_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_addnostackitems)
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_add_m_addnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value) {
  m_addnostackitems_.Add(value);
}
inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::add_m_addnostackitems(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_m_addnostackitems(value);
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_addnostackitems)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_m_addnostackitems() const {
  return m_addnostackitems_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_BAG_UPDATE_RESPONSE::m_addnostackitems() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_addnostackitems)
  return _internal_m_addnostackitems();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_BAG_UPDATE_RESPONSE::_internal_mutable_m_addnostackitems() {
  return &m_addnostackitems_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_BAG_UPDATE_RESPONSE::mutable_m_addnostackitems() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.m_addnostackitems)
  return _internal_mutable_m_addnostackitems();
}

// -------------------------------------------------------------------

// PROBUFF_NET_CMD

// string m_cmd = 1;
inline bool PROBUFF_NET_CMD::_internal_has_m_cmd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_CMD::has_m_cmd() const {
  return _internal_has_m_cmd();
}
inline void PROBUFF_NET_CMD::clear_m_cmd() {
  m_cmd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_CMD::m_cmd() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CMD.m_cmd)
  return _internal_m_cmd();
}
inline void PROBUFF_NET_CMD::set_m_cmd(const std::string& value) {
  _internal_set_m_cmd(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CMD.m_cmd)
}
inline std::string* PROBUFF_NET_CMD::mutable_m_cmd() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_CMD.m_cmd)
  return _internal_mutable_m_cmd();
}
inline const std::string& PROBUFF_NET_CMD::_internal_m_cmd() const {
  return m_cmd_.Get();
}
inline void PROBUFF_NET_CMD::_internal_set_m_cmd(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_cmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_CMD::set_m_cmd(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_cmd_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_CMD.m_cmd)
}
inline void PROBUFF_NET_CMD::set_m_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_cmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_CMD.m_cmd)
}
inline void PROBUFF_NET_CMD::set_m_cmd(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_cmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_CMD.m_cmd)
}
inline std::string* PROBUFF_NET_CMD::_internal_mutable_m_cmd() {
  _has_bits_[0] |= 0x00000001u;
  return m_cmd_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_CMD::release_m_cmd() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_CMD.m_cmd)
  if (!_internal_has_m_cmd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_cmd_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_CMD::set_allocated_m_cmd(std::string* m_cmd) {
  if (m_cmd != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_cmd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_cmd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_CMD.m_cmd)
}

// -------------------------------------------------------------------

// PROBUFF_NET_CHAT

// int32 m_type = 1;
inline bool PROBUFF_NET_CHAT::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHAT::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_CHAT::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT::_internal_m_type() const {
  return m_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_CHAT::_internal_set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_type_ = value;
}
inline void PROBUFF_NET_CHAT::set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT.m_type)
}

// int32 m_channelid = 2;
inline bool PROBUFF_NET_CHAT::_internal_has_m_channelid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHAT::has_m_channelid() const {
  return _internal_has_m_channelid();
}
inline void PROBUFF_NET_CHAT::clear_m_channelid() {
  m_channelid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT::_internal_m_channelid() const {
  return m_channelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT::m_channelid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT.m_channelid)
  return _internal_m_channelid();
}
inline void PROBUFF_NET_CHAT::_internal_set_m_channelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_channelid_ = value;
}
inline void PROBUFF_NET_CHAT::set_m_channelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_channelid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT.m_channelid)
}

// string m_content = 3;
inline bool PROBUFF_NET_CHAT::_internal_has_m_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHAT::has_m_content() const {
  return _internal_has_m_content();
}
inline void PROBUFF_NET_CHAT::clear_m_content() {
  m_content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_CHAT::m_content() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT.m_content)
  return _internal_m_content();
}
inline void PROBUFF_NET_CHAT::set_m_content(const std::string& value) {
  _internal_set_m_content(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT.m_content)
}
inline std::string* PROBUFF_NET_CHAT::mutable_m_content() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_CHAT.m_content)
  return _internal_mutable_m_content();
}
inline const std::string& PROBUFF_NET_CHAT::_internal_m_content() const {
  return m_content_.Get();
}
inline void PROBUFF_NET_CHAT::_internal_set_m_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_CHAT::set_m_content(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_CHAT.m_content)
}
inline void PROBUFF_NET_CHAT::set_m_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_CHAT.m_content)
}
inline void PROBUFF_NET_CHAT::set_m_content(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_CHAT.m_content)
}
inline std::string* PROBUFF_NET_CHAT::_internal_mutable_m_content() {
  _has_bits_[0] |= 0x00000001u;
  return m_content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_CHAT::release_m_content() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_CHAT.m_content)
  if (!_internal_has_m_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_CHAT::set_allocated_m_content(std::string* m_content) {
  if (m_content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_CHAT.m_content)
}

// -------------------------------------------------------------------

// chatitem

// int64 m_roleid = 1;
inline bool chatitem::_internal_has_m_roleid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool chatitem::has_m_roleid() const {
  return _internal_has_m_roleid();
}
inline void chatitem::clear_m_roleid() {
  m_roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 chatitem::_internal_m_roleid() const {
  return m_roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 chatitem::m_roleid() const {
  // @@protoc_insertion_point(field_get:pbnet.chatitem.m_roleid)
  return _internal_m_roleid();
}
inline void chatitem::_internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  m_roleid_ = value;
}
inline void chatitem::set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_roleid(value);
  // @@protoc_insertion_point(field_set:pbnet.chatitem.m_roleid)
}

// string m_rolename = 2;
inline bool chatitem::_internal_has_m_rolename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool chatitem::has_m_rolename() const {
  return _internal_has_m_rolename();
}
inline void chatitem::clear_m_rolename() {
  m_rolename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& chatitem::m_rolename() const {
  // @@protoc_insertion_point(field_get:pbnet.chatitem.m_rolename)
  return _internal_m_rolename();
}
inline void chatitem::set_m_rolename(const std::string& value) {
  _internal_set_m_rolename(value);
  // @@protoc_insertion_point(field_set:pbnet.chatitem.m_rolename)
}
inline std::string* chatitem::mutable_m_rolename() {
  // @@protoc_insertion_point(field_mutable:pbnet.chatitem.m_rolename)
  return _internal_mutable_m_rolename();
}
inline const std::string& chatitem::_internal_m_rolename() const {
  return m_rolename_.Get();
}
inline void chatitem::_internal_set_m_rolename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void chatitem::set_m_rolename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_rolename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.chatitem.m_rolename)
}
inline void chatitem::set_m_rolename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.chatitem.m_rolename)
}
inline void chatitem::set_m_rolename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.chatitem.m_rolename)
}
inline std::string* chatitem::_internal_mutable_m_rolename() {
  _has_bits_[0] |= 0x00000001u;
  return m_rolename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* chatitem::release_m_rolename() {
  // @@protoc_insertion_point(field_release:pbnet.chatitem.m_rolename)
  if (!_internal_has_m_rolename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_rolename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void chatitem::set_allocated_m_rolename(std::string* m_rolename) {
  if (m_rolename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_rolename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_rolename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.chatitem.m_rolename)
}

// string m_content = 3;
inline bool chatitem::_internal_has_m_content() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool chatitem::has_m_content() const {
  return _internal_has_m_content();
}
inline void chatitem::clear_m_content() {
  m_content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& chatitem::m_content() const {
  // @@protoc_insertion_point(field_get:pbnet.chatitem.m_content)
  return _internal_m_content();
}
inline void chatitem::set_m_content(const std::string& value) {
  _internal_set_m_content(value);
  // @@protoc_insertion_point(field_set:pbnet.chatitem.m_content)
}
inline std::string* chatitem::mutable_m_content() {
  // @@protoc_insertion_point(field_mutable:pbnet.chatitem.m_content)
  return _internal_mutable_m_content();
}
inline const std::string& chatitem::_internal_m_content() const {
  return m_content_.Get();
}
inline void chatitem::_internal_set_m_content(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  m_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void chatitem::set_m_content(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  m_content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.chatitem.m_content)
}
inline void chatitem::set_m_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  m_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.chatitem.m_content)
}
inline void chatitem::set_m_content(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  m_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.chatitem.m_content)
}
inline std::string* chatitem::_internal_mutable_m_content() {
  _has_bits_[0] |= 0x00000002u;
  return m_content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* chatitem::release_m_content() {
  // @@protoc_insertion_point(field_release:pbnet.chatitem.m_content)
  if (!_internal_has_m_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return m_content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void chatitem::set_allocated_m_content(std::string* m_content) {
  if (m_content != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  m_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.chatitem.m_content)
}

// int32 m_utc = 4;
inline bool chatitem::_internal_has_m_utc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool chatitem::has_m_utc() const {
  return _internal_has_m_utc();
}
inline void chatitem::clear_m_utc() {
  m_utc_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatitem::_internal_m_utc() const {
  return m_utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatitem::m_utc() const {
  // @@protoc_insertion_point(field_get:pbnet.chatitem.m_utc)
  return _internal_m_utc();
}
inline void chatitem::_internal_set_m_utc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_utc_ = value;
}
inline void chatitem::set_m_utc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_utc(value);
  // @@protoc_insertion_point(field_set:pbnet.chatitem.m_utc)
}

// -------------------------------------------------------------------

// PROBUFF_NET_CHAT_RESPONSE

// int32 m_type = 1;
inline bool PROBUFF_NET_CHAT_RESPONSE::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHAT_RESPONSE::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_CHAT_RESPONSE::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT_RESPONSE::_internal_m_type() const {
  return m_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT_RESPONSE::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_CHAT_RESPONSE::_internal_set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void PROBUFF_NET_CHAT_RESPONSE::set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_type)
}

// int32 m_channelid = 2;
inline bool PROBUFF_NET_CHAT_RESPONSE::_internal_has_m_channelid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHAT_RESPONSE::has_m_channelid() const {
  return _internal_has_m_channelid();
}
inline void PROBUFF_NET_CHAT_RESPONSE::clear_m_channelid() {
  m_channelid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT_RESPONSE::_internal_m_channelid() const {
  return m_channelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHAT_RESPONSE::m_channelid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_channelid)
  return _internal_m_channelid();
}
inline void PROBUFF_NET_CHAT_RESPONSE::_internal_set_m_channelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_channelid_ = value;
}
inline void PROBUFF_NET_CHAT_RESPONSE::set_m_channelid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_channelid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_channelid)
}

// repeated .pbnet.chatitem m_chatlist = 3;
inline int PROBUFF_NET_CHAT_RESPONSE::_internal_m_chatlist_size() const {
  return m_chatlist_.size();
}
inline int PROBUFF_NET_CHAT_RESPONSE::m_chatlist_size() const {
  return _internal_m_chatlist_size();
}
inline void PROBUFF_NET_CHAT_RESPONSE::clear_m_chatlist() {
  m_chatlist_.Clear();
}
inline ::pbnet::chatitem* PROBUFF_NET_CHAT_RESPONSE::mutable_m_chatlist(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_chatlist)
  return m_chatlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem >*
PROBUFF_NET_CHAT_RESPONSE::mutable_m_chatlist() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_chatlist)
  return &m_chatlist_;
}
inline const ::pbnet::chatitem& PROBUFF_NET_CHAT_RESPONSE::_internal_m_chatlist(int index) const {
  return m_chatlist_.Get(index);
}
inline const ::pbnet::chatitem& PROBUFF_NET_CHAT_RESPONSE::m_chatlist(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_chatlist)
  return _internal_m_chatlist(index);
}
inline ::pbnet::chatitem* PROBUFF_NET_CHAT_RESPONSE::_internal_add_m_chatlist() {
  return m_chatlist_.Add();
}
inline ::pbnet::chatitem* PROBUFF_NET_CHAT_RESPONSE::add_m_chatlist() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_chatlist)
  return _internal_add_m_chatlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::chatitem >&
PROBUFF_NET_CHAT_RESPONSE::m_chatlist() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_chatlist)
  return m_chatlist_;
}

// bool m_stat = 4;
inline bool PROBUFF_NET_CHAT_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHAT_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_CHAT_RESPONSE::clear_m_stat() {
  m_stat_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PROBUFF_NET_CHAT_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline bool PROBUFF_NET_CHAT_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_CHAT_RESPONSE::_internal_set_m_stat(bool value) {
  _has_bits_[0] |= 0x00000004u;
  m_stat_ = value;
}
inline void PROBUFF_NET_CHAT_RESPONSE::set_m_stat(bool value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHAT_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_SWITCH_LINE

// int32 m_line = 1;
inline bool PROBUFF_NET_SWITCH_LINE::_internal_has_m_line() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_SWITCH_LINE::has_m_line() const {
  return _internal_has_m_line();
}
inline void PROBUFF_NET_SWITCH_LINE::clear_m_line() {
  m_line_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_SWITCH_LINE::_internal_m_line() const {
  return m_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_SWITCH_LINE::m_line() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SWITCH_LINE.m_line)
  return _internal_m_line();
}
inline void PROBUFF_NET_SWITCH_LINE::_internal_set_m_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_line_ = value;
}
inline void PROBUFF_NET_SWITCH_LINE::set_m_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_line(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SWITCH_LINE.m_line)
}

// -------------------------------------------------------------------

// PROBUFF_NET_SWITCH_LINE_RESPONSE

// int32 m_line = 1;
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_has_m_line() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::has_m_line() const {
  return _internal_has_m_line();
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::clear_m_line() {
  m_line_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_m_line() const {
  return m_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_SWITCH_LINE_RESPONSE::m_line() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE.m_line)
  return _internal_m_line();
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_set_m_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_line_ = value;
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::set_m_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_line(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE.m_line)
}

// bool m_stat = 2;
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::clear_m_stat() {
  m_stat_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline bool PROBUFF_NET_SWITCH_LINE_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::_internal_set_m_stat(bool value) {
  _has_bits_[0] |= 0x00000002u;
  m_stat_ = value;
}
inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::set_m_stat(bool value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_LIST

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_LIST_RESPONSE

// map<int32, .pbdb.mail> m_mail = 1;
inline int PROBUFF_NET_MAIL_LIST_RESPONSE::_internal_m_mail_size() const {
  return m_mail_.size();
}
inline int PROBUFF_NET_MAIL_LIST_RESPONSE::m_mail_size() const {
  return _internal_m_mail_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
PROBUFF_NET_MAIL_LIST_RESPONSE::_internal_m_mail() const {
  return m_mail_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >&
PROBUFF_NET_MAIL_LIST_RESPONSE::m_mail() const {
  // @@protoc_insertion_point(field_map:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE.m_mail)
  return _internal_m_mail();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
PROBUFF_NET_MAIL_LIST_RESPONSE::_internal_mutable_m_mail() {
  return m_mail_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >*
PROBUFF_NET_MAIL_LIST_RESPONSE::mutable_m_mail() {
  // @@protoc_insertion_point(field_mutable_map:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE.m_mail)
  return _internal_mutable_m_mail();
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_READ

// int64 m_mailid = 1;
inline bool PROBUFF_NET_MAIL_READ::_internal_has_m_mailid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_READ::has_m_mailid() const {
  return _internal_has_m_mailid();
}
inline void PROBUFF_NET_MAIL_READ::clear_m_mailid() {
  m_mailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_READ::_internal_m_mailid() const {
  return m_mailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_READ::m_mailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_READ.m_mailid)
  return _internal_m_mailid();
}
inline void PROBUFF_NET_MAIL_READ::_internal_set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_mailid_ = value;
}
inline void PROBUFF_NET_MAIL_READ::set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_mailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_READ.m_mailid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_READ_RESPONSE

// int64 m_mailid = 1;
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::_internal_has_m_mailid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::has_m_mailid() const {
  return _internal_has_m_mailid();
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::clear_m_mailid() {
  m_mailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_READ_RESPONSE::_internal_m_mailid() const {
  return m_mailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_READ_RESPONSE::m_mailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE.m_mailid)
  return _internal_m_mailid();
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::_internal_set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_mailid_ = value;
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_mailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE.m_mailid)
}

// bool m_stat = 2;
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::clear_m_stat() {
  m_stat_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline bool PROBUFF_NET_MAIL_READ_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::_internal_set_m_stat(bool value) {
  _has_bits_[0] |= 0x00000002u;
  m_stat_ = value;
}
inline void PROBUFF_NET_MAIL_READ_RESPONSE::set_m_stat(bool value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_DRAW

// int64 m_mailid = 1;
inline bool PROBUFF_NET_MAIL_DRAW::_internal_has_m_mailid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_DRAW::has_m_mailid() const {
  return _internal_has_m_mailid();
}
inline void PROBUFF_NET_MAIL_DRAW::clear_m_mailid() {
  m_mailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DRAW::_internal_m_mailid() const {
  return m_mailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DRAW::m_mailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DRAW.m_mailid)
  return _internal_m_mailid();
}
inline void PROBUFF_NET_MAIL_DRAW::_internal_set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_mailid_ = value;
}
inline void PROBUFF_NET_MAIL_DRAW::set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_mailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DRAW.m_mailid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_DRAW_RESPONSE

// int64 m_mailid = 1;
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_has_m_mailid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::has_m_mailid() const {
  return _internal_has_m_mailid();
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::clear_m_mailid() {
  m_mailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_m_mailid() const {
  return m_mailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DRAW_RESPONSE::m_mailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE.m_mailid)
  return _internal_m_mailid();
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_mailid_ = value;
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_mailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE.m_mailid)
}

// bool m_stat = 2;
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::clear_m_stat() {
  m_stat_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline bool PROBUFF_NET_MAIL_DRAW_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::_internal_set_m_stat(bool value) {
  _has_bits_[0] |= 0x00000002u;
  m_stat_ = value;
}
inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::set_m_stat(bool value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_DEL

// int64 m_mailid = 1;
inline bool PROBUFF_NET_MAIL_DEL::_internal_has_m_mailid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_DEL::has_m_mailid() const {
  return _internal_has_m_mailid();
}
inline void PROBUFF_NET_MAIL_DEL::clear_m_mailid() {
  m_mailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DEL::_internal_m_mailid() const {
  return m_mailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DEL::m_mailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DEL.m_mailid)
  return _internal_m_mailid();
}
inline void PROBUFF_NET_MAIL_DEL::_internal_set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_mailid_ = value;
}
inline void PROBUFF_NET_MAIL_DEL::set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_mailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DEL.m_mailid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MAIL_DEL_RESPONSE

// int64 m_mailid = 1;
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_has_m_mailid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::has_m_mailid() const {
  return _internal_has_m_mailid();
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::clear_m_mailid() {
  m_mailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_m_mailid() const {
  return m_mailid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MAIL_DEL_RESPONSE::m_mailid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE.m_mailid)
  return _internal_m_mailid();
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_mailid_ = value;
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::set_m_mailid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_mailid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE.m_mailid)
}

// bool m_stat = 2;
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::clear_m_stat() {
  m_stat_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline bool PROBUFF_NET_MAIL_DEL_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::_internal_set_m_stat(bool value) {
  _has_bits_[0] |= 0x00000002u;
  m_stat_ = value;
}
inline void PROBUFF_NET_MAIL_DEL_RESPONSE::set_m_stat(bool value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// VECTOR2

// int32 m_x = 1;
inline bool VECTOR2::_internal_has_m_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VECTOR2::has_m_x() const {
  return _internal_has_m_x();
}
inline void VECTOR2::clear_m_x() {
  m_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR2::_internal_m_x() const {
  return m_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR2::m_x() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR2.m_x)
  return _internal_m_x();
}
inline void VECTOR2::_internal_set_m_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_x_ = value;
}
inline void VECTOR2::set_m_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_x(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR2.m_x)
}

// int32 m_y = 2;
inline bool VECTOR2::_internal_has_m_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VECTOR2::has_m_y() const {
  return _internal_has_m_y();
}
inline void VECTOR2::clear_m_y() {
  m_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR2::_internal_m_y() const {
  return m_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR2::m_y() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR2.m_y)
  return _internal_m_y();
}
inline void VECTOR2::_internal_set_m_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_y_ = value;
}
inline void VECTOR2::set_m_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_y(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR2.m_y)
}

// -------------------------------------------------------------------

// VECTOR3

// int32 m_x = 1;
inline bool VECTOR3::_internal_has_m_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VECTOR3::has_m_x() const {
  return _internal_has_m_x();
}
inline void VECTOR3::clear_m_x() {
  m_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR3::_internal_m_x() const {
  return m_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR3::m_x() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR3.m_x)
  return _internal_m_x();
}
inline void VECTOR3::_internal_set_m_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_x_ = value;
}
inline void VECTOR3::set_m_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_x(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR3.m_x)
}

// int32 m_y = 2;
inline bool VECTOR3::_internal_has_m_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VECTOR3::has_m_y() const {
  return _internal_has_m_y();
}
inline void VECTOR3::clear_m_y() {
  m_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR3::_internal_m_y() const {
  return m_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR3::m_y() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR3.m_y)
  return _internal_m_y();
}
inline void VECTOR3::_internal_set_m_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_y_ = value;
}
inline void VECTOR3::set_m_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_y(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR3.m_y)
}

// int32 m_z = 3;
inline bool VECTOR3::_internal_has_m_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VECTOR3::has_m_z() const {
  return _internal_has_m_z();
}
inline void VECTOR3::clear_m_z() {
  m_z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR3::_internal_m_z() const {
  return m_z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VECTOR3::m_z() const {
  // @@protoc_insertion_point(field_get:pbnet.VECTOR3.m_z)
  return _internal_m_z();
}
inline void VECTOR3::_internal_set_m_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_z_ = value;
}
inline void VECTOR3::set_m_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_z(value);
  // @@protoc_insertion_point(field_set:pbnet.VECTOR3.m_z)
}

// -------------------------------------------------------------------

// UNIT_POSITION

// int64 m_id = 2;
inline bool UNIT_POSITION::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UNIT_POSITION::has_m_id() const {
  return _internal_has_m_id();
}
inline void UNIT_POSITION::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UNIT_POSITION::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UNIT_POSITION::m_id() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT_POSITION.m_id)
  return _internal_m_id();
}
inline void UNIT_POSITION::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  m_id_ = value;
}
inline void UNIT_POSITION::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT_POSITION.m_id)
}

// .pbnet.VECTOR2 m_position = 3;
inline bool UNIT_POSITION::_internal_has_m_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || m_position_ != nullptr);
  return value;
}
inline bool UNIT_POSITION::has_m_position() const {
  return _internal_has_m_position();
}
inline void UNIT_POSITION::clear_m_position() {
  if (GetArena() == nullptr && m_position_ != nullptr) {
    delete m_position_;
  }
  m_position_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pbnet::VECTOR2& UNIT_POSITION::_internal_m_position() const {
  const ::pbnet::VECTOR2* p = m_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbnet::VECTOR2*>(
      &::pbnet::_VECTOR2_default_instance_);
}
inline const ::pbnet::VECTOR2& UNIT_POSITION::m_position() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT_POSITION.m_position)
  return _internal_m_position();
}
inline void UNIT_POSITION::unsafe_arena_set_allocated_m_position(
    ::pbnet::VECTOR2* m_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_position_);
  }
  m_position_ = m_position;
  if (m_position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.UNIT_POSITION.m_position)
}
inline ::pbnet::VECTOR2* UNIT_POSITION::release_m_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::pbnet::VECTOR2* temp = m_position_;
  m_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbnet::VECTOR2* UNIT_POSITION::unsafe_arena_release_m_position() {
  // @@protoc_insertion_point(field_release:pbnet.UNIT_POSITION.m_position)
  _has_bits_[0] &= ~0x00000001u;
  ::pbnet::VECTOR2* temp = m_position_;
  m_position_ = nullptr;
  return temp;
}
inline ::pbnet::VECTOR2* UNIT_POSITION::_internal_mutable_m_position() {
  _has_bits_[0] |= 0x00000001u;
  if (m_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbnet::VECTOR2>(GetArena());
    m_position_ = p;
  }
  return m_position_;
}
inline ::pbnet::VECTOR2* UNIT_POSITION::mutable_m_position() {
  // @@protoc_insertion_point(field_mutable:pbnet.UNIT_POSITION.m_position)
  return _internal_mutable_m_position();
}
inline void UNIT_POSITION::set_allocated_m_position(::pbnet::VECTOR2* m_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete m_position_;
  }
  if (m_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(m_position);
    if (message_arena != submessage_arena) {
      m_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_position_ = m_position;
  // @@protoc_insertion_point(field_set_allocated:pbnet.UNIT_POSITION.m_position)
}

// int32 m_angle = 4;
inline bool UNIT_POSITION::_internal_has_m_angle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UNIT_POSITION::has_m_angle() const {
  return _internal_has_m_angle();
}
inline void UNIT_POSITION::clear_m_angle() {
  m_angle_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UNIT_POSITION::_internal_m_angle() const {
  return m_angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UNIT_POSITION::m_angle() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT_POSITION.m_angle)
  return _internal_m_angle();
}
inline void UNIT_POSITION::_internal_set_m_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_angle_ = value;
}
inline void UNIT_POSITION::set_m_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_angle(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT_POSITION.m_angle)
}

// int32 m_speed = 5;
inline bool UNIT_POSITION::_internal_has_m_speed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UNIT_POSITION::has_m_speed() const {
  return _internal_has_m_speed();
}
inline void UNIT_POSITION::clear_m_speed() {
  m_speed_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UNIT_POSITION::_internal_m_speed() const {
  return m_speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UNIT_POSITION::m_speed() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT_POSITION.m_speed)
  return _internal_m_speed();
}
inline void UNIT_POSITION::_internal_set_m_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_speed_ = value;
}
inline void UNIT_POSITION::set_m_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_speed(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT_POSITION.m_speed)
}

// -------------------------------------------------------------------

// UnitAttribute

// int32 m_type = 1;
inline bool UnitAttribute::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UnitAttribute::has_m_type() const {
  return _internal_has_m_type();
}
inline void UnitAttribute::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitAttribute::_internal_m_type() const {
  return m_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitAttribute::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.UnitAttribute.m_type)
  return _internal_m_type();
}
inline void UnitAttribute::_internal_set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_type_ = value;
}
inline void UnitAttribute::set_m_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.UnitAttribute.m_type)
}

// int64 m_value = 2;
inline bool UnitAttribute::_internal_has_m_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnitAttribute::has_m_value() const {
  return _internal_has_m_value();
}
inline void UnitAttribute::clear_m_value() {
  m_value_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnitAttribute::_internal_m_value() const {
  return m_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnitAttribute::m_value() const {
  // @@protoc_insertion_point(field_get:pbnet.UnitAttribute.m_value)
  return _internal_m_value();
}
inline void UnitAttribute::_internal_set_m_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_value_ = value;
}
inline void UnitAttribute::set_m_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_value(value);
  // @@protoc_insertion_point(field_set:pbnet.UnitAttribute.m_value)
}

// -------------------------------------------------------------------

// UnitModule

// int32 m_mtype = 1;
inline bool UnitModule::_internal_has_m_mtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnitModule::has_m_mtype() const {
  return _internal_has_m_mtype();
}
inline void UnitModule::clear_m_mtype() {
  m_mtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitModule::_internal_m_mtype() const {
  return m_mtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnitModule::m_mtype() const {
  // @@protoc_insertion_point(field_get:pbnet.UnitModule.m_mtype)
  return _internal_m_mtype();
}
inline void UnitModule::_internal_set_m_mtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_mtype_ = value;
}
inline void UnitModule::set_m_mtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_mtype(value);
  // @@protoc_insertion_point(field_set:pbnet.UnitModule.m_mtype)
}

// repeated .pbnet.UnitAttribute m_modules = 2;
inline int UnitModule::_internal_m_modules_size() const {
  return m_modules_.size();
}
inline int UnitModule::m_modules_size() const {
  return _internal_m_modules_size();
}
inline void UnitModule::clear_m_modules() {
  m_modules_.Clear();
}
inline ::pbnet::UnitAttribute* UnitModule::mutable_m_modules(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.UnitModule.m_modules)
  return m_modules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitAttribute >*
UnitModule::mutable_m_modules() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.UnitModule.m_modules)
  return &m_modules_;
}
inline const ::pbnet::UnitAttribute& UnitModule::_internal_m_modules(int index) const {
  return m_modules_.Get(index);
}
inline const ::pbnet::UnitAttribute& UnitModule::m_modules(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.UnitModule.m_modules)
  return _internal_m_modules(index);
}
inline ::pbnet::UnitAttribute* UnitModule::_internal_add_m_modules() {
  return m_modules_.Add();
}
inline ::pbnet::UnitAttribute* UnitModule::add_m_modules() {
  // @@protoc_insertion_point(field_add:pbnet.UnitModule.m_modules)
  return _internal_add_m_modules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitAttribute >&
UnitModule::m_modules() const {
  // @@protoc_insertion_point(field_list:pbnet.UnitModule.m_modules)
  return m_modules_;
}

// -------------------------------------------------------------------

// UNIT

// .pbnet.eunit m_type = 1;
inline bool UNIT::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UNIT::has_m_type() const {
  return _internal_has_m_type();
}
inline void UNIT::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pbnet::eunit UNIT::_internal_m_type() const {
  return static_cast< ::pbnet::eunit >(m_type_);
}
inline ::pbnet::eunit UNIT::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT.m_type)
  return _internal_m_type();
}
inline void UNIT::_internal_set_m_type(::pbnet::eunit value) {
  _has_bits_[0] |= 0x00000004u;
  m_type_ = value;
}
inline void UNIT::set_m_type(::pbnet::eunit value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT.m_type)
}

// int64 m_id = 2;
inline bool UNIT::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UNIT::has_m_id() const {
  return _internal_has_m_id();
}
inline void UNIT::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UNIT::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UNIT::m_id() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT.m_id)
  return _internal_m_id();
}
inline void UNIT::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  m_id_ = value;
}
inline void UNIT::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT.m_id)
}

// .pbnet.UNIT_POSITION m_position = 3;
inline bool UNIT::_internal_has_m_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || m_position_ != nullptr);
  return value;
}
inline bool UNIT::has_m_position() const {
  return _internal_has_m_position();
}
inline void UNIT::clear_m_position() {
  if (GetArena() == nullptr && m_position_ != nullptr) {
    delete m_position_;
  }
  m_position_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pbnet::UNIT_POSITION& UNIT::_internal_m_position() const {
  const ::pbnet::UNIT_POSITION* p = m_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbnet::UNIT_POSITION*>(
      &::pbnet::_UNIT_POSITION_default_instance_);
}
inline const ::pbnet::UNIT_POSITION& UNIT::m_position() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT.m_position)
  return _internal_m_position();
}
inline void UNIT::unsafe_arena_set_allocated_m_position(
    ::pbnet::UNIT_POSITION* m_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_position_);
  }
  m_position_ = m_position;
  if (m_position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.UNIT.m_position)
}
inline ::pbnet::UNIT_POSITION* UNIT::release_m_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::pbnet::UNIT_POSITION* temp = m_position_;
  m_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbnet::UNIT_POSITION* UNIT::unsafe_arena_release_m_position() {
  // @@protoc_insertion_point(field_release:pbnet.UNIT.m_position)
  _has_bits_[0] &= ~0x00000001u;
  ::pbnet::UNIT_POSITION* temp = m_position_;
  m_position_ = nullptr;
  return temp;
}
inline ::pbnet::UNIT_POSITION* UNIT::_internal_mutable_m_position() {
  _has_bits_[0] |= 0x00000001u;
  if (m_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbnet::UNIT_POSITION>(GetArena());
    m_position_ = p;
  }
  return m_position_;
}
inline ::pbnet::UNIT_POSITION* UNIT::mutable_m_position() {
  // @@protoc_insertion_point(field_mutable:pbnet.UNIT.m_position)
  return _internal_mutable_m_position();
}
inline void UNIT::set_allocated_m_position(::pbnet::UNIT_POSITION* m_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete m_position_;
  }
  if (m_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(m_position);
    if (message_arena != submessage_arena) {
      m_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_position_ = m_position;
  // @@protoc_insertion_point(field_set_allocated:pbnet.UNIT.m_position)
}

// repeated .pbnet.UnitModule m_modules = 4;
inline int UNIT::_internal_m_modules_size() const {
  return m_modules_.size();
}
inline int UNIT::m_modules_size() const {
  return _internal_m_modules_size();
}
inline void UNIT::clear_m_modules() {
  m_modules_.Clear();
}
inline ::pbnet::UnitModule* UNIT::mutable_m_modules(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.UNIT.m_modules)
  return m_modules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >*
UNIT::mutable_m_modules() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.UNIT.m_modules)
  return &m_modules_;
}
inline const ::pbnet::UnitModule& UNIT::_internal_m_modules(int index) const {
  return m_modules_.Get(index);
}
inline const ::pbnet::UnitModule& UNIT::m_modules(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT.m_modules)
  return _internal_m_modules(index);
}
inline ::pbnet::UnitModule* UNIT::_internal_add_m_modules() {
  return m_modules_.Add();
}
inline ::pbnet::UnitModule* UNIT::add_m_modules() {
  // @@protoc_insertion_point(field_add:pbnet.UNIT.m_modules)
  return _internal_add_m_modules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >&
UNIT::m_modules() const {
  // @@protoc_insertion_point(field_list:pbnet.UNIT.m_modules)
  return m_modules_;
}

// .pbnet.eunitstat m_stat = 5;
inline bool UNIT::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UNIT::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void UNIT::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::pbnet::eunitstat UNIT::_internal_m_stat() const {
  return static_cast< ::pbnet::eunitstat >(m_stat_);
}
inline ::pbnet::eunitstat UNIT::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.UNIT.m_stat)
  return _internal_m_stat();
}
inline void UNIT::_internal_set_m_stat(::pbnet::eunitstat value) {
  _has_bits_[0] |= 0x00000008u;
  m_stat_ = value;
}
inline void UNIT::set_m_stat(::pbnet::eunitstat value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.UNIT.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_SYNC_ATTRIBUTE

// repeated .pbnet.UnitModule m_modules = 1;
inline int PROBUFF_NET_SYNC_ATTRIBUTE::_internal_m_modules_size() const {
  return m_modules_.size();
}
inline int PROBUFF_NET_SYNC_ATTRIBUTE::m_modules_size() const {
  return _internal_m_modules_size();
}
inline void PROBUFF_NET_SYNC_ATTRIBUTE::clear_m_modules() {
  m_modules_.Clear();
}
inline ::pbnet::UnitModule* PROBUFF_NET_SYNC_ATTRIBUTE::mutable_m_modules(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE.m_modules)
  return m_modules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >*
PROBUFF_NET_SYNC_ATTRIBUTE::mutable_m_modules() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE.m_modules)
  return &m_modules_;
}
inline const ::pbnet::UnitModule& PROBUFF_NET_SYNC_ATTRIBUTE::_internal_m_modules(int index) const {
  return m_modules_.Get(index);
}
inline const ::pbnet::UnitModule& PROBUFF_NET_SYNC_ATTRIBUTE::m_modules(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE.m_modules)
  return _internal_m_modules(index);
}
inline ::pbnet::UnitModule* PROBUFF_NET_SYNC_ATTRIBUTE::_internal_add_m_modules() {
  return m_modules_.Add();
}
inline ::pbnet::UnitModule* PROBUFF_NET_SYNC_ATTRIBUTE::add_m_modules() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE.m_modules)
  return _internal_add_m_modules();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UnitModule >&
PROBUFF_NET_SYNC_ATTRIBUTE::m_modules() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE.m_modules)
  return m_modules_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_SYNC_UNIT

// repeated .pbnet.UNIT m_units = 1;
inline int PROBUFF_NET_SYNC_UNIT::_internal_m_units_size() const {
  return m_units_.size();
}
inline int PROBUFF_NET_SYNC_UNIT::m_units_size() const {
  return _internal_m_units_size();
}
inline void PROBUFF_NET_SYNC_UNIT::clear_m_units() {
  m_units_.Clear();
}
inline ::pbnet::UNIT* PROBUFF_NET_SYNC_UNIT::mutable_m_units(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_SYNC_UNIT.m_units)
  return m_units_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT >*
PROBUFF_NET_SYNC_UNIT::mutable_m_units() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_SYNC_UNIT.m_units)
  return &m_units_;
}
inline const ::pbnet::UNIT& PROBUFF_NET_SYNC_UNIT::_internal_m_units(int index) const {
  return m_units_.Get(index);
}
inline const ::pbnet::UNIT& PROBUFF_NET_SYNC_UNIT::m_units(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SYNC_UNIT.m_units)
  return _internal_m_units(index);
}
inline ::pbnet::UNIT* PROBUFF_NET_SYNC_UNIT::_internal_add_m_units() {
  return m_units_.Add();
}
inline ::pbnet::UNIT* PROBUFF_NET_SYNC_UNIT::add_m_units() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_SYNC_UNIT.m_units)
  return _internal_add_m_units();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::UNIT >&
PROBUFF_NET_SYNC_UNIT::m_units() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_SYNC_UNIT.m_units)
  return m_units_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_ENTER_LEAVE_VIEW

// bool m_isenter = 1;
inline bool PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_has_m_isenter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ENTER_LEAVE_VIEW::has_m_isenter() const {
  return _internal_has_m_isenter();
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::clear_m_isenter() {
  m_isenter_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_m_isenter() const {
  return m_isenter_;
}
inline bool PROBUFF_NET_ENTER_LEAVE_VIEW::m_isenter() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.m_isenter)
  return _internal_m_isenter();
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_set_m_isenter(bool value) {
  _has_bits_[0] |= 0x00000001u;
  m_isenter_ = value;
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::set_m_isenter(bool value) {
  _internal_set_m_isenter(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.m_isenter)
}

// repeated int64 m_units = 2;
inline int PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_m_units_size() const {
  return m_units_.size();
}
inline int PROBUFF_NET_ENTER_LEAVE_VIEW::m_units_size() const {
  return _internal_m_units_size();
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::clear_m_units() {
  m_units_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_m_units(int index) const {
  return m_units_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ENTER_LEAVE_VIEW::m_units(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.m_units)
  return _internal_m_units(index);
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::set_m_units(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_units_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.m_units)
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_add_m_units(::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_units_.Add(value);
}
inline void PROBUFF_NET_ENTER_LEAVE_VIEW::add_m_units(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_m_units(value);
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.m_units)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_m_units() const {
  return m_units_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PROBUFF_NET_ENTER_LEAVE_VIEW::m_units() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.m_units)
  return _internal_m_units();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PROBUFF_NET_ENTER_LEAVE_VIEW::_internal_mutable_m_units() {
  return &m_units_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PROBUFF_NET_ENTER_LEAVE_VIEW::mutable_m_units() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW.m_units)
  return _internal_mutable_m_units();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PROBUFF_NET_SYNC_POSITION

// map<int64, .pbnet.UNIT_POSITION> m_position = 1;
inline int PROBUFF_NET_SYNC_POSITION::_internal_m_position_size() const {
  return m_position_.size();
}
inline int PROBUFF_NET_SYNC_POSITION::m_position_size() const {
  return _internal_m_position_size();
}
inline void PROBUFF_NET_SYNC_POSITION::clear_m_position() {
  m_position_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >&
PROBUFF_NET_SYNC_POSITION::_internal_m_position() const {
  return m_position_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >&
PROBUFF_NET_SYNC_POSITION::m_position() const {
  // @@protoc_insertion_point(field_map:pbnet.PROBUFF_NET_SYNC_POSITION.m_position)
  return _internal_m_position();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >*
PROBUFF_NET_SYNC_POSITION::_internal_mutable_m_position() {
  return m_position_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >*
PROBUFF_NET_SYNC_POSITION::mutable_m_position() {
  // @@protoc_insertion_point(field_mutable_map:pbnet.PROBUFF_NET_SYNC_POSITION.m_position)
  return _internal_mutable_m_position();
}

// -------------------------------------------------------------------

// PROBUFF_NET_CHANGE_ANGLE

// .pbnet.UNIT_POSITION m_position = 1;
inline bool PROBUFF_NET_CHANGE_ANGLE::_internal_has_m_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || m_position_ != nullptr);
  return value;
}
inline bool PROBUFF_NET_CHANGE_ANGLE::has_m_position() const {
  return _internal_has_m_position();
}
inline void PROBUFF_NET_CHANGE_ANGLE::clear_m_position() {
  if (GetArena() == nullptr && m_position_ != nullptr) {
    delete m_position_;
  }
  m_position_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pbnet::UNIT_POSITION& PROBUFF_NET_CHANGE_ANGLE::_internal_m_position() const {
  const ::pbnet::UNIT_POSITION* p = m_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pbnet::UNIT_POSITION*>(
      &::pbnet::_UNIT_POSITION_default_instance_);
}
inline const ::pbnet::UNIT_POSITION& PROBUFF_NET_CHANGE_ANGLE::m_position() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHANGE_ANGLE.m_position)
  return _internal_m_position();
}
inline void PROBUFF_NET_CHANGE_ANGLE::unsafe_arena_set_allocated_m_position(
    ::pbnet::UNIT_POSITION* m_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_position_);
  }
  m_position_ = m_position;
  if (m_position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbnet.PROBUFF_NET_CHANGE_ANGLE.m_position)
}
inline ::pbnet::UNIT_POSITION* PROBUFF_NET_CHANGE_ANGLE::release_m_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::pbnet::UNIT_POSITION* temp = m_position_;
  m_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pbnet::UNIT_POSITION* PROBUFF_NET_CHANGE_ANGLE::unsafe_arena_release_m_position() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_CHANGE_ANGLE.m_position)
  _has_bits_[0] &= ~0x00000001u;
  ::pbnet::UNIT_POSITION* temp = m_position_;
  m_position_ = nullptr;
  return temp;
}
inline ::pbnet::UNIT_POSITION* PROBUFF_NET_CHANGE_ANGLE::_internal_mutable_m_position() {
  _has_bits_[0] |= 0x00000001u;
  if (m_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbnet::UNIT_POSITION>(GetArena());
    m_position_ = p;
  }
  return m_position_;
}
inline ::pbnet::UNIT_POSITION* PROBUFF_NET_CHANGE_ANGLE::mutable_m_position() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_CHANGE_ANGLE.m_position)
  return _internal_mutable_m_position();
}
inline void PROBUFF_NET_CHANGE_ANGLE::set_allocated_m_position(::pbnet::UNIT_POSITION* m_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete m_position_;
  }
  if (m_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(m_position);
    if (message_arena != submessage_arena) {
      m_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_position_ = m_position;
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_CHANGE_ANGLE.m_position)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING

// .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_MATCHING::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING::_internal_m_type() const {
  return static_cast< ::pbnet::eplays >(m_type_);
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING::_internal_set_m_type(::pbnet::eplays value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void PROBUFF_NET_MATCHING::set_m_type(::pbnet::eplays value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING.m_type)
}

// int32 m_tid = 2;
inline bool PROBUFF_NET_MATCHING::_internal_has_m_tid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING::has_m_tid() const {
  return _internal_has_m_tid();
}
inline void PROBUFF_NET_MATCHING::clear_m_tid() {
  m_tid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING::_internal_m_tid() const {
  return m_tid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING::m_tid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING.m_tid)
  return _internal_m_tid();
}
inline void PROBUFF_NET_MATCHING::_internal_set_m_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_tid_ = value;
}
inline void PROBUFF_NET_MATCHING::set_m_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_tid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING.m_tid)
}

// -------------------------------------------------------------------

// MATCHING_MEMBER

// int64 m_id = 1;
inline bool MATCHING_MEMBER::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MATCHING_MEMBER::has_m_id() const {
  return _internal_has_m_id();
}
inline void MATCHING_MEMBER::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MATCHING_MEMBER::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MATCHING_MEMBER::m_id() const {
  // @@protoc_insertion_point(field_get:pbnet.MATCHING_MEMBER.m_id)
  return _internal_m_id();
}
inline void MATCHING_MEMBER::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  m_id_ = value;
}
inline void MATCHING_MEMBER::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbnet.MATCHING_MEMBER.m_id)
}

// string m_name = 2;
inline bool MATCHING_MEMBER::_internal_has_m_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MATCHING_MEMBER::has_m_name() const {
  return _internal_has_m_name();
}
inline void MATCHING_MEMBER::clear_m_name() {
  m_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MATCHING_MEMBER::m_name() const {
  // @@protoc_insertion_point(field_get:pbnet.MATCHING_MEMBER.m_name)
  return _internal_m_name();
}
inline void MATCHING_MEMBER::set_m_name(const std::string& value) {
  _internal_set_m_name(value);
  // @@protoc_insertion_point(field_set:pbnet.MATCHING_MEMBER.m_name)
}
inline std::string* MATCHING_MEMBER::mutable_m_name() {
  // @@protoc_insertion_point(field_mutable:pbnet.MATCHING_MEMBER.m_name)
  return _internal_mutable_m_name();
}
inline const std::string& MATCHING_MEMBER::_internal_m_name() const {
  return m_name_.Get();
}
inline void MATCHING_MEMBER::_internal_set_m_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MATCHING_MEMBER::set_m_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.MATCHING_MEMBER.m_name)
}
inline void MATCHING_MEMBER::set_m_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.MATCHING_MEMBER.m_name)
}
inline void MATCHING_MEMBER::set_m_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.MATCHING_MEMBER.m_name)
}
inline std::string* MATCHING_MEMBER::_internal_mutable_m_name() {
  _has_bits_[0] |= 0x00000001u;
  return m_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MATCHING_MEMBER::release_m_name() {
  // @@protoc_insertion_point(field_release:pbnet.MATCHING_MEMBER.m_name)
  if (!_internal_has_m_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MATCHING_MEMBER::set_allocated_m_name(std::string* m_name) {
  if (m_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.MATCHING_MEMBER.m_name)
}

// int32 m_lv = 3;
inline bool MATCHING_MEMBER::_internal_has_m_lv() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MATCHING_MEMBER::has_m_lv() const {
  return _internal_has_m_lv();
}
inline void MATCHING_MEMBER::clear_m_lv() {
  m_lv_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MATCHING_MEMBER::_internal_m_lv() const {
  return m_lv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MATCHING_MEMBER::m_lv() const {
  // @@protoc_insertion_point(field_get:pbnet.MATCHING_MEMBER.m_lv)
  return _internal_m_lv();
}
inline void MATCHING_MEMBER::_internal_set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_lv_ = value;
}
inline void MATCHING_MEMBER::set_m_lv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_lv(value);
  // @@protoc_insertion_point(field_set:pbnet.MATCHING_MEMBER.m_lv)
}

// int32 m_begmatch = 4;
inline bool MATCHING_MEMBER::_internal_has_m_begmatch() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MATCHING_MEMBER::has_m_begmatch() const {
  return _internal_has_m_begmatch();
}
inline void MATCHING_MEMBER::clear_m_begmatch() {
  m_begmatch_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MATCHING_MEMBER::_internal_m_begmatch() const {
  return m_begmatch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MATCHING_MEMBER::m_begmatch() const {
  // @@protoc_insertion_point(field_get:pbnet.MATCHING_MEMBER.m_begmatch)
  return _internal_m_begmatch();
}
inline void MATCHING_MEMBER::_internal_set_m_begmatch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_begmatch_ = value;
}
inline void MATCHING_MEMBER::set_m_begmatch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_begmatch(value);
  // @@protoc_insertion_point(field_set:pbnet.MATCHING_MEMBER.m_begmatch)
}

// bool m_isconfirm = 5;
inline bool MATCHING_MEMBER::_internal_has_m_isconfirm() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MATCHING_MEMBER::has_m_isconfirm() const {
  return _internal_has_m_isconfirm();
}
inline void MATCHING_MEMBER::clear_m_isconfirm() {
  m_isconfirm_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool MATCHING_MEMBER::_internal_m_isconfirm() const {
  return m_isconfirm_;
}
inline bool MATCHING_MEMBER::m_isconfirm() const {
  // @@protoc_insertion_point(field_get:pbnet.MATCHING_MEMBER.m_isconfirm)
  return _internal_m_isconfirm();
}
inline void MATCHING_MEMBER::_internal_set_m_isconfirm(bool value) {
  _has_bits_[0] |= 0x00000010u;
  m_isconfirm_ = value;
}
inline void MATCHING_MEMBER::set_m_isconfirm(bool value) {
  _internal_set_m_isconfirm(value);
  // @@protoc_insertion_point(field_set:pbnet.MATCHING_MEMBER.m_isconfirm)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_RESPONSE

// int64 m_id = 1;
inline bool PROBUFF_NET_MATCHING_RESPONSE::_internal_has_m_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_RESPONSE::has_m_id() const {
  return _internal_has_m_id();
}
inline void PROBUFF_NET_MATCHING_RESPONSE::clear_m_id() {
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MATCHING_RESPONSE::_internal_m_id() const {
  return m_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MATCHING_RESPONSE::m_id() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_RESPONSE.m_id)
  return _internal_m_id();
}
inline void PROBUFF_NET_MATCHING_RESPONSE::_internal_set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_id_ = value;
}
inline void PROBUFF_NET_MATCHING_RESPONSE::set_m_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_id(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_RESPONSE.m_id)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_CANCEL

// .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_CANCEL::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_CANCEL::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_MATCHING_CANCEL::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CANCEL::_internal_m_type() const {
  return static_cast< ::pbnet::eplays >(m_type_);
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CANCEL::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CANCEL.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_CANCEL::_internal_set_m_type(::pbnet::eplays value) {
  _has_bits_[0] |= 0x00000002u;
  m_type_ = value;
}
inline void PROBUFF_NET_MATCHING_CANCEL::set_m_type(::pbnet::eplays value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CANCEL.m_type)
}

// int64 m_roomid = 2;
inline bool PROBUFF_NET_MATCHING_CANCEL::_internal_has_m_roomid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_CANCEL::has_m_roomid() const {
  return _internal_has_m_roomid();
}
inline void PROBUFF_NET_MATCHING_CANCEL::clear_m_roomid() {
  m_roomid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MATCHING_CANCEL::_internal_m_roomid() const {
  return m_roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MATCHING_CANCEL::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CANCEL.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_MATCHING_CANCEL::_internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_roomid_ = value;
}
inline void PROBUFF_NET_MATCHING_CANCEL::set_m_roomid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CANCEL.m_roomid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_CANCEL_RESPONSE

// .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_CANCEL_RESPONSE::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_internal_m_type() const {
  return static_cast< ::pbnet::eplays >(m_type_);
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CANCEL_RESPONSE::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_internal_set_m_type(::pbnet::eplays value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::set_m_type(::pbnet::eplays value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE.m_type)
}

// .pbnet.ematching_cancel_stat m_stat = 2;
inline bool PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_CANCEL_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pbnet::ematching_cancel_stat PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_internal_m_stat() const {
  return static_cast< ::pbnet::ematching_cancel_stat >(m_stat_);
}
inline ::pbnet::ematching_cancel_stat PROBUFF_NET_MATCHING_CANCEL_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_internal_set_m_stat(::pbnet::ematching_cancel_stat value) {
  _has_bits_[0] |= 0x00000002u;
  m_stat_ = value;
}
inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::set_m_stat(::pbnet::ematching_cancel_stat value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MEMBER_MATCHING_CANCEL

// .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MEMBER_MATCHING_CANCEL::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_m_type() const {
  return static_cast< ::pbnet::eplays >(m_type_);
}
inline ::pbnet::eplays PROBUFF_NET_MEMBER_MATCHING_CANCEL::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_set_m_type(::pbnet::eplays value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::set_m_type(::pbnet::eplays value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_type)
}

// .pbnet.etype_matching_cancel m_canceltype = 2;
inline bool PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_has_m_canceltype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MEMBER_MATCHING_CANCEL::has_m_canceltype() const {
  return _internal_has_m_canceltype();
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::clear_m_canceltype() {
  m_canceltype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pbnet::etype_matching_cancel PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_m_canceltype() const {
  return static_cast< ::pbnet::etype_matching_cancel >(m_canceltype_);
}
inline ::pbnet::etype_matching_cancel PROBUFF_NET_MEMBER_MATCHING_CANCEL::m_canceltype() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_canceltype)
  return _internal_m_canceltype();
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_set_m_canceltype(::pbnet::etype_matching_cancel value) {
  _has_bits_[0] |= 0x00000002u;
  m_canceltype_ = value;
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::set_m_canceltype(::pbnet::etype_matching_cancel value) {
  _internal_set_m_canceltype(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_canceltype)
}

// repeated int64 m_cancelmember = 3;
inline int PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_m_cancelmember_size() const {
  return m_cancelmember_.size();
}
inline int PROBUFF_NET_MEMBER_MATCHING_CANCEL::m_cancelmember_size() const {
  return _internal_m_cancelmember_size();
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::clear_m_cancelmember() {
  m_cancelmember_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_m_cancelmember(int index) const {
  return m_cancelmember_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MEMBER_MATCHING_CANCEL::m_cancelmember(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_cancelmember)
  return _internal_m_cancelmember(index);
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::set_m_cancelmember(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_cancelmember_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_cancelmember)
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_add_m_cancelmember(::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_cancelmember_.Add(value);
}
inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::add_m_cancelmember(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_m_cancelmember(value);
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_cancelmember)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_m_cancelmember() const {
  return m_cancelmember_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PROBUFF_NET_MEMBER_MATCHING_CANCEL::m_cancelmember() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_cancelmember)
  return _internal_m_cancelmember();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PROBUFF_NET_MEMBER_MATCHING_CANCEL::_internal_mutable_m_cancelmember() {
  return &m_cancelmember_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PROBUFF_NET_MEMBER_MATCHING_CANCEL::mutable_m_cancelmember() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL.m_cancelmember)
  return _internal_mutable_m_cancelmember();
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_WAITCONFIRM

// .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_WAITCONFIRM::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_WAITCONFIRM::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_MATCHING_WAITCONFIRM::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_WAITCONFIRM::_internal_m_type() const {
  return static_cast< ::pbnet::eplays >(m_type_);
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_WAITCONFIRM::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_WAITCONFIRM::_internal_set_m_type(::pbnet::eplays value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void PROBUFF_NET_MATCHING_WAITCONFIRM::set_m_type(::pbnet::eplays value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM.m_type)
}

// int32 m_roomid = 2;
inline bool PROBUFF_NET_MATCHING_WAITCONFIRM::_internal_has_m_roomid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_WAITCONFIRM::has_m_roomid() const {
  return _internal_has_m_roomid();
}
inline void PROBUFF_NET_MATCHING_WAITCONFIRM::clear_m_roomid() {
  m_roomid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING_WAITCONFIRM::_internal_m_roomid() const {
  return m_roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING_WAITCONFIRM::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_MATCHING_WAITCONFIRM::_internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_roomid_ = value;
}
inline void PROBUFF_NET_MATCHING_WAITCONFIRM::set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM.m_roomid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_CONFIRM

// .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_CONFIRM::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_CONFIRM::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_MATCHING_CONFIRM::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CONFIRM::_internal_m_type() const {
  return static_cast< ::pbnet::eplays >(m_type_);
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CONFIRM::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CONFIRM.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_CONFIRM::_internal_set_m_type(::pbnet::eplays value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void PROBUFF_NET_MATCHING_CONFIRM::set_m_type(::pbnet::eplays value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CONFIRM.m_type)
}

// int32 m_roomid = 2;
inline bool PROBUFF_NET_MATCHING_CONFIRM::_internal_has_m_roomid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_CONFIRM::has_m_roomid() const {
  return _internal_has_m_roomid();
}
inline void PROBUFF_NET_MATCHING_CONFIRM::clear_m_roomid() {
  m_roomid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING_CONFIRM::_internal_m_roomid() const {
  return m_roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING_CONFIRM::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CONFIRM.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_MATCHING_CONFIRM::_internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_roomid_ = value;
}
inline void PROBUFF_NET_MATCHING_CONFIRM::set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CONFIRM.m_roomid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_CONFIRM_RESPONSE

// .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_m_type() const {
  return static_cast< ::pbnet::eplays >(m_type_);
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_set_m_type(::pbnet::eplays value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::set_m_type(::pbnet::eplays value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE.m_type)
}

// int32 m_roomid = 2;
inline bool PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_has_m_roomid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::has_m_roomid() const {
  return _internal_has_m_roomid();
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::clear_m_roomid() {
  m_roomid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_m_roomid() const {
  return m_roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_roomid_ = value;
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE.m_roomid)
}

// .pbnet.ematching_confirm_stat m_stat = 3;
inline bool PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pbnet::ematching_confirm_stat PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_m_stat() const {
  return static_cast< ::pbnet::ematching_confirm_stat >(m_stat_);
}
inline ::pbnet::ematching_confirm_stat PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_internal_set_m_stat(::pbnet::ematching_confirm_stat value) {
  _has_bits_[0] |= 0x00000004u;
  m_stat_ = value;
}
inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::set_m_stat(::pbnet::ematching_confirm_stat value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_SYNC_MATCHING_CONFIRM

// .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_SYNC_MATCHING_CONFIRM::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_m_type() const {
  return static_cast< ::pbnet::eplays >(m_type_);
}
inline ::pbnet::eplays PROBUFF_NET_SYNC_MATCHING_CONFIRM::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_set_m_type(::pbnet::eplays value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::set_m_type(::pbnet::eplays value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_type)
}

// int32 m_roomid = 2;
inline bool PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_has_m_roomid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_SYNC_MATCHING_CONFIRM::has_m_roomid() const {
  return _internal_has_m_roomid();
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::clear_m_roomid() {
  m_roomid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_m_roomid() const {
  return m_roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_SYNC_MATCHING_CONFIRM::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_roomid_ = value;
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_roomid)
}

// repeated int64 m_roleid = 3;
inline int PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_m_roleid_size() const {
  return m_roleid_.size();
}
inline int PROBUFF_NET_SYNC_MATCHING_CONFIRM::m_roleid_size() const {
  return _internal_m_roleid_size();
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::clear_m_roleid() {
  m_roleid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_m_roleid(int index) const {
  return m_roleid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_SYNC_MATCHING_CONFIRM::m_roleid(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_roleid)
  return _internal_m_roleid(index);
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::set_m_roleid(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_roleid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_roleid)
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_add_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  m_roleid_.Add(value);
}
inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::add_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_m_roleid(value);
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_roleid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_m_roleid() const {
  return m_roleid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PROBUFF_NET_SYNC_MATCHING_CONFIRM::m_roleid() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_roleid)
  return _internal_m_roleid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PROBUFF_NET_SYNC_MATCHING_CONFIRM::_internal_mutable_m_roleid() {
  return &m_roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PROBUFF_NET_SYNC_MATCHING_CONFIRM::mutable_m_roleid() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM.m_roleid)
  return _internal_mutable_m_roleid();
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_SYNC

// .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_SYNC::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_SYNC::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_MATCHING_SYNC::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_SYNC::_internal_m_type() const {
  return static_cast< ::pbnet::eplays >(m_type_);
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_SYNC::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SYNC.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_SYNC::_internal_set_m_type(::pbnet::eplays value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void PROBUFF_NET_MATCHING_SYNC::set_m_type(::pbnet::eplays value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SYNC.m_type)
}

// int32 m_roomid = 2;
inline bool PROBUFF_NET_MATCHING_SYNC::_internal_has_m_roomid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_SYNC::has_m_roomid() const {
  return _internal_has_m_roomid();
}
inline void PROBUFF_NET_MATCHING_SYNC::clear_m_roomid() {
  m_roomid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING_SYNC::_internal_m_roomid() const {
  return m_roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING_SYNC::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SYNC.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_MATCHING_SYNC::_internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_roomid_ = value;
}
inline void PROBUFF_NET_MATCHING_SYNC::set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SYNC.m_roomid)
}

// repeated .pbnet.MATCHING_MEMBER m_member = 3;
inline int PROBUFF_NET_MATCHING_SYNC::_internal_m_member_size() const {
  return m_member_.size();
}
inline int PROBUFF_NET_MATCHING_SYNC::m_member_size() const {
  return _internal_m_member_size();
}
inline void PROBUFF_NET_MATCHING_SYNC::clear_m_member() {
  m_member_.Clear();
}
inline ::pbnet::MATCHING_MEMBER* PROBUFF_NET_MATCHING_SYNC::mutable_m_member(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_MATCHING_SYNC.m_member)
  return m_member_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >*
PROBUFF_NET_MATCHING_SYNC::mutable_m_member() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_MATCHING_SYNC.m_member)
  return &m_member_;
}
inline const ::pbnet::MATCHING_MEMBER& PROBUFF_NET_MATCHING_SYNC::_internal_m_member(int index) const {
  return m_member_.Get(index);
}
inline const ::pbnet::MATCHING_MEMBER& PROBUFF_NET_MATCHING_SYNC::m_member(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SYNC.m_member)
  return _internal_m_member(index);
}
inline ::pbnet::MATCHING_MEMBER* PROBUFF_NET_MATCHING_SYNC::_internal_add_m_member() {
  return m_member_.Add();
}
inline ::pbnet::MATCHING_MEMBER* PROBUFF_NET_MATCHING_SYNC::add_m_member() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_MATCHING_SYNC.m_member)
  return _internal_add_m_member();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >&
PROBUFF_NET_MATCHING_SYNC::m_member() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_MATCHING_SYNC.m_member)
  return m_member_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_SUCCESS_RESPONSE

// .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_m_type() const {
  return static_cast< ::pbnet::eplays >(m_type_);
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_set_m_type(::pbnet::eplays value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::set_m_type(::pbnet::eplays value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE.m_type)
}

// int32 m_roomid = 2;
inline bool PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_has_m_roomid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::has_m_roomid() const {
  return _internal_has_m_roomid();
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::clear_m_roomid() {
  m_roomid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_m_roomid() const {
  return m_roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_roomid_ = value;
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE.m_roomid)
}

// int64 m_playsactorid = 3;
inline bool PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_has_m_playsactorid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::has_m_playsactorid() const {
  return _internal_has_m_playsactorid();
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::clear_m_playsactorid() {
  m_playsactorid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_m_playsactorid() const {
  return m_playsactorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::m_playsactorid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE.m_playsactorid)
  return _internal_m_playsactorid();
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_internal_set_m_playsactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  m_playsactorid_ = value;
}
inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::set_m_playsactorid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_playsactorid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE.m_playsactorid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_MATCHING_SUCCESS

// .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_MATCHING_SUCCESS::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_SUCCESS::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_MATCHING_SUCCESS::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_SUCCESS::_internal_m_type() const {
  return static_cast< ::pbnet::eplays >(m_type_);
}
inline ::pbnet::eplays PROBUFF_NET_MATCHING_SUCCESS::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_MATCHING_SUCCESS::_internal_set_m_type(::pbnet::eplays value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void PROBUFF_NET_MATCHING_SUCCESS::set_m_type(::pbnet::eplays value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_type)
}

// int32 m_roomid = 2;
inline bool PROBUFF_NET_MATCHING_SUCCESS::_internal_has_m_roomid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_SUCCESS::has_m_roomid() const {
  return _internal_has_m_roomid();
}
inline void PROBUFF_NET_MATCHING_SUCCESS::clear_m_roomid() {
  m_roomid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING_SUCCESS::_internal_m_roomid() const {
  return m_roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING_SUCCESS::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_MATCHING_SUCCESS::_internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_roomid_ = value;
}
inline void PROBUFF_NET_MATCHING_SUCCESS::set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_roomid)
}

// repeated .pbnet.MATCHING_MEMBER m_member = 3;
inline int PROBUFF_NET_MATCHING_SUCCESS::_internal_m_member_size() const {
  return m_member_.size();
}
inline int PROBUFF_NET_MATCHING_SUCCESS::m_member_size() const {
  return _internal_m_member_size();
}
inline void PROBUFF_NET_MATCHING_SUCCESS::clear_m_member() {
  m_member_.Clear();
}
inline ::pbnet::MATCHING_MEMBER* PROBUFF_NET_MATCHING_SUCCESS::mutable_m_member(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_member)
  return m_member_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >*
PROBUFF_NET_MATCHING_SUCCESS::mutable_m_member() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_member)
  return &m_member_;
}
inline const ::pbnet::MATCHING_MEMBER& PROBUFF_NET_MATCHING_SUCCESS::_internal_m_member(int index) const {
  return m_member_.Get(index);
}
inline const ::pbnet::MATCHING_MEMBER& PROBUFF_NET_MATCHING_SUCCESS::m_member(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_member)
  return _internal_m_member(index);
}
inline ::pbnet::MATCHING_MEMBER* PROBUFF_NET_MATCHING_SUCCESS::_internal_add_m_member() {
  return m_member_.Add();
}
inline ::pbnet::MATCHING_MEMBER* PROBUFF_NET_MATCHING_SUCCESS::add_m_member() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_member)
  return _internal_add_m_member();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbnet::MATCHING_MEMBER >&
PROBUFF_NET_MATCHING_SUCCESS::m_member() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_member)
  return m_member_;
}

// int32 m_dataid = 4;
inline bool PROBUFF_NET_MATCHING_SUCCESS::_internal_has_m_dataid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_MATCHING_SUCCESS::has_m_dataid() const {
  return _internal_has_m_dataid();
}
inline void PROBUFF_NET_MATCHING_SUCCESS::clear_m_dataid() {
  m_dataid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING_SUCCESS::_internal_m_dataid() const {
  return m_dataid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_MATCHING_SUCCESS::m_dataid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_dataid)
  return _internal_m_dataid();
}
inline void PROBUFF_NET_MATCHING_SUCCESS::_internal_set_m_dataid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_dataid_ = value;
}
inline void PROBUFF_NET_MATCHING_SUCCESS::set_m_dataid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_dataid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_MATCHING_SUCCESS.m_dataid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_ENTER_PLAYS

// .pbnet.eplays m_type = 1;
inline bool PROBUFF_NET_ENTER_PLAYS::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ENTER_PLAYS::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_ENTER_PLAYS::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbnet::eplays PROBUFF_NET_ENTER_PLAYS::_internal_m_type() const {
  return static_cast< ::pbnet::eplays >(m_type_);
}
inline ::pbnet::eplays PROBUFF_NET_ENTER_PLAYS::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ENTER_PLAYS.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_ENTER_PLAYS::_internal_set_m_type(::pbnet::eplays value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void PROBUFF_NET_ENTER_PLAYS::set_m_type(::pbnet::eplays value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ENTER_PLAYS.m_type)
}

// int32 m_roomid = 2;
inline bool PROBUFF_NET_ENTER_PLAYS::_internal_has_m_roomid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_ENTER_PLAYS::has_m_roomid() const {
  return _internal_has_m_roomid();
}
inline void PROBUFF_NET_ENTER_PLAYS::clear_m_roomid() {
  m_roomid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ENTER_PLAYS::_internal_m_roomid() const {
  return m_roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ENTER_PLAYS::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ENTER_PLAYS.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_ENTER_PLAYS::_internal_set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_roomid_ = value;
}
inline void PROBUFF_NET_ENTER_PLAYS::set_m_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ENTER_PLAYS.m_roomid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_KCPSESSION

// int64 m_serverid = 1;
inline bool PROBUFF_NET_KCPSESSION::_internal_has_m_serverid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_KCPSESSION::has_m_serverid() const {
  return _internal_has_m_serverid();
}
inline void PROBUFF_NET_KCPSESSION::clear_m_serverid() {
  m_serverid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_KCPSESSION::_internal_m_serverid() const {
  return m_serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_KCPSESSION::m_serverid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_KCPSESSION.m_serverid)
  return _internal_m_serverid();
}
inline void PROBUFF_NET_KCPSESSION::_internal_set_m_serverid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  m_serverid_ = value;
}
inline void PROBUFF_NET_KCPSESSION::set_m_serverid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_serverid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_KCPSESSION.m_serverid)
}

// string m_uip = 2;
inline bool PROBUFF_NET_KCPSESSION::_internal_has_m_uip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_KCPSESSION::has_m_uip() const {
  return _internal_has_m_uip();
}
inline void PROBUFF_NET_KCPSESSION::clear_m_uip() {
  m_uip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_KCPSESSION::m_uip() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_KCPSESSION.m_uip)
  return _internal_m_uip();
}
inline void PROBUFF_NET_KCPSESSION::set_m_uip(const std::string& value) {
  _internal_set_m_uip(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_KCPSESSION.m_uip)
}
inline std::string* PROBUFF_NET_KCPSESSION::mutable_m_uip() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_KCPSESSION.m_uip)
  return _internal_mutable_m_uip();
}
inline const std::string& PROBUFF_NET_KCPSESSION::_internal_m_uip() const {
  return m_uip_.Get();
}
inline void PROBUFF_NET_KCPSESSION::_internal_set_m_uip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_uip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_KCPSESSION::set_m_uip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_uip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_KCPSESSION.m_uip)
}
inline void PROBUFF_NET_KCPSESSION::set_m_uip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_uip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_KCPSESSION.m_uip)
}
inline void PROBUFF_NET_KCPSESSION::set_m_uip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_uip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_KCPSESSION.m_uip)
}
inline std::string* PROBUFF_NET_KCPSESSION::_internal_mutable_m_uip() {
  _has_bits_[0] |= 0x00000001u;
  return m_uip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_KCPSESSION::release_m_uip() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_KCPSESSION.m_uip)
  if (!_internal_has_m_uip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_uip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_KCPSESSION::set_allocated_m_uip(std::string* m_uip) {
  if (m_uip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_uip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_uip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_KCPSESSION.m_uip)
}

// int32 m_uport = 3;
inline bool PROBUFF_NET_KCPSESSION::_internal_has_m_uport() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_KCPSESSION::has_m_uport() const {
  return _internal_has_m_uport();
}
inline void PROBUFF_NET_KCPSESSION::clear_m_uport() {
  m_uport_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_KCPSESSION::_internal_m_uport() const {
  return m_uport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_KCPSESSION::m_uport() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_KCPSESSION.m_uport)
  return _internal_m_uport();
}
inline void PROBUFF_NET_KCPSESSION::_internal_set_m_uport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_uport_ = value;
}
inline void PROBUFF_NET_KCPSESSION::set_m_uport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_uport(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_KCPSESSION.m_uport)
}

// int32 m_conv = 4;
inline bool PROBUFF_NET_KCPSESSION::_internal_has_m_conv() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PROBUFF_NET_KCPSESSION::has_m_conv() const {
  return _internal_has_m_conv();
}
inline void PROBUFF_NET_KCPSESSION::clear_m_conv() {
  m_conv_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_KCPSESSION::_internal_m_conv() const {
  return m_conv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_KCPSESSION::m_conv() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_KCPSESSION.m_conv)
  return _internal_m_conv();
}
inline void PROBUFF_NET_KCPSESSION::_internal_set_m_conv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  m_conv_ = value;
}
inline void PROBUFF_NET_KCPSESSION::set_m_conv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_conv(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_KCPSESSION.m_conv)
}

// -------------------------------------------------------------------

// PROBUFF_NET_KCPSESSION_RESPONSE

// string m_kcpsession = 1;
inline bool PROBUFF_NET_KCPSESSION_RESPONSE::_internal_has_m_kcpsession() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_KCPSESSION_RESPONSE::has_m_kcpsession() const {
  return _internal_has_m_kcpsession();
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::clear_m_kcpsession() {
  m_kcpsession_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_KCPSESSION_RESPONSE::m_kcpsession() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.m_kcpsession)
  return _internal_m_kcpsession();
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::set_m_kcpsession(const std::string& value) {
  _internal_set_m_kcpsession(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.m_kcpsession)
}
inline std::string* PROBUFF_NET_KCPSESSION_RESPONSE::mutable_m_kcpsession() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.m_kcpsession)
  return _internal_mutable_m_kcpsession();
}
inline const std::string& PROBUFF_NET_KCPSESSION_RESPONSE::_internal_m_kcpsession() const {
  return m_kcpsession_.Get();
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::_internal_set_m_kcpsession(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_kcpsession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::set_m_kcpsession(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_kcpsession_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.m_kcpsession)
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::set_m_kcpsession(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_kcpsession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.m_kcpsession)
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::set_m_kcpsession(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_kcpsession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.m_kcpsession)
}
inline std::string* PROBUFF_NET_KCPSESSION_RESPONSE::_internal_mutable_m_kcpsession() {
  _has_bits_[0] |= 0x00000001u;
  return m_kcpsession_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_KCPSESSION_RESPONSE::release_m_kcpsession() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.m_kcpsession)
  if (!_internal_has_m_kcpsession()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_kcpsession_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_KCPSESSION_RESPONSE::set_allocated_m_kcpsession(std::string* m_kcpsession) {
  if (m_kcpsession != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_kcpsession_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_kcpsession,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.m_kcpsession)
}

// -------------------------------------------------------------------

// PROBUFF_NET_TASK_RECEIVE_AWARD

// int32 m_taskid = 1;
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD::_internal_has_m_taskid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD::has_m_taskid() const {
  return _internal_has_m_taskid();
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD::clear_m_taskid() {
  m_taskid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_TASK_RECEIVE_AWARD::_internal_m_taskid() const {
  return m_taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_TASK_RECEIVE_AWARD::m_taskid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD.m_taskid)
  return _internal_m_taskid();
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD::_internal_set_m_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_taskid_ = value;
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD::set_m_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_taskid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD.m_taskid)
}

// -------------------------------------------------------------------

// drop_item

// int32 m_item = 1;
inline bool drop_item::_internal_has_m_item() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool drop_item::has_m_item() const {
  return _internal_has_m_item();
}
inline void drop_item::clear_m_item() {
  m_item_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 drop_item::_internal_m_item() const {
  return m_item_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 drop_item::m_item() const {
  // @@protoc_insertion_point(field_get:pbnet.drop_item.m_item)
  return _internal_m_item();
}
inline void drop_item::_internal_set_m_item(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_item_ = value;
}
inline void drop_item::set_m_item(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_item(value);
  // @@protoc_insertion_point(field_set:pbnet.drop_item.m_item)
}

// int32 m_count = 2;
inline bool drop_item::_internal_has_m_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool drop_item::has_m_count() const {
  return _internal_has_m_count();
}
inline void drop_item::clear_m_count() {
  m_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 drop_item::_internal_m_count() const {
  return m_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 drop_item::m_count() const {
  // @@protoc_insertion_point(field_get:pbnet.drop_item.m_count)
  return _internal_m_count();
}
inline void drop_item::_internal_set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_count_ = value;
}
inline void drop_item::set_m_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_count(value);
  // @@protoc_insertion_point(field_set:pbnet.drop_item.m_count)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE

// int32 m_taskid = 1;
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_has_m_taskid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::has_m_taskid() const {
  return _internal_has_m_taskid();
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::clear_m_taskid() {
  m_taskid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_m_taskid() const {
  return m_taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::m_taskid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE.m_taskid)
  return _internal_m_taskid();
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_set_m_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_taskid_ = value;
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::set_m_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_taskid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE.m_taskid)
}

// bool m_stat = 2;
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::clear_m_stat() {
  m_stat_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_set_m_stat(bool value) {
  _has_bits_[0] |= 0x00000002u;
  m_stat_ = value;
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::set_m_stat(bool value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE.m_stat)
}

// map<int32, int32> m_drop = 3;
inline int PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_m_drop_size() const {
  return m_drop_.size();
}
inline int PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::m_drop_size() const {
  return _internal_m_drop_size();
}
inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::clear_m_drop() {
  m_drop_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_m_drop() const {
  return m_drop_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::m_drop() const {
  // @@protoc_insertion_point(field_map:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE.m_drop)
  return _internal_m_drop();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_internal_mutable_m_drop() {
  return m_drop_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::mutable_m_drop() {
  // @@protoc_insertion_point(field_mutable_map:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE.m_drop)
  return _internal_mutable_m_drop();
}

// -------------------------------------------------------------------

// PROBUFF_NET_CREATE_FAMIL

// string m_name = 1;
inline bool PROBUFF_NET_CREATE_FAMIL::_internal_has_m_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_CREATE_FAMIL::has_m_name() const {
  return _internal_has_m_name();
}
inline void PROBUFF_NET_CREATE_FAMIL::clear_m_name() {
  m_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_CREATE_FAMIL::m_name() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CREATE_FAMIL.m_name)
  return _internal_m_name();
}
inline void PROBUFF_NET_CREATE_FAMIL::set_m_name(const std::string& value) {
  _internal_set_m_name(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CREATE_FAMIL.m_name)
}
inline std::string* PROBUFF_NET_CREATE_FAMIL::mutable_m_name() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_CREATE_FAMIL.m_name)
  return _internal_mutable_m_name();
}
inline const std::string& PROBUFF_NET_CREATE_FAMIL::_internal_m_name() const {
  return m_name_.Get();
}
inline void PROBUFF_NET_CREATE_FAMIL::_internal_set_m_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_CREATE_FAMIL::set_m_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_CREATE_FAMIL.m_name)
}
inline void PROBUFF_NET_CREATE_FAMIL::set_m_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_CREATE_FAMIL.m_name)
}
inline void PROBUFF_NET_CREATE_FAMIL::set_m_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_CREATE_FAMIL.m_name)
}
inline std::string* PROBUFF_NET_CREATE_FAMIL::_internal_mutable_m_name() {
  _has_bits_[0] |= 0x00000001u;
  return m_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_CREATE_FAMIL::release_m_name() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_CREATE_FAMIL.m_name)
  if (!_internal_has_m_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_CREATE_FAMIL::set_allocated_m_name(std::string* m_name) {
  if (m_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_CREATE_FAMIL.m_name)
}

// -------------------------------------------------------------------

// PROBUFF_NET_CREATE_FAMIL_RESPONSE

// int32 m_stat = 1;
inline bool PROBUFF_NET_CREATE_FAMIL_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_CREATE_FAMIL_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_CREATE_FAMIL_RESPONSE::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CREATE_FAMIL_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CREATE_FAMIL_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_CREATE_FAMIL_RESPONSE::_internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_stat_ = value;
}
inline void PROBUFF_NET_CREATE_FAMIL_RESPONSE::set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_JOIN_FAMIL

// int64 m_familid = 1;
inline bool PROBUFF_NET_JOIN_FAMIL::_internal_has_m_familid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_JOIN_FAMIL::has_m_familid() const {
  return _internal_has_m_familid();
}
inline void PROBUFF_NET_JOIN_FAMIL::clear_m_familid() {
  m_familid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_JOIN_FAMIL::_internal_m_familid() const {
  return m_familid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_JOIN_FAMIL::m_familid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_JOIN_FAMIL.m_familid)
  return _internal_m_familid();
}
inline void PROBUFF_NET_JOIN_FAMIL::_internal_set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_familid_ = value;
}
inline void PROBUFF_NET_JOIN_FAMIL::set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_familid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_JOIN_FAMIL.m_familid)
}

// bool m_apply = 2;
inline bool PROBUFF_NET_JOIN_FAMIL::_internal_has_m_apply() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_JOIN_FAMIL::has_m_apply() const {
  return _internal_has_m_apply();
}
inline void PROBUFF_NET_JOIN_FAMIL::clear_m_apply() {
  m_apply_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_JOIN_FAMIL::_internal_m_apply() const {
  return m_apply_;
}
inline bool PROBUFF_NET_JOIN_FAMIL::m_apply() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_JOIN_FAMIL.m_apply)
  return _internal_m_apply();
}
inline void PROBUFF_NET_JOIN_FAMIL::_internal_set_m_apply(bool value) {
  _has_bits_[0] |= 0x00000002u;
  m_apply_ = value;
}
inline void PROBUFF_NET_JOIN_FAMIL::set_m_apply(bool value) {
  _internal_set_m_apply(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_JOIN_FAMIL.m_apply)
}

// -------------------------------------------------------------------

// PROBUFF_NET_JOIN_FAMIL_RESPONSE

// int32 m_stat = 1;
inline bool PROBUFF_NET_JOIN_FAMIL_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_JOIN_FAMIL_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_JOIN_FAMIL_RESPONSE::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_JOIN_FAMIL_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_JOIN_FAMIL_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_JOIN_FAMIL_RESPONSE::_internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_stat_ = value;
}
inline void PROBUFF_NET_JOIN_FAMIL_RESPONSE::set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_RATIFY_JOIN_FAMIL

// int64 m_roleid = 1;
inline bool PROBUFF_NET_RATIFY_JOIN_FAMIL::_internal_has_m_roleid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_RATIFY_JOIN_FAMIL::has_m_roleid() const {
  return _internal_has_m_roleid();
}
inline void PROBUFF_NET_RATIFY_JOIN_FAMIL::clear_m_roleid() {
  m_roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_RATIFY_JOIN_FAMIL::_internal_m_roleid() const {
  return m_roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_RATIFY_JOIN_FAMIL::m_roleid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL.m_roleid)
  return _internal_m_roleid();
}
inline void PROBUFF_NET_RATIFY_JOIN_FAMIL::_internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_roleid_ = value;
}
inline void PROBUFF_NET_RATIFY_JOIN_FAMIL::set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_roleid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL.m_roleid)
}

// bool m_ratify = 2;
inline bool PROBUFF_NET_RATIFY_JOIN_FAMIL::_internal_has_m_ratify() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_RATIFY_JOIN_FAMIL::has_m_ratify() const {
  return _internal_has_m_ratify();
}
inline void PROBUFF_NET_RATIFY_JOIN_FAMIL::clear_m_ratify() {
  m_ratify_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_RATIFY_JOIN_FAMIL::_internal_m_ratify() const {
  return m_ratify_;
}
inline bool PROBUFF_NET_RATIFY_JOIN_FAMIL::m_ratify() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL.m_ratify)
  return _internal_m_ratify();
}
inline void PROBUFF_NET_RATIFY_JOIN_FAMIL::_internal_set_m_ratify(bool value) {
  _has_bits_[0] |= 0x00000002u;
  m_ratify_ = value;
}
inline void PROBUFF_NET_RATIFY_JOIN_FAMIL::set_m_ratify(bool value) {
  _internal_set_m_ratify(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL.m_ratify)
}

// -------------------------------------------------------------------

// PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE

// int32 m_stat = 1;
inline bool PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::_internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_stat_ = value;
}
inline void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_CEDE_FAMIL

// int64 m_roleid = 1;
inline bool PROBUFF_NET_CEDE_FAMIL::_internal_has_m_roleid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_CEDE_FAMIL::has_m_roleid() const {
  return _internal_has_m_roleid();
}
inline void PROBUFF_NET_CEDE_FAMIL::clear_m_roleid() {
  m_roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_CEDE_FAMIL::_internal_m_roleid() const {
  return m_roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_CEDE_FAMIL::m_roleid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CEDE_FAMIL.m_roleid)
  return _internal_m_roleid();
}
inline void PROBUFF_NET_CEDE_FAMIL::_internal_set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_roleid_ = value;
}
inline void PROBUFF_NET_CEDE_FAMIL::set_m_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_roleid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CEDE_FAMIL.m_roleid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_CEDE_FAMIL_RESPONSE

// int32 m_stat = 1;
inline bool PROBUFF_NET_CEDE_FAMIL_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_CEDE_FAMIL_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_CEDE_FAMIL_RESPONSE::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CEDE_FAMIL_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CEDE_FAMIL_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_CEDE_FAMIL_RESPONSE::_internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_stat_ = value;
}
inline void PROBUFF_NET_CEDE_FAMIL_RESPONSE::set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_LEAVE_FAMIL

// int64 m_familid = 1;
inline bool PROBUFF_NET_LEAVE_FAMIL::_internal_has_m_familid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_LEAVE_FAMIL::has_m_familid() const {
  return _internal_has_m_familid();
}
inline void PROBUFF_NET_LEAVE_FAMIL::clear_m_familid() {
  m_familid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_LEAVE_FAMIL::_internal_m_familid() const {
  return m_familid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_LEAVE_FAMIL::m_familid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_LEAVE_FAMIL.m_familid)
  return _internal_m_familid();
}
inline void PROBUFF_NET_LEAVE_FAMIL::_internal_set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_familid_ = value;
}
inline void PROBUFF_NET_LEAVE_FAMIL::set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_familid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_LEAVE_FAMIL.m_familid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_LEAVE_FAMIL_RESPONSE

// int32 m_stat = 1;
inline bool PROBUFF_NET_LEAVE_FAMIL_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_LEAVE_FAMIL_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_LEAVE_FAMIL_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_LEAVE_FAMIL_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::_internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_stat_ = value;
}
inline void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_LIST

// int64 m_familid = 1;
inline bool PROBUFF_NET_FAMIL_LIST::_internal_has_m_familid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_LIST::has_m_familid() const {
  return _internal_has_m_familid();
}
inline void PROBUFF_NET_FAMIL_LIST::clear_m_familid() {
  m_familid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_LIST::_internal_m_familid() const {
  return m_familid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_LIST::m_familid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_LIST.m_familid)
  return _internal_m_familid();
}
inline void PROBUFF_NET_FAMIL_LIST::_internal_set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_familid_ = value;
}
inline void PROBUFF_NET_FAMIL_LIST::set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_familid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_LIST.m_familid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMIL_LIST_RESPONSE

// int64 m_familid = 1;
inline bool PROBUFF_NET_FAMIL_LIST_RESPONSE::_internal_has_m_familid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMIL_LIST_RESPONSE::has_m_familid() const {
  return _internal_has_m_familid();
}
inline void PROBUFF_NET_FAMIL_LIST_RESPONSE::clear_m_familid() {
  m_familid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_LIST_RESPONSE::_internal_m_familid() const {
  return m_familid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMIL_LIST_RESPONSE::m_familid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE.m_familid)
  return _internal_m_familid();
}
inline void PROBUFF_NET_FAMIL_LIST_RESPONSE::_internal_set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_familid_ = value;
}
inline void PROBUFF_NET_FAMIL_LIST_RESPONSE::set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_familid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE.m_familid)
}

// repeated .pbdb.db_family m_family = 2;
inline int PROBUFF_NET_FAMIL_LIST_RESPONSE::_internal_m_family_size() const {
  return m_family_.size();
}
inline int PROBUFF_NET_FAMIL_LIST_RESPONSE::m_family_size() const {
  return _internal_m_family_size();
}
inline ::pbdb::db_family* PROBUFF_NET_FAMIL_LIST_RESPONSE::mutable_m_family(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE.m_family)
  return m_family_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_family >*
PROBUFF_NET_FAMIL_LIST_RESPONSE::mutable_m_family() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE.m_family)
  return &m_family_;
}
inline const ::pbdb::db_family& PROBUFF_NET_FAMIL_LIST_RESPONSE::_internal_m_family(int index) const {
  return m_family_.Get(index);
}
inline const ::pbdb::db_family& PROBUFF_NET_FAMIL_LIST_RESPONSE::m_family(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE.m_family)
  return _internal_m_family(index);
}
inline ::pbdb::db_family* PROBUFF_NET_FAMIL_LIST_RESPONSE::_internal_add_m_family() {
  return m_family_.Add();
}
inline ::pbdb::db_family* PROBUFF_NET_FAMIL_LIST_RESPONSE::add_m_family() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE.m_family)
  return _internal_add_m_family();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_family >&
PROBUFF_NET_FAMIL_LIST_RESPONSE::m_family() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE.m_family)
  return m_family_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_CHANGE_FAMILNAME

// int64 m_familid = 1;
inline bool PROBUFF_NET_CHANGE_FAMILNAME::_internal_has_m_familid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHANGE_FAMILNAME::has_m_familid() const {
  return _internal_has_m_familid();
}
inline void PROBUFF_NET_CHANGE_FAMILNAME::clear_m_familid() {
  m_familid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_CHANGE_FAMILNAME::_internal_m_familid() const {
  return m_familid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_CHANGE_FAMILNAME::m_familid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHANGE_FAMILNAME.m_familid)
  return _internal_m_familid();
}
inline void PROBUFF_NET_CHANGE_FAMILNAME::_internal_set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  m_familid_ = value;
}
inline void PROBUFF_NET_CHANGE_FAMILNAME::set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_familid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHANGE_FAMILNAME.m_familid)
}

// string m_name = 2;
inline bool PROBUFF_NET_CHANGE_FAMILNAME::_internal_has_m_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHANGE_FAMILNAME::has_m_name() const {
  return _internal_has_m_name();
}
inline void PROBUFF_NET_CHANGE_FAMILNAME::clear_m_name() {
  m_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PROBUFF_NET_CHANGE_FAMILNAME::m_name() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHANGE_FAMILNAME.m_name)
  return _internal_m_name();
}
inline void PROBUFF_NET_CHANGE_FAMILNAME::set_m_name(const std::string& value) {
  _internal_set_m_name(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHANGE_FAMILNAME.m_name)
}
inline std::string* PROBUFF_NET_CHANGE_FAMILNAME::mutable_m_name() {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_CHANGE_FAMILNAME.m_name)
  return _internal_mutable_m_name();
}
inline const std::string& PROBUFF_NET_CHANGE_FAMILNAME::_internal_m_name() const {
  return m_name_.Get();
}
inline void PROBUFF_NET_CHANGE_FAMILNAME::_internal_set_m_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PROBUFF_NET_CHANGE_FAMILNAME::set_m_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pbnet.PROBUFF_NET_CHANGE_FAMILNAME.m_name)
}
inline void PROBUFF_NET_CHANGE_FAMILNAME::set_m_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pbnet.PROBUFF_NET_CHANGE_FAMILNAME.m_name)
}
inline void PROBUFF_NET_CHANGE_FAMILNAME::set_m_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pbnet.PROBUFF_NET_CHANGE_FAMILNAME.m_name)
}
inline std::string* PROBUFF_NET_CHANGE_FAMILNAME::_internal_mutable_m_name() {
  _has_bits_[0] |= 0x00000001u;
  return m_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PROBUFF_NET_CHANGE_FAMILNAME::release_m_name() {
  // @@protoc_insertion_point(field_release:pbnet.PROBUFF_NET_CHANGE_FAMILNAME.m_name)
  if (!_internal_has_m_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PROBUFF_NET_CHANGE_FAMILNAME::set_allocated_m_name(std::string* m_name) {
  if (m_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pbnet.PROBUFF_NET_CHANGE_FAMILNAME.m_name)
}

// -------------------------------------------------------------------

// PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE

// int32 m_stat = 1;
inline bool PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::_internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_stat_ = value;
}
inline void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMILSIGN

// int64 m_familid = 1;
inline bool PROBUFF_NET_FAMILSIGN::_internal_has_m_familid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMILSIGN::has_m_familid() const {
  return _internal_has_m_familid();
}
inline void PROBUFF_NET_FAMILSIGN::clear_m_familid() {
  m_familid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMILSIGN::_internal_m_familid() const {
  return m_familid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_FAMILSIGN::m_familid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMILSIGN.m_familid)
  return _internal_m_familid();
}
inline void PROBUFF_NET_FAMILSIGN::_internal_set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_familid_ = value;
}
inline void PROBUFF_NET_FAMILSIGN::set_m_familid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_familid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMILSIGN.m_familid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_FAMILSIGN_RESPONSE

// int32 m_stat = 1;
inline bool PROBUFF_NET_FAMILSIGN_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_FAMILSIGN_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_FAMILSIGN_RESPONSE::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMILSIGN_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_FAMILSIGN_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_FAMILSIGN_RESPONSE::_internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  m_stat_ = value;
}
inline void PROBUFF_NET_FAMILSIGN_RESPONSE::set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PROBUFF_NET_REWARD_ITEM_RESPONSE

// map<int32, int32> m_items = 1;
inline int PROBUFF_NET_REWARD_ITEM_RESPONSE::_internal_m_items_size() const {
  return m_items_.size();
}
inline int PROBUFF_NET_REWARD_ITEM_RESPONSE::m_items_size() const {
  return _internal_m_items_size();
}
inline void PROBUFF_NET_REWARD_ITEM_RESPONSE::clear_m_items() {
  m_items_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_REWARD_ITEM_RESPONSE::_internal_m_items() const {
  return m_items_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
PROBUFF_NET_REWARD_ITEM_RESPONSE::m_items() const {
  // @@protoc_insertion_point(field_map:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE.m_items)
  return _internal_m_items();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_REWARD_ITEM_RESPONSE::_internal_mutable_m_items() {
  return m_items_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
PROBUFF_NET_REWARD_ITEM_RESPONSE::mutable_m_items() {
  // @@protoc_insertion_point(field_mutable_map:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE.m_items)
  return _internal_mutable_m_items();
}

// -------------------------------------------------------------------

// PROBUFF_NET_RANKLIST

// .pbdb.eranklist m_type = 1;
inline bool PROBUFF_NET_RANKLIST::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_RANKLIST::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_RANKLIST::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbdb::eranklist PROBUFF_NET_RANKLIST::_internal_m_type() const {
  return static_cast< ::pbdb::eranklist >(m_type_);
}
inline ::pbdb::eranklist PROBUFF_NET_RANKLIST::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RANKLIST.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_RANKLIST::_internal_set_m_type(::pbdb::eranklist value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void PROBUFF_NET_RANKLIST::set_m_type(::pbdb::eranklist value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RANKLIST.m_type)
}

// -------------------------------------------------------------------

// PROBUFF_NET_RANKLIST_RESPONSE

// .pbdb.eranklist m_type = 1;
inline bool PROBUFF_NET_RANKLIST_RESPONSE::_internal_has_m_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_RANKLIST_RESPONSE::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::clear_m_type() {
  m_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::pbdb::eranklist PROBUFF_NET_RANKLIST_RESPONSE::_internal_m_type() const {
  return static_cast< ::pbdb::eranklist >(m_type_);
}
inline ::pbdb::eranklist PROBUFF_NET_RANKLIST_RESPONSE::m_type() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::_internal_set_m_type(::pbdb::eranklist value) {
  _has_bits_[0] |= 0x00000001u;
  m_type_ = value;
}
inline void PROBUFF_NET_RANKLIST_RESPONSE::set_m_type(::pbdb::eranklist value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.m_type)
}

// repeated .pbdb.db_brief m_items = 2;
inline int PROBUFF_NET_RANKLIST_RESPONSE::_internal_m_items_size() const {
  return m_items_.size();
}
inline int PROBUFF_NET_RANKLIST_RESPONSE::m_items_size() const {
  return _internal_m_items_size();
}
inline ::pbdb::db_brief* PROBUFF_NET_RANKLIST_RESPONSE::mutable_m_items(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.m_items)
  return m_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >*
PROBUFF_NET_RANKLIST_RESPONSE::mutable_m_items() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.m_items)
  return &m_items_;
}
inline const ::pbdb::db_brief& PROBUFF_NET_RANKLIST_RESPONSE::_internal_m_items(int index) const {
  return m_items_.Get(index);
}
inline const ::pbdb::db_brief& PROBUFF_NET_RANKLIST_RESPONSE::m_items(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.m_items)
  return _internal_m_items(index);
}
inline ::pbdb::db_brief* PROBUFF_NET_RANKLIST_RESPONSE::_internal_add_m_items() {
  return m_items_.Add();
}
inline ::pbdb::db_brief* PROBUFF_NET_RANKLIST_RESPONSE::add_m_items() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.m_items)
  return _internal_add_m_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >&
PROBUFF_NET_RANKLIST_RESPONSE::m_items() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_RANKLIST_RESPONSE.m_items)
  return m_items_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_FRIEND

// -------------------------------------------------------------------

// PROBUFF_NET_FRIEND_RESPONSE

// repeated .pbdb.db_brief m_friends = 1;
inline int PROBUFF_NET_FRIEND_RESPONSE::_internal_m_friends_size() const {
  return m_friends_.size();
}
inline int PROBUFF_NET_FRIEND_RESPONSE::m_friends_size() const {
  return _internal_m_friends_size();
}
inline ::pbdb::db_brief* PROBUFF_NET_FRIEND_RESPONSE::mutable_m_friends(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_FRIEND_RESPONSE.m_friends)
  return m_friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >*
PROBUFF_NET_FRIEND_RESPONSE::mutable_m_friends() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_FRIEND_RESPONSE.m_friends)
  return &m_friends_;
}
inline const ::pbdb::db_brief& PROBUFF_NET_FRIEND_RESPONSE::_internal_m_friends(int index) const {
  return m_friends_.Get(index);
}
inline const ::pbdb::db_brief& PROBUFF_NET_FRIEND_RESPONSE::m_friends(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_RESPONSE.m_friends)
  return _internal_m_friends(index);
}
inline ::pbdb::db_brief* PROBUFF_NET_FRIEND_RESPONSE::_internal_add_m_friends() {
  return m_friends_.Add();
}
inline ::pbdb::db_brief* PROBUFF_NET_FRIEND_RESPONSE::add_m_friends() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_FRIEND_RESPONSE.m_friends)
  return _internal_add_m_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >&
PROBUFF_NET_FRIEND_RESPONSE::m_friends() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_FRIEND_RESPONSE.m_friends)
  return m_friends_;
}

// repeated .pbdb.db_brief m_applyfriends = 2;
inline int PROBUFF_NET_FRIEND_RESPONSE::_internal_m_applyfriends_size() const {
  return m_applyfriends_.size();
}
inline int PROBUFF_NET_FRIEND_RESPONSE::m_applyfriends_size() const {
  return _internal_m_applyfriends_size();
}
inline ::pbdb::db_brief* PROBUFF_NET_FRIEND_RESPONSE::mutable_m_applyfriends(int index) {
  // @@protoc_insertion_point(field_mutable:pbnet.PROBUFF_NET_FRIEND_RESPONSE.m_applyfriends)
  return m_applyfriends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >*
PROBUFF_NET_FRIEND_RESPONSE::mutable_m_applyfriends() {
  // @@protoc_insertion_point(field_mutable_list:pbnet.PROBUFF_NET_FRIEND_RESPONSE.m_applyfriends)
  return &m_applyfriends_;
}
inline const ::pbdb::db_brief& PROBUFF_NET_FRIEND_RESPONSE::_internal_m_applyfriends(int index) const {
  return m_applyfriends_.Get(index);
}
inline const ::pbdb::db_brief& PROBUFF_NET_FRIEND_RESPONSE::m_applyfriends(int index) const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_FRIEND_RESPONSE.m_applyfriends)
  return _internal_m_applyfriends(index);
}
inline ::pbdb::db_brief* PROBUFF_NET_FRIEND_RESPONSE::_internal_add_m_applyfriends() {
  return m_applyfriends_.Add();
}
inline ::pbdb::db_brief* PROBUFF_NET_FRIEND_RESPONSE::add_m_applyfriends() {
  // @@protoc_insertion_point(field_add:pbnet.PROBUFF_NET_FRIEND_RESPONSE.m_applyfriends)
  return _internal_add_m_applyfriends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbdb::db_brief >&
PROBUFF_NET_FRIEND_RESPONSE::m_applyfriends() const {
  // @@protoc_insertion_point(field_list:pbnet.PROBUFF_NET_FRIEND_RESPONSE.m_applyfriends)
  return m_applyfriends_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_ADDFRIEND

// int64 m_friedid = 1;
inline bool PROBUFF_NET_ADDFRIEND::_internal_has_m_friedid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ADDFRIEND::has_m_friedid() const {
  return _internal_has_m_friedid();
}
inline void PROBUFF_NET_ADDFRIEND::clear_m_friedid() {
  m_friedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ADDFRIEND::_internal_m_friedid() const {
  return m_friedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ADDFRIEND::m_friedid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ADDFRIEND.m_friedid)
  return _internal_m_friedid();
}
inline void PROBUFF_NET_ADDFRIEND::_internal_set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_friedid_ = value;
}
inline void PROBUFF_NET_ADDFRIEND::set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_friedid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ADDFRIEND.m_friedid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_ADDFRIEND_RESPONSE

// int64 m_friedid = 1;
inline bool PROBUFF_NET_ADDFRIEND_RESPONSE::_internal_has_m_friedid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ADDFRIEND_RESPONSE::has_m_friedid() const {
  return _internal_has_m_friedid();
}
inline void PROBUFF_NET_ADDFRIEND_RESPONSE::clear_m_friedid() {
  m_friedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ADDFRIEND_RESPONSE::_internal_m_friedid() const {
  return m_friedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ADDFRIEND_RESPONSE::m_friedid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE.m_friedid)
  return _internal_m_friedid();
}
inline void PROBUFF_NET_ADDFRIEND_RESPONSE::_internal_set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_friedid_ = value;
}
inline void PROBUFF_NET_ADDFRIEND_RESPONSE::set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_friedid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE.m_friedid)
}

// int32 m_stat = 2;
inline bool PROBUFF_NET_ADDFRIEND_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_ADDFRIEND_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_ADDFRIEND_RESPONSE::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ADDFRIEND_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ADDFRIEND_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_ADDFRIEND_RESPONSE::_internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_stat_ = value;
}
inline void PROBUFF_NET_ADDFRIEND_RESPONSE::set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_RATIFY_ADDFRIEND

// int64 m_friedid = 1;
inline bool PROBUFF_NET_RATIFY_ADDFRIEND::_internal_has_m_friedid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_RATIFY_ADDFRIEND::has_m_friedid() const {
  return _internal_has_m_friedid();
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND::clear_m_friedid() {
  m_friedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_RATIFY_ADDFRIEND::_internal_m_friedid() const {
  return m_friedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_RATIFY_ADDFRIEND::m_friedid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND.m_friedid)
  return _internal_m_friedid();
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND::_internal_set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_friedid_ = value;
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND::set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_friedid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND.m_friedid)
}

// bool m_ratify = 2;
inline bool PROBUFF_NET_RATIFY_ADDFRIEND::_internal_has_m_ratify() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_RATIFY_ADDFRIEND::has_m_ratify() const {
  return _internal_has_m_ratify();
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND::clear_m_ratify() {
  m_ratify_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_RATIFY_ADDFRIEND::_internal_m_ratify() const {
  return m_ratify_;
}
inline bool PROBUFF_NET_RATIFY_ADDFRIEND::m_ratify() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND.m_ratify)
  return _internal_m_ratify();
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND::_internal_set_m_ratify(bool value) {
  _has_bits_[0] |= 0x00000002u;
  m_ratify_ = value;
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND::set_m_ratify(bool value) {
  _internal_set_m_ratify(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND.m_ratify)
}

// -------------------------------------------------------------------

// PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE

// int64 m_friedid = 1;
inline bool PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_internal_has_m_friedid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::has_m_friedid() const {
  return _internal_has_m_friedid();
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::clear_m_friedid() {
  m_friedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_internal_m_friedid() const {
  return m_friedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::m_friedid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE.m_friedid)
  return _internal_m_friedid();
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_internal_set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_friedid_ = value;
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_friedid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE.m_friedid)
}

// bool m_ratify = 2;
inline bool PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_internal_has_m_ratify() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::has_m_ratify() const {
  return _internal_has_m_ratify();
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::clear_m_ratify() {
  m_ratify_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_internal_m_ratify() const {
  return m_ratify_;
}
inline bool PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::m_ratify() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE.m_ratify)
  return _internal_m_ratify();
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_internal_set_m_ratify(bool value) {
  _has_bits_[0] |= 0x00000002u;
  m_ratify_ = value;
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::set_m_ratify(bool value) {
  _internal_set_m_ratify(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE.m_ratify)
}

// int32 m_stat = 3;
inline bool PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  m_stat_ = value;
}
inline void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE.m_stat)
}

// -------------------------------------------------------------------

// PROBUFF_NET_ERASEFRIEND

// int64 m_friedid = 1;
inline bool PROBUFF_NET_ERASEFRIEND::_internal_has_m_friedid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ERASEFRIEND::has_m_friedid() const {
  return _internal_has_m_friedid();
}
inline void PROBUFF_NET_ERASEFRIEND::clear_m_friedid() {
  m_friedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ERASEFRIEND::_internal_m_friedid() const {
  return m_friedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ERASEFRIEND::m_friedid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ERASEFRIEND.m_friedid)
  return _internal_m_friedid();
}
inline void PROBUFF_NET_ERASEFRIEND::_internal_set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_friedid_ = value;
}
inline void PROBUFF_NET_ERASEFRIEND::set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_friedid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ERASEFRIEND.m_friedid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_ERASEFRIEND_RESPONSE

// int64 m_friedid = 1;
inline bool PROBUFF_NET_ERASEFRIEND_RESPONSE::_internal_has_m_friedid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_ERASEFRIEND_RESPONSE::has_m_friedid() const {
  return _internal_has_m_friedid();
}
inline void PROBUFF_NET_ERASEFRIEND_RESPONSE::clear_m_friedid() {
  m_friedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ERASEFRIEND_RESPONSE::_internal_m_friedid() const {
  return m_friedid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PROBUFF_NET_ERASEFRIEND_RESPONSE::m_friedid() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE.m_friedid)
  return _internal_m_friedid();
}
inline void PROBUFF_NET_ERASEFRIEND_RESPONSE::_internal_set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  m_friedid_ = value;
}
inline void PROBUFF_NET_ERASEFRIEND_RESPONSE::set_m_friedid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_m_friedid(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE.m_friedid)
}

// int32 m_stat = 2;
inline bool PROBUFF_NET_ERASEFRIEND_RESPONSE::_internal_has_m_stat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_ERASEFRIEND_RESPONSE::has_m_stat() const {
  return _internal_has_m_stat();
}
inline void PROBUFF_NET_ERASEFRIEND_RESPONSE::clear_m_stat() {
  m_stat_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ERASEFRIEND_RESPONSE::_internal_m_stat() const {
  return m_stat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PROBUFF_NET_ERASEFRIEND_RESPONSE::m_stat() const {
  // @@protoc_insertion_point(field_get:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE.m_stat)
  return _internal_m_stat();
}
inline void PROBUFF_NET_ERASEFRIEND_RESPONSE::_internal_set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  m_stat_ = value;
}
inline void PROBUFF_NET_ERASEFRIEND_RESPONSE::set_m_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_stat(value);
  // @@protoc_insertion_point(field_set:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE.m_stat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbnet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat>() {
  return ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat_descriptor();
}
template <> struct is_proto_enum< ::pbnet::enum_logic_chat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::enum_logic_chat>() {
  return ::pbnet::enum_logic_chat_descriptor();
}
template <> struct is_proto_enum< ::pbnet::enum_chat_channel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::enum_chat_channel>() {
  return ::pbnet::enum_chat_channel_descriptor();
}
template <> struct is_proto_enum< ::pbnet::eunit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::eunit>() {
  return ::pbnet::eunit_descriptor();
}
template <> struct is_proto_enum< ::pbnet::eunitstat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::eunitstat>() {
  return ::pbnet::eunitstat_descriptor();
}
template <> struct is_proto_enum< ::pbnet::eplays> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::eplays>() {
  return ::pbnet::eplays_descriptor();
}
template <> struct is_proto_enum< ::pbnet::ematching_cancel_stat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::ematching_cancel_stat>() {
  return ::pbnet::ematching_cancel_stat_descriptor();
}
template <> struct is_proto_enum< ::pbnet::etype_matching_cancel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::etype_matching_cancel>() {
  return ::pbnet::etype_matching_cancel_descriptor();
}
template <> struct is_proto_enum< ::pbnet::ematching_confirm_stat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbnet::ematching_confirm_stat>() {
  return ::pbnet::ematching_confirm_stat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_net_2eproto
