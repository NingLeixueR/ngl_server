// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#include "db.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_activity_MDrawcomplianceEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_activity_drawcompliance_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_activity_drawcompliance_MRewardEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_bag_MItemsEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_brief_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_mail_MMailEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_ranklist_MItemsEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_role_recharge_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_rolekeyvalue_MDataEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_task_MCompleteddatasEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_task_MRundatasEntry_DoNotUse_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_task_data_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_task_data_schedule_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_item_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mail_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mailitem_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rankitem_db_2eproto;
namespace pbdb {
class db_accountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_account> _instance;
} _db_account_default_instance_;
class db_briefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_brief> _instance;
} _db_brief_default_instance_;
class db_role_rechargeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_role_recharge> _instance;
} _db_role_recharge_default_instance_;
class db_roleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_role> _instance;
} _db_role_default_instance_;
class itemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<item> _instance;
} _item_default_instance_;
class db_bag_MItemsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_bag_MItemsEntry_DoNotUse> _instance;
} _db_bag_MItemsEntry_DoNotUse_default_instance_;
class db_bagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_bag> _instance;
} _db_bag_default_instance_;
class db_keyvalueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_keyvalue> _instance;
} _db_keyvalue_default_instance_;
class db_rolekeyvalue_MDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_rolekeyvalue_MDataEntry_DoNotUse> _instance;
} _db_rolekeyvalue_MDataEntry_DoNotUse_default_instance_;
class db_rolekeyvalueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_rolekeyvalue> _instance;
} _db_rolekeyvalue_default_instance_;
class mailitemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mailitem> _instance;
} _mailitem_default_instance_;
class mailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mail> _instance;
} _mail_default_instance_;
class db_mail_MMailEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_mail_MMailEntry_DoNotUse> _instance;
} _db_mail_MMailEntry_DoNotUse_default_instance_;
class db_mailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_mail> _instance;
} _db_mail_default_instance_;
class db_guildDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_guild> _instance;
} _db_guild_default_instance_;
class db_noticeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_notice> _instance;
} _db_notice_default_instance_;
class rankitemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rankitem> _instance;
} _rankitem_default_instance_;
class db_ranklist_MItemsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_ranklist_MItemsEntry_DoNotUse> _instance;
} _db_ranklist_MItemsEntry_DoNotUse_default_instance_;
class db_ranklistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_ranklist> _instance;
} _db_ranklist_default_instance_;
class db_activity_drawcompliance_MRewardEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_activity_drawcompliance_MRewardEntry_DoNotUse> _instance;
} _db_activity_drawcompliance_MRewardEntry_DoNotUse_default_instance_;
class db_activity_drawcomplianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_activity_drawcompliance> _instance;
} _db_activity_drawcompliance_default_instance_;
class db_activity_MDrawcomplianceEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_activity_MDrawcomplianceEntry_DoNotUse> _instance;
} _db_activity_MDrawcomplianceEntry_DoNotUse_default_instance_;
class db_activityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_activity> _instance;
} _db_activity_default_instance_;
class db_task_data_scheduleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_task_data_schedule> _instance;
} _db_task_data_schedule_default_instance_;
class db_task_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_task_data> _instance;
} _db_task_data_default_instance_;
class db_task_MRundatasEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_task_MRundatasEntry_DoNotUse> _instance;
} _db_task_MRundatasEntry_DoNotUse_default_instance_;
class db_task_MCompleteddatasEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_task_MCompleteddatasEntry_DoNotUse> _instance;
} _db_task_MCompleteddatasEntry_DoNotUse_default_instance_;
class db_taskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_task> _instance;
} _db_task_default_instance_;
class db_calendarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_calendar> _instance;
} _db_calendar_default_instance_;
class db_familyerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_familyer> _instance;
} _db_familyer_default_instance_;
class db_familyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_family> _instance;
} _db_family_default_instance_;
class db_friendsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_friends> _instance;
} _db_friends_default_instance_;
}  // namespace pbdb
static void InitDefaultsscc_info_db_account_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_account_default_instance_;
    new (ptr) ::pbdb::db_account();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_account::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_account_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_account_db_2eproto}, {}};

static void InitDefaultsscc_info_db_activity_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_activity_default_instance_;
    new (ptr) ::pbdb::db_activity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_activity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_activity_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_activity_db_2eproto}, {
      &scc_info_db_activity_MDrawcomplianceEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_db_activity_MDrawcomplianceEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_activity_MDrawcomplianceEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_activity_MDrawcomplianceEntry_DoNotUse();
  }
  ::pbdb::db_activity_MDrawcomplianceEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_activity_MDrawcomplianceEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_activity_MDrawcomplianceEntry_DoNotUse_db_2eproto}, {
      &scc_info_db_activity_drawcompliance_db_2eproto.base,}};

static void InitDefaultsscc_info_db_activity_drawcompliance_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_activity_drawcompliance_default_instance_;
    new (ptr) ::pbdb::db_activity_drawcompliance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_activity_drawcompliance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_activity_drawcompliance_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_activity_drawcompliance_db_2eproto}, {
      &scc_info_db_activity_drawcompliance_MRewardEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_db_activity_drawcompliance_MRewardEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_activity_drawcompliance_MRewardEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_activity_drawcompliance_MRewardEntry_DoNotUse();
  }
  ::pbdb::db_activity_drawcompliance_MRewardEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_activity_drawcompliance_MRewardEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_activity_drawcompliance_MRewardEntry_DoNotUse_db_2eproto}, {}};

static void InitDefaultsscc_info_db_bag_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_bag_default_instance_;
    new (ptr) ::pbdb::db_bag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_bag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_bag_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_bag_db_2eproto}, {
      &scc_info_db_bag_MItemsEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_db_bag_MItemsEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_bag_MItemsEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_bag_MItemsEntry_DoNotUse();
  }
  ::pbdb::db_bag_MItemsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_bag_MItemsEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_bag_MItemsEntry_DoNotUse_db_2eproto}, {
      &scc_info_item_db_2eproto.base,}};

static void InitDefaultsscc_info_db_brief_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_brief_default_instance_;
    new (ptr) ::pbdb::db_brief();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_brief::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_brief_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_brief_db_2eproto}, {}};

static void InitDefaultsscc_info_db_calendar_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_calendar_default_instance_;
    new (ptr) ::pbdb::db_calendar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_calendar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_calendar_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_calendar_db_2eproto}, {}};

static void InitDefaultsscc_info_db_family_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_family_default_instance_;
    new (ptr) ::pbdb::db_family();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_family::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_family_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_family_db_2eproto}, {}};

static void InitDefaultsscc_info_db_familyer_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_familyer_default_instance_;
    new (ptr) ::pbdb::db_familyer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_familyer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_familyer_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_familyer_db_2eproto}, {}};

static void InitDefaultsscc_info_db_friends_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_friends_default_instance_;
    new (ptr) ::pbdb::db_friends();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_friends::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_friends_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_friends_db_2eproto}, {}};

static void InitDefaultsscc_info_db_guild_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_guild_default_instance_;
    new (ptr) ::pbdb::db_guild();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_guild::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_guild_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_guild_db_2eproto}, {}};

static void InitDefaultsscc_info_db_keyvalue_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_keyvalue_default_instance_;
    new (ptr) ::pbdb::db_keyvalue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_keyvalue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_keyvalue_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_keyvalue_db_2eproto}, {}};

static void InitDefaultsscc_info_db_mail_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_mail_default_instance_;
    new (ptr) ::pbdb::db_mail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_mail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_mail_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_mail_db_2eproto}, {
      &scc_info_db_mail_MMailEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_db_mail_MMailEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_mail_MMailEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_mail_MMailEntry_DoNotUse();
  }
  ::pbdb::db_mail_MMailEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_mail_MMailEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_mail_MMailEntry_DoNotUse_db_2eproto}, {
      &scc_info_mail_db_2eproto.base,}};

static void InitDefaultsscc_info_db_notice_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_notice_default_instance_;
    new (ptr) ::pbdb::db_notice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_notice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_notice_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_notice_db_2eproto}, {}};

static void InitDefaultsscc_info_db_ranklist_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_ranklist_default_instance_;
    new (ptr) ::pbdb::db_ranklist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_ranklist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_ranklist_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_ranklist_db_2eproto}, {
      &scc_info_db_ranklist_MItemsEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_db_ranklist_MItemsEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_ranklist_MItemsEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_ranklist_MItemsEntry_DoNotUse();
  }
  ::pbdb::db_ranklist_MItemsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_ranklist_MItemsEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_ranklist_MItemsEntry_DoNotUse_db_2eproto}, {
      &scc_info_rankitem_db_2eproto.base,}};

static void InitDefaultsscc_info_db_role_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_role_default_instance_;
    new (ptr) ::pbdb::db_role();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_role::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_db_role_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_db_role_db_2eproto}, {
      &scc_info_db_brief_db_2eproto.base,
      &scc_info_db_role_recharge_db_2eproto.base,}};

static void InitDefaultsscc_info_db_role_recharge_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_role_recharge_default_instance_;
    new (ptr) ::pbdb::db_role_recharge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_role_recharge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_role_recharge_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_role_recharge_db_2eproto}, {}};

static void InitDefaultsscc_info_db_rolekeyvalue_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_rolekeyvalue_default_instance_;
    new (ptr) ::pbdb::db_rolekeyvalue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_rolekeyvalue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_rolekeyvalue_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_rolekeyvalue_db_2eproto}, {
      &scc_info_db_rolekeyvalue_MDataEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_db_rolekeyvalue_MDataEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_rolekeyvalue_MDataEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_rolekeyvalue_MDataEntry_DoNotUse();
  }
  ::pbdb::db_rolekeyvalue_MDataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_rolekeyvalue_MDataEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_rolekeyvalue_MDataEntry_DoNotUse_db_2eproto}, {}};

static void InitDefaultsscc_info_db_task_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_task_default_instance_;
    new (ptr) ::pbdb::db_task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_db_task_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_db_task_db_2eproto}, {
      &scc_info_db_task_MRundatasEntry_DoNotUse_db_2eproto.base,
      &scc_info_db_task_MCompleteddatasEntry_DoNotUse_db_2eproto.base,}};

static void InitDefaultsscc_info_db_task_MCompleteddatasEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_task_MCompleteddatasEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_task_MCompleteddatasEntry_DoNotUse();
  }
  ::pbdb::db_task_MCompleteddatasEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_task_MCompleteddatasEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_task_MCompleteddatasEntry_DoNotUse_db_2eproto}, {
      &scc_info_db_task_data_db_2eproto.base,}};

static void InitDefaultsscc_info_db_task_MRundatasEntry_DoNotUse_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_task_MRundatasEntry_DoNotUse_default_instance_;
    new (ptr) ::pbdb::db_task_MRundatasEntry_DoNotUse();
  }
  ::pbdb::db_task_MRundatasEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_task_MRundatasEntry_DoNotUse_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_task_MRundatasEntry_DoNotUse_db_2eproto}, {
      &scc_info_db_task_data_db_2eproto.base,}};

static void InitDefaultsscc_info_db_task_data_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_task_data_default_instance_;
    new (ptr) ::pbdb::db_task_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_task_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_task_data_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_db_task_data_db_2eproto}, {
      &scc_info_db_task_data_schedule_db_2eproto.base,}};

static void InitDefaultsscc_info_db_task_data_schedule_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_db_task_data_schedule_default_instance_;
    new (ptr) ::pbdb::db_task_data_schedule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::db_task_data_schedule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_task_data_schedule_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_task_data_schedule_db_2eproto}, {}};

static void InitDefaultsscc_info_item_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_item_default_instance_;
    new (ptr) ::pbdb::item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_item_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_item_db_2eproto}, {}};

static void InitDefaultsscc_info_mail_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_mail_default_instance_;
    new (ptr) ::pbdb::mail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::mail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mail_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_mail_db_2eproto}, {
      &scc_info_mailitem_db_2eproto.base,}};

static void InitDefaultsscc_info_mailitem_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_mailitem_default_instance_;
    new (ptr) ::pbdb::mailitem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::mailitem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_mailitem_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_mailitem_db_2eproto}, {}};

static void InitDefaultsscc_info_rankitem_db_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbdb::_rankitem_default_instance_;
    new (ptr) ::pbdb::rankitem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbdb::rankitem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rankitem_db_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_rankitem_db_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_db_2eproto[32];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_db_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_db_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_db_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, m_roleid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, m_account_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, m_passworld_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_account, m_area_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, m_name_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, m_lv_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, m_moneygold_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, m_moneysilver_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, m_vip_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, m_notalkutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_brief, m_createutc_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role_recharge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role_recharge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role_recharge, m_rechargeid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role_recharge, m_utc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role, m_base_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_role, m_recharge_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::item, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, m_tid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, m_count_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, m_lv_),
  PROTOBUF_FIELD_OFFSET(::pbdb::item, m_star_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag_MItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag_MItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag_MItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag_MItemsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, m_items_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_bag, m_maxid_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_keyvalue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_keyvalue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_keyvalue, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_keyvalue, m_value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue_MDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue_MDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue_MDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue_MDataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_rolekeyvalue, m_data_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::mailitem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mailitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::mailitem, m_itemtid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mailitem, m_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, m_createutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, m_tid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, m_prams_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, m_content_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, m_items_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, m_read_),
  PROTOBUF_FIELD_OFFSET(::pbdb::mail, m_draw_),
  2,
  3,
  4,
  0,
  1,
  ~0u,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail_MMailEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail_MMailEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail_MMailEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail_MMailEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_mail, m_mail_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_guild, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_guild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_guild, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_guild, m_guild_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_guild, m_leader_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_guild, m_members_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, m_notice_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, m_starttime_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_notice, m_finishtime_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbdb::rankitem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::rankitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::rankitem, m_value_),
  PROTOBUF_FIELD_OFFSET(::pbdb::rankitem, m_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist_MItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist_MItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist_MItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist_MItemsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_ranklist, m_items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_drawcompliance_MRewardEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_drawcompliance_MRewardEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_drawcompliance_MRewardEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_drawcompliance_MRewardEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_drawcompliance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_drawcompliance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_drawcompliance, m_count_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_drawcompliance, m_reward_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MDrawcomplianceEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MDrawcomplianceEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MDrawcomplianceEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity_MDrawcomplianceEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, m_beg_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, m_end_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, m_start_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, m_finish_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, m_calendarid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_activity, m_drawcompliance_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, m_value_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data_schedule, m_sumint_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, m_taskid_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, m_receiveutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, m_finshutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, m_schedules_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_data, m_receive_),
  0,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MRundatasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MRundatasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MRundatasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MRundatasEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MCompleteddatasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MCompleteddatasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MCompleteddatasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task_MCompleteddatasEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, m_rundatas_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_task, m_completeddatas_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_calendar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_calendar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_calendar, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_calendar, m_time_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_calendar, m_start_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_calendar, m_finish_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, m_joinutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, m_lastsignutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, m_lastleaveutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_familyer, m_position_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, m_createutc_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, m_name_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, m_leader_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, m_lv_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, m_exp_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, m_member_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_family, m_applylist_),
  1,
  2,
  0,
  4,
  3,
  5,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, m_friends_),
  PROTOBUF_FIELD_OFFSET(::pbdb::db_friends, m_applyfriends_),
  0,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::pbdb::db_account)},
  { 15, 28, sizeof(::pbdb::db_brief)},
  { 36, 43, sizeof(::pbdb::db_role_recharge)},
  { 45, 53, sizeof(::pbdb::db_role)},
  { 56, 66, sizeof(::pbdb::item)},
  { 71, 78, sizeof(::pbdb::db_bag_MItemsEntry_DoNotUse)},
  { 80, 88, sizeof(::pbdb::db_bag)},
  { 91, 98, sizeof(::pbdb::db_keyvalue)},
  { 100, 107, sizeof(::pbdb::db_rolekeyvalue_MDataEntry_DoNotUse)},
  { 109, 116, sizeof(::pbdb::db_rolekeyvalue)},
  { 118, 125, sizeof(::pbdb::mailitem)},
  { 127, 140, sizeof(::pbdb::mail)},
  { 148, 155, sizeof(::pbdb::db_mail_MMailEntry_DoNotUse)},
  { 157, 164, sizeof(::pbdb::db_mail)},
  { 166, 175, sizeof(::pbdb::db_guild)},
  { 179, 188, sizeof(::pbdb::db_notice)},
  { 192, 199, sizeof(::pbdb::rankitem)},
  { 201, 208, sizeof(::pbdb::db_ranklist_MItemsEntry_DoNotUse)},
  { 210, 217, sizeof(::pbdb::db_ranklist)},
  { 219, 226, sizeof(::pbdb::db_activity_drawcompliance_MRewardEntry_DoNotUse)},
  { 228, 235, sizeof(::pbdb::db_activity_drawcompliance)},
  { 237, 244, sizeof(::pbdb::db_activity_MDrawcomplianceEntry_DoNotUse)},
  { 246, 258, sizeof(::pbdb::db_activity)},
  { 265, 273, sizeof(::pbdb::db_task_data_schedule)},
  { 276, 286, sizeof(::pbdb::db_task_data)},
  { 291, 298, sizeof(::pbdb::db_task_MRundatasEntry_DoNotUse)},
  { 300, 307, sizeof(::pbdb::db_task_MCompleteddatasEntry_DoNotUse)},
  { 309, 317, sizeof(::pbdb::db_task)},
  { 320, 329, sizeof(::pbdb::db_calendar)},
  { 333, 343, sizeof(::pbdb::db_familyer)},
  { 348, 361, sizeof(::pbdb::db_family)},
  { 369, 377, sizeof(::pbdb::db_friends)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_brief_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_role_recharge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_role_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_bag_MItemsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_bag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_keyvalue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_rolekeyvalue_MDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_rolekeyvalue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_mailitem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_mail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_mail_MMailEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_mail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_guild_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_notice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_rankitem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_ranklist_MItemsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_ranklist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_activity_drawcompliance_MRewardEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_activity_drawcompliance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_activity_MDrawcomplianceEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_activity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_task_data_schedule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_task_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_task_MRundatasEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_task_MCompleteddatasEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_calendar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_familyer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_family_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbdb::_db_friends_default_instance_),
};

const char descriptor_table_protodef_db_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010db.proto\022\004pbdb\"\274\001\n\ndb_account\022\021\n\004m_id\030"
  "\001 \001(\003H\000\210\001\001\022\025\n\010m_roleid\030\002 \001(\003H\001\210\001\001\022\026\n\tm_a"
  "ccount\030\003 \001(\tH\002\210\001\001\022\030\n\013m_passworld\030\004 \001(\tH\003"
  "\210\001\001\022\023\n\006m_area\030\005 \001(\005H\004\210\001\001B\007\n\005_m_idB\013\n\t_m_"
  "roleidB\014\n\n_m_accountB\016\n\014_m_passworldB\t\n\007"
  "_m_area\"\254\002\n\010db_brief\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001\022"
  "\023\n\006m_name\030\002 \001(\tH\001\210\001\001\022\021\n\004m_lv\030\003 \001(\005H\002\210\001\001\022"
  "\030\n\013m_moneygold\030\004 \001(\005H\003\210\001\001\022\032\n\rm_moneysilv"
  "er\030\005 \001(\005H\004\210\001\001\022\022\n\005m_vip\030\006 \001(\005H\005\210\001\001\022\030\n\013m_n"
  "otalkutc\030\007 \001(\005H\006\210\001\001\022\030\n\013m_createutc\030\010 \001(\005"
  "H\007\210\001\001B\007\n\005_m_idB\t\n\007_m_nameB\007\n\005_m_lvB\016\n\014_m"
  "_moneygoldB\020\n\016_m_moneysilverB\010\n\006_m_vipB\016"
  "\n\014_m_notalkutcB\016\n\014_m_createutc\"\327\001\n\007db_ro"
  "le\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001\022#\n\006m_base\030\002 \001(\0132\016."
  "pbdb.db_briefH\001\210\001\001\022*\n\nm_recharge\030\003 \003(\0132\026"
  ".pbdb.db_role.recharge\032T\n\010recharge\022\031\n\014m_"
  "rechargeid\030\001 \001(\005H\000\210\001\001\022\022\n\005m_utc\030\002 \001(\005H\001\210\001"
  "\001B\017\n\r_m_rechargeidB\010\n\006_m_utcB\007\n\005_m_idB\t\n"
  "\007_m_base\"\236\001\n\004item\022\021\n\004m_id\030\001 \001(\005H\000\210\001\001\022\022\n\005"
  "m_tid\030\002 \001(\005H\001\210\001\001\022\024\n\007m_count\030\003 \001(\005H\002\210\001\001\022\021"
  "\n\004m_lv\030\004 \001(\005H\003\210\001\001\022\023\n\006m_star\030\005 \001(\005H\004\210\001\001B\007"
  "\n\005_m_idB\010\n\006_m_tidB\n\n\010_m_countB\007\n\005_m_lvB\t"
  "\n\007_m_star\"\254\001\n\006db_bag\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001\022"
  ")\n\007m_items\030\002 \003(\0132\030.pbdb.db_bag.MItemsEnt"
  "ry\022\024\n\007m_maxid\030\003 \001(\005H\001\210\001\001\0329\n\013MItemsEntry\022"
  "\013\n\003key\030\001 \001(\005\022\031\n\005value\030\002 \001(\0132\n.pbdb.item:"
  "\0028\001B\007\n\005_m_idB\n\n\010_m_maxid\"m\n\013db_keyvalue\022"
  "\021\n\004m_id\030\001 \001(\003H\000\210\001\001\022\024\n\007m_value\030\002 \001(\tH\001\210\001\001"
  "\" \n\003ekv\022\010\n\004none\020\000\022\017\n\013account_ban\020\001B\007\n\005_m"
  "_idB\n\n\010_m_value\"\215\001\n\017db_rolekeyvalue\022\021\n\004m"
  "_id\030\001 \001(\003H\000\210\001\001\0220\n\006m_data\030\002 \003(\0132 .pbdb.db"
  "_rolekeyvalue.MDataEntry\032,\n\nMDataEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\007\n\005_m_id\""
  "R\n\010mailitem\022\026\n\tm_itemtid\030\001 \001(\005H\000\210\001\001\022\024\n\007m"
  "_count\030\002 \001(\005H\001\210\001\001B\014\n\n_m_itemtidB\n\n\010_m_co"
  "unt\"\223\002\n\004mail\022\021\n\004m_id\030\001 \001(\005H\000\210\001\001\022\030\n\013m_cre"
  "ateutc\030\002 \001(\005H\001\210\001\001\022\022\n\005m_tid\030\003 \001(\005H\002\210\001\001\022\024\n"
  "\007m_prams\030\004 \001(\tH\003\210\001\001\022\026\n\tm_content\030\005 \001(\tH\004"
  "\210\001\001\022\037\n\007m_items\030\006 \003(\0132\016.pbdb.mailitem\022\023\n\006"
  "m_read\030\007 \001(\010H\005\210\001\001\022\023\n\006m_draw\030\010 \001(\010H\006\210\001\001B\007"
  "\n\005_m_idB\016\n\014_m_createutcB\010\n\006_m_tidB\n\n\010_m_"
  "pramsB\014\n\n_m_contentB\t\n\007_m_readB\t\n\007_m_dra"
  "w\"\211\001\n\007db_mail\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001\022(\n\006m_ma"
  "il\030\002 \003(\0132\030.pbdb.db_mail.MMailEntry\0328\n\nMM"
  "ailEntry\022\013\n\003key\030\001 \001(\005\022\031\n\005value\030\002 \001(\0132\n.p"
  "bdb.mail:\0028\001B\007\n\005_m_id\"\177\n\010db_guild\022\021\n\004m_i"
  "d\030\001 \001(\003H\000\210\001\001\022\024\n\007m_guild\030\002 \001(\tH\001\210\001\001\022\025\n\010m_"
  "leader\030\003 \001(\003H\002\210\001\001\022\021\n\tm_members\030\004 \003(\003B\007\n\005"
  "_m_idB\n\n\010_m_guildB\013\n\t_m_leader\"\241\001\n\tdb_no"
  "tice\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001\022\025\n\010m_notice\030\002 \001("
  "\tH\001\210\001\001\022\030\n\013m_starttime\030\003 \001(\005H\002\210\001\001\022\031\n\014m_fi"
  "nishtime\030\004 \001(\005H\003\210\001\001B\007\n\005_m_idB\013\n\t_m_notic"
  "eB\016\n\014_m_starttimeB\017\n\r_m_finishtime\"L\n\010ra"
  "nkitem\022\024\n\007m_value\030\001 \001(\003H\000\210\001\001\022\023\n\006m_time\030\002"
  " \001(\005H\001\210\001\001B\n\n\010_m_valueB\t\n\007_m_time\"\230\001\n\013db_"
  "ranklist\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001\022.\n\007m_items\030\002"
  " \003(\0132\035.pbdb.db_ranklist.MItemsEntry\032=\n\013M"
  "ItemsEntry\022\013\n\003key\030\001 \001(\005\022\035\n\005value\030\002 \001(\0132\016"
  ".pbdb.rankitem:\0028\001B\007\n\005_m_id\"\231\004\n\013db_activ"
  "ity\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001\022\022\n\005m_beg\030\002 \001(\005H\001\210"
  "\001\001\022\022\n\005m_end\030\003 \001(\005H\002\210\001\001\022\024\n\007m_start\030\004 \001(\010H"
  "\003\210\001\001\022\025\n\010m_finish\030\005 \001(\010H\004\210\001\001\022\031\n\014m_calenda"
  "rid\030\006 \001(\005H\005\210\001\001\022@\n\020m_drawcompliance\030\007 \003(\013"
  "2&.pbdb.db_activity.MDrawcomplianceEntry"
  "\032\243\001\n\016drawcompliance\022\024\n\007m_count\030\001 \001(\005H\000\210\001"
  "\001\022\?\n\010m_reward\030\002 \003(\0132-.pbdb.db_activity.d"
  "rawcompliance.MRewardEntry\032.\n\014MRewardEnt"
  "ry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\010:\0028\001B\n\n\010_m"
  "_count\032X\n\024MDrawcomplianceEntry\022\013\n\003key\030\001 "
  "\001(\003\022/\n\005value\030\002 \001(\0132 .pbdb.db_activity.dr"
  "awcompliance:\0028\001B\007\n\005_m_idB\010\n\006_m_begB\010\n\006_"
  "m_endB\n\n\010_m_startB\013\n\t_m_finishB\017\n\r_m_cal"
  "endarid\"\367\004\n\007db_task\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001\0220"
  "\n\nm_rundatas\030\002 \003(\0132\034.pbdb.db_task.MRunda"
  "tasEntry\022<\n\020m_completeddatas\030\003 \003(\0132\".pbd"
  "b.db_task.MCompleteddatasEntry\032u\n\rdata_s"
  "chedule\022\023\n\006m_type\030\001 \001(\005H\000\210\001\001\022\024\n\007m_value\030"
  "\002 \001(\005H\001\210\001\001\022\025\n\010m_sumint\030\003 \001(\005H\002\210\001\001B\t\n\007_m_"
  "typeB\n\n\010_m_valueB\013\n\t_m_sumint\032\326\001\n\004data\022\025"
  "\n\010m_taskid\030\001 \001(\005H\000\210\001\001\022\031\n\014m_receiveutc\030\002 "
  "\001(\005H\001\210\001\001\022\027\n\nm_finshutc\030\003 \001(\005H\002\210\001\001\0220\n\013m_s"
  "chedules\030\004 \003(\0132\033.pbdb.db_task.data_sched"
  "ule\022\026\n\tm_receive\030\005 \001(\010H\003\210\001\001B\013\n\t_m_taskid"
  "B\017\n\r_m_receiveutcB\r\n\013_m_finshutcB\014\n\n_m_r"
  "eceive\032D\n\016MRundatasEntry\022\013\n\003key\030\001 \001(\005\022!\n"
  "\005value\030\002 \001(\0132\022.pbdb.db_task.data:\0028\001\032J\n\024"
  "MCompleteddatasEntry\022\013\n\003key\030\001 \001(\005\022!\n\005val"
  "ue\030\002 \001(\0132\022.pbdb.db_task.data:\0028\001B\007\n\005_m_i"
  "d\"\217\001\n\013db_calendar\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001\022\023\n\006"
  "m_time\030\002 \001(\003H\001\210\001\001\022\024\n\007m_start\030\003 \001(\010H\002\210\001\001\022"
  "\025\n\010m_finish\030\004 \001(\010H\003\210\001\001B\007\n\005_m_idB\t\n\007_m_ti"
  "meB\n\n\010_m_startB\013\n\t_m_finish\"\263\002\n\013db_famil"
  "yer\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001\022\026\n\tm_joinutc\030\002 \001("
  "\005H\001\210\001\001\022\032\n\rm_lastsignutc\030\003 \001(\005H\002\210\001\001\022\033\n\016m_"
  "lastleaveutc\030\004 \001(\005H\003\210\001\001\0224\n\nm_position\030\005 "
  "\001(\0162\033.pbdb.db_familyer.epositionH\004\210\001\001\"\?\n"
  "\teposition\022\010\n\004none\020\000\022\n\n\006leader\020\001\022\016\n\ncoun"
  "sellor\020\002\022\014\n\010ordinary\020\003B\007\n\005_m_idB\014\n\n_m_jo"
  "inutcB\020\n\016_m_lastsignutcB\021\n\017_m_lastleaveu"
  "tcB\r\n\013_m_position\"\366\001\n\tdb_family\022\021\n\004m_id\030"
  "\001 \001(\003H\000\210\001\001\022\030\n\013m_createutc\030\002 \001(\005H\001\210\001\001\022\023\n\006"
  "m_name\030\003 \001(\tH\002\210\001\001\022\025\n\010m_leader\030\004 \001(\003H\003\210\001\001"
  "\022\021\n\004m_lv\030\005 \001(\005H\004\210\001\001\022\022\n\005m_exp\030\006 \001(\005H\005\210\001\001\022"
  "\020\n\010m_member\030\007 \003(\003\022\023\n\013m_applylist\030\010 \003(\003B\007"
  "\n\005_m_idB\016\n\014_m_createutcB\t\n\007_m_nameB\013\n\t_m"
  "_leaderB\007\n\005_m_lvB\010\n\006_m_exp\"S\n\ndb_friends"
  "\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001\022\021\n\tm_friends\030\002 \003(\003\022\026"
  "\n\016m_applyfriends\030\003 \003(\003B\007\n\005_m_id*\343\002\n\007ENUM"
  "_DB\022\023\n\017ENUM_DB_ACCOUNT\020\000\022\020\n\014ENUM_DB_ROLE"
  "\020\001\022\021\n\rENUM_DB_BRIEF\020\002\022\017\n\013ENUM_DB_BAG\020\003\022\024"
  "\n\020ENUM_DB_KEYVALUE\020\004\022\020\n\014ENUM_DB_MAIL\020\005\022\021"
  "\n\rENUM_DB_GUILD\020\006\022\022\n\016ENUM_DB_NOTICE\020\007\022\024\n"
  "\020ENUM_DB_RANKLIST\020\010\022\024\n\020ENUM_DB_ACTIVITY\020"
  "\t\022\020\n\014ENUM_DB_TASK\020\n\022\024\n\020ENUM_DB_CALENDAR\020"
  "\013\022\030\n\024ENUM_DB_ROLEKEYVALUE\020\014\022\022\n\016ENUM_DB_F"
  "AMILY\020\r\022\024\n\020ENUM_DB_FAMILYER\020\016\022\023\n\017ENUM_DB"
  "_FRIENDS\020\017\022\021\n\rENUM_DB_COUNT\020\020*\036\n\terankli"
  "st\022\006\n\002lv\020\000\022\t\n\005count\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_db_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_db_2eproto_sccs[32] = {
  &scc_info_db_account_db_2eproto.base,
  &scc_info_db_activity_db_2eproto.base,
  &scc_info_db_activity_MDrawcomplianceEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_activity_drawcompliance_db_2eproto.base,
  &scc_info_db_activity_drawcompliance_MRewardEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_bag_db_2eproto.base,
  &scc_info_db_bag_MItemsEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_brief_db_2eproto.base,
  &scc_info_db_calendar_db_2eproto.base,
  &scc_info_db_family_db_2eproto.base,
  &scc_info_db_familyer_db_2eproto.base,
  &scc_info_db_friends_db_2eproto.base,
  &scc_info_db_guild_db_2eproto.base,
  &scc_info_db_keyvalue_db_2eproto.base,
  &scc_info_db_mail_db_2eproto.base,
  &scc_info_db_mail_MMailEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_notice_db_2eproto.base,
  &scc_info_db_ranklist_db_2eproto.base,
  &scc_info_db_ranklist_MItemsEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_role_db_2eproto.base,
  &scc_info_db_role_recharge_db_2eproto.base,
  &scc_info_db_rolekeyvalue_db_2eproto.base,
  &scc_info_db_rolekeyvalue_MDataEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_task_db_2eproto.base,
  &scc_info_db_task_MCompleteddatasEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_task_MRundatasEntry_DoNotUse_db_2eproto.base,
  &scc_info_db_task_data_db_2eproto.base,
  &scc_info_db_task_data_schedule_db_2eproto.base,
  &scc_info_item_db_2eproto.base,
  &scc_info_mail_db_2eproto.base,
  &scc_info_mailitem_db_2eproto.base,
  &scc_info_rankitem_db_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_db_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_2eproto = {
  false, false, descriptor_table_protodef_db_2eproto, "db.proto", 4709,
  &descriptor_table_db_2eproto_once, descriptor_table_db_2eproto_sccs, descriptor_table_db_2eproto_deps, 32, 0,
  schemas, file_default_instances, TableStruct_db_2eproto::offsets,
  file_level_metadata_db_2eproto, 32, file_level_enum_descriptors_db_2eproto, file_level_service_descriptors_db_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_db_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_db_2eproto)), true);
namespace pbdb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* db_keyvalue_ekv_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[0];
}
bool db_keyvalue_ekv_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr db_keyvalue_ekv db_keyvalue::none;
constexpr db_keyvalue_ekv db_keyvalue::account_ban;
constexpr db_keyvalue_ekv db_keyvalue::ekv_MIN;
constexpr db_keyvalue_ekv db_keyvalue::ekv_MAX;
constexpr int db_keyvalue::ekv_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* db_familyer_eposition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[1];
}
bool db_familyer_eposition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr db_familyer_eposition db_familyer::none;
constexpr db_familyer_eposition db_familyer::leader;
constexpr db_familyer_eposition db_familyer::counsellor;
constexpr db_familyer_eposition db_familyer::ordinary;
constexpr db_familyer_eposition db_familyer::eposition_MIN;
constexpr db_familyer_eposition db_familyer::eposition_MAX;
constexpr int db_familyer::eposition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_DB_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[2];
}
bool ENUM_DB_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eranklist_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_db_2eproto);
  return file_level_enum_descriptors_db_2eproto[3];
}
bool eranklist_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void db_account::InitAsDefaultInstance() {
}
class db_account::_Internal {
 public:
  using HasBits = decltype(std::declval<db_account>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_passworld(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_area(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

db_account::db_account(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_account)
}
db_account::db_account(const db_account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_account()) {
    m_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_account(),
      GetArena());
  }
  m_passworld_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_passworld()) {
    m_passworld_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_passworld(),
      GetArena());
  }
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_area_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_area_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_account)
}

void db_account::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_account_db_2eproto.base);
  m_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_passworld_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_area_) -
      reinterpret_cast<char*>(&m_id_)) + sizeof(m_area_));
}

db_account::~db_account() {
  // @@protoc_insertion_point(destructor:pbdb.db_account)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_account::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_passworld_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_account::ArenaDtor(void* object) {
  db_account* _this = reinterpret_cast< db_account* >(object);
  (void)_this;
}
void db_account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_account& db_account::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_account_db_2eproto.base);
  return *internal_default_instance();
}


void db_account::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_account_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      m_passworld_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_area_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_area_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 m_roleid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_roleid(&has_bits);
          m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_m_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.db_account.m_account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_passworld = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_m_passworld();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.db_account.m_passworld"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_m_area(&has_bits);
          m_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // int64 m_roleid = 2;
  if (_internal_has_m_roleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_m_roleid(), target);
  }

  // string m_account = 3;
  if (_internal_has_m_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_account().data(), static_cast<int>(this->_internal_m_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_account.m_account");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_m_account(), target);
  }

  // string m_passworld = 4;
  if (_internal_has_m_passworld()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_passworld().data(), static_cast<int>(this->_internal_m_passworld().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_account.m_passworld");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_m_passworld(), target);
  }

  // int32 m_area = 5;
  if (_internal_has_m_area()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_m_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_account)
  return target;
}

size_t db_account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // string m_account = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_account());
    }

    // string m_passworld = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_passworld());
    }

    // int64 m_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_id());
    }

    // int64 m_roleid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_roleid());
    }

    // int32 m_area = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_area());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_account::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_account)
  GOOGLE_DCHECK_NE(&from, this);
  const db_account* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_account)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_account)
    MergeFrom(*source);
  }
}

void db_account::MergeFrom(const db_account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_account(from._internal_m_account());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_m_passworld(from._internal_m_passworld());
    }
    if (cached_has_bits & 0x00000004u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_roleid_ = from.m_roleid_;
    }
    if (cached_has_bits & 0x00000010u) {
      m_area_ = from.m_area_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_account::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_account::CopyFrom(const db_account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_account::IsInitialized() const {
  return true;
}

void db_account::InternalSwap(db_account* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_account_.Swap(&other->m_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  m_passworld_.Swap(&other->m_passworld_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_account, m_area_)
      + sizeof(db_account::m_area_)
      - PROTOBUF_FIELD_OFFSET(db_account, m_id_)>(
          reinterpret_cast<char*>(&m_id_),
          reinterpret_cast<char*>(&other->m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_account::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_brief::InitAsDefaultInstance() {
}
class db_brief::_Internal {
 public:
  using HasBits = decltype(std::declval<db_brief>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_lv(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_moneygold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_moneysilver(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_m_vip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_m_notalkutc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_m_createutc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

db_brief::db_brief(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_brief)
}
db_brief::db_brief(const db_brief& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_name()) {
    m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_name(),
      GetArena());
  }
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_createutc_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_createutc_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_brief)
}

void db_brief::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_brief_db_2eproto.base);
  m_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_createutc_) -
      reinterpret_cast<char*>(&m_id_)) + sizeof(m_createutc_));
}

db_brief::~db_brief() {
  // @@protoc_insertion_point(destructor:pbdb.db_brief)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_brief::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_brief::ArenaDtor(void* object) {
  db_brief* _this = reinterpret_cast< db_brief* >(object);
  (void)_this;
}
void db_brief::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_brief::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_brief& db_brief::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_brief_db_2eproto.base);
  return *internal_default_instance();
}


void db_brief::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_brief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_createutc_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_createutc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_brief::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_m_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.db_brief.m_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_lv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_lv(&has_bits);
          m_lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_moneygold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_moneygold(&has_bits);
          m_moneygold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_moneysilver = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_m_moneysilver(&has_bits);
          m_moneysilver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_vip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_m_vip(&has_bits);
          m_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_notalkutc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_m_notalkutc(&has_bits);
          m_notalkutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_createutc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_m_createutc(&has_bits);
          m_createutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_brief::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_brief)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // string m_name = 2;
  if (_internal_has_m_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_name().data(), static_cast<int>(this->_internal_m_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_brief.m_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_name(), target);
  }

  // int32 m_lv = 3;
  if (_internal_has_m_lv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_lv(), target);
  }

  // int32 m_moneygold = 4;
  if (_internal_has_m_moneygold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_moneygold(), target);
  }

  // int32 m_moneysilver = 5;
  if (_internal_has_m_moneysilver()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_m_moneysilver(), target);
  }

  // int32 m_vip = 6;
  if (_internal_has_m_vip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_m_vip(), target);
  }

  // int32 m_notalkutc = 7;
  if (_internal_has_m_notalkutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_m_notalkutc(), target);
  }

  // int32 m_createutc = 8;
  if (_internal_has_m_createutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_m_createutc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_brief)
  return target;
}

size_t db_brief::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_brief)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // string m_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_name());
    }

    // int64 m_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_id());
    }

    // int32 m_lv = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_lv());
    }

    // int32 m_moneygold = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_moneygold());
    }

    // int32 m_moneysilver = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_moneysilver());
    }

    // int32 m_vip = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_vip());
    }

    // int32 m_notalkutc = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_notalkutc());
    }

    // int32 m_createutc = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_createutc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_brief::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_brief)
  GOOGLE_DCHECK_NE(&from, this);
  const db_brief* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_brief>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_brief)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_brief)
    MergeFrom(*source);
  }
}

void db_brief::MergeFrom(const db_brief& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_brief)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_name(from._internal_m_name());
    }
    if (cached_has_bits & 0x00000002u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_lv_ = from.m_lv_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_moneygold_ = from.m_moneygold_;
    }
    if (cached_has_bits & 0x00000010u) {
      m_moneysilver_ = from.m_moneysilver_;
    }
    if (cached_has_bits & 0x00000020u) {
      m_vip_ = from.m_vip_;
    }
    if (cached_has_bits & 0x00000040u) {
      m_notalkutc_ = from.m_notalkutc_;
    }
    if (cached_has_bits & 0x00000080u) {
      m_createutc_ = from.m_createutc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_brief::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_brief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_brief::CopyFrom(const db_brief& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_brief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_brief::IsInitialized() const {
  return true;
}

void db_brief::InternalSwap(db_brief* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_name_.Swap(&other->m_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_brief, m_createutc_)
      + sizeof(db_brief::m_createutc_)
      - PROTOBUF_FIELD_OFFSET(db_brief, m_id_)>(
          reinterpret_cast<char*>(&m_id_),
          reinterpret_cast<char*>(&other->m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_brief::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_role_recharge::InitAsDefaultInstance() {
}
class db_role_recharge::_Internal {
 public:
  using HasBits = decltype(std::declval<db_role_recharge>()._has_bits_);
  static void set_has_m_rechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

db_role_recharge::db_role_recharge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_role.recharge)
}
db_role_recharge::db_role_recharge(const db_role_recharge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_rechargeid_, &from.m_rechargeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_utc_) -
    reinterpret_cast<char*>(&m_rechargeid_)) + sizeof(m_utc_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_role.recharge)
}

void db_role_recharge::SharedCtor() {
  ::memset(&m_rechargeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_utc_) -
      reinterpret_cast<char*>(&m_rechargeid_)) + sizeof(m_utc_));
}

db_role_recharge::~db_role_recharge() {
  // @@protoc_insertion_point(destructor:pbdb.db_role.recharge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_role_recharge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_role_recharge::ArenaDtor(void* object) {
  db_role_recharge* _this = reinterpret_cast< db_role_recharge* >(object);
  (void)_this;
}
void db_role_recharge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_role_recharge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_role_recharge& db_role_recharge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_role_recharge_db_2eproto.base);
  return *internal_default_instance();
}


void db_role_recharge::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_role.recharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_rechargeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_utc_) -
        reinterpret_cast<char*>(&m_rechargeid_)) + sizeof(m_utc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_role_recharge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_rechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_rechargeid(&has_bits);
          m_rechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_utc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_utc(&has_bits);
          m_utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_role_recharge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_role.recharge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_rechargeid = 1;
  if (_internal_has_m_rechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_rechargeid(), target);
  }

  // int32 m_utc = 2;
  if (_internal_has_m_utc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_utc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_role.recharge)
  return target;
}

size_t db_role_recharge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_role.recharge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 m_rechargeid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_rechargeid());
    }

    // int32 m_utc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_utc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_role_recharge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_role.recharge)
  GOOGLE_DCHECK_NE(&from, this);
  const db_role_recharge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_role_recharge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_role.recharge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_role.recharge)
    MergeFrom(*source);
  }
}

void db_role_recharge::MergeFrom(const db_role_recharge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_role.recharge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_rechargeid_ = from.m_rechargeid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_utc_ = from.m_utc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_role_recharge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_role.recharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role_recharge::CopyFrom(const db_role_recharge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_role.recharge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role_recharge::IsInitialized() const {
  return true;
}

void db_role_recharge::InternalSwap(db_role_recharge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_role_recharge, m_utc_)
      + sizeof(db_role_recharge::m_utc_)
      - PROTOBUF_FIELD_OFFSET(db_role_recharge, m_rechargeid_)>(
          reinterpret_cast<char*>(&m_rechargeid_),
          reinterpret_cast<char*>(&other->m_rechargeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_role_recharge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_role::InitAsDefaultInstance() {
  ::pbdb::_db_role_default_instance_._instance.get_mutable()->m_base_ = const_cast< ::pbdb::db_brief*>(
      ::pbdb::db_brief::internal_default_instance());
}
class db_role::_Internal {
 public:
  using HasBits = decltype(std::declval<db_role>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbdb::db_brief& m_base(const db_role* msg);
  static void set_has_m_base(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pbdb::db_brief&
db_role::_Internal::m_base(const db_role* msg) {
  return *msg->m_base_;
}
db_role::db_role(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_recharge_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_role)
}
db_role::db_role(const db_role& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_recharge_(from.m_recharge_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_base()) {
    m_base_ = new ::pbdb::db_brief(*from.m_base_);
  } else {
    m_base_ = nullptr;
  }
  m_id_ = from.m_id_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_role)
}

void db_role::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_role_db_2eproto.base);
  ::memset(&m_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_id_) -
      reinterpret_cast<char*>(&m_base_)) + sizeof(m_id_));
}

db_role::~db_role() {
  // @@protoc_insertion_point(destructor:pbdb.db_role)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_role::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete m_base_;
}

void db_role::ArenaDtor(void* object) {
  db_role* _this = reinterpret_cast< db_role* >(object);
  (void)_this;
}
void db_role::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_role::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_role& db_role::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_role_db_2eproto.base);
  return *internal_default_instance();
}


void db_role::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_role)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_recharge_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && m_base_ != nullptr) {
      delete m_base_;
    }
    m_base_ = nullptr;
  }
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_role::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbdb.db_brief m_base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbdb.db_role.recharge m_recharge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_recharge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_role::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_role)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // .pbdb.db_brief m_base = 2;
  if (_internal_has_m_base()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::m_base(this), target, stream);
  }

  // repeated .pbdb.db_role.recharge m_recharge = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_recharge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_m_recharge(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_role)
  return target;
}

size_t db_role::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_role)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_role.recharge m_recharge = 3;
  total_size += 1UL * this->_internal_m_recharge_size();
  for (const auto& msg : this->m_recharge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .pbdb.db_brief m_base = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *m_base_);
    }

    // int64 m_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_role::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_role)
  GOOGLE_DCHECK_NE(&from, this);
  const db_role* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_role>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_role)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_role)
    MergeFrom(*source);
  }
}

void db_role::MergeFrom(const db_role& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_role)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_recharge_.MergeFrom(from.m_recharge_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_m_base()->::pbdb::db_brief::MergeFrom(from._internal_m_base());
    }
    if (cached_has_bits & 0x00000002u) {
      m_id_ = from.m_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_role::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_role::CopyFrom(const db_role& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_role::IsInitialized() const {
  return true;
}

void db_role::InternalSwap(db_role* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_recharge_.InternalSwap(&other->m_recharge_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_role, m_id_)
      + sizeof(db_role::m_id_)
      - PROTOBUF_FIELD_OFFSET(db_role, m_base_)>(
          reinterpret_cast<char*>(&m_base_),
          reinterpret_cast<char*>(&other->m_base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_role::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void item::InitAsDefaultInstance() {
}
class item::_Internal {
 public:
  using HasBits = decltype(std::declval<item>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_lv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_star(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

item::item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.item)
}
item::item(const item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_star_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_star_));
  // @@protoc_insertion_point(copy_constructor:pbdb.item)
}

void item::SharedCtor() {
  ::memset(&m_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_star_) -
      reinterpret_cast<char*>(&m_id_)) + sizeof(m_star_));
}

item::~item() {
  // @@protoc_insertion_point(destructor:pbdb.item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void item::ArenaDtor(void* object) {
  item* _this = reinterpret_cast< item* >(object);
  (void)_this;
}
void item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const item& item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_item_db_2eproto.base);
  return *internal_default_instance();
}


void item::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_star_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_star_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_tid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_tid(&has_bits);
          m_tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_count(&has_bits);
          m_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_lv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_lv(&has_bits);
          m_lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_star = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_m_star(&has_bits);
          m_star_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_id(), target);
  }

  // int32 m_tid = 2;
  if (_internal_has_m_tid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_tid(), target);
  }

  // int32 m_count = 3;
  if (_internal_has_m_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_count(), target);
  }

  // int32 m_lv = 4;
  if (_internal_has_m_lv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_lv(), target);
  }

  // int32 m_star = 5;
  if (_internal_has_m_star()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_m_star(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.item)
  return target;
}

size_t item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // int32 m_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_id());
    }

    // int32 m_tid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_tid());
    }

    // int32 m_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_count());
    }

    // int32 m_lv = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_lv());
    }

    // int32 m_star = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_star());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.item)
  GOOGLE_DCHECK_NE(&from, this);
  const item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.item)
    MergeFrom(*source);
  }
}

void item::MergeFrom(const item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_tid_ = from.m_tid_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_count_ = from.m_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_lv_ = from.m_lv_;
    }
    if (cached_has_bits & 0x00000010u) {
      m_star_ = from.m_star_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item::CopyFrom(const item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item::IsInitialized() const {
  return true;
}

void item::InternalSwap(item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(item, m_star_)
      + sizeof(item::m_star_)
      - PROTOBUF_FIELD_OFFSET(item, m_id_)>(
          reinterpret_cast<char*>(&m_id_),
          reinterpret_cast<char*>(&other->m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

db_bag_MItemsEntry_DoNotUse::db_bag_MItemsEntry_DoNotUse() {}
db_bag_MItemsEntry_DoNotUse::db_bag_MItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_bag_MItemsEntry_DoNotUse::MergeFrom(const db_bag_MItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_bag_MItemsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_bag_MItemsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void db_bag::InitAsDefaultInstance() {
}
class db_bag::_Internal {
 public:
  using HasBits = decltype(std::declval<db_bag>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_maxid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

db_bag::db_bag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_bag)
}
db_bag::db_bag(const db_bag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_items_.MergeFrom(from.m_items_);
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_maxid_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_maxid_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_bag)
}

void db_bag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_bag_db_2eproto.base);
  ::memset(&m_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_maxid_) -
      reinterpret_cast<char*>(&m_id_)) + sizeof(m_maxid_));
}

db_bag::~db_bag() {
  // @@protoc_insertion_point(destructor:pbdb.db_bag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_bag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_bag::ArenaDtor(void* object) {
  db_bag* _this = reinterpret_cast< db_bag* >(object);
  (void)_this;
}
void db_bag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_bag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_bag& db_bag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_bag_db_2eproto.base);
  return *internal_default_instance();
}


void db_bag::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_bag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_maxid_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_maxid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_bag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .pbdb.item> m_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_items_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 m_maxid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_maxid(&has_bits);
          m_maxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_bag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_bag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // map<int32, .pbdb.item> m_items = 2;
  if (!this->_internal_m_items().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_m_items().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_m_items().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >::const_iterator
          it = this->_internal_m_items().begin();
          it != this->_internal_m_items().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_bag_MItemsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >::const_iterator
          it = this->_internal_m_items().begin();
          it != this->_internal_m_items().end(); ++it) {
        target = db_bag_MItemsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // int32 m_maxid = 3;
  if (_internal_has_m_maxid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_maxid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_bag)
  return target;
}

size_t db_bag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_bag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.item> m_items = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_items_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::item >::const_iterator
      it = this->_internal_m_items().begin();
      it != this->_internal_m_items().end(); ++it) {
    total_size += db_bag_MItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 m_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_id());
    }

    // int32 m_maxid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_maxid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_bag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_bag)
  GOOGLE_DCHECK_NE(&from, this);
  const db_bag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_bag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_bag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_bag)
    MergeFrom(*source);
  }
}

void db_bag::MergeFrom(const db_bag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_bag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_items_.MergeFrom(from.m_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_maxid_ = from.m_maxid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_bag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_bag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_bag::CopyFrom(const db_bag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_bag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_bag::IsInitialized() const {
  return true;
}

void db_bag::InternalSwap(db_bag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_items_.Swap(&other->m_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_bag, m_maxid_)
      + sizeof(db_bag::m_maxid_)
      - PROTOBUF_FIELD_OFFSET(db_bag, m_id_)>(
          reinterpret_cast<char*>(&m_id_),
          reinterpret_cast<char*>(&other->m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_bag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_keyvalue::InitAsDefaultInstance() {
}
class db_keyvalue::_Internal {
 public:
  using HasBits = decltype(std::declval<db_keyvalue>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_keyvalue::db_keyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_keyvalue)
}
db_keyvalue::db_keyvalue(const db_keyvalue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_value()) {
    m_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_value(),
      GetArena());
  }
  m_id_ = from.m_id_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_keyvalue)
}

void db_keyvalue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_keyvalue_db_2eproto.base);
  m_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_id_ = PROTOBUF_LONGLONG(0);
}

db_keyvalue::~db_keyvalue() {
  // @@protoc_insertion_point(destructor:pbdb.db_keyvalue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_keyvalue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_keyvalue::ArenaDtor(void* object) {
  db_keyvalue* _this = reinterpret_cast< db_keyvalue* >(object);
  (void)_this;
}
void db_keyvalue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_keyvalue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_keyvalue& db_keyvalue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_keyvalue_db_2eproto.base);
  return *internal_default_instance();
}


void db_keyvalue::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_keyvalue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_value_.ClearNonDefaultToEmpty();
  }
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_keyvalue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_m_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.db_keyvalue.m_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_keyvalue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_keyvalue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // string m_value = 2;
  if (_internal_has_m_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_value().data(), static_cast<int>(this->_internal_m_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_keyvalue.m_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_keyvalue)
  return target;
}

size_t db_keyvalue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_keyvalue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string m_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_value());
    }

    // int64 m_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_keyvalue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_keyvalue)
  GOOGLE_DCHECK_NE(&from, this);
  const db_keyvalue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_keyvalue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_keyvalue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_keyvalue)
    MergeFrom(*source);
  }
}

void db_keyvalue::MergeFrom(const db_keyvalue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_keyvalue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_value(from._internal_m_value());
    }
    if (cached_has_bits & 0x00000002u) {
      m_id_ = from.m_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_keyvalue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_keyvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_keyvalue::CopyFrom(const db_keyvalue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_keyvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_keyvalue::IsInitialized() const {
  return true;
}

void db_keyvalue::InternalSwap(db_keyvalue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_value_.Swap(&other->m_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(m_id_, other->m_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_keyvalue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

db_rolekeyvalue_MDataEntry_DoNotUse::db_rolekeyvalue_MDataEntry_DoNotUse() {}
db_rolekeyvalue_MDataEntry_DoNotUse::db_rolekeyvalue_MDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_rolekeyvalue_MDataEntry_DoNotUse::MergeFrom(const db_rolekeyvalue_MDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_rolekeyvalue_MDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_rolekeyvalue_MDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void db_rolekeyvalue::InitAsDefaultInstance() {
}
class db_rolekeyvalue::_Internal {
 public:
  using HasBits = decltype(std::declval<db_rolekeyvalue>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_rolekeyvalue::db_rolekeyvalue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_rolekeyvalue)
}
db_rolekeyvalue::db_rolekeyvalue(const db_rolekeyvalue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_data_.MergeFrom(from.m_data_);
  m_id_ = from.m_id_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_rolekeyvalue)
}

void db_rolekeyvalue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_rolekeyvalue_db_2eproto.base);
  m_id_ = PROTOBUF_LONGLONG(0);
}

db_rolekeyvalue::~db_rolekeyvalue() {
  // @@protoc_insertion_point(destructor:pbdb.db_rolekeyvalue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_rolekeyvalue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_rolekeyvalue::ArenaDtor(void* object) {
  db_rolekeyvalue* _this = reinterpret_cast< db_rolekeyvalue* >(object);
  (void)_this;
}
void db_rolekeyvalue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_rolekeyvalue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_rolekeyvalue& db_rolekeyvalue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_rolekeyvalue_db_2eproto.base);
  return *internal_default_instance();
}


void db_rolekeyvalue::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_rolekeyvalue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_data_.Clear();
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_rolekeyvalue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> m_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_rolekeyvalue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_rolekeyvalue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // map<string, string> m_data = 2;
  if (!this->_internal_m_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pbdb.db_rolekeyvalue.MDataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pbdb.db_rolekeyvalue.MDataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_m_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_m_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_m_data().begin();
          it != this->_internal_m_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_rolekeyvalue_MDataEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_m_data().begin();
          it != this->_internal_m_data().end(); ++it) {
        target = db_rolekeyvalue_MDataEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_rolekeyvalue)
  return target;
}

size_t db_rolekeyvalue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_rolekeyvalue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> m_data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_m_data().begin();
      it != this->_internal_m_data().end(); ++it) {
    total_size += db_rolekeyvalue_MDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 m_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_rolekeyvalue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_rolekeyvalue)
  GOOGLE_DCHECK_NE(&from, this);
  const db_rolekeyvalue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_rolekeyvalue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_rolekeyvalue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_rolekeyvalue)
    MergeFrom(*source);
  }
}

void db_rolekeyvalue::MergeFrom(const db_rolekeyvalue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_rolekeyvalue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_data_.MergeFrom(from.m_data_);
  if (from._internal_has_m_id()) {
    _internal_set_m_id(from._internal_m_id());
  }
}

void db_rolekeyvalue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_rolekeyvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_rolekeyvalue::CopyFrom(const db_rolekeyvalue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_rolekeyvalue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_rolekeyvalue::IsInitialized() const {
  return true;
}

void db_rolekeyvalue::InternalSwap(db_rolekeyvalue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_data_.Swap(&other->m_data_);
  swap(m_id_, other->m_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_rolekeyvalue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mailitem::InitAsDefaultInstance() {
}
class mailitem::_Internal {
 public:
  using HasBits = decltype(std::declval<mailitem>()._has_bits_);
  static void set_has_m_itemtid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

mailitem::mailitem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.mailitem)
}
mailitem::mailitem(const mailitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_itemtid_, &from.m_itemtid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_count_) -
    reinterpret_cast<char*>(&m_itemtid_)) + sizeof(m_count_));
  // @@protoc_insertion_point(copy_constructor:pbdb.mailitem)
}

void mailitem::SharedCtor() {
  ::memset(&m_itemtid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_count_) -
      reinterpret_cast<char*>(&m_itemtid_)) + sizeof(m_count_));
}

mailitem::~mailitem() {
  // @@protoc_insertion_point(destructor:pbdb.mailitem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mailitem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void mailitem::ArenaDtor(void* object) {
  mailitem* _this = reinterpret_cast< mailitem* >(object);
  (void)_this;
}
void mailitem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mailitem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mailitem& mailitem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mailitem_db_2eproto.base);
  return *internal_default_instance();
}


void mailitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.mailitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_itemtid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_count_) -
        reinterpret_cast<char*>(&m_itemtid_)) + sizeof(m_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mailitem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_itemtid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_itemtid(&has_bits);
          m_itemtid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_count(&has_bits);
          m_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mailitem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.mailitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_itemtid = 1;
  if (_internal_has_m_itemtid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_itemtid(), target);
  }

  // int32 m_count = 2;
  if (_internal_has_m_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.mailitem)
  return target;
}

size_t mailitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.mailitem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 m_itemtid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_itemtid());
    }

    // int32 m_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mailitem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.mailitem)
  GOOGLE_DCHECK_NE(&from, this);
  const mailitem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mailitem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.mailitem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.mailitem)
    MergeFrom(*source);
  }
}

void mailitem::MergeFrom(const mailitem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.mailitem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_itemtid_ = from.m_itemtid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_count_ = from.m_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void mailitem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.mailitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mailitem::CopyFrom(const mailitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.mailitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mailitem::IsInitialized() const {
  return true;
}

void mailitem::InternalSwap(mailitem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mailitem, m_count_)
      + sizeof(mailitem::m_count_)
      - PROTOBUF_FIELD_OFFSET(mailitem, m_itemtid_)>(
          reinterpret_cast<char*>(&m_itemtid_),
          reinterpret_cast<char*>(&other->m_itemtid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mailitem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mail::InitAsDefaultInstance() {
}
class mail::_Internal {
 public:
  using HasBits = decltype(std::declval<mail>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_createutc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_m_prams(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_content(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_read(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_m_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

mail::mail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.mail)
}
mail::mail(const mail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_items_(from.m_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_prams_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_prams()) {
    m_prams_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_prams(),
      GetArena());
  }
  m_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_content()) {
    m_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_content(),
      GetArena());
  }
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_draw_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_draw_));
  // @@protoc_insertion_point(copy_constructor:pbdb.mail)
}

void mail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_mail_db_2eproto.base);
  m_prams_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_draw_) -
      reinterpret_cast<char*>(&m_id_)) + sizeof(m_draw_));
}

mail::~mail() {
  // @@protoc_insertion_point(destructor:pbdb.mail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void mail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_prams_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mail::ArenaDtor(void* object) {
  mail* _this = reinterpret_cast< mail* >(object);
  (void)_this;
}
void mail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mail& mail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mail_db_2eproto.base);
  return *internal_default_instance();
}


void mail::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.mail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_prams_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      m_content_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_draw_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_draw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_createutc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_createutc(&has_bits);
          m_createutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_tid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_tid(&has_bits);
          m_tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_prams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_m_prams();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.mail.m_prams"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_m_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.mail.m_content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbdb.mailitem m_items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool m_read = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_m_read(&has_bits);
          m_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_draw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_m_draw(&has_bits);
          m_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.mail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_id(), target);
  }

  // int32 m_createutc = 2;
  if (_internal_has_m_createutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_createutc(), target);
  }

  // int32 m_tid = 3;
  if (_internal_has_m_tid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_tid(), target);
  }

  // string m_prams = 4;
  if (_internal_has_m_prams()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_prams().data(), static_cast<int>(this->_internal_m_prams().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.mail.m_prams");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_m_prams(), target);
  }

  // string m_content = 5;
  if (_internal_has_m_content()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_content().data(), static_cast<int>(this->_internal_m_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.mail.m_content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_m_content(), target);
  }

  // repeated .pbdb.mailitem m_items = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_m_items(i), target, stream);
  }

  // bool m_read = 7;
  if (_internal_has_m_read()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_m_read(), target);
  }

  // bool m_draw = 8;
  if (_internal_has_m_draw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_m_draw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.mail)
  return target;
}

size_t mail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.mail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.mailitem m_items = 6;
  total_size += 1UL * this->_internal_m_items_size();
  for (const auto& msg : this->m_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // string m_prams = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_prams());
    }

    // string m_content = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_content());
    }

    // int32 m_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_id());
    }

    // int32 m_createutc = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_createutc());
    }

    // int32 m_tid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_tid());
    }

    // bool m_read = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // bool m_draw = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.mail)
  GOOGLE_DCHECK_NE(&from, this);
  const mail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.mail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.mail)
    MergeFrom(*source);
  }
}

void mail::MergeFrom(const mail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.mail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_items_.MergeFrom(from.m_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_prams(from._internal_m_prams());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_m_content(from._internal_m_content());
    }
    if (cached_has_bits & 0x00000004u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_createutc_ = from.m_createutc_;
    }
    if (cached_has_bits & 0x00000010u) {
      m_tid_ = from.m_tid_;
    }
    if (cached_has_bits & 0x00000020u) {
      m_read_ = from.m_read_;
    }
    if (cached_has_bits & 0x00000040u) {
      m_draw_ = from.m_draw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void mail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail::CopyFrom(const mail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail::IsInitialized() const {
  return true;
}

void mail::InternalSwap(mail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_items_.InternalSwap(&other->m_items_);
  m_prams_.Swap(&other->m_prams_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  m_content_.Swap(&other->m_content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mail, m_draw_)
      + sizeof(mail::m_draw_)
      - PROTOBUF_FIELD_OFFSET(mail, m_id_)>(
          reinterpret_cast<char*>(&m_id_),
          reinterpret_cast<char*>(&other->m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

db_mail_MMailEntry_DoNotUse::db_mail_MMailEntry_DoNotUse() {}
db_mail_MMailEntry_DoNotUse::db_mail_MMailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_mail_MMailEntry_DoNotUse::MergeFrom(const db_mail_MMailEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_mail_MMailEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_mail_MMailEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void db_mail::InitAsDefaultInstance() {
}
class db_mail::_Internal {
 public:
  using HasBits = decltype(std::declval<db_mail>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_mail::db_mail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_mail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_mail)
}
db_mail::db_mail(const db_mail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_mail_.MergeFrom(from.m_mail_);
  m_id_ = from.m_id_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_mail)
}

void db_mail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_mail_db_2eproto.base);
  m_id_ = PROTOBUF_LONGLONG(0);
}

db_mail::~db_mail() {
  // @@protoc_insertion_point(destructor:pbdb.db_mail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_mail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_mail::ArenaDtor(void* object) {
  db_mail* _this = reinterpret_cast< db_mail* >(object);
  (void)_this;
}
void db_mail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_mail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_mail& db_mail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_mail_db_2eproto.base);
  return *internal_default_instance();
}


void db_mail::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_mail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_mail_.Clear();
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_mail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .pbdb.mail> m_mail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_mail_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_mail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_mail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // map<int32, .pbdb.mail> m_mail = 2;
  if (!this->_internal_m_mail().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_m_mail().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_m_mail().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_iterator
          it = this->_internal_m_mail().begin();
          it != this->_internal_m_mail().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_mail_MMailEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_iterator
          it = this->_internal_m_mail().begin();
          it != this->_internal_m_mail().end(); ++it) {
        target = db_mail_MMailEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_mail)
  return target;
}

size_t db_mail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_mail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.mail> m_mail = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_mail_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_iterator
      it = this->_internal_m_mail().begin();
      it != this->_internal_m_mail().end(); ++it) {
    total_size += db_mail_MMailEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 m_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_mail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_mail)
  GOOGLE_DCHECK_NE(&from, this);
  const db_mail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_mail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_mail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_mail)
    MergeFrom(*source);
  }
}

void db_mail::MergeFrom(const db_mail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_mail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_mail_.MergeFrom(from.m_mail_);
  if (from._internal_has_m_id()) {
    _internal_set_m_id(from._internal_m_id());
  }
}

void db_mail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_mail::CopyFrom(const db_mail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_mail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_mail::IsInitialized() const {
  return true;
}

void db_mail::InternalSwap(db_mail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_mail_.Swap(&other->m_mail_);
  swap(m_id_, other->m_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_mail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_guild::InitAsDefaultInstance() {
}
class db_guild::_Internal {
 public:
  using HasBits = decltype(std::declval<db_guild>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_guild(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_leader(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

db_guild::db_guild(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_guild)
}
db_guild::db_guild(const db_guild& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_members_(from.m_members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_guild_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_guild()) {
    m_guild_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_guild(),
      GetArena());
  }
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_leader_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_leader_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_guild)
}

void db_guild::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_guild_db_2eproto.base);
  m_guild_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_leader_) -
      reinterpret_cast<char*>(&m_id_)) + sizeof(m_leader_));
}

db_guild::~db_guild() {
  // @@protoc_insertion_point(destructor:pbdb.db_guild)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_guild::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_guild_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_guild::ArenaDtor(void* object) {
  db_guild* _this = reinterpret_cast< db_guild* >(object);
  (void)_this;
}
void db_guild::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_guild::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_guild& db_guild::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_guild_db_2eproto.base);
  return *internal_default_instance();
}


void db_guild::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_guild)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_guild_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_leader_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_leader_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_guild::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_guild = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_m_guild();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.db_guild.m_guild"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 m_leader = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_leader(&has_bits);
          m_leader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 m_members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_m_members(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_m_members(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_guild::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_guild)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // string m_guild = 2;
  if (_internal_has_m_guild()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_guild().data(), static_cast<int>(this->_internal_m_guild().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_guild.m_guild");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_guild(), target);
  }

  // int64 m_leader = 3;
  if (_internal_has_m_leader()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_m_leader(), target);
  }

  // repeated int64 m_members = 4;
  {
    int byte_size = _m_members_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_m_members(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_guild)
  return target;
}

size_t db_guild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_guild)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 m_members = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->m_members_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_members_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // string m_guild = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_guild());
    }

    // int64 m_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_id());
    }

    // int64 m_leader = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_leader());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_guild::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_guild)
  GOOGLE_DCHECK_NE(&from, this);
  const db_guild* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_guild>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_guild)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_guild)
    MergeFrom(*source);
  }
}

void db_guild::MergeFrom(const db_guild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_guild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_members_.MergeFrom(from.m_members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_guild(from._internal_m_guild());
    }
    if (cached_has_bits & 0x00000002u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_leader_ = from.m_leader_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_guild::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_guild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_guild::CopyFrom(const db_guild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_guild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_guild::IsInitialized() const {
  return true;
}

void db_guild::InternalSwap(db_guild* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_members_.InternalSwap(&other->m_members_);
  m_guild_.Swap(&other->m_guild_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_guild, m_leader_)
      + sizeof(db_guild::m_leader_)
      - PROTOBUF_FIELD_OFFSET(db_guild, m_id_)>(
          reinterpret_cast<char*>(&m_id_),
          reinterpret_cast<char*>(&other->m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_guild::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_notice::InitAsDefaultInstance() {
}
class db_notice::_Internal {
 public:
  using HasBits = decltype(std::declval<db_notice>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_notice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_finishtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

db_notice::db_notice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_notice)
}
db_notice::db_notice(const db_notice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_notice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_notice()) {
    m_notice_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_notice(),
      GetArena());
  }
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_finishtime_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_finishtime_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_notice)
}

void db_notice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_notice_db_2eproto.base);
  m_notice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_finishtime_) -
      reinterpret_cast<char*>(&m_id_)) + sizeof(m_finishtime_));
}

db_notice::~db_notice() {
  // @@protoc_insertion_point(destructor:pbdb.db_notice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_notice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_notice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_notice::ArenaDtor(void* object) {
  db_notice* _this = reinterpret_cast< db_notice* >(object);
  (void)_this;
}
void db_notice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_notice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_notice& db_notice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_notice_db_2eproto.base);
  return *internal_default_instance();
}


void db_notice::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_notice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_notice_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_finishtime_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_finishtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_notice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_notice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_m_notice();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.db_notice.m_notice"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_starttime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_starttime(&has_bits);
          m_starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_finishtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_finishtime(&has_bits);
          m_finishtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_notice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_notice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // string m_notice = 2;
  if (_internal_has_m_notice()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_notice().data(), static_cast<int>(this->_internal_m_notice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_notice.m_notice");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_notice(), target);
  }

  // int32 m_starttime = 3;
  if (_internal_has_m_starttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_starttime(), target);
  }

  // int32 m_finishtime = 4;
  if (_internal_has_m_finishtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_finishtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_notice)
  return target;
}

size_t db_notice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_notice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // string m_notice = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_notice());
    }

    // int64 m_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_id());
    }

    // int32 m_starttime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_starttime());
    }

    // int32 m_finishtime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_finishtime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_notice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_notice)
  GOOGLE_DCHECK_NE(&from, this);
  const db_notice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_notice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_notice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_notice)
    MergeFrom(*source);
  }
}

void db_notice::MergeFrom(const db_notice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_notice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_notice(from._internal_m_notice());
    }
    if (cached_has_bits & 0x00000002u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_starttime_ = from.m_starttime_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_finishtime_ = from.m_finishtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_notice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_notice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_notice::CopyFrom(const db_notice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_notice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_notice::IsInitialized() const {
  return true;
}

void db_notice::InternalSwap(db_notice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_notice_.Swap(&other->m_notice_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_notice, m_finishtime_)
      + sizeof(db_notice::m_finishtime_)
      - PROTOBUF_FIELD_OFFSET(db_notice, m_id_)>(
          reinterpret_cast<char*>(&m_id_),
          reinterpret_cast<char*>(&other->m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_notice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void rankitem::InitAsDefaultInstance() {
}
class rankitem::_Internal {
 public:
  using HasBits = decltype(std::declval<rankitem>()._has_bits_);
  static void set_has_m_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

rankitem::rankitem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.rankitem)
}
rankitem::rankitem(const rankitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_value_, &from.m_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_time_) -
    reinterpret_cast<char*>(&m_value_)) + sizeof(m_time_));
  // @@protoc_insertion_point(copy_constructor:pbdb.rankitem)
}

void rankitem::SharedCtor() {
  ::memset(&m_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_time_) -
      reinterpret_cast<char*>(&m_value_)) + sizeof(m_time_));
}

rankitem::~rankitem() {
  // @@protoc_insertion_point(destructor:pbdb.rankitem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void rankitem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void rankitem::ArenaDtor(void* object) {
  rankitem* _this = reinterpret_cast< rankitem* >(object);
  (void)_this;
}
void rankitem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void rankitem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rankitem& rankitem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rankitem_db_2eproto.base);
  return *internal_default_instance();
}


void rankitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.rankitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_time_) -
        reinterpret_cast<char*>(&m_value_)) + sizeof(m_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rankitem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_value(&has_bits);
          m_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_time(&has_bits);
          m_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rankitem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.rankitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_value = 1;
  if (_internal_has_m_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_value(), target);
  }

  // int32 m_time = 2;
  if (_internal_has_m_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.rankitem)
  return target;
}

size_t rankitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.rankitem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 m_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_value());
    }

    // int32 m_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rankitem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.rankitem)
  GOOGLE_DCHECK_NE(&from, this);
  const rankitem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rankitem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.rankitem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.rankitem)
    MergeFrom(*source);
  }
}

void rankitem::MergeFrom(const rankitem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.rankitem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_value_ = from.m_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_time_ = from.m_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rankitem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.rankitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rankitem::CopyFrom(const rankitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.rankitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rankitem::IsInitialized() const {
  return true;
}

void rankitem::InternalSwap(rankitem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(rankitem, m_time_)
      + sizeof(rankitem::m_time_)
      - PROTOBUF_FIELD_OFFSET(rankitem, m_value_)>(
          reinterpret_cast<char*>(&m_value_),
          reinterpret_cast<char*>(&other->m_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata rankitem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

db_ranklist_MItemsEntry_DoNotUse::db_ranklist_MItemsEntry_DoNotUse() {}
db_ranklist_MItemsEntry_DoNotUse::db_ranklist_MItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_ranklist_MItemsEntry_DoNotUse::MergeFrom(const db_ranklist_MItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_ranklist_MItemsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_ranklist_MItemsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void db_ranklist::InitAsDefaultInstance() {
}
class db_ranklist::_Internal {
 public:
  using HasBits = decltype(std::declval<db_ranklist>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_ranklist::db_ranklist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_ranklist)
}
db_ranklist::db_ranklist(const db_ranklist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_items_.MergeFrom(from.m_items_);
  m_id_ = from.m_id_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_ranklist)
}

void db_ranklist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_ranklist_db_2eproto.base);
  m_id_ = PROTOBUF_LONGLONG(0);
}

db_ranklist::~db_ranklist() {
  // @@protoc_insertion_point(destructor:pbdb.db_ranklist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_ranklist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_ranklist::ArenaDtor(void* object) {
  db_ranklist* _this = reinterpret_cast< db_ranklist* >(object);
  (void)_this;
}
void db_ranklist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_ranklist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_ranklist& db_ranklist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_ranklist_db_2eproto.base);
  return *internal_default_instance();
}


void db_ranklist::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_ranklist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_items_.Clear();
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_ranklist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .pbdb.rankitem> m_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_items_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_ranklist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_ranklist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // map<int32, .pbdb.rankitem> m_items = 2;
  if (!this->_internal_m_items().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_m_items().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_m_items().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >::const_iterator
          it = this->_internal_m_items().begin();
          it != this->_internal_m_items().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_ranklist_MItemsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >::const_iterator
          it = this->_internal_m_items().begin();
          it != this->_internal_m_items().end(); ++it) {
        target = db_ranklist_MItemsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_ranklist)
  return target;
}

size_t db_ranklist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_ranklist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.rankitem> m_items = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_items_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::rankitem >::const_iterator
      it = this->_internal_m_items().begin();
      it != this->_internal_m_items().end(); ++it) {
    total_size += db_ranklist_MItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 m_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_ranklist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_ranklist)
  GOOGLE_DCHECK_NE(&from, this);
  const db_ranklist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_ranklist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_ranklist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_ranklist)
    MergeFrom(*source);
  }
}

void db_ranklist::MergeFrom(const db_ranklist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_ranklist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_items_.MergeFrom(from.m_items_);
  if (from._internal_has_m_id()) {
    _internal_set_m_id(from._internal_m_id());
  }
}

void db_ranklist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_ranklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_ranklist::CopyFrom(const db_ranklist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_ranklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_ranklist::IsInitialized() const {
  return true;
}

void db_ranklist::InternalSwap(db_ranklist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_items_.Swap(&other->m_items_);
  swap(m_id_, other->m_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_ranklist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

db_activity_drawcompliance_MRewardEntry_DoNotUse::db_activity_drawcompliance_MRewardEntry_DoNotUse() {}
db_activity_drawcompliance_MRewardEntry_DoNotUse::db_activity_drawcompliance_MRewardEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_activity_drawcompliance_MRewardEntry_DoNotUse::MergeFrom(const db_activity_drawcompliance_MRewardEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_activity_drawcompliance_MRewardEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_activity_drawcompliance_MRewardEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void db_activity_drawcompliance::InitAsDefaultInstance() {
}
class db_activity_drawcompliance::_Internal {
 public:
  using HasBits = decltype(std::declval<db_activity_drawcompliance>()._has_bits_);
  static void set_has_m_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_activity_drawcompliance::db_activity_drawcompliance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_reward_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_activity.drawcompliance)
}
db_activity_drawcompliance::db_activity_drawcompliance(const db_activity_drawcompliance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_reward_.MergeFrom(from.m_reward_);
  m_count_ = from.m_count_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_activity.drawcompliance)
}

void db_activity_drawcompliance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_activity_drawcompliance_db_2eproto.base);
  m_count_ = 0;
}

db_activity_drawcompliance::~db_activity_drawcompliance() {
  // @@protoc_insertion_point(destructor:pbdb.db_activity.drawcompliance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_activity_drawcompliance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_activity_drawcompliance::ArenaDtor(void* object) {
  db_activity_drawcompliance* _this = reinterpret_cast< db_activity_drawcompliance* >(object);
  (void)_this;
}
void db_activity_drawcompliance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_activity_drawcompliance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_activity_drawcompliance& db_activity_drawcompliance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_activity_drawcompliance_db_2eproto.base);
  return *internal_default_instance();
}


void db_activity_drawcompliance::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_activity.drawcompliance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_reward_.Clear();
  m_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_activity_drawcompliance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_count(&has_bits);
          m_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, bool> m_reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_reward_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_activity_drawcompliance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_activity.drawcompliance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_count = 1;
  if (_internal_has_m_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_count(), target);
  }

  // map<int32, bool> m_reward = 2;
  if (!this->_internal_m_reward().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_m_reward().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_m_reward().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
          it = this->_internal_m_reward().begin();
          it != this->_internal_m_reward().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_activity_drawcompliance_MRewardEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
          it = this->_internal_m_reward().begin();
          it != this->_internal_m_reward().end(); ++it) {
        target = db_activity_drawcompliance_MRewardEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_activity.drawcompliance)
  return target;
}

size_t db_activity_drawcompliance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_activity.drawcompliance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bool> m_reward = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_reward_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >::const_iterator
      it = this->_internal_m_reward().begin();
      it != this->_internal_m_reward().end(); ++it) {
    total_size += db_activity_drawcompliance_MRewardEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 m_count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_activity_drawcompliance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_activity.drawcompliance)
  GOOGLE_DCHECK_NE(&from, this);
  const db_activity_drawcompliance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_activity_drawcompliance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_activity.drawcompliance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_activity.drawcompliance)
    MergeFrom(*source);
  }
}

void db_activity_drawcompliance::MergeFrom(const db_activity_drawcompliance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_activity.drawcompliance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_reward_.MergeFrom(from.m_reward_);
  if (from._internal_has_m_count()) {
    _internal_set_m_count(from._internal_m_count());
  }
}

void db_activity_drawcompliance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_activity.drawcompliance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_activity_drawcompliance::CopyFrom(const db_activity_drawcompliance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_activity.drawcompliance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_activity_drawcompliance::IsInitialized() const {
  return true;
}

void db_activity_drawcompliance::InternalSwap(db_activity_drawcompliance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_reward_.Swap(&other->m_reward_);
  swap(m_count_, other->m_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_activity_drawcompliance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

db_activity_MDrawcomplianceEntry_DoNotUse::db_activity_MDrawcomplianceEntry_DoNotUse() {}
db_activity_MDrawcomplianceEntry_DoNotUse::db_activity_MDrawcomplianceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_activity_MDrawcomplianceEntry_DoNotUse::MergeFrom(const db_activity_MDrawcomplianceEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_activity_MDrawcomplianceEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_activity_MDrawcomplianceEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void db_activity::InitAsDefaultInstance() {
}
class db_activity::_Internal {
 public:
  using HasBits = decltype(std::declval<db_activity>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_beg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_end(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_start(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_finish(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_m_calendarid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

db_activity::db_activity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_drawcompliance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_activity)
}
db_activity::db_activity(const db_activity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_drawcompliance_.MergeFrom(from.m_drawcompliance_);
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_calendarid_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_calendarid_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_activity)
}

void db_activity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_activity_db_2eproto.base);
  ::memset(&m_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_calendarid_) -
      reinterpret_cast<char*>(&m_id_)) + sizeof(m_calendarid_));
}

db_activity::~db_activity() {
  // @@protoc_insertion_point(destructor:pbdb.db_activity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_activity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_activity::ArenaDtor(void* object) {
  db_activity* _this = reinterpret_cast< db_activity* >(object);
  (void)_this;
}
void db_activity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_activity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_activity& db_activity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_activity_db_2eproto.base);
  return *internal_default_instance();
}


void db_activity::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_activity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_drawcompliance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_calendarid_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_calendarid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_activity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_beg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_beg(&has_bits);
          m_beg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_end(&has_bits);
          m_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_start = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_start(&has_bits);
          m_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_finish = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_m_finish(&has_bits);
          m_finish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_calendarid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_m_calendarid(&has_bits);
          m_calendarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int64, .pbdb.db_activity.drawcompliance> m_drawcompliance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_drawcompliance_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_activity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_activity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // int32 m_beg = 2;
  if (_internal_has_m_beg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_beg(), target);
  }

  // int32 m_end = 3;
  if (_internal_has_m_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_end(), target);
  }

  // bool m_start = 4;
  if (_internal_has_m_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_m_start(), target);
  }

  // bool m_finish = 5;
  if (_internal_has_m_finish()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_m_finish(), target);
  }

  // int32 m_calendarid = 6;
  if (_internal_has_m_calendarid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_m_calendarid(), target);
  }

  // map<int64, .pbdb.db_activity.drawcompliance> m_drawcompliance = 7;
  if (!this->_internal_m_drawcompliance().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::db_activity_drawcompliance >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_m_drawcompliance().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_m_drawcompliance().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::db_activity_drawcompliance >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::db_activity_drawcompliance >::const_iterator
          it = this->_internal_m_drawcompliance().begin();
          it != this->_internal_m_drawcompliance().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_activity_MDrawcomplianceEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::db_activity_drawcompliance >::const_iterator
          it = this->_internal_m_drawcompliance().begin();
          it != this->_internal_m_drawcompliance().end(); ++it) {
        target = db_activity_MDrawcomplianceEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_activity)
  return target;
}

size_t db_activity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_activity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .pbdb.db_activity.drawcompliance> m_drawcompliance = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_drawcompliance_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbdb::db_activity_drawcompliance >::const_iterator
      it = this->_internal_m_drawcompliance().begin();
      it != this->_internal_m_drawcompliance().end(); ++it) {
    total_size += db_activity_MDrawcomplianceEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // int64 m_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_id());
    }

    // int32 m_beg = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_beg());
    }

    // int32 m_end = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_end());
    }

    // bool m_start = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // bool m_finish = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // int32 m_calendarid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_calendarid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_activity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_activity)
  GOOGLE_DCHECK_NE(&from, this);
  const db_activity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_activity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_activity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_activity)
    MergeFrom(*source);
  }
}

void db_activity::MergeFrom(const db_activity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_activity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_drawcompliance_.MergeFrom(from.m_drawcompliance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_beg_ = from.m_beg_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_end_ = from.m_end_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_start_ = from.m_start_;
    }
    if (cached_has_bits & 0x00000010u) {
      m_finish_ = from.m_finish_;
    }
    if (cached_has_bits & 0x00000020u) {
      m_calendarid_ = from.m_calendarid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_activity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_activity::CopyFrom(const db_activity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_activity::IsInitialized() const {
  return true;
}

void db_activity::InternalSwap(db_activity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_drawcompliance_.Swap(&other->m_drawcompliance_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_activity, m_calendarid_)
      + sizeof(db_activity::m_calendarid_)
      - PROTOBUF_FIELD_OFFSET(db_activity, m_id_)>(
          reinterpret_cast<char*>(&m_id_),
          reinterpret_cast<char*>(&other->m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_activity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_task_data_schedule::InitAsDefaultInstance() {
}
class db_task_data_schedule::_Internal {
 public:
  using HasBits = decltype(std::declval<db_task_data_schedule>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_sumint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

db_task_data_schedule::db_task_data_schedule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_task.data_schedule)
}
db_task_data_schedule::db_task_data_schedule(const db_task_data_schedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_sumint_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_sumint_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_task.data_schedule)
}

void db_task_data_schedule::SharedCtor() {
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_sumint_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_sumint_));
}

db_task_data_schedule::~db_task_data_schedule() {
  // @@protoc_insertion_point(destructor:pbdb.db_task.data_schedule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_task_data_schedule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_task_data_schedule::ArenaDtor(void* object) {
  db_task_data_schedule* _this = reinterpret_cast< db_task_data_schedule* >(object);
  (void)_this;
}
void db_task_data_schedule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_task_data_schedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_task_data_schedule& db_task_data_schedule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_task_data_schedule_db_2eproto.base);
  return *internal_default_instance();
}


void db_task_data_schedule::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_task.data_schedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_sumint_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_sumint_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_task_data_schedule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_type(&has_bits);
          m_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_value(&has_bits);
          m_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_sumint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_sumint(&has_bits);
          m_sumint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_task_data_schedule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_task.data_schedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_type(), target);
  }

  // int32 m_value = 2;
  if (_internal_has_m_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_value(), target);
  }

  // int32 m_sumint = 3;
  if (_internal_has_m_sumint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_sumint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_task.data_schedule)
  return target;
}

size_t db_task_data_schedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_task.data_schedule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // int32 m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_type());
    }

    // int32 m_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_value());
    }

    // int32 m_sumint = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_sumint());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_task_data_schedule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_task.data_schedule)
  GOOGLE_DCHECK_NE(&from, this);
  const db_task_data_schedule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_task_data_schedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_task.data_schedule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_task.data_schedule)
    MergeFrom(*source);
  }
}

void db_task_data_schedule::MergeFrom(const db_task_data_schedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_task.data_schedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_value_ = from.m_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_sumint_ = from.m_sumint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_task_data_schedule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_task.data_schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_data_schedule::CopyFrom(const db_task_data_schedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_task.data_schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_data_schedule::IsInitialized() const {
  return true;
}

void db_task_data_schedule::InternalSwap(db_task_data_schedule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_task_data_schedule, m_sumint_)
      + sizeof(db_task_data_schedule::m_sumint_)
      - PROTOBUF_FIELD_OFFSET(db_task_data_schedule, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_task_data_schedule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_task_data::InitAsDefaultInstance() {
}
class db_task_data::_Internal {
 public:
  using HasBits = decltype(std::declval<db_task_data>()._has_bits_);
  static void set_has_m_taskid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_receiveutc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_finshutc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_receive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

db_task_data::db_task_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_schedules_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_task.data)
}
db_task_data::db_task_data(const db_task_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_schedules_(from.m_schedules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_taskid_, &from.m_taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_receive_) -
    reinterpret_cast<char*>(&m_taskid_)) + sizeof(m_receive_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_task.data)
}

void db_task_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_task_data_db_2eproto.base);
  ::memset(&m_taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_receive_) -
      reinterpret_cast<char*>(&m_taskid_)) + sizeof(m_receive_));
}

db_task_data::~db_task_data() {
  // @@protoc_insertion_point(destructor:pbdb.db_task.data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_task_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_task_data::ArenaDtor(void* object) {
  db_task_data* _this = reinterpret_cast< db_task_data* >(object);
  (void)_this;
}
void db_task_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_task_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_task_data& db_task_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_task_data_db_2eproto.base);
  return *internal_default_instance();
}


void db_task_data::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_task.data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_schedules_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&m_taskid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_receive_) -
        reinterpret_cast<char*>(&m_taskid_)) + sizeof(m_receive_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_task_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_taskid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_taskid(&has_bits);
          m_taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_receiveutc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_receiveutc(&has_bits);
          m_receiveutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_finshutc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_finshutc(&has_bits);
          m_finshutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbdb.db_task.data_schedule m_schedules = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_schedules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool m_receive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_m_receive(&has_bits);
          m_receive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_task_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_task.data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_taskid = 1;
  if (_internal_has_m_taskid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_taskid(), target);
  }

  // int32 m_receiveutc = 2;
  if (_internal_has_m_receiveutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_receiveutc(), target);
  }

  // int32 m_finshutc = 3;
  if (_internal_has_m_finshutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_finshutc(), target);
  }

  // repeated .pbdb.db_task.data_schedule m_schedules = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_schedules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_m_schedules(i), target, stream);
  }

  // bool m_receive = 5;
  if (_internal_has_m_receive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_m_receive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_task.data)
  return target;
}

size_t db_task_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_task.data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_task.data_schedule m_schedules = 4;
  total_size += 1UL * this->_internal_m_schedules_size();
  for (const auto& msg : this->m_schedules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // int32 m_taskid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_taskid());
    }

    // int32 m_receiveutc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_receiveutc());
    }

    // int32 m_finshutc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_finshutc());
    }

    // bool m_receive = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_task_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_task.data)
  GOOGLE_DCHECK_NE(&from, this);
  const db_task_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_task_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_task.data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_task.data)
    MergeFrom(*source);
  }
}

void db_task_data::MergeFrom(const db_task_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_task.data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_schedules_.MergeFrom(from.m_schedules_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      m_taskid_ = from.m_taskid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_receiveutc_ = from.m_receiveutc_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_finshutc_ = from.m_finshutc_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_receive_ = from.m_receive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_task_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_task.data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task_data::CopyFrom(const db_task_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_task.data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task_data::IsInitialized() const {
  return true;
}

void db_task_data::InternalSwap(db_task_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_schedules_.InternalSwap(&other->m_schedules_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_task_data, m_receive_)
      + sizeof(db_task_data::m_receive_)
      - PROTOBUF_FIELD_OFFSET(db_task_data, m_taskid_)>(
          reinterpret_cast<char*>(&m_taskid_),
          reinterpret_cast<char*>(&other->m_taskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_task_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

db_task_MRundatasEntry_DoNotUse::db_task_MRundatasEntry_DoNotUse() {}
db_task_MRundatasEntry_DoNotUse::db_task_MRundatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_task_MRundatasEntry_DoNotUse::MergeFrom(const db_task_MRundatasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_task_MRundatasEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_task_MRundatasEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

db_task_MCompleteddatasEntry_DoNotUse::db_task_MCompleteddatasEntry_DoNotUse() {}
db_task_MCompleteddatasEntry_DoNotUse::db_task_MCompleteddatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void db_task_MCompleteddatasEntry_DoNotUse::MergeFrom(const db_task_MCompleteddatasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata db_task_MCompleteddatasEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void db_task_MCompleteddatasEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void db_task::InitAsDefaultInstance() {
}
class db_task::_Internal {
 public:
  using HasBits = decltype(std::declval<db_task>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_task::db_task(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_rundatas_(arena),
  m_completeddatas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_task)
}
db_task::db_task(const db_task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_rundatas_.MergeFrom(from.m_rundatas_);
  m_completeddatas_.MergeFrom(from.m_completeddatas_);
  m_id_ = from.m_id_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_task)
}

void db_task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_task_db_2eproto.base);
  m_id_ = PROTOBUF_LONGLONG(0);
}

db_task::~db_task() {
  // @@protoc_insertion_point(destructor:pbdb.db_task)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_task::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_task::ArenaDtor(void* object) {
  db_task* _this = reinterpret_cast< db_task* >(object);
  (void)_this;
}
void db_task::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_task& db_task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_task_db_2eproto.base);
  return *internal_default_instance();
}


void db_task::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_rundatas_.Clear();
  m_completeddatas_.Clear();
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .pbdb.db_task.data> m_rundatas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_rundatas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .pbdb.db_task.data> m_completeddatas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_completeddatas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_task::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // map<int32, .pbdb.db_task.data> m_rundatas = 2;
  if (!this->_internal_m_rundatas().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_m_rundatas().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_m_rundatas().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::const_iterator
          it = this->_internal_m_rundatas().begin();
          it != this->_internal_m_rundatas().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_task_MRundatasEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::const_iterator
          it = this->_internal_m_rundatas().begin();
          it != this->_internal_m_rundatas().end(); ++it) {
        target = db_task_MRundatasEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .pbdb.db_task.data> m_completeddatas = 3;
  if (!this->_internal_m_completeddatas().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_m_completeddatas().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_m_completeddatas().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::const_iterator
          it = this->_internal_m_completeddatas().begin();
          it != this->_internal_m_completeddatas().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = db_task_MCompleteddatasEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::const_iterator
          it = this->_internal_m_completeddatas().begin();
          it != this->_internal_m_completeddatas().end(); ++it) {
        target = db_task_MCompleteddatasEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_task)
  return target;
}

size_t db_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_task)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.db_task.data> m_rundatas = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_rundatas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::const_iterator
      it = this->_internal_m_rundatas().begin();
      it != this->_internal_m_rundatas().end(); ++it) {
    total_size += db_task_MRundatasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .pbdb.db_task.data> m_completeddatas = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_completeddatas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::db_task_data >::const_iterator
      it = this->_internal_m_completeddatas().begin();
      it != this->_internal_m_completeddatas().end(); ++it) {
    total_size += db_task_MCompleteddatasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 m_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_task)
  GOOGLE_DCHECK_NE(&from, this);
  const db_task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_task)
    MergeFrom(*source);
  }
}

void db_task::MergeFrom(const db_task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_rundatas_.MergeFrom(from.m_rundatas_);
  m_completeddatas_.MergeFrom(from.m_completeddatas_);
  if (from._internal_has_m_id()) {
    _internal_set_m_id(from._internal_m_id());
  }
}

void db_task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_task::CopyFrom(const db_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_task::IsInitialized() const {
  return true;
}

void db_task::InternalSwap(db_task* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_rundatas_.Swap(&other->m_rundatas_);
  m_completeddatas_.Swap(&other->m_completeddatas_);
  swap(m_id_, other->m_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_calendar::InitAsDefaultInstance() {
}
class db_calendar::_Internal {
 public:
  using HasBits = decltype(std::declval<db_calendar>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_finish(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

db_calendar::db_calendar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_calendar)
}
db_calendar::db_calendar(const db_calendar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_finish_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_finish_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_calendar)
}

void db_calendar::SharedCtor() {
  ::memset(&m_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_finish_) -
      reinterpret_cast<char*>(&m_id_)) + sizeof(m_finish_));
}

db_calendar::~db_calendar() {
  // @@protoc_insertion_point(destructor:pbdb.db_calendar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_calendar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_calendar::ArenaDtor(void* object) {
  db_calendar* _this = reinterpret_cast< db_calendar* >(object);
  (void)_this;
}
void db_calendar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_calendar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_calendar& db_calendar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_calendar_db_2eproto.base);
  return *internal_default_instance();
}


void db_calendar::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_calendar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_finish_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_finish_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_calendar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 m_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_time(&has_bits);
          m_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_start(&has_bits);
          m_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_finish = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_finish(&has_bits);
          m_finish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_calendar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_calendar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // int64 m_time = 2;
  if (_internal_has_m_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_m_time(), target);
  }

  // bool m_start = 3;
  if (_internal_has_m_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_m_start(), target);
  }

  // bool m_finish = 4;
  if (_internal_has_m_finish()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_m_finish(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_calendar)
  return target;
}

size_t db_calendar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_calendar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // int64 m_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_id());
    }

    // int64 m_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_time());
    }

    // bool m_start = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // bool m_finish = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_calendar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_calendar)
  GOOGLE_DCHECK_NE(&from, this);
  const db_calendar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_calendar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_calendar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_calendar)
    MergeFrom(*source);
  }
}

void db_calendar::MergeFrom(const db_calendar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_calendar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_time_ = from.m_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_start_ = from.m_start_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_finish_ = from.m_finish_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_calendar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_calendar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_calendar::CopyFrom(const db_calendar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_calendar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_calendar::IsInitialized() const {
  return true;
}

void db_calendar::InternalSwap(db_calendar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_calendar, m_finish_)
      + sizeof(db_calendar::m_finish_)
      - PROTOBUF_FIELD_OFFSET(db_calendar, m_id_)>(
          reinterpret_cast<char*>(&m_id_),
          reinterpret_cast<char*>(&other->m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_calendar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_familyer::InitAsDefaultInstance() {
}
class db_familyer::_Internal {
 public:
  using HasBits = decltype(std::declval<db_familyer>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_joinutc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_lastsignutc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_lastleaveutc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

db_familyer::db_familyer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_familyer)
}
db_familyer::db_familyer(const db_familyer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_position_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_position_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_familyer)
}

void db_familyer::SharedCtor() {
  ::memset(&m_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_position_) -
      reinterpret_cast<char*>(&m_id_)) + sizeof(m_position_));
}

db_familyer::~db_familyer() {
  // @@protoc_insertion_point(destructor:pbdb.db_familyer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_familyer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_familyer::ArenaDtor(void* object) {
  db_familyer* _this = reinterpret_cast< db_familyer* >(object);
  (void)_this;
}
void db_familyer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_familyer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_familyer& db_familyer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_familyer_db_2eproto.base);
  return *internal_default_instance();
}


void db_familyer::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_familyer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_position_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_familyer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_joinutc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_joinutc(&has_bits);
          m_joinutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_lastsignutc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_lastsignutc(&has_bits);
          m_lastsignutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_lastleaveutc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_lastleaveutc(&has_bits);
          m_lastleaveutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbdb.db_familyer.eposition m_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_position(static_cast<::pbdb::db_familyer_eposition>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_familyer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_familyer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // int32 m_joinutc = 2;
  if (_internal_has_m_joinutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_joinutc(), target);
  }

  // int32 m_lastsignutc = 3;
  if (_internal_has_m_lastsignutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_lastsignutc(), target);
  }

  // int32 m_lastleaveutc = 4;
  if (_internal_has_m_lastleaveutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_lastleaveutc(), target);
  }

  // .pbdb.db_familyer.eposition m_position = 5;
  if (_internal_has_m_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_m_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_familyer)
  return target;
}

size_t db_familyer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_familyer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // int64 m_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_id());
    }

    // int32 m_joinutc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_joinutc());
    }

    // int32 m_lastsignutc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_lastsignutc());
    }

    // int32 m_lastleaveutc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_lastleaveutc());
    }

    // .pbdb.db_familyer.eposition m_position = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_position());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_familyer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_familyer)
  GOOGLE_DCHECK_NE(&from, this);
  const db_familyer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_familyer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_familyer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_familyer)
    MergeFrom(*source);
  }
}

void db_familyer::MergeFrom(const db_familyer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_familyer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_joinutc_ = from.m_joinutc_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_lastsignutc_ = from.m_lastsignutc_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_lastleaveutc_ = from.m_lastleaveutc_;
    }
    if (cached_has_bits & 0x00000010u) {
      m_position_ = from.m_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_familyer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_familyer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_familyer::CopyFrom(const db_familyer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_familyer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_familyer::IsInitialized() const {
  return true;
}

void db_familyer::InternalSwap(db_familyer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_familyer, m_position_)
      + sizeof(db_familyer::m_position_)
      - PROTOBUF_FIELD_OFFSET(db_familyer, m_id_)>(
          reinterpret_cast<char*>(&m_id_),
          reinterpret_cast<char*>(&other->m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_familyer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_family::InitAsDefaultInstance() {
}
class db_family::_Internal {
 public:
  using HasBits = decltype(std::declval<db_family>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_createutc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_leader(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_m_lv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

db_family::db_family(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_member_(arena),
  m_applylist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_family)
}
db_family::db_family(const db_family& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_member_(from.m_member_),
      m_applylist_(from.m_applylist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_name()) {
    m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_name(),
      GetArena());
  }
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_exp_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_exp_));
  // @@protoc_insertion_point(copy_constructor:pbdb.db_family)
}

void db_family::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_family_db_2eproto.base);
  m_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_exp_) -
      reinterpret_cast<char*>(&m_id_)) + sizeof(m_exp_));
}

db_family::~db_family() {
  // @@protoc_insertion_point(destructor:pbdb.db_family)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_family::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_family::ArenaDtor(void* object) {
  db_family* _this = reinterpret_cast< db_family* >(object);
  (void)_this;
}
void db_family::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_family::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_family& db_family::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_family_db_2eproto.base);
  return *internal_default_instance();
}


void db_family::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_family)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_member_.Clear();
  m_applylist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_exp_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_exp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_family::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_createutc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_createutc(&has_bits);
          m_createutc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_m_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbdb.db_family.m_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 m_leader = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_leader(&has_bits);
          m_leader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_lv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_m_lv(&has_bits);
          m_lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_exp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_m_exp(&has_bits);
          m_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 m_member = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_m_member(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_m_member(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 m_applylist = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_m_applylist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_m_applylist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_family::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_family)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // int32 m_createutc = 2;
  if (_internal_has_m_createutc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_createutc(), target);
  }

  // string m_name = 3;
  if (_internal_has_m_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_name().data(), static_cast<int>(this->_internal_m_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbdb.db_family.m_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_m_name(), target);
  }

  // int64 m_leader = 4;
  if (_internal_has_m_leader()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_m_leader(), target);
  }

  // int32 m_lv = 5;
  if (_internal_has_m_lv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_m_lv(), target);
  }

  // int32 m_exp = 6;
  if (_internal_has_m_exp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_m_exp(), target);
  }

  // repeated int64 m_member = 7;
  {
    int byte_size = _m_member_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_m_member(), byte_size, target);
    }
  }

  // repeated int64 m_applylist = 8;
  {
    int byte_size = _m_applylist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_m_applylist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_family)
  return target;
}

size_t db_family::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_family)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 m_member = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->m_member_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_member_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 m_applylist = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->m_applylist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_applylist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // string m_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_name());
    }

    // int64 m_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_id());
    }

    // int32 m_createutc = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_createutc());
    }

    // int32 m_lv = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_lv());
    }

    // int64 m_leader = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_leader());
    }

    // int32 m_exp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_exp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_family::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_family)
  GOOGLE_DCHECK_NE(&from, this);
  const db_family* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_family>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_family)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_family)
    MergeFrom(*source);
  }
}

void db_family::MergeFrom(const db_family& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_family)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_member_.MergeFrom(from.m_member_);
  m_applylist_.MergeFrom(from.m_applylist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_name(from._internal_m_name());
    }
    if (cached_has_bits & 0x00000002u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_createutc_ = from.m_createutc_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_lv_ = from.m_lv_;
    }
    if (cached_has_bits & 0x00000010u) {
      m_leader_ = from.m_leader_;
    }
    if (cached_has_bits & 0x00000020u) {
      m_exp_ = from.m_exp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_family::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_family)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_family::CopyFrom(const db_family& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_family)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_family::IsInitialized() const {
  return true;
}

void db_family::InternalSwap(db_family* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_member_.InternalSwap(&other->m_member_);
  m_applylist_.InternalSwap(&other->m_applylist_);
  m_name_.Swap(&other->m_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(db_family, m_exp_)
      + sizeof(db_family::m_exp_)
      - PROTOBUF_FIELD_OFFSET(db_family, m_id_)>(
          reinterpret_cast<char*>(&m_id_),
          reinterpret_cast<char*>(&other->m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata db_family::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_friends::InitAsDefaultInstance() {
}
class db_friends::_Internal {
 public:
  using HasBits = decltype(std::declval<db_friends>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_friends::db_friends(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_friends_(arena),
  m_applyfriends_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbdb.db_friends)
}
db_friends::db_friends(const db_friends& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_friends_(from.m_friends_),
      m_applyfriends_(from.m_applyfriends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_id_ = from.m_id_;
  // @@protoc_insertion_point(copy_constructor:pbdb.db_friends)
}

void db_friends::SharedCtor() {
  m_id_ = PROTOBUF_LONGLONG(0);
}

db_friends::~db_friends() {
  // @@protoc_insertion_point(destructor:pbdb.db_friends)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_friends::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_friends::ArenaDtor(void* object) {
  db_friends* _this = reinterpret_cast< db_friends* >(object);
  (void)_this;
}
void db_friends::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_friends::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_friends& db_friends::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_friends_db_2eproto.base);
  return *internal_default_instance();
}


void db_friends::Clear() {
// @@protoc_insertion_point(message_clear_start:pbdb.db_friends)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_friends_.Clear();
  m_applyfriends_.Clear();
  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_friends::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 m_friends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_m_friends(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_m_friends(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 m_applyfriends = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_m_applyfriends(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_m_applyfriends(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_friends::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbdb.db_friends)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // repeated int64 m_friends = 2;
  {
    int byte_size = _m_friends_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_m_friends(), byte_size, target);
    }
  }

  // repeated int64 m_applyfriends = 3;
  {
    int byte_size = _m_applyfriends_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_m_applyfriends(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbdb.db_friends)
  return target;
}

size_t db_friends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbdb.db_friends)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 m_friends = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->m_friends_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_friends_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 m_applyfriends = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->m_applyfriends_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_applyfriends_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 m_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_friends::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbdb.db_friends)
  GOOGLE_DCHECK_NE(&from, this);
  const db_friends* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_friends>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbdb.db_friends)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbdb.db_friends)
    MergeFrom(*source);
  }
}

void db_friends::MergeFrom(const db_friends& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbdb.db_friends)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_friends_.MergeFrom(from.m_friends_);
  m_applyfriends_.MergeFrom(from.m_applyfriends_);
  if (from._internal_has_m_id()) {
    _internal_set_m_id(from._internal_m_id());
  }
}

void db_friends::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbdb.db_friends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_friends::CopyFrom(const db_friends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbdb.db_friends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_friends::IsInitialized() const {
  return true;
}

void db_friends::InternalSwap(db_friends* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_friends_.InternalSwap(&other->m_friends_);
  m_applyfriends_.InternalSwap(&other->m_applyfriends_);
  swap(m_id_, other->m_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_friends::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pbdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbdb::db_account* Arena::CreateMaybeMessage< ::pbdb::db_account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_account >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_brief* Arena::CreateMaybeMessage< ::pbdb::db_brief >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_brief >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_role_recharge* Arena::CreateMaybeMessage< ::pbdb::db_role_recharge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_role_recharge >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_role* Arena::CreateMaybeMessage< ::pbdb::db_role >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_role >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::item* Arena::CreateMaybeMessage< ::pbdb::item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::item >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_bag_MItemsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_bag_MItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_bag_MItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_bag* Arena::CreateMaybeMessage< ::pbdb::db_bag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_bag >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_keyvalue* Arena::CreateMaybeMessage< ::pbdb::db_keyvalue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_keyvalue >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_rolekeyvalue_MDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_rolekeyvalue_MDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_rolekeyvalue_MDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_rolekeyvalue* Arena::CreateMaybeMessage< ::pbdb::db_rolekeyvalue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_rolekeyvalue >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::mailitem* Arena::CreateMaybeMessage< ::pbdb::mailitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::mailitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::mail* Arena::CreateMaybeMessage< ::pbdb::mail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::mail >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_mail_MMailEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_mail_MMailEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_mail_MMailEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_mail* Arena::CreateMaybeMessage< ::pbdb::db_mail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_mail >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_guild* Arena::CreateMaybeMessage< ::pbdb::db_guild >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_guild >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_notice* Arena::CreateMaybeMessage< ::pbdb::db_notice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_notice >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::rankitem* Arena::CreateMaybeMessage< ::pbdb::rankitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::rankitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_ranklist_MItemsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_ranklist_MItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_ranklist_MItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_ranklist* Arena::CreateMaybeMessage< ::pbdb::db_ranklist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_ranklist >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_activity_drawcompliance_MRewardEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_activity_drawcompliance_MRewardEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_activity_drawcompliance_MRewardEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_activity_drawcompliance* Arena::CreateMaybeMessage< ::pbdb::db_activity_drawcompliance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_activity_drawcompliance >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_activity_MDrawcomplianceEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_activity_MDrawcomplianceEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_activity_MDrawcomplianceEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_activity* Arena::CreateMaybeMessage< ::pbdb::db_activity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_activity >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task_data_schedule* Arena::CreateMaybeMessage< ::pbdb::db_task_data_schedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task_data_schedule >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task_data* Arena::CreateMaybeMessage< ::pbdb::db_task_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task_data >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task_MRundatasEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_task_MRundatasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task_MRundatasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task_MCompleteddatasEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbdb::db_task_MCompleteddatasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task_MCompleteddatasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_task* Arena::CreateMaybeMessage< ::pbdb::db_task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_task >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_calendar* Arena::CreateMaybeMessage< ::pbdb::db_calendar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_calendar >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_familyer* Arena::CreateMaybeMessage< ::pbdb::db_familyer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_familyer >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_family* Arena::CreateMaybeMessage< ::pbdb::db_family >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_family >(arena);
}
template<> PROTOBUF_NOINLINE ::pbdb::db_friends* Arena::CreateMaybeMessage< ::pbdb::db_friends >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbdb::db_friends >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
