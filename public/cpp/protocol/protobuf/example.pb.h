// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_example_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_example_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "db.pb.h"
#include "net.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_example_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_example_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_example_2eproto;
namespace pbexample {
class PLAYER;
struct PLAYERDefaultTypeInternal;
extern PLAYERDefaultTypeInternal _PLAYER_default_instance_;
class PROBUFF_NET_EXAMPLE_PLAY_CANCEL;
struct PROBUFF_NET_EXAMPLE_PLAY_CANCELDefaultTypeInternal;
extern PROBUFF_NET_EXAMPLE_PLAY_CANCELDefaultTypeInternal _PROBUFF_NET_EXAMPLE_PLAY_CANCEL_default_instance_;
class PROBUFF_NET_EXAMPLE_PLAY_JOIN;
struct PROBUFF_NET_EXAMPLE_PLAY_JOINDefaultTypeInternal;
extern PROBUFF_NET_EXAMPLE_PLAY_JOINDefaultTypeInternal _PROBUFF_NET_EXAMPLE_PLAY_JOIN_default_instance_;
class PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE;
struct PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSEDefaultTypeInternal;
extern PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSEDefaultTypeInternal _PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE_default_instance_;
class PROBUFF_NET_EXAMPLE_PLAY_MATCHING;
struct PROBUFF_NET_EXAMPLE_PLAY_MATCHINGDefaultTypeInternal;
extern PROBUFF_NET_EXAMPLE_PLAY_MATCHINGDefaultTypeInternal _PROBUFF_NET_EXAMPLE_PLAY_MATCHING_default_instance_;
class PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT;
struct PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULTDefaultTypeInternal;
extern PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULTDefaultTypeInternal _PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT_default_instance_;
class PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM;
struct PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRMDefaultTypeInternal;
extern PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRMDefaultTypeInternal _PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM_default_instance_;
}  // namespace pbexample
PROTOBUF_NAMESPACE_OPEN
template<> ::pbexample::PLAYER* Arena::CreateMaybeMessage<::pbexample::PLAYER>(Arena*);
template<> ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CANCEL* Arena::CreateMaybeMessage<::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CANCEL>(Arena*);
template<> ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN* Arena::CreateMaybeMessage<::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN>(Arena*);
template<> ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE* Arena::CreateMaybeMessage<::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE>(Arena*);
template<> ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING* Arena::CreateMaybeMessage<::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING>(Arena*);
template<> ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT* Arena::CreateMaybeMessage<::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT>(Arena*);
template<> ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM* Arena::CreateMaybeMessage<::pbexample::PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pbexample {

enum EPLAY_TYPE : int {
  EPLAY_GUESS_NUMBER = 0,
  EPLAY_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EPLAY_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EPLAY_TYPE_IsValid(int value);
constexpr EPLAY_TYPE EPLAY_TYPE_MIN = EPLAY_GUESS_NUMBER;
constexpr EPLAY_TYPE EPLAY_TYPE_MAX = EPLAY_GUESS_NUMBER;
constexpr int EPLAY_TYPE_ARRAYSIZE = EPLAY_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPLAY_TYPE_descriptor();
template<typename T>
inline const std::string& EPLAY_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPLAY_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPLAY_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPLAY_TYPE_descriptor(), enum_t_value);
}
inline bool EPLAY_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPLAY_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPLAY_TYPE>(
    EPLAY_TYPE_descriptor(), name, value);
}
enum PLAY_EERROR_CODE : int {
  EERROR_CODE_SUCCESS = 0,
  EERROR_CODE_TIMEOUT = 1,
  EERROR_CODE_CANCEL = 2,
  EERROR_CODE_CURRENT_CANCEL = 3,
  EERROR_CODE_NOTFINDROOM = 4,
  EERROR_CODE_ROOM_DESTORY = 5,
  EERROR_CODE_FINISH = 6,
  PLAY_EERROR_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PLAY_EERROR_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PLAY_EERROR_CODE_IsValid(int value);
constexpr PLAY_EERROR_CODE PLAY_EERROR_CODE_MIN = EERROR_CODE_SUCCESS;
constexpr PLAY_EERROR_CODE PLAY_EERROR_CODE_MAX = EERROR_CODE_FINISH;
constexpr int PLAY_EERROR_CODE_ARRAYSIZE = PLAY_EERROR_CODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PLAY_EERROR_CODE_descriptor();
template<typename T>
inline const std::string& PLAY_EERROR_CODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PLAY_EERROR_CODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PLAY_EERROR_CODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PLAY_EERROR_CODE_descriptor(), enum_t_value);
}
inline bool PLAY_EERROR_CODE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PLAY_EERROR_CODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PLAY_EERROR_CODE>(
    PLAY_EERROR_CODE_descriptor(), name, value);
}
// ===================================================================

class PROBUFF_NET_EXAMPLE_PLAY_JOIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN) */ {
 public:
  inline PROBUFF_NET_EXAMPLE_PLAY_JOIN() : PROBUFF_NET_EXAMPLE_PLAY_JOIN(nullptr) {}
  ~PROBUFF_NET_EXAMPLE_PLAY_JOIN() override;
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_JOIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_EXAMPLE_PLAY_JOIN(const PROBUFF_NET_EXAMPLE_PLAY_JOIN& from);
  PROBUFF_NET_EXAMPLE_PLAY_JOIN(PROBUFF_NET_EXAMPLE_PLAY_JOIN&& from) noexcept
    : PROBUFF_NET_EXAMPLE_PLAY_JOIN() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_EXAMPLE_PLAY_JOIN& operator=(const PROBUFF_NET_EXAMPLE_PLAY_JOIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_EXAMPLE_PLAY_JOIN& operator=(PROBUFF_NET_EXAMPLE_PLAY_JOIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_EXAMPLE_PLAY_JOIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_EXAMPLE_PLAY_JOIN* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_EXAMPLE_PLAY_JOIN*>(
               &_PROBUFF_NET_EXAMPLE_PLAY_JOIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PROBUFF_NET_EXAMPLE_PLAY_JOIN& a, PROBUFF_NET_EXAMPLE_PLAY_JOIN& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_EXAMPLE_PLAY_JOIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_EXAMPLE_PLAY_JOIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_EXAMPLE_PLAY_JOIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_EXAMPLE_PLAY_JOIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_EXAMPLE_PLAY_JOIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_EXAMPLE_PLAY_JOIN& from) {
    PROBUFF_NET_EXAMPLE_PLAY_JOIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_EXAMPLE_PLAY_JOIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN";
  }
  protected:
  explicit PROBUFF_NET_EXAMPLE_PLAY_JOIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
  };
  // optional .pbexample.EPLAY_TYPE m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbexample::EPLAY_TYPE m_type() const;
  void set_m_type(::pbexample::EPLAY_TYPE value);
  private:
  ::pbexample::EPLAY_TYPE _internal_m_type() const;
  void _internal_set_m_type(::pbexample::EPLAY_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int m_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE) */ {
 public:
  inline PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE() : PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE(nullptr) {}
  ~PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE() override;
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE(const PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE& from);
  PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE(PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE&& from) noexcept
    : PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE& operator=(const PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE& operator=(PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE*>(
               &_PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE& a, PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE& from) {
    PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE";
  }
  protected:
  explicit PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMRoomidFieldNumber = 2,
  };
  // optional int32 m_roomid = 2;
  bool has_m_roomid() const;
  private:
  bool _internal_has_m_roomid() const;
  public:
  void clear_m_roomid();
  int32_t m_roomid() const;
  void set_m_roomid(int32_t value);
  private:
  int32_t _internal_m_roomid() const;
  void _internal_set_m_roomid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t m_roomid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbexample.PLAYER) */ {
 public:
  inline PLAYER() : PLAYER(nullptr) {}
  ~PLAYER() override;
  explicit PROTOBUF_CONSTEXPR PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PLAYER(const PLAYER& from);
  PLAYER(PLAYER&& from) noexcept
    : PLAYER() {
    *this = ::std::move(from);
  }

  inline PLAYER& operator=(const PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline PLAYER& operator=(PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const PLAYER* internal_default_instance() {
    return reinterpret_cast<const PLAYER*>(
               &_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PLAYER& a, PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(PLAYER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PLAYER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PLAYER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PLAYER& from) {
    PLAYER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PLAYER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbexample.PLAYER";
  }
  protected:
  explicit PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMPlayersFieldNumber = 1,
    kMIsconfirmFieldNumber = 2,
  };
  // optional .pbdb.db_brief m_players = 1;
  bool has_m_players() const;
  private:
  bool _internal_has_m_players() const;
  public:
  void clear_m_players();
  const ::pbdb::db_brief& m_players() const;
  PROTOBUF_NODISCARD ::pbdb::db_brief* release_m_players();
  ::pbdb::db_brief* mutable_m_players();
  void set_allocated_m_players(::pbdb::db_brief* m_players);
  private:
  const ::pbdb::db_brief& _internal_m_players() const;
  ::pbdb::db_brief* _internal_mutable_m_players();
  public:
  void unsafe_arena_set_allocated_m_players(
      ::pbdb::db_brief* m_players);
  ::pbdb::db_brief* unsafe_arena_release_m_players();

  // optional bool m_isconfirm = 2;
  bool has_m_isconfirm() const;
  private:
  bool _internal_has_m_isconfirm() const;
  public:
  void clear_m_isconfirm();
  bool m_isconfirm() const;
  void set_m_isconfirm(bool value);
  private:
  bool _internal_m_isconfirm() const;
  void _internal_set_m_isconfirm(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pbexample.PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::pbdb::db_brief* m_players_;
    bool m_isconfirm_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_EXAMPLE_PLAY_MATCHING final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING) */ {
 public:
  inline PROBUFF_NET_EXAMPLE_PLAY_MATCHING() : PROBUFF_NET_EXAMPLE_PLAY_MATCHING(nullptr) {}
  ~PROBUFF_NET_EXAMPLE_PLAY_MATCHING() override;
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_MATCHING(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_EXAMPLE_PLAY_MATCHING(const PROBUFF_NET_EXAMPLE_PLAY_MATCHING& from);
  PROBUFF_NET_EXAMPLE_PLAY_MATCHING(PROBUFF_NET_EXAMPLE_PLAY_MATCHING&& from) noexcept
    : PROBUFF_NET_EXAMPLE_PLAY_MATCHING() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_EXAMPLE_PLAY_MATCHING& operator=(const PROBUFF_NET_EXAMPLE_PLAY_MATCHING& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_EXAMPLE_PLAY_MATCHING& operator=(PROBUFF_NET_EXAMPLE_PLAY_MATCHING&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_EXAMPLE_PLAY_MATCHING& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_EXAMPLE_PLAY_MATCHING* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_EXAMPLE_PLAY_MATCHING*>(
               &_PROBUFF_NET_EXAMPLE_PLAY_MATCHING_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PROBUFF_NET_EXAMPLE_PLAY_MATCHING& a, PROBUFF_NET_EXAMPLE_PLAY_MATCHING& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_EXAMPLE_PLAY_MATCHING* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_EXAMPLE_PLAY_MATCHING* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_EXAMPLE_PLAY_MATCHING* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_EXAMPLE_PLAY_MATCHING>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_EXAMPLE_PLAY_MATCHING& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_EXAMPLE_PLAY_MATCHING& from) {
    PROBUFF_NET_EXAMPLE_PLAY_MATCHING::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_EXAMPLE_PLAY_MATCHING* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING";
  }
  protected:
  explicit PROBUFF_NET_EXAMPLE_PLAY_MATCHING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMPlayersFieldNumber = 5,
    kMRoomidFieldNumber = 1,
    kMTotalnumberFieldNumber = 2,
    kMRoomcreateFieldNumber = 3,
    kMRoomreadyFieldNumber = 4,
  };
  // repeated .pbexample.PLAYER m_players = 5;
  int m_players_size() const;
  private:
  int _internal_m_players_size() const;
  public:
  void clear_m_players();
  ::pbexample::PLAYER* mutable_m_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbexample::PLAYER >*
      mutable_m_players();
  private:
  const ::pbexample::PLAYER& _internal_m_players(int index) const;
  ::pbexample::PLAYER* _internal_add_m_players();
  public:
  const ::pbexample::PLAYER& m_players(int index) const;
  ::pbexample::PLAYER* add_m_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbexample::PLAYER >&
      m_players() const;

  // optional int32 m_roomid = 1;
  bool has_m_roomid() const;
  private:
  bool _internal_has_m_roomid() const;
  public:
  void clear_m_roomid();
  int32_t m_roomid() const;
  void set_m_roomid(int32_t value);
  private:
  int32_t _internal_m_roomid() const;
  void _internal_set_m_roomid(int32_t value);
  public:

  // optional int32 m_totalnumber = 2;
  bool has_m_totalnumber() const;
  private:
  bool _internal_has_m_totalnumber() const;
  public:
  void clear_m_totalnumber();
  int32_t m_totalnumber() const;
  void set_m_totalnumber(int32_t value);
  private:
  int32_t _internal_m_totalnumber() const;
  void _internal_set_m_totalnumber(int32_t value);
  public:

  // optional int64 m_roomcreate = 3;
  bool has_m_roomcreate() const;
  private:
  bool _internal_has_m_roomcreate() const;
  public:
  void clear_m_roomcreate();
  int64_t m_roomcreate() const;
  void set_m_roomcreate(int64_t value);
  private:
  int64_t _internal_m_roomcreate() const;
  void _internal_set_m_roomcreate(int64_t value);
  public:

  // optional int64 m_roomready = 4;
  bool has_m_roomready() const;
  private:
  bool _internal_has_m_roomready() const;
  public:
  void clear_m_roomready();
  int64_t m_roomready() const;
  void set_m_roomready(int64_t value);
  private:
  int64_t _internal_m_roomready() const;
  void _internal_set_m_roomready(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbexample::PLAYER > m_players_;
    int32_t m_roomid_;
    int32_t m_totalnumber_;
    int64_t m_roomcreate_;
    int64_t m_roomready_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT) */ {
 public:
  inline PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT() : PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT(nullptr) {}
  ~PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT() override;
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT(const PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT& from);
  PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT(PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT&& from) noexcept
    : PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT& operator=(const PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT& operator=(PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT*>(
               &_PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT& a, PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT& from) {
    PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT";
  }
  protected:
  explicit PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMErrorcodeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
  };
  // optional .pbexample.PLAY_EERROR_CODE m_errorcode = 1;
  bool has_m_errorcode() const;
  private:
  bool _internal_has_m_errorcode() const;
  public:
  void clear_m_errorcode();
  ::pbexample::PLAY_EERROR_CODE m_errorcode() const;
  void set_m_errorcode(::pbexample::PLAY_EERROR_CODE value);
  private:
  ::pbexample::PLAY_EERROR_CODE _internal_m_errorcode() const;
  void _internal_set_m_errorcode(::pbexample::PLAY_EERROR_CODE value);
  public:

  // optional int32 m_roomid = 2;
  bool has_m_roomid() const;
  private:
  bool _internal_has_m_roomid() const;
  public:
  void clear_m_roomid();
  int32_t m_roomid() const;
  void set_m_roomid(int32_t value);
  private:
  int32_t _internal_m_roomid() const;
  void _internal_set_m_roomid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int m_errorcode_;
    int32_t m_roomid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM) */ {
 public:
  inline PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM() : PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM(nullptr) {}
  ~PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM() override;
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM(const PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM& from);
  PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM(PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM&& from) noexcept
    : PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM& operator=(const PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM& operator=(PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM*>(
               &_PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM& a, PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM& from) {
    PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM";
  }
  protected:
  explicit PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMIsconfirmFieldNumber = 1,
    kMRoomidFieldNumber = 2,
  };
  // optional bool m_isconfirm = 1;
  bool has_m_isconfirm() const;
  private:
  bool _internal_has_m_isconfirm() const;
  public:
  void clear_m_isconfirm();
  bool m_isconfirm() const;
  void set_m_isconfirm(bool value);
  private:
  bool _internal_m_isconfirm() const;
  void _internal_set_m_isconfirm(bool value);
  public:

  // optional int32 m_roomid = 2;
  bool has_m_roomid() const;
  private:
  bool _internal_has_m_roomid() const;
  public:
  void clear_m_roomid();
  int32_t m_roomid() const;
  void set_m_roomid(int32_t value);
  private:
  int32_t _internal_m_roomid() const;
  void _internal_set_m_roomid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool m_isconfirm_;
    int32_t m_roomid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class PROBUFF_NET_EXAMPLE_PLAY_CANCEL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL) */ {
 public:
  inline PROBUFF_NET_EXAMPLE_PLAY_CANCEL() : PROBUFF_NET_EXAMPLE_PLAY_CANCEL(nullptr) {}
  ~PROBUFF_NET_EXAMPLE_PLAY_CANCEL() override;
  explicit PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_CANCEL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROBUFF_NET_EXAMPLE_PLAY_CANCEL(const PROBUFF_NET_EXAMPLE_PLAY_CANCEL& from);
  PROBUFF_NET_EXAMPLE_PLAY_CANCEL(PROBUFF_NET_EXAMPLE_PLAY_CANCEL&& from) noexcept
    : PROBUFF_NET_EXAMPLE_PLAY_CANCEL() {
    *this = ::std::move(from);
  }

  inline PROBUFF_NET_EXAMPLE_PLAY_CANCEL& operator=(const PROBUFF_NET_EXAMPLE_PLAY_CANCEL& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROBUFF_NET_EXAMPLE_PLAY_CANCEL& operator=(PROBUFF_NET_EXAMPLE_PLAY_CANCEL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROBUFF_NET_EXAMPLE_PLAY_CANCEL& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROBUFF_NET_EXAMPLE_PLAY_CANCEL* internal_default_instance() {
    return reinterpret_cast<const PROBUFF_NET_EXAMPLE_PLAY_CANCEL*>(
               &_PROBUFF_NET_EXAMPLE_PLAY_CANCEL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PROBUFF_NET_EXAMPLE_PLAY_CANCEL& a, PROBUFF_NET_EXAMPLE_PLAY_CANCEL& b) {
    a.Swap(&b);
  }
  inline void Swap(PROBUFF_NET_EXAMPLE_PLAY_CANCEL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROBUFF_NET_EXAMPLE_PLAY_CANCEL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PROBUFF_NET_EXAMPLE_PLAY_CANCEL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PROBUFF_NET_EXAMPLE_PLAY_CANCEL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PROBUFF_NET_EXAMPLE_PLAY_CANCEL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PROBUFF_NET_EXAMPLE_PLAY_CANCEL& from) {
    PROBUFF_NET_EXAMPLE_PLAY_CANCEL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROBUFF_NET_EXAMPLE_PLAY_CANCEL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL";
  }
  protected:
  explicit PROBUFF_NET_EXAMPLE_PLAY_CANCEL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTypeFieldNumber = 1,
    kMRoomidFieldNumber = 2,
  };
  // optional .pbexample.EPLAY_TYPE m_type = 1;
  bool has_m_type() const;
  private:
  bool _internal_has_m_type() const;
  public:
  void clear_m_type();
  ::pbexample::EPLAY_TYPE m_type() const;
  void set_m_type(::pbexample::EPLAY_TYPE value);
  private:
  ::pbexample::EPLAY_TYPE _internal_m_type() const;
  void _internal_set_m_type(::pbexample::EPLAY_TYPE value);
  public:

  // optional int32 m_roomid = 2;
  bool has_m_roomid() const;
  private:
  bool _internal_has_m_roomid() const;
  public:
  void clear_m_roomid();
  int32_t m_roomid() const;
  void set_m_roomid(int32_t value);
  private:
  int32_t _internal_m_roomid() const;
  void _internal_set_m_roomid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int m_type_;
    int32_t m_roomid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_example_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PROBUFF_NET_EXAMPLE_PLAY_JOIN

// optional .pbexample.EPLAY_TYPE m_type = 1;
inline bool PROBUFF_NET_EXAMPLE_PLAY_JOIN::_internal_has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_EXAMPLE_PLAY_JOIN::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_JOIN::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::pbexample::EPLAY_TYPE PROBUFF_NET_EXAMPLE_PLAY_JOIN::_internal_m_type() const {
  return static_cast< ::pbexample::EPLAY_TYPE >(_impl_.m_type_);
}
inline ::pbexample::EPLAY_TYPE PROBUFF_NET_EXAMPLE_PLAY_JOIN::m_type() const {
  // @@protoc_insertion_point(field_get:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_JOIN::_internal_set_m_type(::pbexample::EPLAY_TYPE value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_type_ = value;
}
inline void PROBUFF_NET_EXAMPLE_PLAY_JOIN::set_m_type(::pbexample::EPLAY_TYPE value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN.m_type)
}

// -------------------------------------------------------------------

// PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE

// optional int32 m_roomid = 2;
inline bool PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::_internal_has_m_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::has_m_roomid() const {
  return _internal_has_m_roomid();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::clear_m_roomid() {
  _impl_.m_roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::_internal_m_roomid() const {
  return _impl_.m_roomid_;
}
inline int32_t PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::_internal_set_m_roomid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_roomid_ = value;
}
inline void PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::set_m_roomid(int32_t value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE.m_roomid)
}

// -------------------------------------------------------------------

// PLAYER

// optional .pbdb.db_brief m_players = 1;
inline bool PLAYER::_internal_has_m_players() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.m_players_ != nullptr);
  return value;
}
inline bool PLAYER::has_m_players() const {
  return _internal_has_m_players();
}
inline const ::pbdb::db_brief& PLAYER::_internal_m_players() const {
  const ::pbdb::db_brief* p = _impl_.m_players_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbdb::db_brief&>(
      ::pbdb::_db_brief_default_instance_);
}
inline const ::pbdb::db_brief& PLAYER::m_players() const {
  // @@protoc_insertion_point(field_get:pbexample.PLAYER.m_players)
  return _internal_m_players();
}
inline void PLAYER::unsafe_arena_set_allocated_m_players(
    ::pbdb::db_brief* m_players) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_players_);
  }
  _impl_.m_players_ = m_players;
  if (m_players) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbexample.PLAYER.m_players)
}
inline ::pbdb::db_brief* PLAYER::release_m_players() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pbdb::db_brief* temp = _impl_.m_players_;
  _impl_.m_players_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbdb::db_brief* PLAYER::unsafe_arena_release_m_players() {
  // @@protoc_insertion_point(field_release:pbexample.PLAYER.m_players)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pbdb::db_brief* temp = _impl_.m_players_;
  _impl_.m_players_ = nullptr;
  return temp;
}
inline ::pbdb::db_brief* PLAYER::_internal_mutable_m_players() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.m_players_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbdb::db_brief>(GetArenaForAllocation());
    _impl_.m_players_ = p;
  }
  return _impl_.m_players_;
}
inline ::pbdb::db_brief* PLAYER::mutable_m_players() {
  ::pbdb::db_brief* _msg = _internal_mutable_m_players();
  // @@protoc_insertion_point(field_mutable:pbexample.PLAYER.m_players)
  return _msg;
}
inline void PLAYER::set_allocated_m_players(::pbdb::db_brief* m_players) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_players_);
  }
  if (m_players) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(m_players));
    if (message_arena != submessage_arena) {
      m_players = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_players, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_players_ = m_players;
  // @@protoc_insertion_point(field_set_allocated:pbexample.PLAYER.m_players)
}

// optional bool m_isconfirm = 2;
inline bool PLAYER::_internal_has_m_isconfirm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PLAYER::has_m_isconfirm() const {
  return _internal_has_m_isconfirm();
}
inline void PLAYER::clear_m_isconfirm() {
  _impl_.m_isconfirm_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool PLAYER::_internal_m_isconfirm() const {
  return _impl_.m_isconfirm_;
}
inline bool PLAYER::m_isconfirm() const {
  // @@protoc_insertion_point(field_get:pbexample.PLAYER.m_isconfirm)
  return _internal_m_isconfirm();
}
inline void PLAYER::_internal_set_m_isconfirm(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_isconfirm_ = value;
}
inline void PLAYER::set_m_isconfirm(bool value) {
  _internal_set_m_isconfirm(value);
  // @@protoc_insertion_point(field_set:pbexample.PLAYER.m_isconfirm)
}

// -------------------------------------------------------------------

// PROBUFF_NET_EXAMPLE_PLAY_MATCHING

// optional int32 m_roomid = 1;
inline bool PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_has_m_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_EXAMPLE_PLAY_MATCHING::has_m_roomid() const {
  return _internal_has_m_roomid();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::clear_m_roomid() {
  _impl_.m_roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_m_roomid() const {
  return _impl_.m_roomid_;
}
inline int32_t PROBUFF_NET_EXAMPLE_PLAY_MATCHING::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_set_m_roomid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_roomid_ = value;
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::set_m_roomid(int32_t value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING.m_roomid)
}

// optional int32 m_totalnumber = 2;
inline bool PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_has_m_totalnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_EXAMPLE_PLAY_MATCHING::has_m_totalnumber() const {
  return _internal_has_m_totalnumber();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::clear_m_totalnumber() {
  _impl_.m_totalnumber_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_m_totalnumber() const {
  return _impl_.m_totalnumber_;
}
inline int32_t PROBUFF_NET_EXAMPLE_PLAY_MATCHING::m_totalnumber() const {
  // @@protoc_insertion_point(field_get:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING.m_totalnumber)
  return _internal_m_totalnumber();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_set_m_totalnumber(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_totalnumber_ = value;
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::set_m_totalnumber(int32_t value) {
  _internal_set_m_totalnumber(value);
  // @@protoc_insertion_point(field_set:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING.m_totalnumber)
}

// optional int64 m_roomcreate = 3;
inline bool PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_has_m_roomcreate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PROBUFF_NET_EXAMPLE_PLAY_MATCHING::has_m_roomcreate() const {
  return _internal_has_m_roomcreate();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::clear_m_roomcreate() {
  _impl_.m_roomcreate_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_m_roomcreate() const {
  return _impl_.m_roomcreate_;
}
inline int64_t PROBUFF_NET_EXAMPLE_PLAY_MATCHING::m_roomcreate() const {
  // @@protoc_insertion_point(field_get:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING.m_roomcreate)
  return _internal_m_roomcreate();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_set_m_roomcreate(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_roomcreate_ = value;
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::set_m_roomcreate(int64_t value) {
  _internal_set_m_roomcreate(value);
  // @@protoc_insertion_point(field_set:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING.m_roomcreate)
}

// optional int64 m_roomready = 4;
inline bool PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_has_m_roomready() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PROBUFF_NET_EXAMPLE_PLAY_MATCHING::has_m_roomready() const {
  return _internal_has_m_roomready();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::clear_m_roomready() {
  _impl_.m_roomready_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_m_roomready() const {
  return _impl_.m_roomready_;
}
inline int64_t PROBUFF_NET_EXAMPLE_PLAY_MATCHING::m_roomready() const {
  // @@protoc_insertion_point(field_get:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING.m_roomready)
  return _internal_m_roomready();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_set_m_roomready(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.m_roomready_ = value;
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::set_m_roomready(int64_t value) {
  _internal_set_m_roomready(value);
  // @@protoc_insertion_point(field_set:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING.m_roomready)
}

// repeated .pbexample.PLAYER m_players = 5;
inline int PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_m_players_size() const {
  return _impl_.m_players_.size();
}
inline int PROBUFF_NET_EXAMPLE_PLAY_MATCHING::m_players_size() const {
  return _internal_m_players_size();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::clear_m_players() {
  _impl_.m_players_.Clear();
}
inline ::pbexample::PLAYER* PROBUFF_NET_EXAMPLE_PLAY_MATCHING::mutable_m_players(int index) {
  // @@protoc_insertion_point(field_mutable:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING.m_players)
  return _impl_.m_players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbexample::PLAYER >*
PROBUFF_NET_EXAMPLE_PLAY_MATCHING::mutable_m_players() {
  // @@protoc_insertion_point(field_mutable_list:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING.m_players)
  return &_impl_.m_players_;
}
inline const ::pbexample::PLAYER& PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_m_players(int index) const {
  return _impl_.m_players_.Get(index);
}
inline const ::pbexample::PLAYER& PROBUFF_NET_EXAMPLE_PLAY_MATCHING::m_players(int index) const {
  // @@protoc_insertion_point(field_get:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING.m_players)
  return _internal_m_players(index);
}
inline ::pbexample::PLAYER* PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_internal_add_m_players() {
  return _impl_.m_players_.Add();
}
inline ::pbexample::PLAYER* PROBUFF_NET_EXAMPLE_PLAY_MATCHING::add_m_players() {
  ::pbexample::PLAYER* _add = _internal_add_m_players();
  // @@protoc_insertion_point(field_add:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING.m_players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pbexample::PLAYER >&
PROBUFF_NET_EXAMPLE_PLAY_MATCHING::m_players() const {
  // @@protoc_insertion_point(field_list:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING.m_players)
  return _impl_.m_players_;
}

// -------------------------------------------------------------------

// PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT

// optional .pbexample.PLAY_EERROR_CODE m_errorcode = 1;
inline bool PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::_internal_has_m_errorcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::has_m_errorcode() const {
  return _internal_has_m_errorcode();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::clear_m_errorcode() {
  _impl_.m_errorcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::pbexample::PLAY_EERROR_CODE PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::_internal_m_errorcode() const {
  return static_cast< ::pbexample::PLAY_EERROR_CODE >(_impl_.m_errorcode_);
}
inline ::pbexample::PLAY_EERROR_CODE PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::m_errorcode() const {
  // @@protoc_insertion_point(field_get:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT.m_errorcode)
  return _internal_m_errorcode();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::_internal_set_m_errorcode(::pbexample::PLAY_EERROR_CODE value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_errorcode_ = value;
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::set_m_errorcode(::pbexample::PLAY_EERROR_CODE value) {
  _internal_set_m_errorcode(value);
  // @@protoc_insertion_point(field_set:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT.m_errorcode)
}

// optional int32 m_roomid = 2;
inline bool PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::_internal_has_m_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::has_m_roomid() const {
  return _internal_has_m_roomid();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::clear_m_roomid() {
  _impl_.m_roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::_internal_m_roomid() const {
  return _impl_.m_roomid_;
}
inline int32_t PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::_internal_set_m_roomid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_roomid_ = value;
}
inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::set_m_roomid(int32_t value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT.m_roomid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM

// optional bool m_isconfirm = 1;
inline bool PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::_internal_has_m_isconfirm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::has_m_isconfirm() const {
  return _internal_has_m_isconfirm();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::clear_m_isconfirm() {
  _impl_.m_isconfirm_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::_internal_m_isconfirm() const {
  return _impl_.m_isconfirm_;
}
inline bool PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::m_isconfirm() const {
  // @@protoc_insertion_point(field_get:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM.m_isconfirm)
  return _internal_m_isconfirm();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::_internal_set_m_isconfirm(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_isconfirm_ = value;
}
inline void PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::set_m_isconfirm(bool value) {
  _internal_set_m_isconfirm(value);
  // @@protoc_insertion_point(field_set:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM.m_isconfirm)
}

// optional int32 m_roomid = 2;
inline bool PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::_internal_has_m_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::has_m_roomid() const {
  return _internal_has_m_roomid();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::clear_m_roomid() {
  _impl_.m_roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::_internal_m_roomid() const {
  return _impl_.m_roomid_;
}
inline int32_t PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::_internal_set_m_roomid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_roomid_ = value;
}
inline void PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::set_m_roomid(int32_t value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM.m_roomid)
}

// -------------------------------------------------------------------

// PROBUFF_NET_EXAMPLE_PLAY_CANCEL

// optional .pbexample.EPLAY_TYPE m_type = 1;
inline bool PROBUFF_NET_EXAMPLE_PLAY_CANCEL::_internal_has_m_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PROBUFF_NET_EXAMPLE_PLAY_CANCEL::has_m_type() const {
  return _internal_has_m_type();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_CANCEL::clear_m_type() {
  _impl_.m_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::pbexample::EPLAY_TYPE PROBUFF_NET_EXAMPLE_PLAY_CANCEL::_internal_m_type() const {
  return static_cast< ::pbexample::EPLAY_TYPE >(_impl_.m_type_);
}
inline ::pbexample::EPLAY_TYPE PROBUFF_NET_EXAMPLE_PLAY_CANCEL::m_type() const {
  // @@protoc_insertion_point(field_get:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL.m_type)
  return _internal_m_type();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_CANCEL::_internal_set_m_type(::pbexample::EPLAY_TYPE value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_type_ = value;
}
inline void PROBUFF_NET_EXAMPLE_PLAY_CANCEL::set_m_type(::pbexample::EPLAY_TYPE value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL.m_type)
}

// optional int32 m_roomid = 2;
inline bool PROBUFF_NET_EXAMPLE_PLAY_CANCEL::_internal_has_m_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PROBUFF_NET_EXAMPLE_PLAY_CANCEL::has_m_roomid() const {
  return _internal_has_m_roomid();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_CANCEL::clear_m_roomid() {
  _impl_.m_roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t PROBUFF_NET_EXAMPLE_PLAY_CANCEL::_internal_m_roomid() const {
  return _impl_.m_roomid_;
}
inline int32_t PROBUFF_NET_EXAMPLE_PLAY_CANCEL::m_roomid() const {
  // @@protoc_insertion_point(field_get:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL.m_roomid)
  return _internal_m_roomid();
}
inline void PROBUFF_NET_EXAMPLE_PLAY_CANCEL::_internal_set_m_roomid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.m_roomid_ = value;
}
inline void PROBUFF_NET_EXAMPLE_PLAY_CANCEL::set_m_roomid(int32_t value) {
  _internal_set_m_roomid(value);
  // @@protoc_insertion_point(field_set:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL.m_roomid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbexample

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pbexample::EPLAY_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbexample::EPLAY_TYPE>() {
  return ::pbexample::EPLAY_TYPE_descriptor();
}
template <> struct is_proto_enum< ::pbexample::PLAY_EERROR_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbexample::PLAY_EERROR_CODE>() {
  return ::pbexample::PLAY_EERROR_CODE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_example_2eproto
