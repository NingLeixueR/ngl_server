// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#include "example.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pbexample {
PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_JOIN::PROBUFF_NET_EXAMPLE_PLAY_JOIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_type_)*/0} {}
struct PROBUFF_NET_EXAMPLE_PLAY_JOINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_JOINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_EXAMPLE_PLAY_JOINDefaultTypeInternal() {}
  union {
    PROBUFF_NET_EXAMPLE_PLAY_JOIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_EXAMPLE_PLAY_JOINDefaultTypeInternal _PROBUFF_NET_EXAMPLE_PLAY_JOIN_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_roomid_)*/0
  , /*decltype(_impl_.m_waittime_)*/0} {}
struct PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSEDefaultTypeInternal _PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PLAYER::PLAYER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_players_)*/nullptr
  , /*decltype(_impl_.m_isconfirm_)*/false} {}
struct PLAYERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PLAYERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PLAYERDefaultTypeInternal() {}
  union {
    PLAYER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PLAYERDefaultTypeInternal _PLAYER_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_MATCHING::PROBUFF_NET_EXAMPLE_PLAY_MATCHING(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_players_)*/{}
  , /*decltype(_impl_.m_roomid_)*/0
  , /*decltype(_impl_.m_totalnumber_)*/0} {}
struct PROBUFF_NET_EXAMPLE_PLAY_MATCHINGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_MATCHINGDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_EXAMPLE_PLAY_MATCHINGDefaultTypeInternal() {}
  union {
    PROBUFF_NET_EXAMPLE_PLAY_MATCHING _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_EXAMPLE_PLAY_MATCHINGDefaultTypeInternal _PROBUFF_NET_EXAMPLE_PLAY_MATCHING_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_errorcode_)*/0
  , /*decltype(_impl_.m_roomid_)*/0} {}
struct PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULTDefaultTypeInternal() {}
  union {
    PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULTDefaultTypeInternal _PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::PROBUFF_NET_EXAMPLE_PLAY_CONFIRM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_isconfirm_)*/false
  , /*decltype(_impl_.m_roomid_)*/0} {}
struct PROBUFF_NET_EXAMPLE_PLAY_CONFIRMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_CONFIRMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_EXAMPLE_PLAY_CONFIRMDefaultTypeInternal() {}
  union {
    PROBUFF_NET_EXAMPLE_PLAY_CONFIRM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_EXAMPLE_PLAY_CONFIRMDefaultTypeInternal _PROBUFF_NET_EXAMPLE_PLAY_CONFIRM_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_isconfirm_)*/false
  , /*decltype(_impl_.m_roomid_)*/0} {}
struct PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRMDefaultTypeInternal() {}
  union {
    PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRMDefaultTypeInternal _PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_CANCEL::PROBUFF_NET_EXAMPLE_PLAY_CANCEL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_roomid_)*/0} {}
struct PROBUFF_NET_EXAMPLE_PLAY_CANCELDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_EXAMPLE_PLAY_CANCELDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_EXAMPLE_PLAY_CANCELDefaultTypeInternal() {}
  union {
    PROBUFF_NET_EXAMPLE_PLAY_CANCEL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_EXAMPLE_PLAY_CANCELDefaultTypeInternal _PROBUFF_NET_EXAMPLE_PLAY_CANCEL_default_instance_;
}  // namespace pbexample
static ::_pb::Metadata file_level_metadata_example_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_example_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_example_2eproto = nullptr;

const uint32_t TableStruct_example_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN, _impl_.m_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE, _impl_.m_roomid_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE, _impl_.m_waittime_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbexample::PLAYER, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PLAYER, _impl_.m_players_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PLAYER, _impl_.m_isconfirm_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING, _impl_.m_roomid_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING, _impl_.m_totalnumber_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING, _impl_.m_players_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT, _impl_.m_errorcode_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT, _impl_.m_roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CONFIRM, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CONFIRM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CONFIRM, _impl_.m_isconfirm_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CONFIRM, _impl_.m_roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM, _impl_.m_isconfirm_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM, _impl_.m_roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CANCEL, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CANCEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CANCEL, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CANCEL, _impl_.m_roomid_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN)},
  { 8, 16, -1, sizeof(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE)},
  { 18, 26, -1, sizeof(::pbexample::PLAYER)},
  { 28, 37, -1, sizeof(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING)},
  { 40, 48, -1, sizeof(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT)},
  { 50, 58, -1, sizeof(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CONFIRM)},
  { 60, 68, -1, sizeof(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM)},
  { 70, 78, -1, sizeof(::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CANCEL)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pbexample::_PROBUFF_NET_EXAMPLE_PLAY_JOIN_default_instance_._instance,
  &::pbexample::_PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE_default_instance_._instance,
  &::pbexample::_PLAYER_default_instance_._instance,
  &::pbexample::_PROBUFF_NET_EXAMPLE_PLAY_MATCHING_default_instance_._instance,
  &::pbexample::_PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT_default_instance_._instance,
  &::pbexample::_PROBUFF_NET_EXAMPLE_PLAY_CONFIRM_default_instance_._instance,
  &::pbexample::_PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM_default_instance_._instance,
  &::pbexample::_PROBUFF_NET_EXAMPLE_PLAY_CANCEL_default_instance_._instance,
};

const char descriptor_table_protodef_example_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rexample.proto\022\tpbexample\032\010db.proto\032\tne"
  "t.proto\"V\n\035PROBUFF_NET_EXAMPLE_PLAY_JOIN"
  "\022*\n\006m_type\030\001 \001(\0162\025.pbexample.EPLAY_TYPEH"
  "\000\210\001\001B\t\n\007_m_type\"t\n&PROBUFF_NET_EXAMPLE_P"
  "LAY_JOIN_RESPONSE\022\025\n\010m_roomid\030\002 \001(\005H\000\210\001\001"
  "\022\027\n\nm_waittime\030\003 \001(\005H\001\210\001\001B\013\n\t_m_roomidB\r"
  "\n\013_m_waittime\"h\n\006PLAYER\022&\n\tm_players\030\001 \001"
  "(\0132\016.pbdb.db_briefH\000\210\001\001\022\030\n\013m_isconfirm\030\002"
  " \001(\010H\001\210\001\001B\014\n\n_m_playersB\016\n\014_m_isconfirm\""
  "\233\001\n!PROBUFF_NET_EXAMPLE_PLAY_MATCHING\022\025\n"
  "\010m_roomid\030\001 \001(\005H\000\210\001\001\022\032\n\rm_totalnumber\030\002 "
  "\001(\005H\001\210\001\001\022$\n\tm_players\030\003 \003(\0132\021.pbexample."
  "PLAYERB\013\n\t_m_roomidB\020\n\016_m_totalnumber\"\225\001"
  "\n(PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESU"
  "LT\0225\n\013m_errorcode\030\001 \001(\0162\033.pbexample.PLAY"
  "_EERROR_CODEH\000\210\001\001\022\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001"
  "B\016\n\014_m_errorcodeB\013\n\t_m_roomid\"p\n PROBUFF"
  "_NET_EXAMPLE_PLAY_CONFIRM\022\030\n\013m_isconfirm"
  "\030\001 \001(\010H\000\210\001\001\022\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001B\016\n\014_m"
  "_isconfirmB\013\n\t_m_roomid\"w\n\'PROBUFF_NET_E"
  "XAMPLE_PLAY_PLAYER_CONFIRM\022\030\n\013m_isconfir"
  "m\030\001 \001(\010H\000\210\001\001\022\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001B\016\n\014_"
  "m_isconfirmB\013\n\t_m_roomid\"|\n\037PROBUFF_NET_"
  "EXAMPLE_PLAY_CANCEL\022*\n\006m_type\030\001 \001(\0162\025.pb"
  "example.EPLAY_TYPEH\000\210\001\001\022\025\n\010m_roomid\030\002 \001("
  "\005H\001\210\001\001B\t\n\007_m_typeB\013\n\t_m_roomid*$\n\nEPLAY_"
  "TYPE\022\026\n\022EPLAY_GUESS_NUMBER\020\000*\267\001\n\020PLAY_EE"
  "RROR_CODE\022\027\n\023EERROR_CODE_SUCCESS\020\000\022\027\n\023EE"
  "RROR_CODE_TIMEOUT\020\001\022\026\n\022EERROR_CODE_CANCE"
  "L\020\002\022\036\n\032EERROR_CODE_CURRENT_CANCEL\020\003\022\033\n\027E"
  "ERROR_CODE_NOTFINDROOM\020\004\022\034\n\030EERROR_CODE_"
  "ROOM_DESTORY\020\005B\002H\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_example_2eproto_deps[2] = {
  &::descriptor_table_db_2eproto,
  &::descriptor_table_net_2eproto,
};
static ::_pbi::once_flag descriptor_table_example_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_example_2eproto = {
    false, false, 1266, descriptor_table_protodef_example_2eproto,
    "example.proto",
    &descriptor_table_example_2eproto_once, descriptor_table_example_2eproto_deps, 2, 8,
    schemas, file_default_instances, TableStruct_example_2eproto::offsets,
    file_level_metadata_example_2eproto, file_level_enum_descriptors_example_2eproto,
    file_level_service_descriptors_example_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_example_2eproto_getter() {
  return &descriptor_table_example_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_example_2eproto(&descriptor_table_example_2eproto);
namespace pbexample {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPLAY_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_example_2eproto);
  return file_level_enum_descriptors_example_2eproto[0];
}
bool EPLAY_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PLAY_EERROR_CODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_example_2eproto);
  return file_level_enum_descriptors_example_2eproto[1];
}
bool PLAY_EERROR_CODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PROBUFF_NET_EXAMPLE_PLAY_JOIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_EXAMPLE_PLAY_JOIN>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_EXAMPLE_PLAY_JOIN::PROBUFF_NET_EXAMPLE_PLAY_JOIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN)
}
PROBUFF_NET_EXAMPLE_PLAY_JOIN::PROBUFF_NET_EXAMPLE_PLAY_JOIN(const PROBUFF_NET_EXAMPLE_PLAY_JOIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_EXAMPLE_PLAY_JOIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_type_ = from._impl_.m_type_;
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN)
}

inline void PROBUFF_NET_EXAMPLE_PLAY_JOIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){0}
  };
}

PROBUFF_NET_EXAMPLE_PLAY_JOIN::~PROBUFF_NET_EXAMPLE_PLAY_JOIN() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_EXAMPLE_PLAY_JOIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_EXAMPLE_PLAY_JOIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_EXAMPLE_PLAY_JOIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_EXAMPLE_PLAY_JOIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbexample.EPLAY_TYPE m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbexample::EPLAY_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_EXAMPLE_PLAY_JOIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbexample.EPLAY_TYPE m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN)
  return target;
}

size_t PROBUFF_NET_EXAMPLE_PLAY_JOIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .pbexample.EPLAY_TYPE m_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_EXAMPLE_PLAY_JOIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_EXAMPLE_PLAY_JOIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_EXAMPLE_PLAY_JOIN::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_EXAMPLE_PLAY_JOIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_EXAMPLE_PLAY_JOIN*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_EXAMPLE_PLAY_JOIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_type()) {
    _this->_internal_set_m_type(from._internal_m_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_EXAMPLE_PLAY_JOIN::CopyFrom(const PROBUFF_NET_EXAMPLE_PLAY_JOIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_EXAMPLE_PLAY_JOIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_EXAMPLE_PLAY_JOIN::InternalSwap(PROBUFF_NET_EXAMPLE_PLAY_JOIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_type_, other->_impl_.m_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_EXAMPLE_PLAY_JOIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[0]);
}

// ===================================================================

class PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_waittime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE)
}
PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE(const PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roomid_){}
    , decltype(_impl_.m_waittime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_roomid_, &from._impl_.m_roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_waittime_) -
    reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_waittime_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE)
}

inline void PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roomid_){0}
    , decltype(_impl_.m_waittime_){0}
  };
}

PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::~PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_roomid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_waittime_) -
        reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_waittime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_waittime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_m_waittime(&has_bits);
          _impl_.m_waittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  // optional int32 m_waittime = 3;
  if (_internal_has_m_waittime()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_waittime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE)
  return target;
}

size_t PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 m_roomid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_roomid());
    }

    // optional int32 m_waittime = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_waittime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_waittime_ = from._impl_.m_waittime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::CopyFrom(const PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::InternalSwap(PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE, _impl_.m_waittime_)
      + sizeof(PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::_impl_.m_waittime_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE, _impl_.m_roomid_)>(
          reinterpret_cast<char*>(&_impl_.m_roomid_),
          reinterpret_cast<char*>(&other->_impl_.m_roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[1]);
}

// ===================================================================

class PLAYER::_Internal {
 public:
  using HasBits = decltype(std::declval<PLAYER>()._impl_._has_bits_);
  static const ::pbdb::db_brief& m_players(const PLAYER* msg);
  static void set_has_m_players(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_isconfirm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pbdb::db_brief&
PLAYER::_Internal::m_players(const PLAYER* msg) {
  return *msg->_impl_.m_players_;
}
void PLAYER::clear_m_players() {
  if (_impl_.m_players_ != nullptr) _impl_.m_players_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PLAYER::PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PLAYER)
}
PLAYER::PLAYER(const PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PLAYER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_players_){nullptr}
    , decltype(_impl_.m_isconfirm_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_players()) {
    _this->_impl_.m_players_ = new ::pbdb::db_brief(*from._impl_.m_players_);
  }
  _this->_impl_.m_isconfirm_ = from._impl_.m_isconfirm_;
  // @@protoc_insertion_point(copy_constructor:pbexample.PLAYER)
}

inline void PLAYER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_players_){nullptr}
    , decltype(_impl_.m_isconfirm_){false}
  };
}

PLAYER::~PLAYER() {
  // @@protoc_insertion_point(destructor:pbexample.PLAYER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PLAYER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.m_players_;
}

void PLAYER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PLAYER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.m_players_ != nullptr);
    _impl_.m_players_->Clear();
  }
  _impl_.m_isconfirm_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PLAYER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbdb.db_brief m_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_players(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool m_isconfirm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_isconfirm(&has_bits);
          _impl_.m_isconfirm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PLAYER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PLAYER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbdb.db_brief m_players = 1;
  if (_internal_has_m_players()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::m_players(this),
        _Internal::m_players(this).GetCachedSize(), target, stream);
  }

  // optional bool m_isconfirm = 2;
  if (_internal_has_m_isconfirm()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_m_isconfirm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PLAYER)
  return target;
}

size_t PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PLAYER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbdb.db_brief m_players = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.m_players_);
    }

    // optional bool m_isconfirm = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PLAYER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PLAYER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PLAYER::GetClassData() const { return &_class_data_; }


void PLAYER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PLAYER*>(&to_msg);
  auto& from = static_cast<const PLAYER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PLAYER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_m_players()->::pbdb::db_brief::MergeFrom(
          from._internal_m_players());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_isconfirm_ = from._impl_.m_isconfirm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PLAYER::CopyFrom(const PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLAYER::IsInitialized() const {
  return true;
}

void PLAYER::InternalSwap(PLAYER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PLAYER, _impl_.m_isconfirm_)
      + sizeof(PLAYER::_impl_.m_isconfirm_)
      - PROTOBUF_FIELD_OFFSET(PLAYER, _impl_.m_players_)>(
          reinterpret_cast<char*>(&_impl_.m_players_),
          reinterpret_cast<char*>(&other->_impl_.m_players_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PLAYER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[2]);
}

// ===================================================================

class PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_EXAMPLE_PLAY_MATCHING>()._impl_._has_bits_);
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_totalnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_EXAMPLE_PLAY_MATCHING::PROBUFF_NET_EXAMPLE_PLAY_MATCHING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING)
}
PROBUFF_NET_EXAMPLE_PLAY_MATCHING::PROBUFF_NET_EXAMPLE_PLAY_MATCHING(const PROBUFF_NET_EXAMPLE_PLAY_MATCHING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_EXAMPLE_PLAY_MATCHING* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_players_){from._impl_.m_players_}
    , decltype(_impl_.m_roomid_){}
    , decltype(_impl_.m_totalnumber_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_roomid_, &from._impl_.m_roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_totalnumber_) -
    reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_totalnumber_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING)
}

inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_players_){arena}
    , decltype(_impl_.m_roomid_){0}
    , decltype(_impl_.m_totalnumber_){0}
  };
}

PROBUFF_NET_EXAMPLE_PLAY_MATCHING::~PROBUFF_NET_EXAMPLE_PLAY_MATCHING() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_players_.~RepeatedPtrField();
}

void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_roomid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_totalnumber_) -
        reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_totalnumber_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_roomid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_totalnumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_totalnumber(&has_bits);
          _impl_.m_totalnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbexample.PLAYER m_players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_roomid = 1;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_roomid(), target);
  }

  // optional int32 m_totalnumber = 2;
  if (_internal_has_m_totalnumber()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_totalnumber(), target);
  }

  // repeated .pbexample.PLAYER m_players = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING)
  return target;
}

size_t PROBUFF_NET_EXAMPLE_PLAY_MATCHING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbexample.PLAYER m_players = 3;
  total_size += 1UL * this->_internal_m_players_size();
  for (const auto& msg : this->_impl_.m_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 m_roomid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_roomid());
    }

    // optional int32 m_totalnumber = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_totalnumber());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_EXAMPLE_PLAY_MATCHING::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_EXAMPLE_PLAY_MATCHING::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_EXAMPLE_PLAY_MATCHING*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_EXAMPLE_PLAY_MATCHING&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_players_.MergeFrom(from._impl_.m_players_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_totalnumber_ = from._impl_.m_totalnumber_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::CopyFrom(const PROBUFF_NET_EXAMPLE_PLAY_MATCHING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_EXAMPLE_PLAY_MATCHING::IsInitialized() const {
  return true;
}

void PROBUFF_NET_EXAMPLE_PLAY_MATCHING::InternalSwap(PROBUFF_NET_EXAMPLE_PLAY_MATCHING* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_players_.InternalSwap(&other->_impl_.m_players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_EXAMPLE_PLAY_MATCHING, _impl_.m_totalnumber_)
      + sizeof(PROBUFF_NET_EXAMPLE_PLAY_MATCHING::_impl_.m_totalnumber_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_EXAMPLE_PLAY_MATCHING, _impl_.m_roomid_)>(
          reinterpret_cast<char*>(&_impl_.m_roomid_),
          reinterpret_cast<char*>(&other->_impl_.m_roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_EXAMPLE_PLAY_MATCHING::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[3]);
}

// ===================================================================

class PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT>()._impl_._has_bits_);
  static void set_has_m_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT)
}
PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT(const PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_errorcode_){}
    , decltype(_impl_.m_roomid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_errorcode_, &from._impl_.m_errorcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_roomid_) -
    reinterpret_cast<char*>(&_impl_.m_errorcode_)) + sizeof(_impl_.m_roomid_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT)
}

inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_errorcode_){0}
    , decltype(_impl_.m_roomid_){0}
  };
}

PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::~PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_errorcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_roomid_) -
        reinterpret_cast<char*>(&_impl_.m_errorcode_)) + sizeof(_impl_.m_roomid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbexample.PLAY_EERROR_CODE m_errorcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_errorcode(static_cast<::pbexample::PLAY_EERROR_CODE>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbexample.PLAY_EERROR_CODE m_errorcode = 1;
  if (_internal_has_m_errorcode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_errorcode(), target);
  }

  // optional int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT)
  return target;
}

size_t PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbexample.PLAY_EERROR_CODE m_errorcode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_errorcode());
    }

    // optional int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_roomid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_errorcode_ = from._impl_.m_errorcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::CopyFrom(const PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::InternalSwap(PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT, _impl_.m_roomid_)
      + sizeof(PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::_impl_.m_roomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT, _impl_.m_errorcode_)>(
          reinterpret_cast<char*>(&_impl_.m_errorcode_),
          reinterpret_cast<char*>(&other->_impl_.m_errorcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[4]);
}

// ===================================================================

class PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_EXAMPLE_PLAY_CONFIRM>()._impl_._has_bits_);
  static void set_has_m_isconfirm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::PROBUFF_NET_EXAMPLE_PLAY_CONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CONFIRM)
}
PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::PROBUFF_NET_EXAMPLE_PLAY_CONFIRM(const PROBUFF_NET_EXAMPLE_PLAY_CONFIRM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_EXAMPLE_PLAY_CONFIRM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_isconfirm_){}
    , decltype(_impl_.m_roomid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_isconfirm_, &from._impl_.m_isconfirm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_roomid_) -
    reinterpret_cast<char*>(&_impl_.m_isconfirm_)) + sizeof(_impl_.m_roomid_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CONFIRM)
}

inline void PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_isconfirm_){false}
    , decltype(_impl_.m_roomid_){0}
  };
}

PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::~PROBUFF_NET_EXAMPLE_PLAY_CONFIRM() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CONFIRM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CONFIRM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_isconfirm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_roomid_) -
        reinterpret_cast<char*>(&_impl_.m_isconfirm_)) + sizeof(_impl_.m_roomid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool m_isconfirm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_isconfirm(&has_bits);
          _impl_.m_isconfirm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CONFIRM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool m_isconfirm = 1;
  if (_internal_has_m_isconfirm()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_m_isconfirm(), target);
  }

  // optional int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CONFIRM)
  return target;
}

size_t PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CONFIRM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool m_isconfirm = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_roomid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_EXAMPLE_PLAY_CONFIRM*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_EXAMPLE_PLAY_CONFIRM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CONFIRM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_isconfirm_ = from._impl_.m_isconfirm_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::CopyFrom(const PROBUFF_NET_EXAMPLE_PLAY_CONFIRM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::IsInitialized() const {
  return true;
}

void PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::InternalSwap(PROBUFF_NET_EXAMPLE_PLAY_CONFIRM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_EXAMPLE_PLAY_CONFIRM, _impl_.m_roomid_)
      + sizeof(PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::_impl_.m_roomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_EXAMPLE_PLAY_CONFIRM, _impl_.m_isconfirm_)>(
          reinterpret_cast<char*>(&_impl_.m_isconfirm_),
          reinterpret_cast<char*>(&other->_impl_.m_isconfirm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_EXAMPLE_PLAY_CONFIRM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[5]);
}

// ===================================================================

class PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM>()._impl_._has_bits_);
  static void set_has_m_isconfirm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM)
}
PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM(const PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_isconfirm_){}
    , decltype(_impl_.m_roomid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_isconfirm_, &from._impl_.m_isconfirm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_roomid_) -
    reinterpret_cast<char*>(&_impl_.m_isconfirm_)) + sizeof(_impl_.m_roomid_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM)
}

inline void PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_isconfirm_){false}
    , decltype(_impl_.m_roomid_){0}
  };
}

PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::~PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_isconfirm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_roomid_) -
        reinterpret_cast<char*>(&_impl_.m_isconfirm_)) + sizeof(_impl_.m_roomid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool m_isconfirm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_isconfirm(&has_bits);
          _impl_.m_isconfirm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool m_isconfirm = 1;
  if (_internal_has_m_isconfirm()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_m_isconfirm(), target);
  }

  // optional int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM)
  return target;
}

size_t PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool m_isconfirm = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_roomid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_isconfirm_ = from._impl_.m_isconfirm_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::CopyFrom(const PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::IsInitialized() const {
  return true;
}

void PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::InternalSwap(PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM, _impl_.m_roomid_)
      + sizeof(PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::_impl_.m_roomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM, _impl_.m_isconfirm_)>(
          reinterpret_cast<char*>(&_impl_.m_isconfirm_),
          reinterpret_cast<char*>(&other->_impl_.m_isconfirm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[6]);
}

// ===================================================================

class PROBUFF_NET_EXAMPLE_PLAY_CANCEL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_EXAMPLE_PLAY_CANCEL>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_EXAMPLE_PLAY_CANCEL::PROBUFF_NET_EXAMPLE_PLAY_CANCEL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL)
}
PROBUFF_NET_EXAMPLE_PLAY_CANCEL::PROBUFF_NET_EXAMPLE_PLAY_CANCEL(const PROBUFF_NET_EXAMPLE_PLAY_CANCEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_EXAMPLE_PLAY_CANCEL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_roomid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_roomid_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_roomid_));
  // @@protoc_insertion_point(copy_constructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL)
}

inline void PROBUFF_NET_EXAMPLE_PLAY_CANCEL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_roomid_){0}
  };
}

PROBUFF_NET_EXAMPLE_PLAY_CANCEL::~PROBUFF_NET_EXAMPLE_PLAY_CANCEL() {
  // @@protoc_insertion_point(destructor:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_EXAMPLE_PLAY_CANCEL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_EXAMPLE_PLAY_CANCEL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_EXAMPLE_PLAY_CANCEL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_roomid_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_roomid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_EXAMPLE_PLAY_CANCEL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbexample.EPLAY_TYPE m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbexample::EPLAY_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_EXAMPLE_PLAY_CANCEL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbexample.EPLAY_TYPE m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // optional int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL)
  return target;
}

size_t PROBUFF_NET_EXAMPLE_PLAY_CANCEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbexample.EPLAY_TYPE m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_roomid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_EXAMPLE_PLAY_CANCEL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_EXAMPLE_PLAY_CANCEL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_EXAMPLE_PLAY_CANCEL::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_EXAMPLE_PLAY_CANCEL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_EXAMPLE_PLAY_CANCEL*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_EXAMPLE_PLAY_CANCEL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_EXAMPLE_PLAY_CANCEL::CopyFrom(const PROBUFF_NET_EXAMPLE_PLAY_CANCEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbexample.PROBUFF_NET_EXAMPLE_PLAY_CANCEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_EXAMPLE_PLAY_CANCEL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_EXAMPLE_PLAY_CANCEL::InternalSwap(PROBUFF_NET_EXAMPLE_PLAY_CANCEL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_EXAMPLE_PLAY_CANCEL, _impl_.m_roomid_)
      + sizeof(PROBUFF_NET_EXAMPLE_PLAY_CANCEL::_impl_.m_roomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_EXAMPLE_PLAY_CANCEL, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_EXAMPLE_PLAY_CANCEL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_example_2eproto_getter, &descriptor_table_example_2eproto_once,
      file_level_metadata_example_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pbexample
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_JOIN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PLAYER*
Arena::CreateMaybeMessage< ::pbexample::PLAYER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_MATCHING_RESULT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CONFIRM*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CONFIRM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CONFIRM >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_PLAYER_CONFIRM >(arena);
}
template<> PROTOBUF_NOINLINE ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CANCEL*
Arena::CreateMaybeMessage< ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CANCEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbexample::PROBUFF_NET_EXAMPLE_PLAY_CANCEL >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
