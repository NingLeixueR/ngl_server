// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#include "net.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pbnet {
PROTOBUF_CONSTEXPR PROBUFF_NET_MSG_RESPONSE::PROBUFF_NET_MSG_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PROBUFF_NET_MSG_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MSG_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MSG_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MSG_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MSG_RESPONSEDefaultTypeInternal _PROBUFF_NET_MSG_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_HEARTBEAT::PROBUFF_NET_HEARTBEAT(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_HEARTBEATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_HEARTBEATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_HEARTBEATDefaultTypeInternal() {}
  union {
    PROBUFF_NET_HEARTBEAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_HEARTBEATDefaultTypeInternal _PROBUFF_NET_HEARTBEAT_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_RECHARGE::PROBUFF_NET_RECHARGE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_rechargeid_)*/0} {}
struct PROBUFF_NET_RECHARGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_RECHARGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_RECHARGEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_RECHARGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_RECHARGEDefaultTypeInternal _PROBUFF_NET_RECHARGE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_RECHARGE_RESPONSE::PROBUFF_NET_RECHARGE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_orderid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_rechargeid_)*/0
  , /*decltype(_impl_.m_stat_)*/0} {}
struct PROBUFF_NET_RECHARGE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_RECHARGE_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_RECHARGE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_RECHARGE_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_RECHARGE_RESPONSEDefaultTypeInternal _PROBUFF_NET_RECHARGE_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_DELIVER_GOODS_RECHARGE::PROBUFF_NET_DELIVER_GOODS_RECHARGE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_items_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.m_orderid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_rechargeid_)*/0
  , /*decltype(_impl_.m_gold_)*/0} {}
struct PROBUFF_NET_DELIVER_GOODS_RECHARGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_DELIVER_GOODS_RECHARGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_DELIVER_GOODS_RECHARGEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_DELIVER_GOODS_RECHARGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_DELIVER_GOODS_RECHARGEDefaultTypeInternal _PROBUFF_NET_DELIVER_GOODS_RECHARGE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ERROR::PROBUFF_NET_ERROR(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_errmessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PROBUFF_NET_ERRORDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ERRORDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ERRORDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ERROR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ERRORDefaultTypeInternal _PROBUFF_NET_ERROR_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_GET_TIME::PROBUFF_NET_GET_TIME(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_GET_TIMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_GET_TIMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_GET_TIMEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_GET_TIME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_GET_TIMEDefaultTypeInternal _PROBUFF_NET_GET_TIME_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_GET_TIME_RESPONSE::PROBUFF_NET_GET_TIME_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_utc_)*/0} {}
struct PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_GET_TIME_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal _PROBUFF_NET_GET_TIME_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_NOTICE::PROBUFF_NET_NOTICE(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_NOTICEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_NOTICEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_NOTICEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_NOTICE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_NOTICEDefaultTypeInternal _PROBUFF_NET_NOTICE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_NOTICE_RESPONSE::PROBUFF_NET_NOTICE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_notices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_NOTICE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_NOTICE_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_NOTICE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_NOTICE_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_NOTICE_RESPONSEDefaultTypeInternal _PROBUFF_NET_NOTICE_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ACOUNT_LOGIN::PROBUFF_NET_ACOUNT_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_area_)*/0} {}
struct PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ACOUNT_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal _PROBUFF_NET_ACOUNT_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_session_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_roleid_)*/int64_t{0}
  , /*decltype(_impl_.m_area_)*/0
  , /*decltype(_impl_.m_gatewayid_)*/0} {}
struct PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ACOUNT_LOGIN_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal _PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_LOGIN::PROBUFF_NET_ROLE_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_session_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_roleid_)*/int64_t{0}
  , /*decltype(_impl_.m_iscreate_)*/false
  , /*decltype(_impl_.m_area_)*/0
  , /*decltype(_impl_.m_gatewayid_)*/0} {}
struct PROBUFF_NET_ROLE_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ROLE_LOGINDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ROLE_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ROLE_LOGINDefaultTypeInternal _PROBUFF_NET_ROLE_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_SYNC::PROBUFF_NET_ROLE_SYNC(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_ROLE_SYNCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_SYNCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ROLE_SYNCDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ROLE_SYNC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ROLE_SYNCDefaultTypeInternal _PROBUFF_NET_ROLE_SYNC_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_SYNC_RESPONSE::PROBUFF_NET_ROLE_SYNC_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_role_)*/nullptr
  , /*decltype(_impl_.m_bag_)*/nullptr
  , /*decltype(_impl_.m_task_)*/nullptr} {}
struct PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ROLE_SYNC_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal _PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_SYNC::PROBUFF_NET_BAG_SYNC(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_BAG_SYNCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_SYNCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_SYNCDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_SYNC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_SYNCDefaultTypeInternal _PROBUFF_NET_BAG_SYNC_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_SYNC_RESPONSE::PROBUFF_NET_BAG_SYNC_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_bag_)*/nullptr} {}
struct PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_SYNC_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal _PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE::PROBUFF_NET_BAG_UPDATE(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_BAG_UPDATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_UPDATEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_UPDATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_UPDATEDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_id_)*/0
  , /*decltype(_impl_.m_count_)*/0} {}
struct PROBUFF_NET_BAG_UPDATE_RESPONSE_delitemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSE_delitemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_UPDATE_RESPONSE_delitemDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_UPDATE_RESPONSE_delitemDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_id_)*/0
  , /*decltype(_impl_.m_count_)*/0} {}
struct PROBUFF_NET_BAG_UPDATE_RESPONSE_additemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSE_additemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_UPDATE_RESPONSE_additemDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_UPDATE_RESPONSE_additem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_UPDATE_RESPONSE_additemDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSE::PROBUFF_NET_BAG_UPDATE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_delitems_)*/{}
  , /*decltype(_impl_.m_delnostackitems_)*/{}
  , /*decltype(_impl_._m_delnostackitems_cached_byte_size_)*/{0}
  , /*decltype(_impl_.m_additems_)*/{}
  , /*decltype(_impl_.m_addnostackitems_)*/{}
  , /*decltype(_impl_._m_addnostackitems_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_BAG_UPDATE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_BAG_UPDATE_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_BAG_UPDATE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_BAG_UPDATE_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_BAG_UPDATE_RESPONSEDefaultTypeInternal _PROBUFF_NET_BAG_UPDATE_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_CMD::PROBUFF_NET_CMD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_cmd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PROBUFF_NET_CMDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CMDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CMDDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CMD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CMDDefaultTypeInternal _PROBUFF_NET_CMD_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_CHAT::PROBUFF_NET_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_channelid_)*/0} {}
struct PROBUFF_NET_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CHATDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CHATDefaultTypeInternal _PROBUFF_NET_CHAT_default_instance_;
PROTOBUF_CONSTEXPR chatitem::chatitem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_rolename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_roleid_)*/int64_t{0}
  , /*decltype(_impl_.m_utc_)*/0} {}
struct chatitemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR chatitemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~chatitemDefaultTypeInternal() {}
  union {
    chatitem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 chatitemDefaultTypeInternal _chatitem_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_CHAT_RESPONSE::PROBUFF_NET_CHAT_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_chatlist_)*/{}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_channelid_)*/0
  , /*decltype(_impl_.m_stat_)*/false} {}
struct PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CHAT_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal _PROBUFF_NET_CHAT_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_SWITCH_LINE::PROBUFF_NET_SWITCH_LINE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_line_)*/0} {}
struct PROBUFF_NET_SWITCH_LINEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SWITCH_LINEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SWITCH_LINEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SWITCH_LINE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SWITCH_LINEDefaultTypeInternal _PROBUFF_NET_SWITCH_LINE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_SWITCH_LINE_RESPONSE::PROBUFF_NET_SWITCH_LINE_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_line_)*/0
  , /*decltype(_impl_.m_stat_)*/false} {}
struct PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SWITCH_LINE_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal _PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST::PROBUFF_NET_MAIL_LIST(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_MAIL_LISTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LISTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_LISTDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_LIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_LISTDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST_RESPONSE::PROBUFF_NET_MAIL_LIST_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_mail_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_LIST_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_READ::PROBUFF_NET_MAIL_READ(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_mailid_)*/int64_t{0}} {}
struct PROBUFF_NET_MAIL_READDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_READDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_READDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_READ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_READDefaultTypeInternal _PROBUFF_NET_MAIL_READ_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_READ_RESPONSE::PROBUFF_NET_MAIL_READ_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_mailid_)*/int64_t{0}
  , /*decltype(_impl_.m_stat_)*/false} {}
struct PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_READ_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DRAW::PROBUFF_NET_MAIL_DRAW(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_mailid_)*/int64_t{0}} {}
struct PROBUFF_NET_MAIL_DRAWDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DRAWDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_DRAWDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_DRAW _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_DRAWDefaultTypeInternal _PROBUFF_NET_MAIL_DRAW_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DRAW_RESPONSE::PROBUFF_NET_MAIL_DRAW_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_mailid_)*/int64_t{0}
  , /*decltype(_impl_.m_stat_)*/false} {}
struct PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_DRAW_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DEL::PROBUFF_NET_MAIL_DEL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_mailid_)*/int64_t{0}} {}
struct PROBUFF_NET_MAIL_DELDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DELDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_DELDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_DEL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_DELDefaultTypeInternal _PROBUFF_NET_MAIL_DEL_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DEL_RESPONSE::PROBUFF_NET_MAIL_DEL_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_mailid_)*/int64_t{0}
  , /*decltype(_impl_.m_stat_)*/false} {}
struct PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MAIL_DEL_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal _PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR VECTOR2::VECTOR2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_x_)*/0
  , /*decltype(_impl_.m_y_)*/0} {}
struct VECTOR2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR VECTOR2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VECTOR2DefaultTypeInternal() {}
  union {
    VECTOR2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VECTOR2DefaultTypeInternal _VECTOR2_default_instance_;
PROTOBUF_CONSTEXPR VECTOR3::VECTOR3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_x_)*/0
  , /*decltype(_impl_.m_y_)*/0
  , /*decltype(_impl_.m_z_)*/0} {}
struct VECTOR3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR VECTOR3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VECTOR3DefaultTypeInternal() {}
  union {
    VECTOR3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VECTOR3DefaultTypeInternal _VECTOR3_default_instance_;
PROTOBUF_CONSTEXPR UNIT_POSITION::UNIT_POSITION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_position_)*/nullptr
  , /*decltype(_impl_.m_id_)*/int64_t{0}
  , /*decltype(_impl_.m_angle_)*/0
  , /*decltype(_impl_.m_speed_)*/0} {}
struct UNIT_POSITIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UNIT_POSITIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UNIT_POSITIONDefaultTypeInternal() {}
  union {
    UNIT_POSITION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UNIT_POSITIONDefaultTypeInternal _UNIT_POSITION_default_instance_;
PROTOBUF_CONSTEXPR UnitAttribute::UnitAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_value_)*/int64_t{0}
  , /*decltype(_impl_.m_type_)*/0} {}
struct UnitAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnitAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnitAttributeDefaultTypeInternal() {}
  union {
    UnitAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnitAttributeDefaultTypeInternal _UnitAttribute_default_instance_;
PROTOBUF_CONSTEXPR UnitModule::UnitModule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_modules_)*/{}
  , /*decltype(_impl_.m_mtype_)*/0} {}
struct UnitModuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnitModuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnitModuleDefaultTypeInternal() {}
  union {
    UnitModule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnitModuleDefaultTypeInternal _UnitModule_default_instance_;
PROTOBUF_CONSTEXPR UNIT::UNIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_modules_)*/{}
  , /*decltype(_impl_.m_position_)*/nullptr
  , /*decltype(_impl_.m_id_)*/int64_t{0}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_stat_)*/0} {}
struct UNITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UNITDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UNITDefaultTypeInternal() {}
  union {
    UNIT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UNITDefaultTypeInternal _UNIT_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_ATTRIBUTE::PROBUFF_NET_SYNC_ATTRIBUTE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_modules_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_SYNC_ATTRIBUTEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_ATTRIBUTEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SYNC_ATTRIBUTEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SYNC_ATTRIBUTE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SYNC_ATTRIBUTEDefaultTypeInternal _PROBUFF_NET_SYNC_ATTRIBUTE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_UNIT::PROBUFF_NET_SYNC_UNIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_units_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_SYNC_UNITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_UNITDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SYNC_UNITDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SYNC_UNIT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SYNC_UNITDefaultTypeInternal _PROBUFF_NET_SYNC_UNIT_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ENTER_LEAVE_VIEW::PROBUFF_NET_ENTER_LEAVE_VIEW(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_units_)*/{}
  , /*decltype(_impl_._m_units_cached_byte_size_)*/{0}
  , /*decltype(_impl_.m_isenter_)*/false} {}
struct PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ENTER_LEAVE_VIEW _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal _PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_POSITION::PROBUFF_NET_SYNC_POSITION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_position_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SYNC_POSITION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal _PROBUFF_NET_SYNC_POSITION_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_CHANGE_ANGLE::PROBUFF_NET_CHANGE_ANGLE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_position_)*/nullptr} {}
struct PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CHANGE_ANGLE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal _PROBUFF_NET_CHANGE_ANGLE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING::PROBUFF_NET_MATCHING(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_tid_)*/0} {}
struct PROBUFF_NET_MATCHINGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHINGDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHINGDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHINGDefaultTypeInternal _PROBUFF_NET_MATCHING_default_instance_;
PROTOBUF_CONSTEXPR MATCHING_MEMBER::MATCHING_MEMBER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_id_)*/int64_t{0}
  , /*decltype(_impl_.m_lv_)*/0
  , /*decltype(_impl_.m_begmatch_)*/0
  , /*decltype(_impl_.m_isconfirm_)*/false} {}
struct MATCHING_MEMBERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MATCHING_MEMBERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MATCHING_MEMBERDefaultTypeInternal() {}
  union {
    MATCHING_MEMBER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MATCHING_MEMBERDefaultTypeInternal _MATCHING_MEMBER_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_RESPONSE::PROBUFF_NET_MATCHING_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_id_)*/int64_t{0}} {}
struct PROBUFF_NET_MATCHING_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CANCEL::PROBUFF_NET_MATCHING_CANCEL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_roomid_)*/int64_t{0}
  , /*decltype(_impl_.m_type_)*/0} {}
struct PROBUFF_NET_MATCHING_CANCELDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CANCELDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_CANCELDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_CANCEL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_CANCELDefaultTypeInternal _PROBUFF_NET_MATCHING_CANCEL_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CANCEL_RESPONSE::PROBUFF_NET_MATCHING_CANCEL_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_stat_)*/0} {}
struct PROBUFF_NET_MATCHING_CANCEL_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CANCEL_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_CANCEL_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_CANCEL_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_CANCEL_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_CANCEL_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MEMBER_MATCHING_CANCEL::PROBUFF_NET_MEMBER_MATCHING_CANCEL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_cancelmember_)*/{}
  , /*decltype(_impl_._m_cancelmember_cached_byte_size_)*/{0}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_canceltype_)*/0} {}
struct PROBUFF_NET_MEMBER_MATCHING_CANCELDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MEMBER_MATCHING_CANCELDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MEMBER_MATCHING_CANCELDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MEMBER_MATCHING_CANCEL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MEMBER_MATCHING_CANCELDefaultTypeInternal _PROBUFF_NET_MEMBER_MATCHING_CANCEL_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_WAITCONFIRM::PROBUFF_NET_MATCHING_WAITCONFIRM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_roomid_)*/0} {}
struct PROBUFF_NET_MATCHING_WAITCONFIRMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_WAITCONFIRMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_WAITCONFIRMDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_WAITCONFIRM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_WAITCONFIRMDefaultTypeInternal _PROBUFF_NET_MATCHING_WAITCONFIRM_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CONFIRM::PROBUFF_NET_MATCHING_CONFIRM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_roomid_)*/0} {}
struct PROBUFF_NET_MATCHING_CONFIRMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CONFIRMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_CONFIRMDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_CONFIRM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_CONFIRMDefaultTypeInternal _PROBUFF_NET_MATCHING_CONFIRM_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_roomid_)*/0
  , /*decltype(_impl_.m_stat_)*/0} {}
struct PROBUFF_NET_MATCHING_CONFIRM_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_CONFIRM_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_CONFIRM_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_CONFIRM_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_CONFIRM_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_MATCHING_CONFIRM::PROBUFF_NET_SYNC_MATCHING_CONFIRM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_roleid_)*/{}
  , /*decltype(_impl_._m_roleid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_roomid_)*/0} {}
struct PROBUFF_NET_SYNC_MATCHING_CONFIRMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_SYNC_MATCHING_CONFIRMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_SYNC_MATCHING_CONFIRMDefaultTypeInternal() {}
  union {
    PROBUFF_NET_SYNC_MATCHING_CONFIRM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_SYNC_MATCHING_CONFIRMDefaultTypeInternal _PROBUFF_NET_SYNC_MATCHING_CONFIRM_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SYNC::PROBUFF_NET_MATCHING_SYNC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_member_)*/{}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_roomid_)*/0} {}
struct PROBUFF_NET_MATCHING_SYNCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SYNCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_SYNCDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_SYNC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_SYNCDefaultTypeInternal _PROBUFF_NET_MATCHING_SYNC_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_roomid_)*/0
  , /*decltype(_impl_.m_playsactorid_)*/int64_t{0}} {}
struct PROBUFF_NET_MATCHING_SUCCESS_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SUCCESS_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_SUCCESS_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_SUCCESS_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_SUCCESS_RESPONSEDefaultTypeInternal _PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SUCCESS::PROBUFF_NET_MATCHING_SUCCESS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_member_)*/{}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_roomid_)*/0
  , /*decltype(_impl_.m_dataid_)*/0} {}
struct PROBUFF_NET_MATCHING_SUCCESSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_MATCHING_SUCCESSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_MATCHING_SUCCESSDefaultTypeInternal() {}
  union {
    PROBUFF_NET_MATCHING_SUCCESS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_MATCHING_SUCCESSDefaultTypeInternal _PROBUFF_NET_MATCHING_SUCCESS_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ENTER_PLAYS::PROBUFF_NET_ENTER_PLAYS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_type_)*/0
  , /*decltype(_impl_.m_roomid_)*/0} {}
struct PROBUFF_NET_ENTER_PLAYSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ENTER_PLAYSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ENTER_PLAYSDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ENTER_PLAYS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ENTER_PLAYSDefaultTypeInternal _PROBUFF_NET_ENTER_PLAYS_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_KCPSESSION::PROBUFF_NET_KCPSESSION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_uip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_serverid_)*/int64_t{0}
  , /*decltype(_impl_.m_uport_)*/0
  , /*decltype(_impl_.m_conv_)*/0} {}
struct PROBUFF_NET_KCPSESSIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_KCPSESSIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_KCPSESSIONDefaultTypeInternal() {}
  union {
    PROBUFF_NET_KCPSESSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_KCPSESSIONDefaultTypeInternal _PROBUFF_NET_KCPSESSION_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_KCPSESSION_RESPONSE::PROBUFF_NET_KCPSESSION_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_kcpsession_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PROBUFF_NET_KCPSESSION_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_KCPSESSION_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_KCPSESSION_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_KCPSESSION_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_KCPSESSION_RESPONSEDefaultTypeInternal _PROBUFF_NET_KCPSESSION_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_TASK_RECEIVE_AWARD::PROBUFF_NET_TASK_RECEIVE_AWARD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_taskid_)*/0} {}
struct PROBUFF_NET_TASK_RECEIVE_AWARDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_TASK_RECEIVE_AWARDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_TASK_RECEIVE_AWARDDefaultTypeInternal() {}
  union {
    PROBUFF_NET_TASK_RECEIVE_AWARD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_TASK_RECEIVE_AWARDDefaultTypeInternal _PROBUFF_NET_TASK_RECEIVE_AWARD_default_instance_;
PROTOBUF_CONSTEXPR drop_item::drop_item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_item_)*/0
  , /*decltype(_impl_.m_count_)*/0} {}
struct drop_itemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR drop_itemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~drop_itemDefaultTypeInternal() {}
  union {
    drop_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 drop_itemDefaultTypeInternal _drop_item_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_drop_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.m_taskid_)*/0
  , /*decltype(_impl_.m_stat_)*/false} {}
struct PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSEDefaultTypeInternal _PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_CREATE_FAMIL::PROBUFF_NET_CREATE_FAMIL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PROBUFF_NET_CREATE_FAMILDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CREATE_FAMILDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CREATE_FAMILDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CREATE_FAMIL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CREATE_FAMILDefaultTypeInternal _PROBUFF_NET_CREATE_FAMIL_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_CREATE_FAMIL_RESPONSE::PROBUFF_NET_CREATE_FAMIL_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_stat_)*/0} {}
struct PROBUFF_NET_CREATE_FAMIL_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CREATE_FAMIL_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CREATE_FAMIL_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CREATE_FAMIL_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CREATE_FAMIL_RESPONSEDefaultTypeInternal _PROBUFF_NET_CREATE_FAMIL_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_JOIN_FAMIL::PROBUFF_NET_JOIN_FAMIL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_familid_)*/int64_t{0}
  , /*decltype(_impl_.m_apply_)*/false} {}
struct PROBUFF_NET_JOIN_FAMILDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_JOIN_FAMILDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_JOIN_FAMILDefaultTypeInternal() {}
  union {
    PROBUFF_NET_JOIN_FAMIL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_JOIN_FAMILDefaultTypeInternal _PROBUFF_NET_JOIN_FAMIL_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_JOIN_FAMIL_RESPONSE::PROBUFF_NET_JOIN_FAMIL_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_stat_)*/0} {}
struct PROBUFF_NET_JOIN_FAMIL_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_JOIN_FAMIL_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_JOIN_FAMIL_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_JOIN_FAMIL_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_JOIN_FAMIL_RESPONSEDefaultTypeInternal _PROBUFF_NET_JOIN_FAMIL_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_RATIFY_JOIN_FAMIL::PROBUFF_NET_RATIFY_JOIN_FAMIL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_roleid_)*/int64_t{0}
  , /*decltype(_impl_.m_ratify_)*/false} {}
struct PROBUFF_NET_RATIFY_JOIN_FAMILDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_RATIFY_JOIN_FAMILDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_RATIFY_JOIN_FAMILDefaultTypeInternal() {}
  union {
    PROBUFF_NET_RATIFY_JOIN_FAMIL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_RATIFY_JOIN_FAMILDefaultTypeInternal _PROBUFF_NET_RATIFY_JOIN_FAMIL_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_stat_)*/0} {}
struct PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSEDefaultTypeInternal _PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_CEDE_FAMIL::PROBUFF_NET_CEDE_FAMIL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_roleid_)*/int64_t{0}} {}
struct PROBUFF_NET_CEDE_FAMILDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CEDE_FAMILDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CEDE_FAMILDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CEDE_FAMIL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CEDE_FAMILDefaultTypeInternal _PROBUFF_NET_CEDE_FAMIL_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_CEDE_FAMIL_RESPONSE::PROBUFF_NET_CEDE_FAMIL_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_stat_)*/0} {}
struct PROBUFF_NET_CEDE_FAMIL_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CEDE_FAMIL_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CEDE_FAMIL_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CEDE_FAMIL_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CEDE_FAMIL_RESPONSEDefaultTypeInternal _PROBUFF_NET_CEDE_FAMIL_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_LEAVE_FAMIL::PROBUFF_NET_LEAVE_FAMIL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_familid_)*/int64_t{0}} {}
struct PROBUFF_NET_LEAVE_FAMILDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_LEAVE_FAMILDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_LEAVE_FAMILDefaultTypeInternal() {}
  union {
    PROBUFF_NET_LEAVE_FAMIL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_LEAVE_FAMILDefaultTypeInternal _PROBUFF_NET_LEAVE_FAMIL_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_LEAVE_FAMIL_RESPONSE::PROBUFF_NET_LEAVE_FAMIL_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_stat_)*/0} {}
struct PROBUFF_NET_LEAVE_FAMIL_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_LEAVE_FAMIL_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_LEAVE_FAMIL_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_LEAVE_FAMIL_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_LEAVE_FAMIL_RESPONSEDefaultTypeInternal _PROBUFF_NET_LEAVE_FAMIL_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_LIST::PROBUFF_NET_FAMIL_LIST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_familid_)*/int64_t{0}} {}
struct PROBUFF_NET_FAMIL_LISTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_LISTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_LISTDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_LIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_LISTDefaultTypeInternal _PROBUFF_NET_FAMIL_LIST_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_LIST_RESPONSE::PROBUFF_NET_FAMIL_LIST_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_family_)*/{}
  , /*decltype(_impl_.m_familid_)*/int64_t{0}} {}
struct PROBUFF_NET_FAMIL_LIST_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMIL_LIST_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMIL_LIST_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMIL_LIST_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMIL_LIST_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMIL_LIST_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_CHANGE_FAMILNAME::PROBUFF_NET_CHANGE_FAMILNAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_familid_)*/int64_t{0}} {}
struct PROBUFF_NET_CHANGE_FAMILNAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CHANGE_FAMILNAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CHANGE_FAMILNAMEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CHANGE_FAMILNAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CHANGE_FAMILNAMEDefaultTypeInternal _PROBUFF_NET_CHANGE_FAMILNAME_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_stat_)*/0} {}
struct PROBUFF_NET_CHANGE_FAMILNAME_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_CHANGE_FAMILNAME_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_CHANGE_FAMILNAME_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_CHANGE_FAMILNAME_RESPONSEDefaultTypeInternal _PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMILSIGN::PROBUFF_NET_FAMILSIGN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_familid_)*/int64_t{0}} {}
struct PROBUFF_NET_FAMILSIGNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMILSIGNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMILSIGNDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMILSIGN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMILSIGNDefaultTypeInternal _PROBUFF_NET_FAMILSIGN_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FAMILSIGN_RESPONSE::PROBUFF_NET_FAMILSIGN_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_stat_)*/0} {}
struct PROBUFF_NET_FAMILSIGN_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FAMILSIGN_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FAMILSIGN_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FAMILSIGN_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FAMILSIGN_RESPONSEDefaultTypeInternal _PROBUFF_NET_FAMILSIGN_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUseDefaultTypeInternal _PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_REWARD_ITEM_RESPONSE::PROBUFF_NET_REWARD_ITEM_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_items_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_REWARD_ITEM_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_REWARD_ITEM_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_REWARD_ITEM_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_REWARD_ITEM_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_REWARD_ITEM_RESPONSEDefaultTypeInternal _PROBUFF_NET_REWARD_ITEM_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_RANKLIST::PROBUFF_NET_RANKLIST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_iscross_)*/false
  , /*decltype(_impl_.m_type_)*/0} {}
struct PROBUFF_NET_RANKLISTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_RANKLISTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_RANKLISTDefaultTypeInternal() {}
  union {
    PROBUFF_NET_RANKLIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_RANKLISTDefaultTypeInternal _PROBUFF_NET_RANKLIST_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_RANKLIST_RESPONSE::PROBUFF_NET_RANKLIST_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_items_)*/{}
  , /*decltype(_impl_.m_type_)*/0} {}
struct PROBUFF_NET_RANKLIST_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_RANKLIST_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_RANKLIST_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_RANKLIST_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_RANKLIST_RESPONSEDefaultTypeInternal _PROBUFF_NET_RANKLIST_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND::PROBUFF_NET_FRIEND(
    ::_pbi::ConstantInitialized) {}
struct PROBUFF_NET_FRIENDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FRIENDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FRIENDDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FRIEND _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FRIENDDefaultTypeInternal _PROBUFF_NET_FRIEND_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_RESPONSE::PROBUFF_NET_FRIEND_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_friends_)*/{}
  , /*decltype(_impl_.m_applyfriends_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PROBUFF_NET_FRIEND_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_FRIEND_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_FRIEND_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_FRIEND_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_FRIEND_RESPONSEDefaultTypeInternal _PROBUFF_NET_FRIEND_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ADDFRIEND::PROBUFF_NET_ADDFRIEND(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_friedid_)*/int64_t{0}} {}
struct PROBUFF_NET_ADDFRIENDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ADDFRIENDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ADDFRIENDDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ADDFRIEND _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ADDFRIENDDefaultTypeInternal _PROBUFF_NET_ADDFRIEND_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ADDFRIEND_RESPONSE::PROBUFF_NET_ADDFRIEND_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_friedid_)*/int64_t{0}
  , /*decltype(_impl_.m_stat_)*/0} {}
struct PROBUFF_NET_ADDFRIEND_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ADDFRIEND_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ADDFRIEND_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ADDFRIEND_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ADDFRIEND_RESPONSEDefaultTypeInternal _PROBUFF_NET_ADDFRIEND_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_RATIFY_ADDFRIEND::PROBUFF_NET_RATIFY_ADDFRIEND(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_friedid_)*/int64_t{0}
  , /*decltype(_impl_.m_ratify_)*/false} {}
struct PROBUFF_NET_RATIFY_ADDFRIENDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_RATIFY_ADDFRIENDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_RATIFY_ADDFRIENDDefaultTypeInternal() {}
  union {
    PROBUFF_NET_RATIFY_ADDFRIEND _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_RATIFY_ADDFRIENDDefaultTypeInternal _PROBUFF_NET_RATIFY_ADDFRIEND_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_friedid_)*/int64_t{0}
  , /*decltype(_impl_.m_ratify_)*/false
  , /*decltype(_impl_.m_stat_)*/0} {}
struct PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSEDefaultTypeInternal _PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ERASEFRIEND::PROBUFF_NET_ERASEFRIEND(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_friedid_)*/int64_t{0}} {}
struct PROBUFF_NET_ERASEFRIENDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ERASEFRIENDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ERASEFRIENDDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ERASEFRIEND _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ERASEFRIENDDefaultTypeInternal _PROBUFF_NET_ERASEFRIEND_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ERASEFRIEND_RESPONSE::PROBUFF_NET_ERASEFRIEND_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_friedid_)*/int64_t{0}
  , /*decltype(_impl_.m_stat_)*/0} {}
struct PROBUFF_NET_ERASEFRIEND_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ERASEFRIEND_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ERASEFRIEND_RESPONSEDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ERASEFRIEND_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ERASEFRIEND_RESPONSEDefaultTypeInternal _PROBUFF_NET_ERASEFRIEND_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR PROBUFF_NET_ROLESTAT::PROBUFF_NET_ROLESTAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_stat_)*/0
  , /*decltype(_impl_.m_logicstat_)*/0
  , /*decltype(_impl_.m_roleid_)*/int64_t{0}} {}
struct PROBUFF_NET_ROLESTATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PROBUFF_NET_ROLESTATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PROBUFF_NET_ROLESTATDefaultTypeInternal() {}
  union {
    PROBUFF_NET_ROLESTAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PROBUFF_NET_ROLESTATDefaultTypeInternal _PROBUFF_NET_ROLESTAT_default_instance_;
}  // namespace pbnet
static ::_pb::Metadata file_level_metadata_net_2eproto[98];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_net_2eproto[11];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_net_2eproto = nullptr;

const uint32_t TableStruct_net_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MSG_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MSG_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MSG_RESPONSE, _impl_.m_msg_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE, _impl_.m_rechargeid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, _impl_.m_rechargeid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, _impl_.m_stat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, _impl_.m_orderid_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _impl_.m_rechargeid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _impl_.m_orderid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _impl_.m_gold_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _impl_.m_items_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, _impl_.m_errmessage_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, _impl_.m_utc_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_NOTICE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_NOTICE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_NOTICE_RESPONSE, _impl_.m_notices_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _impl_.m_area_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _impl_.m_account_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _impl_.m_password_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.m_area_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.m_roleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.m_session_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.m_account_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.m_gatewayid_),
  3,
  2,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.m_roleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.m_session_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.m_iscreate_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.m_area_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _impl_.m_gatewayid_),
  1,
  0,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.m_role_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.m_bag_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.m_task_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, _impl_.m_bag_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _impl_.m_id_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _impl_.m_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _impl_.m_id_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _impl_.m_count_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, _impl_.m_delitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, _impl_.m_delnostackitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, _impl_.m_additems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, _impl_.m_addnostackitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, _impl_.m_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _impl_.m_channelid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _impl_.m_content_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_.m_roleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_.m_rolename_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_.m_content_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _impl_.m_utc_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_.m_channelid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_.m_chatlist_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _impl_.m_stat_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, _impl_.m_line_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_.m_line_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_.m_stat_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE, _impl_.m_mail_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, _impl_.m_mailid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _impl_.m_mailid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _impl_.m_stat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, _impl_.m_mailid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_.m_mailid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_.m_stat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, _impl_.m_mailid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_.m_mailid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_.m_stat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _impl_.m_x_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _impl_.m_y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _impl_.m_x_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _impl_.m_y_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _impl_.m_z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _impl_.m_id_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _impl_.m_position_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _impl_.m_angle_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _impl_.m_speed_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, _impl_.m_value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, _impl_.m_mtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, _impl_.m_modules_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_.m_id_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_.m_position_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_.m_modules_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _impl_.m_stat_),
  2,
  1,
  0,
  ~0u,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE, _impl_.m_modules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_UNIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_UNIT, _impl_.m_units_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _impl_.m_isenter_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _impl_.m_units_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION, _impl_.m_position_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_ANGLE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_ANGLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_ANGLE, _impl_.m_position_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING, _impl_.m_tid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _impl_.m_id_),
  PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _impl_.m_name_),
  PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _impl_.m_lv_),
  PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _impl_.m_begmatch_),
  PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _impl_.m_isconfirm_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_RESPONSE, _impl_.m_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL, _impl_.m_roomid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _impl_.m_stat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, _impl_.m_canceltype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, _impl_.m_cancelmember_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM, _impl_.m_roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM, _impl_.m_roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _impl_.m_roomid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _impl_.m_stat_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, _impl_.m_roomid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, _impl_.m_roleid_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, _impl_.m_roomid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, _impl_.m_member_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _impl_.m_roomid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _impl_.m_playsactorid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, _impl_.m_roomid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, _impl_.m_member_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, _impl_.m_dataid_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_PLAYS, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_PLAYS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_PLAYS, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_PLAYS, _impl_.m_roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _impl_.m_serverid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _impl_.m_uip_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _impl_.m_uport_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _impl_.m_conv_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE, _impl_.m_kcpsession_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD, _impl_.m_taskid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, _impl_.m_item_),
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, _impl_.m_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _impl_.m_taskid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _impl_.m_stat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _impl_.m_drop_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CREATE_FAMIL, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CREATE_FAMIL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CREATE_FAMIL, _impl_.m_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE, _impl_.m_stat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_JOIN_FAMIL, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_JOIN_FAMIL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_JOIN_FAMIL, _impl_.m_familid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_JOIN_FAMIL, _impl_.m_apply_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE, _impl_.m_stat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL, _impl_.m_roleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL, _impl_.m_ratify_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE, _impl_.m_stat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CEDE_FAMIL, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CEDE_FAMIL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CEDE_FAMIL, _impl_.m_roleid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE, _impl_.m_stat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_LEAVE_FAMIL, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_LEAVE_FAMIL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_LEAVE_FAMIL, _impl_.m_familid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE, _impl_.m_stat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST, _impl_.m_familid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, _impl_.m_familid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, _impl_.m_family_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME, _impl_.m_familid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME, _impl_.m_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE, _impl_.m_stat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMILSIGN, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMILSIGN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMILSIGN, _impl_.m_familid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE, _impl_.m_stat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE, _impl_.m_items_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, _impl_.m_iscross_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, _impl_.m_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _impl_.m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _impl_.m_items_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RESPONSE, _impl_.m_friends_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RESPONSE, _impl_.m_applyfriends_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ADDFRIEND, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ADDFRIEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ADDFRIEND, _impl_.m_friedid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE, _impl_.m_friedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE, _impl_.m_stat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND, _impl_.m_friedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND, _impl_.m_ratify_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE, _impl_.m_friedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE, _impl_.m_ratify_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE, _impl_.m_stat_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERASEFRIEND, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERASEFRIEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERASEFRIEND, _impl_.m_friedid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE, _impl_.m_friedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE, _impl_.m_stat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, _impl_.m_stat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, _impl_.m_logicstat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, _impl_.m_roleid_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::pbnet::PROBUFF_NET_MSG_RESPONSE)},
  { 8, -1, -1, sizeof(::pbnet::PROBUFF_NET_HEARTBEAT)},
  { 14, 21, -1, sizeof(::pbnet::PROBUFF_NET_RECHARGE)},
  { 22, 31, -1, sizeof(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE)},
  { 34, 42, -1, sizeof(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse)},
  { 44, 54, -1, sizeof(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE)},
  { 58, 65, -1, sizeof(::pbnet::PROBUFF_NET_ERROR)},
  { 66, -1, -1, sizeof(::pbnet::PROBUFF_NET_GET_TIME)},
  { 72, 79, -1, sizeof(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE)},
  { 80, -1, -1, sizeof(::pbnet::PROBUFF_NET_NOTICE)},
  { 86, -1, -1, sizeof(::pbnet::PROBUFF_NET_NOTICE_RESPONSE)},
  { 93, 102, -1, sizeof(::pbnet::PROBUFF_NET_ACOUNT_LOGIN)},
  { 105, 116, -1, sizeof(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)},
  { 121, 132, -1, sizeof(::pbnet::PROBUFF_NET_ROLE_LOGIN)},
  { 137, -1, -1, sizeof(::pbnet::PROBUFF_NET_ROLE_SYNC)},
  { 143, 152, -1, sizeof(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE)},
  { 155, -1, -1, sizeof(::pbnet::PROBUFF_NET_BAG_SYNC)},
  { 161, 168, -1, sizeof(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE)},
  { 169, -1, -1, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE)},
  { 175, 183, -1, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem)},
  { 185, 193, -1, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem)},
  { 195, -1, -1, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE)},
  { 205, 212, -1, sizeof(::pbnet::PROBUFF_NET_CMD)},
  { 213, 222, -1, sizeof(::pbnet::PROBUFF_NET_CHAT)},
  { 225, 235, -1, sizeof(::pbnet::chatitem)},
  { 239, 249, -1, sizeof(::pbnet::PROBUFF_NET_CHAT_RESPONSE)},
  { 253, 260, -1, sizeof(::pbnet::PROBUFF_NET_SWITCH_LINE)},
  { 261, 269, -1, sizeof(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE)},
  { 271, -1, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST)},
  { 277, 285, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse)},
  { 287, -1, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE)},
  { 294, 301, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_READ)},
  { 302, 310, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE)},
  { 312, 319, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_DRAW)},
  { 320, 328, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE)},
  { 330, 337, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_DEL)},
  { 338, 346, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE)},
  { 348, 356, -1, sizeof(::pbnet::VECTOR2)},
  { 358, 367, -1, sizeof(::pbnet::VECTOR3)},
  { 370, 380, -1, sizeof(::pbnet::UNIT_POSITION)},
  { 384, 392, -1, sizeof(::pbnet::UnitAttribute)},
  { 394, 402, -1, sizeof(::pbnet::UnitModule)},
  { 404, 415, -1, sizeof(::pbnet::UNIT)},
  { 420, -1, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE)},
  { 427, -1, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_UNIT)},
  { 434, 442, -1, sizeof(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW)},
  { 444, 452, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse)},
  { 454, -1, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_POSITION)},
  { 461, 468, -1, sizeof(::pbnet::PROBUFF_NET_CHANGE_ANGLE)},
  { 469, 477, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING)},
  { 479, 490, -1, sizeof(::pbnet::MATCHING_MEMBER)},
  { 495, 502, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_RESPONSE)},
  { 503, 511, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_CANCEL)},
  { 513, 521, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE)},
  { 523, 532, -1, sizeof(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL)},
  { 535, 543, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM)},
  { 545, 553, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_CONFIRM)},
  { 555, 564, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)},
  { 567, 576, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM)},
  { 579, 588, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_SYNC)},
  { 591, 600, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)},
  { 603, 613, -1, sizeof(::pbnet::PROBUFF_NET_MATCHING_SUCCESS)},
  { 617, 625, -1, sizeof(::pbnet::PROBUFF_NET_ENTER_PLAYS)},
  { 627, 637, -1, sizeof(::pbnet::PROBUFF_NET_KCPSESSION)},
  { 641, 648, -1, sizeof(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE)},
  { 649, 656, -1, sizeof(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD)},
  { 657, 665, -1, sizeof(::pbnet::drop_item)},
  { 667, 675, -1, sizeof(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse)},
  { 677, 686, -1, sizeof(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)},
  { 689, 696, -1, sizeof(::pbnet::PROBUFF_NET_CREATE_FAMIL)},
  { 697, 704, -1, sizeof(::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE)},
  { 705, 713, -1, sizeof(::pbnet::PROBUFF_NET_JOIN_FAMIL)},
  { 715, 722, -1, sizeof(::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE)},
  { 723, 731, -1, sizeof(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL)},
  { 733, 740, -1, sizeof(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)},
  { 741, 748, -1, sizeof(::pbnet::PROBUFF_NET_CEDE_FAMIL)},
  { 749, 756, -1, sizeof(::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE)},
  { 757, 764, -1, sizeof(::pbnet::PROBUFF_NET_LEAVE_FAMIL)},
  { 765, 772, -1, sizeof(::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE)},
  { 773, 780, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_LIST)},
  { 781, 789, -1, sizeof(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE)},
  { 791, 799, -1, sizeof(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME)},
  { 801, 808, -1, sizeof(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)},
  { 809, 816, -1, sizeof(::pbnet::PROBUFF_NET_FAMILSIGN)},
  { 817, 824, -1, sizeof(::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE)},
  { 825, 833, -1, sizeof(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse)},
  { 835, -1, -1, sizeof(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE)},
  { 842, 850, -1, sizeof(::pbnet::PROBUFF_NET_RANKLIST)},
  { 852, 860, -1, sizeof(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE)},
  { 862, -1, -1, sizeof(::pbnet::PROBUFF_NET_FRIEND)},
  { 868, -1, -1, sizeof(::pbnet::PROBUFF_NET_FRIEND_RESPONSE)},
  { 876, 883, -1, sizeof(::pbnet::PROBUFF_NET_ADDFRIEND)},
  { 884, 892, -1, sizeof(::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE)},
  { 894, 902, -1, sizeof(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND)},
  { 904, 913, -1, sizeof(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)},
  { 916, 923, -1, sizeof(::pbnet::PROBUFF_NET_ERASEFRIEND)},
  { 924, 932, -1, sizeof(::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE)},
  { 934, 943, -1, sizeof(::pbnet::PROBUFF_NET_ROLESTAT)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pbnet::_PROBUFF_NET_MSG_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_HEARTBEAT_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_RECHARGE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_RECHARGE_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_DELIVER_GOODS_RECHARGE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ERROR_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_GET_TIME_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_GET_TIME_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_NOTICE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_NOTICE_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ACOUNT_LOGIN_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ROLE_LOGIN_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ROLE_SYNC_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_BAG_SYNC_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_BAG_UPDATE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_BAG_UPDATE_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_CMD_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_CHAT_default_instance_._instance,
  &::pbnet::_chatitem_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_CHAT_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_SWITCH_LINE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_LIST_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_READ_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_DRAW_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_DEL_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_._instance,
  &::pbnet::_VECTOR2_default_instance_._instance,
  &::pbnet::_VECTOR3_default_instance_._instance,
  &::pbnet::_UNIT_POSITION_default_instance_._instance,
  &::pbnet::_UnitAttribute_default_instance_._instance,
  &::pbnet::_UnitModule_default_instance_._instance,
  &::pbnet::_UNIT_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_SYNC_ATTRIBUTE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_SYNC_UNIT_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_SYNC_POSITION_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_CHANGE_ANGLE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MATCHING_default_instance_._instance,
  &::pbnet::_MATCHING_MEMBER_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MATCHING_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MATCHING_CANCEL_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MATCHING_CANCEL_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MEMBER_MATCHING_CANCEL_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MATCHING_WAITCONFIRM_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MATCHING_CONFIRM_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_SYNC_MATCHING_CONFIRM_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MATCHING_SYNC_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_MATCHING_SUCCESS_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ENTER_PLAYS_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_KCPSESSION_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_KCPSESSION_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_default_instance_._instance,
  &::pbnet::_drop_item_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_CREATE_FAMIL_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_CREATE_FAMIL_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_JOIN_FAMIL_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_JOIN_FAMIL_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_RATIFY_JOIN_FAMIL_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_CEDE_FAMIL_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_CEDE_FAMIL_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_LEAVE_FAMIL_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_LEAVE_FAMIL_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_LIST_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMIL_LIST_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_CHANGE_FAMILNAME_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMILSIGN_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FAMILSIGN_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_REWARD_ITEM_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_RANKLIST_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_RANKLIST_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FRIEND_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_FRIEND_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ADDFRIEND_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ADDFRIEND_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_RATIFY_ADDFRIEND_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ERASEFRIEND_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ERASEFRIEND_RESPONSE_default_instance_._instance,
  &::pbnet::_PROBUFF_NET_ROLESTAT_default_instance_._instance,
};

const char descriptor_table_protodef_net_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnet.proto\022\005pbnet\032\010db.proto\"8\n\030PROBUFF_"
  "NET_MSG_RESPONSE\022\022\n\005m_msg\030\001 \001(\tH\000\210\001\001B\010\n\006"
  "_m_msg\"\027\n\025PROBUFF_NET_HEARTBEAT\"B\n\024PROBU"
  "FF_NET_RECHARGE\022\031\n\014m_rechargeid\030\001 \001(\005H\000\210"
  "\001\001B\017\n\r_m_rechargeid\"\206\002\n\035PROBUFF_NET_RECH"
  "ARGE_RESPONSE\022\031\n\014m_rechargeid\030\001 \001(\005H\000\210\001\001"
  "\022\?\n\006m_stat\030\002 \001(\0162*.pbnet.PROBUFF_NET_REC"
  "HARGE_RESPONSE.EstatH\001\210\001\001\022\026\n\tm_orderid\030\003"
  " \001(\tH\002\210\001\001\"G\n\005Estat\022\021\n\rEstat_Success\020\000\022\027\n"
  "\023Estat_NotRechargeId\020\001\022\022\n\016Estat_MaxCount"
  "\020\002B\017\n\r_m_rechargeidB\t\n\007_m_statB\014\n\n_m_ord"
  "erid\"\215\002\n\"PROBUFF_NET_DELIVER_GOODS_RECHA"
  "RGE\022\031\n\014m_rechargeid\030\001 \001(\005H\000\210\001\001\022\026\n\tm_orde"
  "rid\030\002 \001(\tH\001\210\001\001\022\023\n\006m_gold\030\003 \001(\005H\002\210\001\001\022F\n\007m"
  "_items\030\004 \003(\01325.pbnet.PROBUFF_NET_DELIVER"
  "_GOODS_RECHARGE.MItemsEntry\032-\n\013MItemsEnt"
  "ry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001B\017\n\r_m"
  "_rechargeidB\014\n\n_m_orderidB\t\n\007_m_gold\"\?\n\021"
  "PROBUFF_NET_ERROR\022\031\n\014m_errmessage\030\002 \001(\tH"
  "\000\210\001\001B\017\n\r_m_errmessage\"\026\n\024PROBUFF_NET_GET"
  "_TIME\"=\n\035PROBUFF_NET_GET_TIME_RESPONSE\022\022"
  "\n\005m_utc\030\001 \001(\005H\000\210\001\001B\010\n\006_m_utc\"\024\n\022PROBUFF_"
  "NET_NOTICE\"A\n\033PROBUFF_NET_NOTICE_RESPONS"
  "E\022\"\n\tm_notices\030\001 \003(\0132\017.pbdb.db_notice\"\210\001"
  "\n\030PROBUFF_NET_ACOUNT_LOGIN\022\023\n\006m_area\030\001 \001"
  "(\005H\000\210\001\001\022\026\n\tm_account\030\002 \001(\tH\001\210\001\001\022\027\n\nm_pas"
  "sword\030\003 \001(\tH\002\210\001\001B\t\n\007_m_areaB\014\n\n_m_accoun"
  "tB\r\n\013_m_password\"\335\001\n!PROBUFF_NET_ACOUNT_"
  "LOGIN_RESPONSE\022\023\n\006m_area\030\001 \001(\005H\000\210\001\001\022\025\n\010m"
  "_roleid\030\002 \001(\003H\001\210\001\001\022\026\n\tm_session\030\003 \001(\tH\002\210"
  "\001\001\022\026\n\tm_account\030\004 \001(\tH\003\210\001\001\022\030\n\013m_gatewayi"
  "d\030\005 \001(\005H\004\210\001\001B\t\n\007_m_areaB\013\n\t_m_roleidB\014\n\n"
  "_m_sessionB\014\n\n_m_accountB\016\n\014_m_gatewayid"
  "\"\324\001\n\026PROBUFF_NET_ROLE_LOGIN\022\025\n\010m_roleid\030"
  "\001 \001(\003H\000\210\001\001\022\026\n\tm_session\030\002 \001(\tH\001\210\001\001\022\027\n\nm_"
  "iscreate\030\003 \001(\010H\002\210\001\001\022\023\n\006m_area\030\004 \001(\005H\003\210\001\001"
  "\022\030\n\013m_gatewayid\030\005 \001(\005H\004\210\001\001B\013\n\t_m_roleidB"
  "\014\n\n_m_sessionB\r\n\013_m_iscreateB\t\n\007_m_areaB"
  "\016\n\014_m_gatewayid\"\027\n\025PROBUFF_NET_ROLE_SYNC"
  "\"\252\001\n\036PROBUFF_NET_ROLE_SYNC_RESPONSE\022\"\n\006m"
  "_role\030\001 \001(\0132\r.pbdb.db_roleH\000\210\001\001\022 \n\005m_bag"
  "\030\002 \001(\0132\014.pbdb.db_bagH\001\210\001\001\022\"\n\006m_task\030\003 \001("
  "\0132\r.pbdb.db_taskH\002\210\001\001B\t\n\007_m_roleB\010\n\006_m_b"
  "agB\t\n\007_m_task\"\026\n\024PROBUFF_NET_BAG_SYNC\"K\n"
  "\035PROBUFF_NET_BAG_SYNC_RESPONSE\022 \n\005m_bag\030"
  "\001 \001(\0132\014.pbdb.db_bagH\000\210\001\001B\010\n\006_m_bag\"\030\n\026PR"
  "OBUFF_NET_BAG_UPDATE\"\361\002\n\037PROBUFF_NET_BAG"
  "_UPDATE_RESPONSE\022B\n\nm_delitems\030\001 \003(\0132..p"
  "bnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.del"
  "item\022\031\n\021m_delnostackitems\030\002 \003(\005\022B\n\nm_add"
  "items\030\003 \003(\0132..pbnet.PROBUFF_NET_BAG_UPDA"
  "TE_RESPONSE.additem\022\031\n\021m_addnostackitems"
  "\030\004 \003(\005\032G\n\007delitem\022\021\n\004m_id\030\001 \001(\005H\000\210\001\001\022\024\n\007"
  "m_count\030\002 \001(\005H\001\210\001\001B\007\n\005_m_idB\n\n\010_m_count\032"
  "G\n\007additem\022\021\n\004m_id\030\001 \001(\005H\000\210\001\001\022\024\n\007m_count"
  "\030\002 \001(\005H\001\210\001\001B\007\n\005_m_idB\n\n\010_m_count\"/\n\017PROB"
  "UFF_NET_CMD\022\022\n\005m_cmd\030\001 \001(\tH\000\210\001\001B\010\n\006_m_cm"
  "d\"\202\001\n\020PROBUFF_NET_CHAT\022\023\n\006m_type\030\001 \001(\005H\000"
  "\210\001\001\022\030\n\013m_channelid\030\002 \001(\005H\001\210\001\001\022\026\n\tm_conte"
  "nt\030\003 \001(\tH\002\210\001\001B\t\n\007_m_typeB\016\n\014_m_channelid"
  "B\014\n\n_m_content\"\232\001\n\010chatitem\022\025\n\010m_roleid\030"
  "\001 \001(\003H\000\210\001\001\022\027\n\nm_rolename\030\002 \001(\tH\001\210\001\001\022\026\n\tm"
  "_content\030\003 \001(\tH\002\210\001\001\022\022\n\005m_utc\030\004 \001(\005H\003\210\001\001B"
  "\013\n\t_m_roleidB\r\n\013_m_rolenameB\014\n\n_m_conten"
  "tB\010\n\006_m_utc\"\252\001\n\031PROBUFF_NET_CHAT_RESPONS"
  "E\022\023\n\006m_type\030\001 \001(\005H\000\210\001\001\022\030\n\013m_channelid\030\002 "
  "\001(\005H\001\210\001\001\022#\n\nm_chatlist\030\003 \003(\0132\017.pbnet.cha"
  "titem\022\023\n\006m_stat\030\004 \001(\010H\002\210\001\001B\t\n\007_m_typeB\016\n"
  "\014_m_channelidB\t\n\007_m_stat\"9\n\027PROBUFF_NET_"
  "SWITCH_LINE\022\023\n\006m_line\030\001 \001(\005H\000\210\001\001B\t\n\007_m_l"
  "ine\"b\n PROBUFF_NET_SWITCH_LINE_RESPONSE\022"
  "\023\n\006m_line\030\001 \001(\005H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\010H\001\210\001"
  "\001B\t\n\007_m_lineB\t\n\007_m_stat\"\027\n\025PROBUFF_NET_M"
  "AIL_LIST\"\234\001\n\036PROBUFF_NET_MAIL_LIST_RESPO"
  "NSE\022@\n\006m_mail\030\001 \003(\01320.pbnet.PROBUFF_NET_"
  "MAIL_LIST_RESPONSE.MMailEntry\0328\n\nMMailEn"
  "try\022\013\n\003key\030\001 \001(\005\022\031\n\005value\030\002 \001(\0132\n.pbdb.m"
  "ail:\0028\001\";\n\025PROBUFF_NET_MAIL_READ\022\025\n\010m_ma"
  "ilid\030\001 \001(\003H\000\210\001\001B\013\n\t_m_mailid\"d\n\036PROBUFF_"
  "NET_MAIL_READ_RESPONSE\022\025\n\010m_mailid\030\001 \001(\003"
  "H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\010H\001\210\001\001B\013\n\t_m_mailidB"
  "\t\n\007_m_stat\";\n\025PROBUFF_NET_MAIL_DRAW\022\025\n\010m"
  "_mailid\030\001 \001(\003H\000\210\001\001B\013\n\t_m_mailid\"d\n\036PROBU"
  "FF_NET_MAIL_DRAW_RESPONSE\022\025\n\010m_mailid\030\001 "
  "\001(\003H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\010H\001\210\001\001B\013\n\t_m_mail"
  "idB\t\n\007_m_stat\":\n\024PROBUFF_NET_MAIL_DEL\022\025\n"
  "\010m_mailid\030\001 \001(\003H\000\210\001\001B\013\n\t_m_mailid\"c\n\035PRO"
  "BUFF_NET_MAIL_DEL_RESPONSE\022\025\n\010m_mailid\030\001"
  " \001(\003H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\010H\001\210\001\001B\013\n\t_m_mai"
  "lidB\t\n\007_m_stat\"=\n\007VECTOR2\022\020\n\003m_x\030\001 \001(\005H\000"
  "\210\001\001\022\020\n\003m_y\030\002 \001(\005H\001\210\001\001B\006\n\004_m_xB\006\n\004_m_y\"W\n"
  "\007VECTOR3\022\020\n\003m_x\030\001 \001(\005H\000\210\001\001\022\020\n\003m_y\030\002 \001(\005H"
  "\001\210\001\001\022\020\n\003m_z\030\003 \001(\005H\002\210\001\001B\006\n\004_m_xB\006\n\004_m_yB\006"
  "\n\004_m_z\"\247\001\n\rUNIT_POSITION\022\021\n\004m_id\030\002 \001(\003H\000"
  "\210\001\001\022\'\n\nm_position\030\003 \001(\0132\016.pbnet.VECTOR2H"
  "\001\210\001\001\022\024\n\007m_angle\030\004 \001(\005H\002\210\001\001\022\024\n\007m_speed\030\005 "
  "\001(\005H\003\210\001\001B\007\n\005_m_idB\r\n\013_m_positionB\n\n\010_m_a"
  "ngleB\n\n\010_m_speed\"Q\n\rUnitAttribute\022\023\n\006m_t"
  "ype\030\001 \001(\005H\000\210\001\001\022\024\n\007m_value\030\002 \001(\003H\001\210\001\001B\t\n\007"
  "_m_typeB\n\n\010_m_value\"W\n\nUnitModule\022\024\n\007m_m"
  "type\030\001 \001(\005H\000\210\001\001\022\'\n\tm_modules\030\002 \003(\0132\024.pbn"
  "et.UnitAttributeB\n\n\010_m_mtype\"\346\001\n\004UNIT\022!\n"
  "\006m_type\030\001 \001(\0162\014.pbnet.eunitH\000\210\001\001\022\021\n\004m_id"
  "\030\002 \001(\003H\001\210\001\001\022-\n\nm_position\030\003 \001(\0132\024.pbnet."
  "UNIT_POSITIONH\002\210\001\001\022$\n\tm_modules\030\004 \003(\0132\021."
  "pbnet.UnitModule\022%\n\006m_stat\030\005 \001(\0162\020.pbnet"
  ".eunitstatH\003\210\001\001B\t\n\007_m_typeB\007\n\005_m_idB\r\n\013_"
  "m_positionB\t\n\007_m_stat\"B\n\032PROBUFF_NET_SYN"
  "C_ATTRIBUTE\022$\n\tm_modules\030\001 \003(\0132\021.pbnet.U"
  "nitModule\"5\n\025PROBUFF_NET_SYNC_UNIT\022\034\n\007m_"
  "units\030\001 \003(\0132\013.pbnet.UNIT\"U\n\034PROBUFF_NET_"
  "ENTER_LEAVE_VIEW\022\026\n\tm_isenter\030\001 \001(\010H\000\210\001\001"
  "\022\017\n\007m_units\030\002 \003(\003B\014\n\n_m_isenter\"\250\001\n\031PROB"
  "UFF_NET_SYNC_POSITION\022C\n\nm_position\030\001 \003("
  "\0132/.pbnet.PROBUFF_NET_SYNC_POSITION.MPos"
  "itionEntry\032F\n\016MPositionEntry\022\013\n\003key\030\001 \001("
  "\003\022#\n\005value\030\002 \001(\0132\024.pbnet.UNIT_POSITION:\002"
  "8\001\"X\n\030PROBUFF_NET_CHANGE_ANGLE\022-\n\nm_posi"
  "tion\030\001 \001(\0132\024.pbnet.UNIT_POSITIONH\000\210\001\001B\r\n"
  "\013_m_position\"c\n\024PROBUFF_NET_MATCHING\022\"\n\006"
  "m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022\022\n\005m_ti"
  "d\030\002 \001(\005H\001\210\001\001B\t\n\007_m_typeB\010\n\006_m_tid\"\273\001\n\017MA"
  "TCHING_MEMBER\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001\022\023\n\006m_na"
  "me\030\002 \001(\tH\001\210\001\001\022\021\n\004m_lv\030\003 \001(\005H\002\210\001\001\022\027\n\nm_be"
  "gmatch\030\004 \001(\005H\003\210\001\001\022\030\n\013m_isconfirm\030\005 \001(\010H\004"
  "\210\001\001B\007\n\005_m_idB\t\n\007_m_nameB\007\n\005_m_lvB\r\n\013_m_b"
  "egmatchB\016\n\014_m_isconfirm\";\n\035PROBUFF_NET_M"
  "ATCHING_RESPONSE\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001B\007\n\005_"
  "m_id\"p\n\033PROBUFF_NET_MATCHING_CANCEL\022\"\n\006m"
  "_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022\025\n\010m_roo"
  "mid\030\002 \001(\003H\001\210\001\001B\t\n\007_m_typeB\013\n\t_m_roomid\"\223"
  "\001\n$PROBUFF_NET_MATCHING_CANCEL_RESPONSE\022"
  "\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\0221\n\006m"
  "_stat\030\002 \001(\0162\034.pbnet.ematching_cancel_sta"
  "tH\001\210\001\001B\t\n\007_m_typeB\t\n\007_m_stat\"\265\001\n\"PROBUFF"
  "_NET_MEMBER_MATCHING_CANCEL\022\"\n\006m_type\030\001 "
  "\001(\0162\r.pbnet.eplaysH\000\210\001\001\0227\n\014m_canceltype\030"
  "\002 \001(\0162\034.pbnet.etype_matching_cancelH\001\210\001\001"
  "\022\026\n\016m_cancelmember\030\003 \003(\003B\t\n\007_m_typeB\017\n\r_"
  "m_canceltype\"u\n PROBUFF_NET_MATCHING_WAI"
  "TCONFIRM\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH"
  "\000\210\001\001\022\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001B\t\n\007_m_typeB\013"
  "\n\t_m_roomid\"q\n\034PROBUFF_NET_MATCHING_CONF"
  "IRM\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022"
  "\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001B\t\n\007_m_typeB\013\n\t_m_"
  "roomid\"\271\001\n%PROBUFF_NET_MATCHING_CONFIRM_"
  "RESPONSE\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH"
  "\000\210\001\001\022\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001\0222\n\006m_stat\030\003 "
  "\001(\0162\035.pbnet.ematching_confirm_statH\002\210\001\001B"
  "\t\n\007_m_typeB\013\n\t_m_roomidB\t\n\007_m_stat\"\210\001\n!P"
  "ROBUFF_NET_SYNC_MATCHING_CONFIRM\022\"\n\006m_ty"
  "pe\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022\025\n\010m_roomid"
  "\030\002 \001(\005H\001\210\001\001\022\020\n\010m_roleid\030\003 \003(\003B\t\n\007_m_type"
  "B\013\n\t_m_roomid\"\230\001\n\031PROBUFF_NET_MATCHING_S"
  "YNC\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022"
  "\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001\022(\n\010m_member\030\003 \003(\013"
  "2\026.pbnet.MATCHING_MEMBERB\t\n\007_m_typeB\013\n\t_"
  "m_roomid\"\252\001\n%PROBUFF_NET_MATCHING_SUCCES"
  "S_RESPONSE\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplay"
  "sH\000\210\001\001\022\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001\022\033\n\016m_plays"
  "actorid\030\003 \001(\003H\002\210\001\001B\t\n\007_m_typeB\013\n\t_m_room"
  "idB\021\n\017_m_playsactorid\"\277\001\n\034PROBUFF_NET_MA"
  "TCHING_SUCCESS\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.e"
  "playsH\000\210\001\001\022\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001\022(\n\010m_m"
  "ember\030\003 \003(\0132\026.pbnet.MATCHING_MEMBER\022\025\n\010m"
  "_dataid\030\004 \001(\005H\002\210\001\001B\t\n\007_m_typeB\013\n\t_m_room"
  "idB\013\n\t_m_dataid\"l\n\027PROBUFF_NET_ENTER_PLA"
  "YS\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022\025"
  "\n\010m_roomid\030\002 \001(\005H\001\210\001\001B\t\n\007_m_typeB\013\n\t_m_r"
  "oomid\"\240\001\n\026PROBUFF_NET_KCPSESSION\022\027\n\nm_se"
  "rverid\030\001 \001(\003H\000\210\001\001\022\022\n\005m_uip\030\002 \001(\tH\001\210\001\001\022\024\n"
  "\007m_uport\030\003 \001(\005H\002\210\001\001\022\023\n\006m_conv\030\004 \001(\005H\003\210\001\001"
  "B\r\n\013_m_serveridB\010\n\006_m_uipB\n\n\010_m_uportB\t\n"
  "\007_m_conv\"M\n\037PROBUFF_NET_KCPSESSION_RESPO"
  "NSE\022\031\n\014m_kcpsession\030\001 \001(\tH\000\210\001\001B\017\n\r_m_kcp"
  "session\"D\n\036PROBUFF_NET_TASK_RECEIVE_AWAR"
  "D\022\025\n\010m_taskid\030\001 \001(\005H\000\210\001\001B\013\n\t_m_taskid\"M\n"
  "\tdrop_item\022\023\n\006m_item\030\001 \001(\005H\000\210\001\001\022\024\n\007m_cou"
  "nt\030\002 \001(\005H\001\210\001\001B\t\n\007_m_itemB\n\n\010_m_count\"\346\001\n"
  "\'PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE"
  "\022\025\n\010m_taskid\030\001 \001(\005H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\010H"
  "\001\210\001\001\022I\n\006m_drop\030\003 \003(\01329.pbnet.PROBUFF_NET"
  "_TASK_RECEIVE_AWARD_RESPONSE.MDropEntry\032"
  ",\n\nMDropEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001("
  "\005:\0028\001B\013\n\t_m_taskidB\t\n\007_m_stat\":\n\030PROBUFF"
  "_NET_CREATE_FAMIL\022\023\n\006m_name\030\001 \001(\tH\000\210\001\001B\t"
  "\n\007_m_name\"C\n!PROBUFF_NET_CREATE_FAMIL_RE"
  "SPONSE\022\023\n\006m_stat\030\001 \001(\005H\000\210\001\001B\t\n\007_m_stat\"`"
  "\n\026PROBUFF_NET_JOIN_FAMIL\022\026\n\tm_familid\030\001 "
  "\001(\003H\000\210\001\001\022\024\n\007m_apply\030\002 \001(\010H\001\210\001\001B\014\n\n_m_fam"
  "ilidB\n\n\010_m_apply\"A\n\037PROBUFF_NET_JOIN_FAM"
  "IL_RESPONSE\022\023\n\006m_stat\030\001 \001(\005H\000\210\001\001B\t\n\007_m_s"
  "tat\"g\n\035PROBUFF_NET_RATIFY_JOIN_FAMIL\022\025\n\010"
  "m_roleid\030\001 \001(\003H\000\210\001\001\022\025\n\010m_ratify\030\002 \001(\010H\001\210"
  "\001\001B\013\n\t_m_roleidB\013\n\t_m_ratify\"H\n&PROBUFF_"
  "NET_RATIFY_JOIN_FAMIL_RESPONSE\022\023\n\006m_stat"
  "\030\001 \001(\005H\000\210\001\001B\t\n\007_m_stat\"<\n\026PROBUFF_NET_CE"
  "DE_FAMIL\022\025\n\010m_roleid\030\001 \001(\003H\000\210\001\001B\013\n\t_m_ro"
  "leid\"A\n\037PROBUFF_NET_CEDE_FAMIL_RESPONSE\022"
  "\023\n\006m_stat\030\001 \001(\005H\000\210\001\001B\t\n\007_m_stat\"\?\n\027PROBU"
  "FF_NET_LEAVE_FAMIL\022\026\n\tm_familid\030\001 \001(\003H\000\210"
  "\001\001B\014\n\n_m_familid\"B\n PROBUFF_NET_LEAVE_FA"
  "MIL_RESPONSE\022\023\n\006m_stat\030\001 \001(\005H\000\210\001\001B\t\n\007_m_"
  "stat\">\n\026PROBUFF_NET_FAMIL_LIST\022\026\n\tm_fami"
  "lid\030\001 \001(\003H\000\210\001\001B\014\n\n_m_familid\"j\n\037PROBUFF_"
  "NET_FAMIL_LIST_RESPONSE\022\026\n\tm_familid\030\001 \001"
  "(\003H\000\210\001\001\022!\n\010m_family\030\002 \003(\0132\017.pbdb.db_fami"
  "lyB\014\n\n_m_familid\"d\n\034PROBUFF_NET_CHANGE_F"
  "AMILNAME\022\026\n\tm_familid\030\001 \001(\003H\000\210\001\001\022\023\n\006m_na"
  "me\030\002 \001(\tH\001\210\001\001B\014\n\n_m_familidB\t\n\007_m_name\"G"
  "\n%PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE\022"
  "\023\n\006m_stat\030\001 \001(\005H\000\210\001\001B\t\n\007_m_stat\"=\n\025PROBU"
  "FF_NET_FAMILSIGN\022\026\n\tm_familid\030\001 \001(\003H\000\210\001\001"
  "B\014\n\n_m_familid\"@\n\036PROBUFF_NET_FAMILSIGN_"
  "RESPONSE\022\023\n\006m_stat\030\001 \001(\005H\000\210\001\001B\t\n\007_m_stat"
  "\"\227\001\n PROBUFF_NET_REWARD_ITEM_RESPONSE\022D\n"
  "\007m_items\030\001 \003(\01323.pbnet.PROBUFF_NET_REWAR"
  "D_ITEM_RESPONSE.MItemsEntry\032-\n\013MItemsEnt"
  "ry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\"m\n\024PR"
  "OBUFF_NET_RANKLIST\022\026\n\tm_iscross\030\001 \001(\010H\000\210"
  "\001\001\022$\n\006m_type\030\002 \001(\0162\017.pbdb.eranklistH\001\210\001\001"
  "B\014\n\n_m_iscrossB\t\n\007_m_type\"q\n\035PROBUFF_NET"
  "_RANKLIST_RESPONSE\022$\n\006m_type\030\001 \001(\0162\017.pbd"
  "b.eranklistH\000\210\001\001\022\037\n\007m_items\030\002 \003(\0132\016.pbdb"
  ".db_briefB\t\n\007_m_type\"\024\n\022PROBUFF_NET_FRIE"
  "ND\"h\n\033PROBUFF_NET_FRIEND_RESPONSE\022!\n\tm_f"
  "riends\030\001 \003(\0132\016.pbdb.db_brief\022&\n\016m_applyf"
  "riends\030\002 \003(\0132\016.pbdb.db_brief\"=\n\025PROBUFF_"
  "NET_ADDFRIEND\022\026\n\tm_friedid\030\001 \001(\003H\000\210\001\001B\014\n"
  "\n_m_friedid\"f\n\036PROBUFF_NET_ADDFRIEND_RES"
  "PONSE\022\026\n\tm_friedid\030\001 \001(\003H\000\210\001\001\022\023\n\006m_stat\030"
  "\002 \001(\005H\001\210\001\001B\014\n\n_m_friedidB\t\n\007_m_stat\"h\n\034P"
  "ROBUFF_NET_RATIFY_ADDFRIEND\022\026\n\tm_friedid"
  "\030\001 \001(\003H\000\210\001\001\022\025\n\010m_ratify\030\002 \001(\010H\001\210\001\001B\014\n\n_m"
  "_friedidB\013\n\t_m_ratify\"\221\001\n%PROBUFF_NET_RA"
  "TIFY_ADDFRIEND_RESPONSE\022\026\n\tm_friedid\030\001 \001"
  "(\003H\000\210\001\001\022\025\n\010m_ratify\030\002 \001(\010H\001\210\001\001\022\023\n\006m_stat"
  "\030\003 \001(\005H\002\210\001\001B\014\n\n_m_friedidB\013\n\t_m_ratifyB\t"
  "\n\007_m_stat\"\?\n\027PROBUFF_NET_ERASEFRIEND\022\026\n\t"
  "m_friedid\030\001 \001(\003H\000\210\001\001B\014\n\n_m_friedid\"h\n PR"
  "OBUFF_NET_ERASEFRIEND_RESPONSE\022\026\n\tm_frie"
  "did\030\001 \001(\003H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\005H\001\210\001\001B\014\n\n_"
  "m_friedidB\t\n\007_m_stat\"\230\002\n\024PROBUFF_NET_ROL"
  "ESTAT\0225\n\006m_stat\030\001 \001(\0162 .pbnet.PROBUFF_NE"
  "T_ROLESTAT.statH\000\210\001\001\022@\n\013m_logicstat\030\002 \001("
  "\0162&.pbnet.PROBUFF_NET_ROLESTAT.logic_sta"
  "tH\001\210\001\001\022\025\n\010m_roleid\030\003 \001(\003H\002\210\001\001\"\037\n\004stat\022\n\n"
  "\006online\020\000\022\013\n\007offline\020\001\"\'\n\nlogic_stat\022\013\n\007"
  "friends\020\000\022\014\n\010familyer\020\001B\t\n\007_m_statB\016\n\014_m"
  "_logicstatB\013\n\t_m_roleid*F\n\017enum_logic_ch"
  "at\022\021\n\rget_chat_list\020\000\022\016\n\nchat_speak\020\001\022\020\n"
  "\014updata_speck\020\002*q\n\021enum_chat_channel\022\022\n\016"
  "enum_chat_zero\020\000\022\026\n\022enum_chat_ordinary\020\001"
  "\022\034\n\030enum_chat_cross_ordinary\020\002\022\022\n\016enum_c"
  "hat_none\020\003*<\n\005eunit\022\016\n\neunit_role\020\000\022\021\n\re"
  "unit_monster\020\001\022\020\n\014eunit_region\020\002*s\n\teuni"
  "tstat\022\024\n\020eunitstat_normal\020\000\022\024\n\020eunitstat"
  "_nomove\020\001\022\034\n\030eunitstat_nonormalattack\020\002\022"
  "\034\n\030eunitstat_noreleaseskill\020\004*;\n\006eplays\022"
  "\037\n\033eplays_go_undergroundpalace\020\000\022\020\n\014epla"
  "ys_count\020\001*\233\001\n\025ematching_cancel_stat\022\034\n\030"
  "ematching_cancel_success\020\000\022\032\n\026ematching_"
  "cancel_stage\020\001\022 \n\034ematching_cancel_roomn"
  "otfind\020\002\022&\n\"ematching_cancel_roommembern"
  "otfind\020\003*\253\001\n\025etype_matching_cancel\022 \n\034et"
  "ype_matching_cancel_active\020\000\022!\n\035etype_ma"
  "tching_cancel_timeout\020\001\022&\n\"etype_matchin"
  "g_waitconfirm_timeout\020\002\022%\n!etype_matchin"
  "g_waitcreate_timeout\020\003*\240\001\n\026ematching_con"
  "firm_stat\022\035\n\031ematching_confirm_success\020\000"
  "\022\033\n\027ematching_confirm_stage\020\001\022!\n\035ematchi"
  "ng_confirm_roomnotfind\020\002\022\'\n#ematching_co"
  "nfirm_roommembernotfind\020\003B\002H\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_net_2eproto_deps[1] = {
  &::descriptor_table_db_2eproto,
};
static ::_pbi::once_flag descriptor_table_net_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_net_2eproto = {
    false, false, 10917, descriptor_table_protodef_net_2eproto,
    "net.proto",
    &descriptor_table_net_2eproto_once, descriptor_table_net_2eproto_deps, 1, 98,
    schemas, file_default_instances, TableStruct_net_2eproto::offsets,
    file_level_metadata_net_2eproto, file_level_enum_descriptors_net_2eproto,
    file_level_service_descriptors_net_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_net_2eproto_getter() {
  return &descriptor_table_net_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_net_2eproto(&descriptor_table_net_2eproto);
namespace pbnet {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_RECHARGE_RESPONSE_Estat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[0];
}
bool PROBUFF_NET_RECHARGE_RESPONSE_Estat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_Success;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_NotRechargeId;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_MaxCount;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_MIN;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_MAX;
constexpr int PROBUFF_NET_RECHARGE_RESPONSE::Estat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_ROLESTAT_stat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[1];
}
bool PROBUFF_NET_ROLESTAT_stat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::online;
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::offline;
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::stat_MIN;
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::stat_MAX;
constexpr int PROBUFF_NET_ROLESTAT::stat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_ROLESTAT_logic_stat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[2];
}
bool PROBUFF_NET_ROLESTAT_logic_stat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::friends;
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::familyer;
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::logic_stat_MIN;
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::logic_stat_MAX;
constexpr int PROBUFF_NET_ROLESTAT::logic_stat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enum_logic_chat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[3];
}
bool enum_logic_chat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enum_chat_channel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[4];
}
bool enum_chat_channel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eunit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[5];
}
bool eunit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eunitstat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[6];
}
bool eunitstat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eplays_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[7];
}
bool eplays_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ematching_cancel_stat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[8];
}
bool ematching_cancel_stat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* etype_matching_cancel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[9];
}
bool etype_matching_cancel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ematching_confirm_stat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[10];
}
bool ematching_confirm_stat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PROBUFF_NET_MSG_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MSG_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MSG_RESPONSE::PROBUFF_NET_MSG_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MSG_RESPONSE)
}
PROBUFF_NET_MSG_RESPONSE::PROBUFF_NET_MSG_RESPONSE(const PROBUFF_NET_MSG_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MSG_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_msg_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_msg()) {
    _this->_impl_.m_msg_.Set(from._internal_m_msg(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MSG_RESPONSE)
}

inline void PROBUFF_NET_MSG_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_msg_){}
  };
  _impl_.m_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_MSG_RESPONSE::~PROBUFF_NET_MSG_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MSG_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MSG_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_msg_.Destroy();
}

void PROBUFF_NET_MSG_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MSG_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_msg_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MSG_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string m_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_MSG_RESPONSE.m_msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MSG_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string m_msg = 1;
  if (_internal_has_m_msg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_msg().data(), static_cast<int>(this->_internal_m_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_MSG_RESPONSE.m_msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_m_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MSG_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MSG_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string m_msg = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MSG_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MSG_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MSG_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MSG_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MSG_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MSG_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_msg()) {
    _this->_internal_set_m_msg(from._internal_m_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MSG_RESPONSE::CopyFrom(const PROBUFF_NET_MSG_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MSG_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MSG_RESPONSE::InternalSwap(PROBUFF_NET_MSG_RESPONSE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_msg_, lhs_arena,
      &other->_impl_.m_msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MSG_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[0]);
}

// ===================================================================

class PROBUFF_NET_HEARTBEAT::_Internal {
 public:
};

PROBUFF_NET_HEARTBEAT::PROBUFF_NET_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_HEARTBEAT)
}
PROBUFF_NET_HEARTBEAT::PROBUFF_NET_HEARTBEAT(const PROBUFF_NET_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_HEARTBEAT* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_HEARTBEAT)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_HEARTBEAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_HEARTBEAT::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_HEARTBEAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[1]);
}

// ===================================================================

class PROBUFF_NET_RECHARGE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RECHARGE>()._impl_._has_bits_);
  static void set_has_m_rechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_RECHARGE::PROBUFF_NET_RECHARGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RECHARGE)
}
PROBUFF_NET_RECHARGE::PROBUFF_NET_RECHARGE(const PROBUFF_NET_RECHARGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_RECHARGE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_rechargeid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_rechargeid_ = from._impl_.m_rechargeid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RECHARGE)
}

inline void PROBUFF_NET_RECHARGE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_rechargeid_){0}
  };
}

PROBUFF_NET_RECHARGE::~PROBUFF_NET_RECHARGE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RECHARGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_RECHARGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_RECHARGE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_RECHARGE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RECHARGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_rechargeid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RECHARGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_rechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_rechargeid(&has_bits);
          _impl_.m_rechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_RECHARGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RECHARGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_rechargeid = 1;
  if (_internal_has_m_rechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_rechargeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RECHARGE)
  return target;
}

size_t PROBUFF_NET_RECHARGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RECHARGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 m_rechargeid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_rechargeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_RECHARGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_RECHARGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_RECHARGE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_RECHARGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_RECHARGE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_RECHARGE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RECHARGE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_rechargeid()) {
    _this->_internal_set_m_rechargeid(from._internal_m_rechargeid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_RECHARGE::CopyFrom(const PROBUFF_NET_RECHARGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RECHARGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RECHARGE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RECHARGE::InternalSwap(PROBUFF_NET_RECHARGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_rechargeid_, other->_impl_.m_rechargeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RECHARGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[2]);
}

// ===================================================================

class PROBUFF_NET_RECHARGE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RECHARGE_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_rechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_RECHARGE_RESPONSE::PROBUFF_NET_RECHARGE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
}
PROBUFF_NET_RECHARGE_RESPONSE::PROBUFF_NET_RECHARGE_RESPONSE(const PROBUFF_NET_RECHARGE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_RECHARGE_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_orderid_){}
    , decltype(_impl_.m_rechargeid_){}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_orderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_orderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_orderid()) {
    _this->_impl_.m_orderid_.Set(from._internal_m_orderid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.m_rechargeid_, &from._impl_.m_rechargeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_stat_) -
    reinterpret_cast<char*>(&_impl_.m_rechargeid_)) + sizeof(_impl_.m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
}

inline void PROBUFF_NET_RECHARGE_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_orderid_){}
    , decltype(_impl_.m_rechargeid_){0}
    , decltype(_impl_.m_stat_){0}
  };
  _impl_.m_orderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_orderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_RECHARGE_RESPONSE::~PROBUFF_NET_RECHARGE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_RECHARGE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_orderid_.Destroy();
}

void PROBUFF_NET_RECHARGE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_RECHARGE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_orderid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.m_rechargeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_rechargeid_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RECHARGE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_rechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_rechargeid(&has_bits);
          _impl_.m_rechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_stat(static_cast<::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string m_orderid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_m_orderid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_orderid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_RECHARGE_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_rechargeid = 1;
  if (_internal_has_m_rechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_rechargeid(), target);
  }

  // optional .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_m_stat(), target);
  }

  // optional string m_orderid = 3;
  if (_internal_has_m_orderid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_orderid().data(), static_cast<int>(this->_internal_m_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_orderid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_m_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_RECHARGE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string m_orderid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_orderid());
    }

    // optional int32 m_rechargeid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_rechargeid());
    }

    // optional .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat m_stat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_stat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_RECHARGE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_RECHARGE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_RECHARGE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_RECHARGE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_RECHARGE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_RECHARGE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_orderid(from._internal_m_orderid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_rechargeid_ = from._impl_.m_rechargeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_RECHARGE_RESPONSE::CopyFrom(const PROBUFF_NET_RECHARGE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RECHARGE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RECHARGE_RESPONSE::InternalSwap(PROBUFF_NET_RECHARGE_RESPONSE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_orderid_, lhs_arena,
      &other->_impl_.m_orderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RECHARGE_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_RECHARGE_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RECHARGE_RESPONSE, _impl_.m_rechargeid_)>(
          reinterpret_cast<char*>(&_impl_.m_rechargeid_),
          reinterpret_cast<char*>(&other->_impl_.m_rechargeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RECHARGE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[3]);
}

// ===================================================================

PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse() {}
PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::MergeFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[4]);
}

// ===================================================================

class PROBUFF_NET_DELIVER_GOODS_RECHARGE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_DELIVER_GOODS_RECHARGE>()._impl_._has_bits_);
  static void set_has_m_rechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_DELIVER_GOODS_RECHARGE::PROBUFF_NET_DELIVER_GOODS_RECHARGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PROBUFF_NET_DELIVER_GOODS_RECHARGE::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
}
PROBUFF_NET_DELIVER_GOODS_RECHARGE::PROBUFF_NET_DELIVER_GOODS_RECHARGE(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_DELIVER_GOODS_RECHARGE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.m_items_)*/{}
    , decltype(_impl_.m_orderid_){}
    , decltype(_impl_.m_rechargeid_){}
    , decltype(_impl_.m_gold_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_items_.MergeFrom(from._impl_.m_items_);
  _impl_.m_orderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_orderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_orderid()) {
    _this->_impl_.m_orderid_.Set(from._internal_m_orderid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.m_rechargeid_, &from._impl_.m_rechargeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_gold_) -
    reinterpret_cast<char*>(&_impl_.m_rechargeid_)) + sizeof(_impl_.m_gold_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
}

inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.m_items_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.m_orderid_){}
    , decltype(_impl_.m_rechargeid_){0}
    , decltype(_impl_.m_gold_){0}
  };
  _impl_.m_orderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_orderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_DELIVER_GOODS_RECHARGE::~PROBUFF_NET_DELIVER_GOODS_RECHARGE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_DELIVER_GOODS_RECHARGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_items_.Destruct();
  _impl_.m_items_.~MapField();
  _impl_.m_orderid_.Destroy();
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::ArenaDtor(void* object) {
  PROBUFF_NET_DELIVER_GOODS_RECHARGE* _this = reinterpret_cast< PROBUFF_NET_DELIVER_GOODS_RECHARGE* >(object);
  _this->_impl_.m_items_.Destruct();
}
void PROBUFF_NET_DELIVER_GOODS_RECHARGE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_orderid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.m_rechargeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_gold_) -
        reinterpret_cast<char*>(&_impl_.m_rechargeid_)) + sizeof(_impl_.m_gold_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_DELIVER_GOODS_RECHARGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_rechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_rechargeid(&has_bits);
          _impl_.m_rechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string m_orderid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_orderid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_orderid"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_m_gold(&has_bits);
          _impl_.m_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, int32> m_items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.m_items_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_DELIVER_GOODS_RECHARGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_rechargeid = 1;
  if (_internal_has_m_rechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_rechargeid(), target);
  }

  // optional string m_orderid = 2;
  if (_internal_has_m_orderid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_orderid().data(), static_cast<int>(this->_internal_m_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_orderid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_orderid(), target);
  }

  // optional int32 m_gold = 3;
  if (_internal_has_m_gold()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_gold(), target);
  }

  // map<int32, int32> m_items = 4;
  if (!this->_internal_m_items().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_items();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  return target;
}

size_t PROBUFF_NET_DELIVER_GOODS_RECHARGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> m_items = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_items_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_m_items().begin();
      it != this->_internal_m_items().end(); ++it) {
    total_size += PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string m_orderid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_orderid());
    }

    // optional int32 m_rechargeid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_rechargeid());
    }

    // optional int32 m_gold = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_gold());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_DELIVER_GOODS_RECHARGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_DELIVER_GOODS_RECHARGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_DELIVER_GOODS_RECHARGE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_DELIVER_GOODS_RECHARGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_DELIVER_GOODS_RECHARGE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_DELIVER_GOODS_RECHARGE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_items_.MergeFrom(from._impl_.m_items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_orderid(from._internal_m_orderid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_rechargeid_ = from._impl_.m_rechargeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_gold_ = from._impl_.m_gold_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::CopyFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::InternalSwap(PROBUFF_NET_DELIVER_GOODS_RECHARGE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_items_.InternalSwap(&other->_impl_.m_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_orderid_, lhs_arena,
      &other->_impl_.m_orderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_DELIVER_GOODS_RECHARGE, _impl_.m_gold_)
      + sizeof(PROBUFF_NET_DELIVER_GOODS_RECHARGE::_impl_.m_gold_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_DELIVER_GOODS_RECHARGE, _impl_.m_rechargeid_)>(
          reinterpret_cast<char*>(&_impl_.m_rechargeid_),
          reinterpret_cast<char*>(&other->_impl_.m_rechargeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_DELIVER_GOODS_RECHARGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[5]);
}

// ===================================================================

class PROBUFF_NET_ERROR::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ERROR>()._impl_._has_bits_);
  static void set_has_m_errmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ERROR::PROBUFF_NET_ERROR(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ERROR)
}
PROBUFF_NET_ERROR::PROBUFF_NET_ERROR(const PROBUFF_NET_ERROR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ERROR* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_errmessage_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_errmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_errmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_errmessage()) {
    _this->_impl_.m_errmessage_.Set(from._internal_m_errmessage(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ERROR)
}

inline void PROBUFF_NET_ERROR::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_errmessage_){}
  };
  _impl_.m_errmessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_errmessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_ERROR::~PROBUFF_NET_ERROR() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ERROR)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ERROR::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_errmessage_.Destroy();
}

void PROBUFF_NET_ERROR::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ERROR::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ERROR)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_errmessage_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ERROR::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string m_errmessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_errmessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ERROR.m_errmessage"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ERROR::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ERROR)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string m_errmessage = 2;
  if (_internal_has_m_errmessage()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_errmessage().data(), static_cast<int>(this->_internal_m_errmessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ERROR.m_errmessage");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_errmessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ERROR)
  return target;
}

size_t PROBUFF_NET_ERROR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ERROR)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string m_errmessage = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m_errmessage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ERROR::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ERROR::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ERROR::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ERROR::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ERROR*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ERROR&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ERROR)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_errmessage()) {
    _this->_internal_set_m_errmessage(from._internal_m_errmessage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ERROR::CopyFrom(const PROBUFF_NET_ERROR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ERROR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ERROR::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ERROR::InternalSwap(PROBUFF_NET_ERROR* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_errmessage_, lhs_arena,
      &other->_impl_.m_errmessage_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ERROR::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[6]);
}

// ===================================================================

class PROBUFF_NET_GET_TIME::_Internal {
 public:
};

PROBUFF_NET_GET_TIME::PROBUFF_NET_GET_TIME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_GET_TIME)
}
PROBUFF_NET_GET_TIME::PROBUFF_NET_GET_TIME(const PROBUFF_NET_GET_TIME& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_GET_TIME* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_GET_TIME)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_GET_TIME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_GET_TIME::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_GET_TIME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[7]);
}

// ===================================================================

class PROBUFF_NET_GET_TIME_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_GET_TIME_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_GET_TIME_RESPONSE::PROBUFF_NET_GET_TIME_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
}
PROBUFF_NET_GET_TIME_RESPONSE::PROBUFF_NET_GET_TIME_RESPONSE(const PROBUFF_NET_GET_TIME_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_GET_TIME_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_utc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_utc_ = from._impl_.m_utc_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
}

inline void PROBUFF_NET_GET_TIME_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_utc_){0}
  };
}

PROBUFF_NET_GET_TIME_RESPONSE::~PROBUFF_NET_GET_TIME_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_GET_TIME_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_GET_TIME_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_GET_TIME_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_utc_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_GET_TIME_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_utc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_utc(&has_bits);
          _impl_.m_utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_GET_TIME_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_utc = 1;
  if (_internal_has_m_utc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_utc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  return target;
}

size_t PROBUFF_NET_GET_TIME_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 m_utc = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_utc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_GET_TIME_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_GET_TIME_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_GET_TIME_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_GET_TIME_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_GET_TIME_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_GET_TIME_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_utc()) {
    _this->_internal_set_m_utc(from._internal_m_utc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_GET_TIME_RESPONSE::CopyFrom(const PROBUFF_NET_GET_TIME_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_GET_TIME_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_GET_TIME_RESPONSE::InternalSwap(PROBUFF_NET_GET_TIME_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_utc_, other->_impl_.m_utc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_GET_TIME_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[8]);
}

// ===================================================================

class PROBUFF_NET_NOTICE::_Internal {
 public:
};

PROBUFF_NET_NOTICE::PROBUFF_NET_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_NOTICE)
}
PROBUFF_NET_NOTICE::PROBUFF_NET_NOTICE(const PROBUFF_NET_NOTICE& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_NOTICE* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_NOTICE)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_NOTICE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_NOTICE::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_NOTICE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[9]);
}

// ===================================================================

class PROBUFF_NET_NOTICE_RESPONSE::_Internal {
 public:
};

void PROBUFF_NET_NOTICE_RESPONSE::clear_m_notices() {
  _impl_.m_notices_.Clear();
}
PROBUFF_NET_NOTICE_RESPONSE::PROBUFF_NET_NOTICE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
}
PROBUFF_NET_NOTICE_RESPONSE::PROBUFF_NET_NOTICE_RESPONSE(const PROBUFF_NET_NOTICE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_NOTICE_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_notices_){from._impl_.m_notices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
}

inline void PROBUFF_NET_NOTICE_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.m_notices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_NOTICE_RESPONSE::~PROBUFF_NET_NOTICE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_NOTICE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_notices_.~RepeatedPtrField();
}

void PROBUFF_NET_NOTICE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_NOTICE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_notices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_NOTICE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pbdb.db_notice m_notices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_notices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_NOTICE_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbdb.db_notice m_notices = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_notices_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_notices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_NOTICE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_notice m_notices = 1;
  total_size += 1UL * this->_internal_m_notices_size();
  for (const auto& msg : this->_impl_.m_notices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_NOTICE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_NOTICE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_NOTICE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_NOTICE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_NOTICE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_NOTICE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_notices_.MergeFrom(from._impl_.m_notices_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_NOTICE_RESPONSE::CopyFrom(const PROBUFF_NET_NOTICE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_NOTICE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_NOTICE_RESPONSE::InternalSwap(PROBUFF_NET_NOTICE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_notices_.InternalSwap(&other->_impl_.m_notices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_NOTICE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[10]);
}

// ===================================================================

class PROBUFF_NET_ACOUNT_LOGIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ACOUNT_LOGIN>()._impl_._has_bits_);
  static void set_has_m_area(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_ACOUNT_LOGIN::PROBUFF_NET_ACOUNT_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
}
PROBUFF_NET_ACOUNT_LOGIN::PROBUFF_NET_ACOUNT_LOGIN(const PROBUFF_NET_ACOUNT_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ACOUNT_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_account_){}
    , decltype(_impl_.m_password_){}
    , decltype(_impl_.m_area_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_account()) {
    _this->_impl_.m_account_.Set(from._internal_m_account(), 
      _this->GetArenaForAllocation());
  }
  _impl_.m_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_password()) {
    _this->_impl_.m_password_.Set(from._internal_m_password(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.m_area_ = from._impl_.m_area_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
}

inline void PROBUFF_NET_ACOUNT_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_account_){}
    , decltype(_impl_.m_password_){}
    , decltype(_impl_.m_area_){0}
  };
  _impl_.m_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_ACOUNT_LOGIN::~PROBUFF_NET_ACOUNT_LOGIN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ACOUNT_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_account_.Destroy();
  _impl_.m_password_.Destroy();
}

void PROBUFF_NET_ACOUNT_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ACOUNT_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.m_account_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.m_password_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.m_area_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ACOUNT_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_area(&has_bits);
          _impl_.m_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string m_account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account"));
        } else
          goto handle_unusual;
        continue;
      // optional string m_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_m_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ACOUNT_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_area = 1;
  if (_internal_has_m_area()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_area(), target);
  }

  // optional string m_account = 2;
  if (_internal_has_m_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_account().data(), static_cast<int>(this->_internal_m_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_account(), target);
  }

  // optional string m_password = 3;
  if (_internal_has_m_password()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_password().data(), static_cast<int>(this->_internal_m_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_m_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  return target;
}

size_t PROBUFF_NET_ACOUNT_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string m_account = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_account());
    }

    // optional string m_password = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_password());
    }

    // optional int32 m_area = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_area());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ACOUNT_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ACOUNT_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ACOUNT_LOGIN::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ACOUNT_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ACOUNT_LOGIN*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ACOUNT_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_account(from._internal_m_account());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_m_password(from._internal_m_password());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_area_ = from._impl_.m_area_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ACOUNT_LOGIN::CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ACOUNT_LOGIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ACOUNT_LOGIN::InternalSwap(PROBUFF_NET_ACOUNT_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_account_, lhs_arena,
      &other->_impl_.m_account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_password_, lhs_arena,
      &other->_impl_.m_password_, rhs_arena
  );
  swap(_impl_.m_area_, other->_impl_.m_area_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ACOUNT_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[11]);
}

// ===================================================================

class PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_area(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_account(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_gatewayid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
}
PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_session_){}
    , decltype(_impl_.m_account_){}
    , decltype(_impl_.m_roleid_){}
    , decltype(_impl_.m_area_){}
    , decltype(_impl_.m_gatewayid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_session_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_session_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_session()) {
    _this->_impl_.m_session_.Set(from._internal_m_session(), 
      _this->GetArenaForAllocation());
  }
  _impl_.m_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_account()) {
    _this->_impl_.m_account_.Set(from._internal_m_account(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.m_roleid_, &from._impl_.m_roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_gatewayid_) -
    reinterpret_cast<char*>(&_impl_.m_roleid_)) + sizeof(_impl_.m_gatewayid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
}

inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_session_){}
    , decltype(_impl_.m_account_){}
    , decltype(_impl_.m_roleid_){int64_t{0}}
    , decltype(_impl_.m_area_){0}
    , decltype(_impl_.m_gatewayid_){0}
  };
  _impl_.m_session_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_session_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::~PROBUFF_NET_ACOUNT_LOGIN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_session_.Destroy();
  _impl_.m_account_.Destroy();
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.m_session_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.m_account_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.m_roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_gatewayid_) -
        reinterpret_cast<char*>(&_impl_.m_roleid_)) + sizeof(_impl_.m_gatewayid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_area(&has_bits);
          _impl_.m_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 m_roleid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roleid(&has_bits);
          _impl_.m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string m_session = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_m_session();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session"));
        } else
          goto handle_unusual;
        continue;
      // optional string m_account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_m_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_gatewayid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_m_gatewayid(&has_bits);
          _impl_.m_gatewayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_area = 1;
  if (_internal_has_m_area()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_area(), target);
  }

  // optional int64 m_roleid = 2;
  if (_internal_has_m_roleid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_m_roleid(), target);
  }

  // optional string m_session = 3;
  if (_internal_has_m_session()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_session().data(), static_cast<int>(this->_internal_m_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_m_session(), target);
  }

  // optional string m_account = 4;
  if (_internal_has_m_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_account().data(), static_cast<int>(this->_internal_m_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_m_account(), target);
  }

  // optional int32 m_gatewayid = 5;
  if (_internal_has_m_gatewayid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_m_gatewayid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  return target;
}

size_t PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string m_session = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_session());
    }

    // optional string m_account = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_account());
    }

    // optional int64 m_roleid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_roleid());
    }

    // optional int32 m_area = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_area());
    }

    // optional int32 m_gatewayid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_gatewayid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_session(from._internal_m_session());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_m_account(from._internal_m_account());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_roleid_ = from._impl_.m_roleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.m_area_ = from._impl_.m_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.m_gatewayid_ = from._impl_.m_gatewayid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::InternalSwap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_session_, lhs_arena,
      &other->_impl_.m_session_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_account_, lhs_arena,
      &other->_impl_.m_account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.m_gatewayid_)
      + sizeof(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_impl_.m_gatewayid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _impl_.m_roleid_)>(
          reinterpret_cast<char*>(&_impl_.m_roleid_),
          reinterpret_cast<char*>(&other->_impl_.m_roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[12]);
}

// ===================================================================

class PROBUFF_NET_ROLE_LOGIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ROLE_LOGIN>()._impl_._has_bits_);
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_iscreate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_area(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_gatewayid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PROBUFF_NET_ROLE_LOGIN::PROBUFF_NET_ROLE_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
}
PROBUFF_NET_ROLE_LOGIN::PROBUFF_NET_ROLE_LOGIN(const PROBUFF_NET_ROLE_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ROLE_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_session_){}
    , decltype(_impl_.m_roleid_){}
    , decltype(_impl_.m_iscreate_){}
    , decltype(_impl_.m_area_){}
    , decltype(_impl_.m_gatewayid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_session_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_session_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_session()) {
    _this->_impl_.m_session_.Set(from._internal_m_session(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.m_roleid_, &from._impl_.m_roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_gatewayid_) -
    reinterpret_cast<char*>(&_impl_.m_roleid_)) + sizeof(_impl_.m_gatewayid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
}

inline void PROBUFF_NET_ROLE_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_session_){}
    , decltype(_impl_.m_roleid_){int64_t{0}}
    , decltype(_impl_.m_iscreate_){false}
    , decltype(_impl_.m_area_){0}
    , decltype(_impl_.m_gatewayid_){0}
  };
  _impl_.m_session_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_session_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_ROLE_LOGIN::~PROBUFF_NET_ROLE_LOGIN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ROLE_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_session_.Destroy();
}

void PROBUFF_NET_ROLE_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ROLE_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_session_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.m_roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_gatewayid_) -
        reinterpret_cast<char*>(&_impl_.m_roleid_)) + sizeof(_impl_.m_gatewayid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLE_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_roleid(&has_bits);
          _impl_.m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string m_session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_session();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_ROLE_LOGIN.m_session"));
        } else
          goto handle_unusual;
        continue;
      // optional bool m_iscreate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_m_iscreate(&has_bits);
          _impl_.m_iscreate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_m_area(&has_bits);
          _impl_.m_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_gatewayid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_m_gatewayid(&has_bits);
          _impl_.m_gatewayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ROLE_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_roleid = 1;
  if (_internal_has_m_roleid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_roleid(), target);
  }

  // optional string m_session = 2;
  if (_internal_has_m_session()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_session().data(), static_cast<int>(this->_internal_m_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ROLE_LOGIN.m_session");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_session(), target);
  }

  // optional bool m_iscreate = 3;
  if (_internal_has_m_iscreate()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_m_iscreate(), target);
  }

  // optional int32 m_area = 4;
  if (_internal_has_m_area()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_area(), target);
  }

  // optional int32 m_gatewayid = 5;
  if (_internal_has_m_gatewayid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_m_gatewayid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLE_LOGIN)
  return target;
}

size_t PROBUFF_NET_ROLE_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string m_session = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_session());
    }

    // optional int64 m_roleid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_roleid());
    }

    // optional bool m_iscreate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 m_area = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_area());
    }

    // optional int32 m_gatewayid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_gatewayid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ROLE_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ROLE_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ROLE_LOGIN::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ROLE_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ROLE_LOGIN*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ROLE_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_session(from._internal_m_session());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_roleid_ = from._impl_.m_roleid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_iscreate_ = from._impl_.m_iscreate_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.m_area_ = from._impl_.m_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.m_gatewayid_ = from._impl_.m_gatewayid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ROLE_LOGIN::CopyFrom(const PROBUFF_NET_ROLE_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLE_LOGIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLE_LOGIN::InternalSwap(PROBUFF_NET_ROLE_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_session_, lhs_arena,
      &other->_impl_.m_session_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_LOGIN, _impl_.m_gatewayid_)
      + sizeof(PROBUFF_NET_ROLE_LOGIN::_impl_.m_gatewayid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_LOGIN, _impl_.m_roleid_)>(
          reinterpret_cast<char*>(&_impl_.m_roleid_),
          reinterpret_cast<char*>(&other->_impl_.m_roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[13]);
}

// ===================================================================

class PROBUFF_NET_ROLE_SYNC::_Internal {
 public:
};

PROBUFF_NET_ROLE_SYNC::PROBUFF_NET_ROLE_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_SYNC)
}
PROBUFF_NET_ROLE_SYNC::PROBUFF_NET_ROLE_SYNC(const PROBUFF_NET_ROLE_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_ROLE_SYNC* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_SYNC)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ROLE_SYNC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ROLE_SYNC::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_SYNC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[14]);
}

// ===================================================================

class PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ROLE_SYNC_RESPONSE>()._impl_._has_bits_);
  static const ::pbdb::db_role& m_role(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_m_role(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pbdb::db_bag& m_bag(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_m_bag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbdb::db_task& m_task(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_m_task(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::pbdb::db_role&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::m_role(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->_impl_.m_role_;
}
const ::pbdb::db_bag&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::m_bag(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->_impl_.m_bag_;
}
const ::pbdb::db_task&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::m_task(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->_impl_.m_task_;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_m_role() {
  if (_impl_.m_role_ != nullptr) _impl_.m_role_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_m_bag() {
  if (_impl_.m_bag_ != nullptr) _impl_.m_bag_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_m_task() {
  if (_impl_.m_task_ != nullptr) _impl_.m_task_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
PROBUFF_NET_ROLE_SYNC_RESPONSE::PROBUFF_NET_ROLE_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
}
PROBUFF_NET_ROLE_SYNC_RESPONSE::PROBUFF_NET_ROLE_SYNC_RESPONSE(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ROLE_SYNC_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_role_){nullptr}
    , decltype(_impl_.m_bag_){nullptr}
    , decltype(_impl_.m_task_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_role()) {
    _this->_impl_.m_role_ = new ::pbdb::db_role(*from._impl_.m_role_);
  }
  if (from._internal_has_m_bag()) {
    _this->_impl_.m_bag_ = new ::pbdb::db_bag(*from._impl_.m_bag_);
  }
  if (from._internal_has_m_task()) {
    _this->_impl_.m_task_ = new ::pbdb::db_task(*from._impl_.m_task_);
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
}

inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_role_){nullptr}
    , decltype(_impl_.m_bag_){nullptr}
    , decltype(_impl_.m_task_){nullptr}
  };
}

PROBUFF_NET_ROLE_SYNC_RESPONSE::~PROBUFF_NET_ROLE_SYNC_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ROLE_SYNC_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.m_role_;
  if (this != internal_default_instance()) delete _impl_.m_bag_;
  if (this != internal_default_instance()) delete _impl_.m_task_;
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.m_role_ != nullptr);
      _impl_.m_role_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.m_bag_ != nullptr);
      _impl_.m_bag_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.m_task_ != nullptr);
      _impl_.m_task_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLE_SYNC_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbdb.db_role m_role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbdb.db_bag m_bag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_bag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbdb.db_task m_task = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ROLE_SYNC_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbdb.db_role m_role = 1;
  if (_internal_has_m_role()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::m_role(this),
        _Internal::m_role(this).GetCachedSize(), target, stream);
  }

  // optional .pbdb.db_bag m_bag = 2;
  if (_internal_has_m_bag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::m_bag(this),
        _Internal::m_bag(this).GetCachedSize(), target, stream);
  }

  // optional .pbdb.db_task m_task = 3;
  if (_internal_has_m_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::m_task(this),
        _Internal::m_task(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  return target;
}

size_t PROBUFF_NET_ROLE_SYNC_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .pbdb.db_role m_role = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.m_role_);
    }

    // optional .pbdb.db_bag m_bag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.m_bag_);
    }

    // optional .pbdb.db_task m_task = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.m_task_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ROLE_SYNC_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ROLE_SYNC_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ROLE_SYNC_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ROLE_SYNC_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ROLE_SYNC_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ROLE_SYNC_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_m_role()->::pbdb::db_role::MergeFrom(
          from._internal_m_role());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_m_bag()->::pbdb::db_bag::MergeFrom(
          from._internal_m_bag());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_m_task()->::pbdb::db_task::MergeFrom(
          from._internal_m_task());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::CopyFrom(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLE_SYNC_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::InternalSwap(PROBUFF_NET_ROLE_SYNC_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.m_task_)
      + sizeof(PROBUFF_NET_ROLE_SYNC_RESPONSE::_impl_.m_task_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_SYNC_RESPONSE, _impl_.m_role_)>(
          reinterpret_cast<char*>(&_impl_.m_role_),
          reinterpret_cast<char*>(&other->_impl_.m_role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_SYNC_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[15]);
}

// ===================================================================

class PROBUFF_NET_BAG_SYNC::_Internal {
 public:
};

PROBUFF_NET_BAG_SYNC::PROBUFF_NET_BAG_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_SYNC)
}
PROBUFF_NET_BAG_SYNC::PROBUFF_NET_BAG_SYNC(const PROBUFF_NET_BAG_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_BAG_SYNC* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_SYNC)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_SYNC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_SYNC::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_SYNC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[16]);
}

// ===================================================================

class PROBUFF_NET_BAG_SYNC_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_SYNC_RESPONSE>()._impl_._has_bits_);
  static const ::pbdb::db_bag& m_bag(const PROBUFF_NET_BAG_SYNC_RESPONSE* msg);
  static void set_has_m_bag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pbdb::db_bag&
PROBUFF_NET_BAG_SYNC_RESPONSE::_Internal::m_bag(const PROBUFF_NET_BAG_SYNC_RESPONSE* msg) {
  return *msg->_impl_.m_bag_;
}
void PROBUFF_NET_BAG_SYNC_RESPONSE::clear_m_bag() {
  if (_impl_.m_bag_ != nullptr) _impl_.m_bag_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PROBUFF_NET_BAG_SYNC_RESPONSE::PROBUFF_NET_BAG_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
}
PROBUFF_NET_BAG_SYNC_RESPONSE::PROBUFF_NET_BAG_SYNC_RESPONSE(const PROBUFF_NET_BAG_SYNC_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_BAG_SYNC_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_bag_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_bag()) {
    _this->_impl_.m_bag_ = new ::pbdb::db_bag(*from._impl_.m_bag_);
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
}

inline void PROBUFF_NET_BAG_SYNC_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_bag_){nullptr}
  };
}

PROBUFF_NET_BAG_SYNC_RESPONSE::~PROBUFF_NET_BAG_SYNC_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_BAG_SYNC_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.m_bag_;
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.m_bag_ != nullptr);
    _impl_.m_bag_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_SYNC_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbdb.db_bag m_bag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_bag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_BAG_SYNC_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbdb.db_bag m_bag = 1;
  if (_internal_has_m_bag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::m_bag(this),
        _Internal::m_bag(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  return target;
}

size_t PROBUFF_NET_BAG_SYNC_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .pbdb.db_bag m_bag = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.m_bag_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_SYNC_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_BAG_SYNC_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_SYNC_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_BAG_SYNC_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_BAG_SYNC_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_BAG_SYNC_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_bag()) {
    _this->_internal_mutable_m_bag()->::pbdb::db_bag::MergeFrom(
        from._internal_m_bag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::CopyFrom(const PROBUFF_NET_BAG_SYNC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_SYNC_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::InternalSwap(PROBUFF_NET_BAG_SYNC_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_bag_, other->_impl_.m_bag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_SYNC_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[17]);
}

// ===================================================================

class PROBUFF_NET_BAG_UPDATE::_Internal {
 public:
};

PROBUFF_NET_BAG_UPDATE::PROBUFF_NET_BAG_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE)
}
PROBUFF_NET_BAG_UPDATE::PROBUFF_NET_BAG_UPDATE(const PROBUFF_NET_BAG_UPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_BAG_UPDATE* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_UPDATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_UPDATE::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[18]);
}

// ===================================================================

class PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem>()._impl_._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
}
PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_id_){}
    , decltype(_impl_.m_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_id_, &from._impl_.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_count_) -
    reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_count_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
}

inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_id_){0}
    , decltype(_impl_.m_count_){0}
  };
}

PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::~PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_count_) -
        reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          _impl_.m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_count(&has_bits);
          _impl_.m_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_id(), target);
  }

  // optional int32 m_count = 2;
  if (_internal_has_m_count()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  return target;
}

size_t PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 m_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_id());
    }

    // optional int32 m_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_id_ = from._impl_.m_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_count_ = from._impl_.m_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _impl_.m_count_)
      + sizeof(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_impl_.m_count_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _impl_.m_id_)>(
          reinterpret_cast<char*>(&_impl_.m_id_),
          reinterpret_cast<char*>(&other->_impl_.m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[19]);
}

// ===================================================================

class PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_UPDATE_RESPONSE_additem>()._impl_._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
}
PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_id_){}
    , decltype(_impl_.m_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_id_, &from._impl_.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_count_) -
    reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_count_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
}

inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_id_){0}
    , decltype(_impl_.m_count_){0}
  };
}

PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::~PROBUFF_NET_BAG_UPDATE_RESPONSE_additem() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_count_) -
        reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          _impl_.m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_count(&has_bits);
          _impl_.m_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_id(), target);
  }

  // optional int32 m_count = 2;
  if (_internal_has_m_count()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  return target;
}

size_t PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 m_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_id());
    }

    // optional int32 m_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_BAG_UPDATE_RESPONSE_additem*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_id_ = from._impl_.m_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_count_ = from._impl_.m_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _impl_.m_count_)
      + sizeof(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_impl_.m_count_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _impl_.m_id_)>(
          reinterpret_cast<char*>(&_impl_.m_id_),
          reinterpret_cast<char*>(&other->_impl_.m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[20]);
}

// ===================================================================

class PROBUFF_NET_BAG_UPDATE_RESPONSE::_Internal {
 public:
};

PROBUFF_NET_BAG_UPDATE_RESPONSE::PROBUFF_NET_BAG_UPDATE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
}
PROBUFF_NET_BAG_UPDATE_RESPONSE::PROBUFF_NET_BAG_UPDATE_RESPONSE(const PROBUFF_NET_BAG_UPDATE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_BAG_UPDATE_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_delitems_){from._impl_.m_delitems_}
    , decltype(_impl_.m_delnostackitems_){from._impl_.m_delnostackitems_}
    , /*decltype(_impl_._m_delnostackitems_cached_byte_size_)*/{0}
    , decltype(_impl_.m_additems_){from._impl_.m_additems_}
    , decltype(_impl_.m_addnostackitems_){from._impl_.m_addnostackitems_}
    , /*decltype(_impl_._m_addnostackitems_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
}

inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.m_delitems_){arena}
    , decltype(_impl_.m_delnostackitems_){arena}
    , /*decltype(_impl_._m_delnostackitems_cached_byte_size_)*/{0}
    , decltype(_impl_.m_additems_){arena}
    , decltype(_impl_.m_addnostackitems_){arena}
    , /*decltype(_impl_._m_addnostackitems_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_BAG_UPDATE_RESPONSE::~PROBUFF_NET_BAG_UPDATE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_BAG_UPDATE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_delitems_.~RepeatedPtrField();
  _impl_.m_delnostackitems_.~RepeatedField();
  _impl_.m_additems_.~RepeatedPtrField();
  _impl_.m_addnostackitems_.~RepeatedField();
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_delitems_.Clear();
  _impl_.m_delnostackitems_.Clear();
  _impl_.m_additems_.Clear();
  _impl_.m_addnostackitems_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem m_delitems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_delitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 m_delnostackitems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_m_delnostackitems(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_m_delnostackitems(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem m_additems = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_additems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 m_addnostackitems = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_m_addnostackitems(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_m_addnostackitems(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_BAG_UPDATE_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem m_delitems = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_delitems_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_delitems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 m_delnostackitems = 2;
  {
    int byte_size = _impl_._m_delnostackitems_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_m_delnostackitems(), byte_size, target);
    }
  }

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem m_additems = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_additems_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_additems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 m_addnostackitems = 4;
  {
    int byte_size = _impl_._m_addnostackitems_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_m_addnostackitems(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_BAG_UPDATE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem m_delitems = 1;
  total_size += 1UL * this->_internal_m_delitems_size();
  for (const auto& msg : this->_impl_.m_delitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 m_delnostackitems = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.m_delnostackitems_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._m_delnostackitems_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem m_additems = 3;
  total_size += 1UL * this->_internal_m_additems_size();
  for (const auto& msg : this->_impl_.m_additems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 m_addnostackitems = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.m_addnostackitems_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._m_addnostackitems_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_BAG_UPDATE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_BAG_UPDATE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_BAG_UPDATE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_BAG_UPDATE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_BAG_UPDATE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_BAG_UPDATE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_delitems_.MergeFrom(from._impl_.m_delitems_);
  _this->_impl_.m_delnostackitems_.MergeFrom(from._impl_.m_delnostackitems_);
  _this->_impl_.m_additems_.MergeFrom(from._impl_.m_additems_);
  _this->_impl_.m_addnostackitems_.MergeFrom(from._impl_.m_addnostackitems_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_delitems_.InternalSwap(&other->_impl_.m_delitems_);
  _impl_.m_delnostackitems_.InternalSwap(&other->_impl_.m_delnostackitems_);
  _impl_.m_additems_.InternalSwap(&other->_impl_.m_additems_);
  _impl_.m_addnostackitems_.InternalSwap(&other->_impl_.m_addnostackitems_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[21]);
}

// ===================================================================

class PROBUFF_NET_CMD::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CMD>()._impl_._has_bits_);
  static void set_has_m_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CMD::PROBUFF_NET_CMD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CMD)
}
PROBUFF_NET_CMD::PROBUFF_NET_CMD(const PROBUFF_NET_CMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CMD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_cmd()) {
    _this->_impl_.m_cmd_.Set(from._internal_m_cmd(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CMD)
}

inline void PROBUFF_NET_CMD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_cmd_){}
  };
  _impl_.m_cmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_cmd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_CMD::~PROBUFF_NET_CMD() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CMD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CMD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_cmd_.Destroy();
}

void PROBUFF_NET_CMD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CMD::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CMD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_cmd_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CMD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string m_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_cmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_CMD.m_cmd"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_CMD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CMD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string m_cmd = 1;
  if (_internal_has_m_cmd()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_cmd().data(), static_cast<int>(this->_internal_m_cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_CMD.m_cmd");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_m_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CMD)
  return target;
}

size_t PROBUFF_NET_CMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CMD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string m_cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CMD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CMD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CMD::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CMD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CMD*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CMD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CMD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_cmd()) {
    _this->_internal_set_m_cmd(from._internal_m_cmd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CMD::CopyFrom(const PROBUFF_NET_CMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CMD::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CMD::InternalSwap(PROBUFF_NET_CMD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_cmd_, lhs_arena,
      &other->_impl_.m_cmd_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CMD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[22]);
}

// ===================================================================

class PROBUFF_NET_CHAT::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHAT>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_channelid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CHAT::PROBUFF_NET_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHAT)
}
PROBUFF_NET_CHAT::PROBUFF_NET_CHAT(const PROBUFF_NET_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_content_){}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_channelid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_content()) {
    _this->_impl_.m_content_.Set(from._internal_m_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_channelid_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_channelid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHAT)
}

inline void PROBUFF_NET_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_content_){}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_channelid_){0}
  };
  _impl_.m_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_CHAT::~PROBUFF_NET_CHAT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_content_.Destroy();
}

void PROBUFF_NET_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_content_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_channelid_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_channelid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_type(&has_bits);
          _impl_.m_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_channelid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_channelid(&has_bits);
          _impl_.m_channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string m_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_m_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_CHAT.m_content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_type(), target);
  }

  // optional int32 m_channelid = 2;
  if (_internal_has_m_channelid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_channelid(), target);
  }

  // optional string m_content = 3;
  if (_internal_has_m_content()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_content().data(), static_cast<int>(this->_internal_m_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_CHAT.m_content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_m_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHAT)
  return target;
}

size_t PROBUFF_NET_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string m_content = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_content());
    }

    // optional int32 m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_type());
    }

    // optional int32 m_channelid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_channelid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CHAT::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CHAT*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_content(from._internal_m_content());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_channelid_ = from._impl_.m_channelid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CHAT::CopyFrom(const PROBUFF_NET_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHAT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHAT::InternalSwap(PROBUFF_NET_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_content_, lhs_arena,
      &other->_impl_.m_content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT, _impl_.m_channelid_)
      + sizeof(PROBUFF_NET_CHAT::_impl_.m_channelid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[23]);
}

// ===================================================================

class chatitem::_Internal {
 public:
  using HasBits = decltype(std::declval<chatitem>()._impl_._has_bits_);
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_rolename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_content(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

chatitem::chatitem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.chatitem)
}
chatitem::chatitem(const chatitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  chatitem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_rolename_){}
    , decltype(_impl_.m_content_){}
    , decltype(_impl_.m_roleid_){}
    , decltype(_impl_.m_utc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_rolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_rolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_rolename()) {
    _this->_impl_.m_rolename_.Set(from._internal_m_rolename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.m_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_content()) {
    _this->_impl_.m_content_.Set(from._internal_m_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.m_roleid_, &from._impl_.m_roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_utc_) -
    reinterpret_cast<char*>(&_impl_.m_roleid_)) + sizeof(_impl_.m_utc_));
  // @@protoc_insertion_point(copy_constructor:pbnet.chatitem)
}

inline void chatitem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_rolename_){}
    , decltype(_impl_.m_content_){}
    , decltype(_impl_.m_roleid_){int64_t{0}}
    , decltype(_impl_.m_utc_){0}
  };
  _impl_.m_rolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_rolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

chatitem::~chatitem() {
  // @@protoc_insertion_point(destructor:pbnet.chatitem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void chatitem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_rolename_.Destroy();
  _impl_.m_content_.Destroy();
}

void chatitem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void chatitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.chatitem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.m_rolename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.m_content_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.m_roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_utc_) -
        reinterpret_cast<char*>(&_impl_.m_roleid_)) + sizeof(_impl_.m_utc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* chatitem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_roleid(&has_bits);
          _impl_.m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string m_rolename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_rolename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.chatitem.m_rolename"));
        } else
          goto handle_unusual;
        continue;
      // optional string m_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_m_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.chatitem.m_content"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_utc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_m_utc(&has_bits);
          _impl_.m_utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* chatitem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.chatitem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_roleid = 1;
  if (_internal_has_m_roleid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_roleid(), target);
  }

  // optional string m_rolename = 2;
  if (_internal_has_m_rolename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_rolename().data(), static_cast<int>(this->_internal_m_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.chatitem.m_rolename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_rolename(), target);
  }

  // optional string m_content = 3;
  if (_internal_has_m_content()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_content().data(), static_cast<int>(this->_internal_m_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.chatitem.m_content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_m_content(), target);
  }

  // optional int32 m_utc = 4;
  if (_internal_has_m_utc()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_utc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.chatitem)
  return target;
}

size_t chatitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.chatitem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string m_rolename = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_rolename());
    }

    // optional string m_content = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_content());
    }

    // optional int64 m_roleid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_roleid());
    }

    // optional int32 m_utc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_utc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData chatitem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    chatitem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*chatitem::GetClassData() const { return &_class_data_; }


void chatitem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<chatitem*>(&to_msg);
  auto& from = static_cast<const chatitem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.chatitem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_rolename(from._internal_m_rolename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_m_content(from._internal_m_content());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_roleid_ = from._impl_.m_roleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.m_utc_ = from._impl_.m_utc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void chatitem::CopyFrom(const chatitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.chatitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatitem::IsInitialized() const {
  return true;
}

void chatitem::InternalSwap(chatitem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_rolename_, lhs_arena,
      &other->_impl_.m_rolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_content_, lhs_arena,
      &other->_impl_.m_content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(chatitem, _impl_.m_utc_)
      + sizeof(chatitem::_impl_.m_utc_)
      - PROTOBUF_FIELD_OFFSET(chatitem, _impl_.m_roleid_)>(
          reinterpret_cast<char*>(&_impl_.m_roleid_),
          reinterpret_cast<char*>(&other->_impl_.m_roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata chatitem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[24]);
}

// ===================================================================

class PROBUFF_NET_CHAT_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHAT_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_channelid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_CHAT_RESPONSE::PROBUFF_NET_CHAT_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
}
PROBUFF_NET_CHAT_RESPONSE::PROBUFF_NET_CHAT_RESPONSE(const PROBUFF_NET_CHAT_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CHAT_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_chatlist_){from._impl_.m_chatlist_}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_channelid_){}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_stat_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
}

inline void PROBUFF_NET_CHAT_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_chatlist_){arena}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_channelid_){0}
    , decltype(_impl_.m_stat_){false}
  };
}

PROBUFF_NET_CHAT_RESPONSE::~PROBUFF_NET_CHAT_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CHAT_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_chatlist_.~RepeatedPtrField();
}

void PROBUFF_NET_CHAT_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CHAT_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_chatlist_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHAT_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_type(&has_bits);
          _impl_.m_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_channelid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_channelid(&has_bits);
          _impl_.m_channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbnet.chatitem m_chatlist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_chatlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool m_stat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_CHAT_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_type(), target);
  }

  // optional int32 m_channelid = 2;
  if (_internal_has_m_channelid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_channelid(), target);
  }

  // repeated .pbnet.chatitem m_chatlist = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_chatlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_chatlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool m_stat = 4;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  return target;
}

size_t PROBUFF_NET_CHAT_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.chatitem m_chatlist = 3;
  total_size += 1UL * this->_internal_m_chatlist_size();
  for (const auto& msg : this->_impl_.m_chatlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_type());
    }

    // optional int32 m_channelid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_channelid());
    }

    // optional bool m_stat = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CHAT_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CHAT_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CHAT_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CHAT_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CHAT_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CHAT_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_chatlist_.MergeFrom(from._impl_.m_chatlist_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_channelid_ = from._impl_.m_channelid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CHAT_RESPONSE::CopyFrom(const PROBUFF_NET_CHAT_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHAT_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHAT_RESPONSE::InternalSwap(PROBUFF_NET_CHAT_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_chatlist_.InternalSwap(&other->_impl_.m_chatlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_CHAT_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT_RESPONSE, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHAT_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[25]);
}

// ===================================================================

class PROBUFF_NET_SWITCH_LINE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_SWITCH_LINE>()._impl_._has_bits_);
  static void set_has_m_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_SWITCH_LINE::PROBUFF_NET_SWITCH_LINE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SWITCH_LINE)
}
PROBUFF_NET_SWITCH_LINE::PROBUFF_NET_SWITCH_LINE(const PROBUFF_NET_SWITCH_LINE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_SWITCH_LINE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_line_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_line_ = from._impl_.m_line_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SWITCH_LINE)
}

inline void PROBUFF_NET_SWITCH_LINE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_line_){0}
  };
}

PROBUFF_NET_SWITCH_LINE::~PROBUFF_NET_SWITCH_LINE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SWITCH_LINE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SWITCH_LINE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_SWITCH_LINE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SWITCH_LINE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_line_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SWITCH_LINE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_line(&has_bits);
          _impl_.m_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_SWITCH_LINE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_line = 1;
  if (_internal_has_m_line()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SWITCH_LINE)
  return target;
}

size_t PROBUFF_NET_SWITCH_LINE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 m_line = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_line());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SWITCH_LINE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SWITCH_LINE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SWITCH_LINE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SWITCH_LINE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SWITCH_LINE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SWITCH_LINE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_line()) {
    _this->_internal_set_m_line(from._internal_m_line());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SWITCH_LINE::CopyFrom(const PROBUFF_NET_SWITCH_LINE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SWITCH_LINE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SWITCH_LINE::InternalSwap(PROBUFF_NET_SWITCH_LINE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_line_, other->_impl_.m_line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SWITCH_LINE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[26]);
}

// ===================================================================

class PROBUFF_NET_SWITCH_LINE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_SWITCH_LINE_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_SWITCH_LINE_RESPONSE::PROBUFF_NET_SWITCH_LINE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
}
PROBUFF_NET_SWITCH_LINE_RESPONSE::PROBUFF_NET_SWITCH_LINE_RESPONSE(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_SWITCH_LINE_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_line_){}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_line_, &from._impl_.m_line_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_stat_) -
    reinterpret_cast<char*>(&_impl_.m_line_)) + sizeof(_impl_.m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
}

inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_line_){0}
    , decltype(_impl_.m_stat_){false}
  };
}

PROBUFF_NET_SWITCH_LINE_RESPONSE::~PROBUFF_NET_SWITCH_LINE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SWITCH_LINE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_line_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_line_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SWITCH_LINE_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_line(&has_bits);
          _impl_.m_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_SWITCH_LINE_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_line = 1;
  if (_internal_has_m_line()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_line(), target);
  }

  // optional bool m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_SWITCH_LINE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 m_line = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_line());
    }

    // optional bool m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SWITCH_LINE_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SWITCH_LINE_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SWITCH_LINE_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SWITCH_LINE_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SWITCH_LINE_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SWITCH_LINE_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_line_ = from._impl_.m_line_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::CopyFrom(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SWITCH_LINE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::InternalSwap(PROBUFF_NET_SWITCH_LINE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_SWITCH_LINE_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SWITCH_LINE_RESPONSE, _impl_.m_line_)>(
          reinterpret_cast<char*>(&_impl_.m_line_),
          reinterpret_cast<char*>(&other->_impl_.m_line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SWITCH_LINE_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[27]);
}

// ===================================================================

class PROBUFF_NET_MAIL_LIST::_Internal {
 public:
};

PROBUFF_NET_MAIL_LIST::PROBUFF_NET_MAIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_LIST)
}
PROBUFF_NET_MAIL_LIST::PROBUFF_NET_MAIL_LIST(const PROBUFF_NET_MAIL_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_MAIL_LIST* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_LIST)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_LIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_LIST::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[28]);
}

// ===================================================================

PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse() {}
PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::MergeFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[29]);
}

// ===================================================================

class PROBUFF_NET_MAIL_LIST_RESPONSE::_Internal {
 public:
};

void PROBUFF_NET_MAIL_LIST_RESPONSE::clear_m_mail() {
  _impl_.m_mail_.Clear();
}
PROBUFF_NET_MAIL_LIST_RESPONSE::PROBUFF_NET_MAIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PROBUFF_NET_MAIL_LIST_RESPONSE::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
}
PROBUFF_NET_MAIL_LIST_RESPONSE::PROBUFF_NET_MAIL_LIST_RESPONSE(const PROBUFF_NET_MAIL_LIST_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_LIST_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.m_mail_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_mail_.MergeFrom(from._impl_.m_mail_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
}

inline void PROBUFF_NET_MAIL_LIST_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.m_mail_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_MAIL_LIST_RESPONSE::~PROBUFF_NET_MAIL_LIST_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_LIST_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_mail_.Destruct();
  _impl_.m_mail_.~MapField();
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_LIST_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MAIL_LIST_RESPONSE* >(object);
  _this->_impl_.m_mail_.Destruct();
}
void PROBUFF_NET_MAIL_LIST_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_mail_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_LIST_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, .pbdb.mail> m_mail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.m_mail_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MAIL_LIST_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .pbdb.mail> m_mail = 1;
  if (!this->_internal_m_mail().empty()) {
    using MapType = ::_pb::Map<int32_t, ::pbdb::mail>;
    using WireHelper = PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_mail();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_LIST_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.mail> m_mail = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_mail_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::pbdb::mail >::const_iterator
      it = this->_internal_m_mail().begin();
      it != this->_internal_m_mail().end(); ++it) {
    total_size += PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_LIST_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_LIST_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_LIST_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_LIST_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_LIST_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_LIST_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_mail_.MergeFrom(from._impl_.m_mail_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_LIST_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_LIST_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_mail_.InternalSwap(&other->_impl_.m_mail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[30]);
}

// ===================================================================

class PROBUFF_NET_MAIL_READ::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_READ>()._impl_._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_READ::PROBUFF_NET_MAIL_READ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_READ)
}
PROBUFF_NET_MAIL_READ::PROBUFF_NET_MAIL_READ(const PROBUFF_NET_MAIL_READ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_READ* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_mailid_ = from._impl_.m_mailid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_READ)
}

inline void PROBUFF_NET_MAIL_READ::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_){int64_t{0}}
  };
}

PROBUFF_NET_MAIL_READ::~PROBUFF_NET_MAIL_READ() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_READ)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_READ::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_READ::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_READ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_READ)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_mailid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_READ::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          _impl_.m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MAIL_READ::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_READ)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_mailid = 1;
  if (_internal_has_m_mailid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_mailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_READ)
  return target;
}

size_t PROBUFF_NET_MAIL_READ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_READ)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 m_mailid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_mailid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_READ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_READ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_READ::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_READ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_READ*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_READ&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_READ)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_mailid()) {
    _this->_internal_set_m_mailid(from._internal_m_mailid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_READ::CopyFrom(const PROBUFF_NET_MAIL_READ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_READ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_READ::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_READ::InternalSwap(PROBUFF_NET_MAIL_READ* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_mailid_, other->_impl_.m_mailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_READ::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[31]);
}

// ===================================================================

class PROBUFF_NET_MAIL_READ_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_READ_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_READ_RESPONSE::PROBUFF_NET_MAIL_READ_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
}
PROBUFF_NET_MAIL_READ_RESPONSE::PROBUFF_NET_MAIL_READ_RESPONSE(const PROBUFF_NET_MAIL_READ_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_READ_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_){}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_mailid_, &from._impl_.m_mailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_stat_) -
    reinterpret_cast<char*>(&_impl_.m_mailid_)) + sizeof(_impl_.m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
}

inline void PROBUFF_NET_MAIL_READ_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_){int64_t{0}}
    , decltype(_impl_.m_stat_){false}
  };
}

PROBUFF_NET_MAIL_READ_RESPONSE::~PROBUFF_NET_MAIL_READ_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_READ_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_READ_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_READ_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_mailid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_mailid_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_READ_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          _impl_.m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MAIL_READ_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_mailid = 1;
  if (_internal_has_m_mailid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_mailid(), target);
  }

  // optional bool m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_READ_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_mailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_mailid());
    }

    // optional bool m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_READ_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_READ_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_READ_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_READ_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_READ_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_READ_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_mailid_ = from._impl_.m_mailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_READ_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_READ_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_READ_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_READ_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_READ_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_READ_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_MAIL_READ_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_READ_RESPONSE, _impl_.m_mailid_)>(
          reinterpret_cast<char*>(&_impl_.m_mailid_),
          reinterpret_cast<char*>(&other->_impl_.m_mailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_READ_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[32]);
}

// ===================================================================

class PROBUFF_NET_MAIL_DRAW::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DRAW>()._impl_._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_DRAW::PROBUFF_NET_MAIL_DRAW(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DRAW)
}
PROBUFF_NET_MAIL_DRAW::PROBUFF_NET_MAIL_DRAW(const PROBUFF_NET_MAIL_DRAW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_DRAW* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_mailid_ = from._impl_.m_mailid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DRAW)
}

inline void PROBUFF_NET_MAIL_DRAW::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_){int64_t{0}}
  };
}

PROBUFF_NET_MAIL_DRAW::~PROBUFF_NET_MAIL_DRAW() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DRAW)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_DRAW::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_DRAW::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_DRAW::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_mailid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DRAW::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          _impl_.m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MAIL_DRAW::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_mailid = 1;
  if (_internal_has_m_mailid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_mailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DRAW)
  return target;
}

size_t PROBUFF_NET_MAIL_DRAW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 m_mailid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_mailid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_DRAW::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_DRAW::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_DRAW::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_DRAW::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_DRAW*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_DRAW&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_mailid()) {
    _this->_internal_set_m_mailid(from._internal_m_mailid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_DRAW::CopyFrom(const PROBUFF_NET_MAIL_DRAW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DRAW::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DRAW::InternalSwap(PROBUFF_NET_MAIL_DRAW* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_mailid_, other->_impl_.m_mailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DRAW::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[33]);
}

// ===================================================================

class PROBUFF_NET_MAIL_DRAW_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DRAW_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_DRAW_RESPONSE::PROBUFF_NET_MAIL_DRAW_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
}
PROBUFF_NET_MAIL_DRAW_RESPONSE::PROBUFF_NET_MAIL_DRAW_RESPONSE(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_DRAW_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_){}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_mailid_, &from._impl_.m_mailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_stat_) -
    reinterpret_cast<char*>(&_impl_.m_mailid_)) + sizeof(_impl_.m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
}

inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_){int64_t{0}}
    , decltype(_impl_.m_stat_){false}
  };
}

PROBUFF_NET_MAIL_DRAW_RESPONSE::~PROBUFF_NET_MAIL_DRAW_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_DRAW_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_mailid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_mailid_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DRAW_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          _impl_.m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MAIL_DRAW_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_mailid = 1;
  if (_internal_has_m_mailid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_mailid(), target);
  }

  // optional bool m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_DRAW_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_mailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_mailid());
    }

    // optional bool m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_DRAW_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_DRAW_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_DRAW_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_DRAW_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_DRAW_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_DRAW_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_mailid_ = from._impl_.m_mailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DRAW_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_DRAW_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_MAIL_DRAW_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DRAW_RESPONSE, _impl_.m_mailid_)>(
          reinterpret_cast<char*>(&_impl_.m_mailid_),
          reinterpret_cast<char*>(&other->_impl_.m_mailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DRAW_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[34]);
}

// ===================================================================

class PROBUFF_NET_MAIL_DEL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DEL>()._impl_._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_DEL::PROBUFF_NET_MAIL_DEL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DEL)
}
PROBUFF_NET_MAIL_DEL::PROBUFF_NET_MAIL_DEL(const PROBUFF_NET_MAIL_DEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_DEL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_mailid_ = from._impl_.m_mailid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DEL)
}

inline void PROBUFF_NET_MAIL_DEL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_){int64_t{0}}
  };
}

PROBUFF_NET_MAIL_DEL::~PROBUFF_NET_MAIL_DEL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DEL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_DEL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_DEL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_DEL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DEL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_mailid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DEL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          _impl_.m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MAIL_DEL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DEL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_mailid = 1;
  if (_internal_has_m_mailid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_mailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DEL)
  return target;
}

size_t PROBUFF_NET_MAIL_DEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DEL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 m_mailid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_mailid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_DEL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_DEL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_DEL::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_DEL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_DEL*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_DEL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DEL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_mailid()) {
    _this->_internal_set_m_mailid(from._internal_m_mailid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_DEL::CopyFrom(const PROBUFF_NET_MAIL_DEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DEL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DEL::InternalSwap(PROBUFF_NET_MAIL_DEL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_mailid_, other->_impl_.m_mailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DEL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[35]);
}

// ===================================================================

class PROBUFF_NET_MAIL_DEL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DEL_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_DEL_RESPONSE::PROBUFF_NET_MAIL_DEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
}
PROBUFF_NET_MAIL_DEL_RESPONSE::PROBUFF_NET_MAIL_DEL_RESPONSE(const PROBUFF_NET_MAIL_DEL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MAIL_DEL_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_){}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_mailid_, &from._impl_.m_mailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_stat_) -
    reinterpret_cast<char*>(&_impl_.m_mailid_)) + sizeof(_impl_.m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
}

inline void PROBUFF_NET_MAIL_DEL_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_mailid_){int64_t{0}}
    , decltype(_impl_.m_stat_){false}
  };
}

PROBUFF_NET_MAIL_DEL_RESPONSE::~PROBUFF_NET_MAIL_DEL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MAIL_DEL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_mailid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_mailid_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DEL_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          _impl_.m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MAIL_DEL_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_mailid = 1;
  if (_internal_has_m_mailid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_mailid(), target);
  }

  // optional bool m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_DEL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_mailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_mailid());
    }

    // optional bool m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MAIL_DEL_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MAIL_DEL_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MAIL_DEL_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MAIL_DEL_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MAIL_DEL_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MAIL_DEL_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_mailid_ = from._impl_.m_mailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_DEL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DEL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_DEL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_MAIL_DEL_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DEL_RESPONSE, _impl_.m_mailid_)>(
          reinterpret_cast<char*>(&_impl_.m_mailid_),
          reinterpret_cast<char*>(&other->_impl_.m_mailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DEL_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[36]);
}

// ===================================================================

class VECTOR2::_Internal {
 public:
  using HasBits = decltype(std::declval<VECTOR2>()._impl_._has_bits_);
  static void set_has_m_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VECTOR2::VECTOR2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.VECTOR2)
}
VECTOR2::VECTOR2(const VECTOR2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VECTOR2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_x_){}
    , decltype(_impl_.m_y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_x_, &from._impl_.m_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_y_) -
    reinterpret_cast<char*>(&_impl_.m_x_)) + sizeof(_impl_.m_y_));
  // @@protoc_insertion_point(copy_constructor:pbnet.VECTOR2)
}

inline void VECTOR2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_x_){0}
    , decltype(_impl_.m_y_){0}
  };
}

VECTOR2::~VECTOR2() {
  // @@protoc_insertion_point(destructor:pbnet.VECTOR2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VECTOR2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VECTOR2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VECTOR2::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.VECTOR2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_y_) -
        reinterpret_cast<char*>(&_impl_.m_x_)) + sizeof(_impl_.m_y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VECTOR2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_x(&has_bits);
          _impl_.m_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_y(&has_bits);
          _impl_.m_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VECTOR2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.VECTOR2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_x = 1;
  if (_internal_has_m_x()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_x(), target);
  }

  // optional int32 m_y = 2;
  if (_internal_has_m_y()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.VECTOR2)
  return target;
}

size_t VECTOR2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.VECTOR2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 m_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_x());
    }

    // optional int32 m_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_y());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VECTOR2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VECTOR2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VECTOR2::GetClassData() const { return &_class_data_; }


void VECTOR2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VECTOR2*>(&to_msg);
  auto& from = static_cast<const VECTOR2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.VECTOR2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_x_ = from._impl_.m_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_y_ = from._impl_.m_y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VECTOR2::CopyFrom(const VECTOR2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.VECTOR2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VECTOR2::IsInitialized() const {
  return true;
}

void VECTOR2::InternalSwap(VECTOR2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VECTOR2, _impl_.m_y_)
      + sizeof(VECTOR2::_impl_.m_y_)
      - PROTOBUF_FIELD_OFFSET(VECTOR2, _impl_.m_x_)>(
          reinterpret_cast<char*>(&_impl_.m_x_),
          reinterpret_cast<char*>(&other->_impl_.m_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VECTOR2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[37]);
}

// ===================================================================

class VECTOR3::_Internal {
 public:
  using HasBits = decltype(std::declval<VECTOR3>()._impl_._has_bits_);
  static void set_has_m_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VECTOR3::VECTOR3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.VECTOR3)
}
VECTOR3::VECTOR3(const VECTOR3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VECTOR3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_x_){}
    , decltype(_impl_.m_y_){}
    , decltype(_impl_.m_z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_x_, &from._impl_.m_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_z_) -
    reinterpret_cast<char*>(&_impl_.m_x_)) + sizeof(_impl_.m_z_));
  // @@protoc_insertion_point(copy_constructor:pbnet.VECTOR3)
}

inline void VECTOR3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_x_){0}
    , decltype(_impl_.m_y_){0}
    , decltype(_impl_.m_z_){0}
  };
}

VECTOR3::~VECTOR3() {
  // @@protoc_insertion_point(destructor:pbnet.VECTOR3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VECTOR3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VECTOR3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VECTOR3::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.VECTOR3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.m_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_z_) -
        reinterpret_cast<char*>(&_impl_.m_x_)) + sizeof(_impl_.m_z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VECTOR3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_x(&has_bits);
          _impl_.m_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_y(&has_bits);
          _impl_.m_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_m_z(&has_bits);
          _impl_.m_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VECTOR3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.VECTOR3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_x = 1;
  if (_internal_has_m_x()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_x(), target);
  }

  // optional int32 m_y = 2;
  if (_internal_has_m_y()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_y(), target);
  }

  // optional int32 m_z = 3;
  if (_internal_has_m_z()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.VECTOR3)
  return target;
}

size_t VECTOR3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.VECTOR3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 m_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_x());
    }

    // optional int32 m_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_y());
    }

    // optional int32 m_z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_z());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VECTOR3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VECTOR3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VECTOR3::GetClassData() const { return &_class_data_; }


void VECTOR3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VECTOR3*>(&to_msg);
  auto& from = static_cast<const VECTOR3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.VECTOR3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_x_ = from._impl_.m_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_y_ = from._impl_.m_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_z_ = from._impl_.m_z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VECTOR3::CopyFrom(const VECTOR3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.VECTOR3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VECTOR3::IsInitialized() const {
  return true;
}

void VECTOR3::InternalSwap(VECTOR3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_.m_z_)
      + sizeof(VECTOR3::_impl_.m_z_)
      - PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_.m_x_)>(
          reinterpret_cast<char*>(&_impl_.m_x_),
          reinterpret_cast<char*>(&other->_impl_.m_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VECTOR3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[38]);
}

// ===================================================================

class UNIT_POSITION::_Internal {
 public:
  using HasBits = decltype(std::declval<UNIT_POSITION>()._impl_._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbnet::VECTOR2& m_position(const UNIT_POSITION* msg);
  static void set_has_m_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pbnet::VECTOR2&
UNIT_POSITION::_Internal::m_position(const UNIT_POSITION* msg) {
  return *msg->_impl_.m_position_;
}
UNIT_POSITION::UNIT_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.UNIT_POSITION)
}
UNIT_POSITION::UNIT_POSITION(const UNIT_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UNIT_POSITION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_position_){nullptr}
    , decltype(_impl_.m_id_){}
    , decltype(_impl_.m_angle_){}
    , decltype(_impl_.m_speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_position()) {
    _this->_impl_.m_position_ = new ::pbnet::VECTOR2(*from._impl_.m_position_);
  }
  ::memcpy(&_impl_.m_id_, &from._impl_.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_speed_) -
    reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_speed_));
  // @@protoc_insertion_point(copy_constructor:pbnet.UNIT_POSITION)
}

inline void UNIT_POSITION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_position_){nullptr}
    , decltype(_impl_.m_id_){int64_t{0}}
    , decltype(_impl_.m_angle_){0}
    , decltype(_impl_.m_speed_){0}
  };
}

UNIT_POSITION::~UNIT_POSITION() {
  // @@protoc_insertion_point(destructor:pbnet.UNIT_POSITION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UNIT_POSITION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.m_position_;
}

void UNIT_POSITION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UNIT_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UNIT_POSITION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.m_position_ != nullptr);
    _impl_.m_position_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_speed_) -
        reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_speed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UNIT_POSITION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_id(&has_bits);
          _impl_.m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbnet.VECTOR2 m_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_m_angle(&has_bits);
          _impl_.m_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_m_speed(&has_bits);
          _impl_.m_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UNIT_POSITION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UNIT_POSITION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_id = 2;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_m_id(), target);
  }

  // optional .pbnet.VECTOR2 m_position = 3;
  if (_internal_has_m_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::m_position(this),
        _Internal::m_position(this).GetCachedSize(), target, stream);
  }

  // optional int32 m_angle = 4;
  if (_internal_has_m_angle()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_angle(), target);
  }

  // optional int32 m_speed = 5;
  if (_internal_has_m_speed()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_m_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UNIT_POSITION)
  return target;
}

size_t UNIT_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UNIT_POSITION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .pbnet.VECTOR2 m_position = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.m_position_);
    }

    // optional int64 m_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_id());
    }

    // optional int32 m_angle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_angle());
    }

    // optional int32 m_speed = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_speed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UNIT_POSITION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UNIT_POSITION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UNIT_POSITION::GetClassData() const { return &_class_data_; }


void UNIT_POSITION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UNIT_POSITION*>(&to_msg);
  auto& from = static_cast<const UNIT_POSITION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UNIT_POSITION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_m_position()->::pbnet::VECTOR2::MergeFrom(
          from._internal_m_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_id_ = from._impl_.m_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_angle_ = from._impl_.m_angle_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.m_speed_ = from._impl_.m_speed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UNIT_POSITION::CopyFrom(const UNIT_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UNIT_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UNIT_POSITION::IsInitialized() const {
  return true;
}

void UNIT_POSITION::InternalSwap(UNIT_POSITION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UNIT_POSITION, _impl_.m_speed_)
      + sizeof(UNIT_POSITION::_impl_.m_speed_)
      - PROTOBUF_FIELD_OFFSET(UNIT_POSITION, _impl_.m_position_)>(
          reinterpret_cast<char*>(&_impl_.m_position_),
          reinterpret_cast<char*>(&other->_impl_.m_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UNIT_POSITION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[39]);
}

// ===================================================================

class UnitAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitAttribute>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitAttribute::UnitAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.UnitAttribute)
}
UnitAttribute::UnitAttribute(const UnitAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnitAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_value_){}
    , decltype(_impl_.m_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_value_, &from._impl_.m_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_type_) -
    reinterpret_cast<char*>(&_impl_.m_value_)) + sizeof(_impl_.m_type_));
  // @@protoc_insertion_point(copy_constructor:pbnet.UnitAttribute)
}

inline void UnitAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_value_){int64_t{0}}
    , decltype(_impl_.m_type_){0}
  };
}

UnitAttribute::~UnitAttribute() {
  // @@protoc_insertion_point(destructor:pbnet.UnitAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnitAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnitAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnitAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UnitAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_type_) -
        reinterpret_cast<char*>(&_impl_.m_value_)) + sizeof(_impl_.m_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_type(&has_bits);
          _impl_.m_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 m_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_value(&has_bits);
          _impl_.m_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnitAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UnitAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_type(), target);
  }

  // optional int64 m_value = 2;
  if (_internal_has_m_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_m_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UnitAttribute)
  return target;
}

size_t UnitAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UnitAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_value());
    }

    // optional int32 m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnitAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnitAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnitAttribute::GetClassData() const { return &_class_data_; }


void UnitAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnitAttribute*>(&to_msg);
  auto& from = static_cast<const UnitAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UnitAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_value_ = from._impl_.m_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnitAttribute::CopyFrom(const UnitAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UnitAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitAttribute::IsInitialized() const {
  return true;
}

void UnitAttribute::InternalSwap(UnitAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnitAttribute, _impl_.m_type_)
      + sizeof(UnitAttribute::_impl_.m_type_)
      - PROTOBUF_FIELD_OFFSET(UnitAttribute, _impl_.m_value_)>(
          reinterpret_cast<char*>(&_impl_.m_value_),
          reinterpret_cast<char*>(&other->_impl_.m_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[40]);
}

// ===================================================================

class UnitModule::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitModule>()._impl_._has_bits_);
  static void set_has_m_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitModule::UnitModule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.UnitModule)
}
UnitModule::UnitModule(const UnitModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnitModule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_modules_){from._impl_.m_modules_}
    , decltype(_impl_.m_mtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_mtype_ = from._impl_.m_mtype_;
  // @@protoc_insertion_point(copy_constructor:pbnet.UnitModule)
}

inline void UnitModule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_modules_){arena}
    , decltype(_impl_.m_mtype_){0}
  };
}

UnitModule::~UnitModule() {
  // @@protoc_insertion_point(destructor:pbnet.UnitModule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnitModule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_modules_.~RepeatedPtrField();
}

void UnitModule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnitModule::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UnitModule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_modules_.Clear();
  _impl_.m_mtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitModule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_mtype(&has_bits);
          _impl_.m_mtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbnet.UnitAttribute m_modules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnitModule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UnitModule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_mtype = 1;
  if (_internal_has_m_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_mtype(), target);
  }

  // repeated .pbnet.UnitAttribute m_modules = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_modules_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_modules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UnitModule)
  return target;
}

size_t UnitModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UnitModule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UnitAttribute m_modules = 2;
  total_size += 1UL * this->_internal_m_modules_size();
  for (const auto& msg : this->_impl_.m_modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 m_mtype = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_mtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnitModule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnitModule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnitModule::GetClassData() const { return &_class_data_; }


void UnitModule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnitModule*>(&to_msg);
  auto& from = static_cast<const UnitModule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UnitModule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_modules_.MergeFrom(from._impl_.m_modules_);
  if (from._internal_has_m_mtype()) {
    _this->_internal_set_m_mtype(from._internal_m_mtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnitModule::CopyFrom(const UnitModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UnitModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitModule::IsInitialized() const {
  return true;
}

void UnitModule::InternalSwap(UnitModule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_modules_.InternalSwap(&other->_impl_.m_modules_);
  swap(_impl_.m_mtype_, other->_impl_.m_mtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitModule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[41]);
}

// ===================================================================

class UNIT::_Internal {
 public:
  using HasBits = decltype(std::declval<UNIT>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbnet::UNIT_POSITION& m_position(const UNIT* msg);
  static void set_has_m_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pbnet::UNIT_POSITION&
UNIT::_Internal::m_position(const UNIT* msg) {
  return *msg->_impl_.m_position_;
}
UNIT::UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.UNIT)
}
UNIT::UNIT(const UNIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UNIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_modules_){from._impl_.m_modules_}
    , decltype(_impl_.m_position_){nullptr}
    , decltype(_impl_.m_id_){}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_position()) {
    _this->_impl_.m_position_ = new ::pbnet::UNIT_POSITION(*from._impl_.m_position_);
  }
  ::memcpy(&_impl_.m_id_, &from._impl_.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_stat_) -
    reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.UNIT)
}

inline void UNIT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_modules_){arena}
    , decltype(_impl_.m_position_){nullptr}
    , decltype(_impl_.m_id_){int64_t{0}}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_stat_){0}
  };
}

UNIT::~UNIT() {
  // @@protoc_insertion_point(destructor:pbnet.UNIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UNIT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_modules_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.m_position_;
}

void UNIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UNIT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UNIT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_modules_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.m_position_ != nullptr);
    _impl_.m_position_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UNIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eunit m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eunit>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int64 m_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_id(&has_bits);
          _impl_.m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbnet.UNIT_POSITION m_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbnet.UnitModule m_modules = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .pbnet.eunitstat m_stat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_stat(static_cast<::pbnet::eunitstat>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UNIT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UNIT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.eunit m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // optional int64 m_id = 2;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_m_id(), target);
  }

  // optional .pbnet.UNIT_POSITION m_position = 3;
  if (_internal_has_m_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::m_position(this),
        _Internal::m_position(this).GetCachedSize(), target, stream);
  }

  // repeated .pbnet.UnitModule m_modules = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_modules_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_modules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .pbnet.eunitstat m_stat = 5;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UNIT)
  return target;
}

size_t UNIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UNIT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UnitModule m_modules = 4;
  total_size += 1UL * this->_internal_m_modules_size();
  for (const auto& msg : this->_impl_.m_modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .pbnet.UNIT_POSITION m_position = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.m_position_);
    }

    // optional int64 m_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_id());
    }

    // optional .pbnet.eunit m_type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional .pbnet.eunitstat m_stat = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_stat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UNIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UNIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UNIT::GetClassData() const { return &_class_data_; }


void UNIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UNIT*>(&to_msg);
  auto& from = static_cast<const UNIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UNIT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_modules_.MergeFrom(from._impl_.m_modules_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_m_position()->::pbnet::UNIT_POSITION::MergeFrom(
          from._internal_m_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_id_ = from._impl_.m_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UNIT::CopyFrom(const UNIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UNIT::IsInitialized() const {
  return true;
}

void UNIT::InternalSwap(UNIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_modules_.InternalSwap(&other->_impl_.m_modules_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UNIT, _impl_.m_stat_)
      + sizeof(UNIT::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(UNIT, _impl_.m_position_)>(
          reinterpret_cast<char*>(&_impl_.m_position_),
          reinterpret_cast<char*>(&other->_impl_.m_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UNIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[42]);
}

// ===================================================================

class PROBUFF_NET_SYNC_ATTRIBUTE::_Internal {
 public:
};

PROBUFF_NET_SYNC_ATTRIBUTE::PROBUFF_NET_SYNC_ATTRIBUTE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
}
PROBUFF_NET_SYNC_ATTRIBUTE::PROBUFF_NET_SYNC_ATTRIBUTE(const PROBUFF_NET_SYNC_ATTRIBUTE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_SYNC_ATTRIBUTE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_modules_){from._impl_.m_modules_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
}

inline void PROBUFF_NET_SYNC_ATTRIBUTE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.m_modules_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_SYNC_ATTRIBUTE::~PROBUFF_NET_SYNC_ATTRIBUTE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SYNC_ATTRIBUTE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_modules_.~RepeatedPtrField();
}

void PROBUFF_NET_SYNC_ATTRIBUTE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SYNC_ATTRIBUTE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_modules_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_ATTRIBUTE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pbnet.UnitModule m_modules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_SYNC_ATTRIBUTE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnet.UnitModule m_modules = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_modules_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_modules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  return target;
}

size_t PROBUFF_NET_SYNC_ATTRIBUTE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UnitModule m_modules = 1;
  total_size += 1UL * this->_internal_m_modules_size();
  for (const auto& msg : this->_impl_.m_modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SYNC_ATTRIBUTE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SYNC_ATTRIBUTE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SYNC_ATTRIBUTE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SYNC_ATTRIBUTE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SYNC_ATTRIBUTE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SYNC_ATTRIBUTE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_modules_.MergeFrom(from._impl_.m_modules_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SYNC_ATTRIBUTE::CopyFrom(const PROBUFF_NET_SYNC_ATTRIBUTE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_ATTRIBUTE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_ATTRIBUTE::InternalSwap(PROBUFF_NET_SYNC_ATTRIBUTE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_modules_.InternalSwap(&other->_impl_.m_modules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_ATTRIBUTE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[43]);
}

// ===================================================================

class PROBUFF_NET_SYNC_UNIT::_Internal {
 public:
};

PROBUFF_NET_SYNC_UNIT::PROBUFF_NET_SYNC_UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_UNIT)
}
PROBUFF_NET_SYNC_UNIT::PROBUFF_NET_SYNC_UNIT(const PROBUFF_NET_SYNC_UNIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_SYNC_UNIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_units_){from._impl_.m_units_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_UNIT)
}

inline void PROBUFF_NET_SYNC_UNIT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.m_units_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_SYNC_UNIT::~PROBUFF_NET_SYNC_UNIT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_UNIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SYNC_UNIT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_units_.~RepeatedPtrField();
}

void PROBUFF_NET_SYNC_UNIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SYNC_UNIT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_units_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_UNIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pbnet.UNIT m_units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_SYNC_UNIT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnet.UNIT m_units = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_units_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_units(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_UNIT)
  return target;
}

size_t PROBUFF_NET_SYNC_UNIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UNIT m_units = 1;
  total_size += 1UL * this->_internal_m_units_size();
  for (const auto& msg : this->_impl_.m_units_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SYNC_UNIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SYNC_UNIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SYNC_UNIT::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SYNC_UNIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SYNC_UNIT*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SYNC_UNIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_units_.MergeFrom(from._impl_.m_units_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SYNC_UNIT::CopyFrom(const PROBUFF_NET_SYNC_UNIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_UNIT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_UNIT::InternalSwap(PROBUFF_NET_SYNC_UNIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_units_.InternalSwap(&other->_impl_.m_units_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_UNIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[44]);
}

// ===================================================================

class PROBUFF_NET_ENTER_LEAVE_VIEW::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ENTER_LEAVE_VIEW>()._impl_._has_bits_);
  static void set_has_m_isenter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ENTER_LEAVE_VIEW::PROBUFF_NET_ENTER_LEAVE_VIEW(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
}
PROBUFF_NET_ENTER_LEAVE_VIEW::PROBUFF_NET_ENTER_LEAVE_VIEW(const PROBUFF_NET_ENTER_LEAVE_VIEW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ENTER_LEAVE_VIEW* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_units_){from._impl_.m_units_}
    , /*decltype(_impl_._m_units_cached_byte_size_)*/{0}
    , decltype(_impl_.m_isenter_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_isenter_ = from._impl_.m_isenter_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
}

inline void PROBUFF_NET_ENTER_LEAVE_VIEW::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_units_){arena}
    , /*decltype(_impl_._m_units_cached_byte_size_)*/{0}
    , decltype(_impl_.m_isenter_){false}
  };
}

PROBUFF_NET_ENTER_LEAVE_VIEW::~PROBUFF_NET_ENTER_LEAVE_VIEW() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ENTER_LEAVE_VIEW::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_units_.~RepeatedField();
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_units_.Clear();
  _impl_.m_isenter_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ENTER_LEAVE_VIEW::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool m_isenter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_isenter(&has_bits);
          _impl_.m_isenter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 m_units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_m_units(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_m_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ENTER_LEAVE_VIEW::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool m_isenter = 1;
  if (_internal_has_m_isenter()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_m_isenter(), target);
  }

  // repeated int64 m_units = 2;
  {
    int byte_size = _impl_._m_units_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_m_units(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  return target;
}

size_t PROBUFF_NET_ENTER_LEAVE_VIEW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 m_units = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.m_units_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._m_units_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional bool m_isenter = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ENTER_LEAVE_VIEW::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ENTER_LEAVE_VIEW::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ENTER_LEAVE_VIEW::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ENTER_LEAVE_VIEW::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ENTER_LEAVE_VIEW*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ENTER_LEAVE_VIEW&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_units_.MergeFrom(from._impl_.m_units_);
  if (from._internal_has_m_isenter()) {
    _this->_internal_set_m_isenter(from._internal_m_isenter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::CopyFrom(const PROBUFF_NET_ENTER_LEAVE_VIEW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ENTER_LEAVE_VIEW::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::InternalSwap(PROBUFF_NET_ENTER_LEAVE_VIEW* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_units_.InternalSwap(&other->_impl_.m_units_);
  swap(_impl_.m_isenter_, other->_impl_.m_isenter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ENTER_LEAVE_VIEW::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[45]);
}

// ===================================================================

PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse() {}
PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::MergeFrom(const PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[46]);
}

// ===================================================================

class PROBUFF_NET_SYNC_POSITION::_Internal {
 public:
};

PROBUFF_NET_SYNC_POSITION::PROBUFF_NET_SYNC_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PROBUFF_NET_SYNC_POSITION::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_POSITION)
}
PROBUFF_NET_SYNC_POSITION::PROBUFF_NET_SYNC_POSITION(const PROBUFF_NET_SYNC_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_SYNC_POSITION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.m_position_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_position_.MergeFrom(from._impl_.m_position_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_POSITION)
}

inline void PROBUFF_NET_SYNC_POSITION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.m_position_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_SYNC_POSITION::~PROBUFF_NET_SYNC_POSITION() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_POSITION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SYNC_POSITION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_position_.Destruct();
  _impl_.m_position_.~MapField();
}

void PROBUFF_NET_SYNC_POSITION::ArenaDtor(void* object) {
  PROBUFF_NET_SYNC_POSITION* _this = reinterpret_cast< PROBUFF_NET_SYNC_POSITION* >(object);
  _this->_impl_.m_position_.Destruct();
}
void PROBUFF_NET_SYNC_POSITION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SYNC_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_position_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_POSITION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int64, .pbnet.UNIT_POSITION> m_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.m_position_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_SYNC_POSITION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .pbnet.UNIT_POSITION> m_position = 1;
  if (!this->_internal_m_position().empty()) {
    using MapType = ::_pb::Map<int64_t, ::pbnet::UNIT_POSITION>;
    using WireHelper = PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_position();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_POSITION)
  return target;
}

size_t PROBUFF_NET_SYNC_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .pbnet.UNIT_POSITION> m_position = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_position_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::pbnet::UNIT_POSITION >::const_iterator
      it = this->_internal_m_position().begin();
      it != this->_internal_m_position().end(); ++it) {
    total_size += PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SYNC_POSITION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SYNC_POSITION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SYNC_POSITION::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SYNC_POSITION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SYNC_POSITION*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SYNC_POSITION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_position_.MergeFrom(from._impl_.m_position_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SYNC_POSITION::CopyFrom(const PROBUFF_NET_SYNC_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_POSITION::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_POSITION::InternalSwap(PROBUFF_NET_SYNC_POSITION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_position_.InternalSwap(&other->_impl_.m_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_POSITION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[47]);
}

// ===================================================================

class PROBUFF_NET_CHANGE_ANGLE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHANGE_ANGLE>()._impl_._has_bits_);
  static const ::pbnet::UNIT_POSITION& m_position(const PROBUFF_NET_CHANGE_ANGLE* msg);
  static void set_has_m_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pbnet::UNIT_POSITION&
PROBUFF_NET_CHANGE_ANGLE::_Internal::m_position(const PROBUFF_NET_CHANGE_ANGLE* msg) {
  return *msg->_impl_.m_position_;
}
PROBUFF_NET_CHANGE_ANGLE::PROBUFF_NET_CHANGE_ANGLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHANGE_ANGLE)
}
PROBUFF_NET_CHANGE_ANGLE::PROBUFF_NET_CHANGE_ANGLE(const PROBUFF_NET_CHANGE_ANGLE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CHANGE_ANGLE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_position_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_position()) {
    _this->_impl_.m_position_ = new ::pbnet::UNIT_POSITION(*from._impl_.m_position_);
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHANGE_ANGLE)
}

inline void PROBUFF_NET_CHANGE_ANGLE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_position_){nullptr}
  };
}

PROBUFF_NET_CHANGE_ANGLE::~PROBUFF_NET_CHANGE_ANGLE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CHANGE_ANGLE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.m_position_;
}

void PROBUFF_NET_CHANGE_ANGLE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CHANGE_ANGLE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.m_position_ != nullptr);
    _impl_.m_position_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHANGE_ANGLE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.UNIT_POSITION m_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_CHANGE_ANGLE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.UNIT_POSITION m_position = 1;
  if (_internal_has_m_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::m_position(this),
        _Internal::m_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  return target;
}

size_t PROBUFF_NET_CHANGE_ANGLE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .pbnet.UNIT_POSITION m_position = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.m_position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CHANGE_ANGLE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CHANGE_ANGLE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CHANGE_ANGLE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CHANGE_ANGLE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CHANGE_ANGLE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CHANGE_ANGLE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_position()) {
    _this->_internal_mutable_m_position()->::pbnet::UNIT_POSITION::MergeFrom(
        from._internal_m_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CHANGE_ANGLE::CopyFrom(const PROBUFF_NET_CHANGE_ANGLE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHANGE_ANGLE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHANGE_ANGLE::InternalSwap(PROBUFF_NET_CHANGE_ANGLE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_position_, other->_impl_.m_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHANGE_ANGLE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[48]);
}

// ===================================================================

class PROBUFF_NET_MATCHING::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MATCHING::PROBUFF_NET_MATCHING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING)
}
PROBUFF_NET_MATCHING::PROBUFF_NET_MATCHING(const PROBUFF_NET_MATCHING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MATCHING* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_tid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_tid_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_tid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING)
}

inline void PROBUFF_NET_MATCHING::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_tid_){0}
  };
}

PROBUFF_NET_MATCHING::~PROBUFF_NET_MATCHING() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_tid_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_tid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_tid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_tid(&has_bits);
          _impl_.m_tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MATCHING::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // optional int32 m_tid = 2;
  if (_internal_has_m_tid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_tid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING)
  return target;
}

size_t PROBUFF_NET_MATCHING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional int32 m_tid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_tid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_tid_ = from._impl_.m_tid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING::CopyFrom(const PROBUFF_NET_MATCHING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING::InternalSwap(PROBUFF_NET_MATCHING* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING, _impl_.m_tid_)
      + sizeof(PROBUFF_NET_MATCHING::_impl_.m_tid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[49]);
}

// ===================================================================

class MATCHING_MEMBER::_Internal {
 public:
  using HasBits = decltype(std::declval<MATCHING_MEMBER>()._impl_._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_lv(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_begmatch(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_isconfirm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MATCHING_MEMBER::MATCHING_MEMBER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.MATCHING_MEMBER)
}
MATCHING_MEMBER::MATCHING_MEMBER(const MATCHING_MEMBER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MATCHING_MEMBER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_name_){}
    , decltype(_impl_.m_id_){}
    , decltype(_impl_.m_lv_){}
    , decltype(_impl_.m_begmatch_){}
    , decltype(_impl_.m_isconfirm_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_name()) {
    _this->_impl_.m_name_.Set(from._internal_m_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.m_id_, &from._impl_.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_isconfirm_) -
    reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_isconfirm_));
  // @@protoc_insertion_point(copy_constructor:pbnet.MATCHING_MEMBER)
}

inline void MATCHING_MEMBER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_name_){}
    , decltype(_impl_.m_id_){int64_t{0}}
    , decltype(_impl_.m_lv_){0}
    , decltype(_impl_.m_begmatch_){0}
    , decltype(_impl_.m_isconfirm_){false}
  };
  _impl_.m_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MATCHING_MEMBER::~MATCHING_MEMBER() {
  // @@protoc_insertion_point(destructor:pbnet.MATCHING_MEMBER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MATCHING_MEMBER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_name_.Destroy();
}

void MATCHING_MEMBER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MATCHING_MEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.MATCHING_MEMBER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_isconfirm_) -
        reinterpret_cast<char*>(&_impl_.m_id_)) + sizeof(_impl_.m_isconfirm_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MATCHING_MEMBER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          _impl_.m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string m_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.MATCHING_MEMBER.m_name"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_lv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_m_lv(&has_bits);
          _impl_.m_lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_begmatch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_m_begmatch(&has_bits);
          _impl_.m_begmatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool m_isconfirm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_m_isconfirm(&has_bits);
          _impl_.m_isconfirm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MATCHING_MEMBER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.MATCHING_MEMBER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // optional string m_name = 2;
  if (_internal_has_m_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_name().data(), static_cast<int>(this->_internal_m_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.MATCHING_MEMBER.m_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_name(), target);
  }

  // optional int32 m_lv = 3;
  if (_internal_has_m_lv()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_lv(), target);
  }

  // optional int32 m_begmatch = 4;
  if (_internal_has_m_begmatch()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_begmatch(), target);
  }

  // optional bool m_isconfirm = 5;
  if (_internal_has_m_isconfirm()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_m_isconfirm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.MATCHING_MEMBER)
  return target;
}

size_t MATCHING_MEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.MATCHING_MEMBER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string m_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_name());
    }

    // optional int64 m_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_id());
    }

    // optional int32 m_lv = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_lv());
    }

    // optional int32 m_begmatch = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_begmatch());
    }

    // optional bool m_isconfirm = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MATCHING_MEMBER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MATCHING_MEMBER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MATCHING_MEMBER::GetClassData() const { return &_class_data_; }


void MATCHING_MEMBER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MATCHING_MEMBER*>(&to_msg);
  auto& from = static_cast<const MATCHING_MEMBER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.MATCHING_MEMBER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_name(from._internal_m_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_id_ = from._impl_.m_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_lv_ = from._impl_.m_lv_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.m_begmatch_ = from._impl_.m_begmatch_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.m_isconfirm_ = from._impl_.m_isconfirm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MATCHING_MEMBER::CopyFrom(const MATCHING_MEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.MATCHING_MEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MATCHING_MEMBER::IsInitialized() const {
  return true;
}

void MATCHING_MEMBER::InternalSwap(MATCHING_MEMBER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_name_, lhs_arena,
      &other->_impl_.m_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MATCHING_MEMBER, _impl_.m_isconfirm_)
      + sizeof(MATCHING_MEMBER::_impl_.m_isconfirm_)
      - PROTOBUF_FIELD_OFFSET(MATCHING_MEMBER, _impl_.m_id_)>(
          reinterpret_cast<char*>(&_impl_.m_id_),
          reinterpret_cast<char*>(&other->_impl_.m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MATCHING_MEMBER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[50]);
}

// ===================================================================

class PROBUFF_NET_MATCHING_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MATCHING_RESPONSE::PROBUFF_NET_MATCHING_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
}
PROBUFF_NET_MATCHING_RESPONSE::PROBUFF_NET_MATCHING_RESPONSE(const PROBUFF_NET_MATCHING_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MATCHING_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_id_ = from._impl_.m_id_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
}

inline void PROBUFF_NET_MATCHING_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_id_){int64_t{0}}
  };
}

PROBUFF_NET_MATCHING_RESPONSE::~PROBUFF_NET_MATCHING_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_id_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          _impl_.m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MATCHING_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MATCHING_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 m_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_id()) {
    _this->_internal_set_m_id(from._internal_m_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_RESPONSE::CopyFrom(const PROBUFF_NET_MATCHING_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_RESPONSE::InternalSwap(PROBUFF_NET_MATCHING_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_id_, other->_impl_.m_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[51]);
}

// ===================================================================

class PROBUFF_NET_MATCHING_CANCEL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_CANCEL>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MATCHING_CANCEL::PROBUFF_NET_MATCHING_CANCEL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_CANCEL)
}
PROBUFF_NET_MATCHING_CANCEL::PROBUFF_NET_MATCHING_CANCEL(const PROBUFF_NET_MATCHING_CANCEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MATCHING_CANCEL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roomid_){}
    , decltype(_impl_.m_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_roomid_, &from._impl_.m_roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_type_) -
    reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_type_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_CANCEL)
}

inline void PROBUFF_NET_MATCHING_CANCEL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roomid_){int64_t{0}}
    , decltype(_impl_.m_type_){0}
  };
}

PROBUFF_NET_MATCHING_CANCEL::~PROBUFF_NET_MATCHING_CANCEL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_CANCEL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING_CANCEL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_CANCEL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_roomid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_type_) -
        reinterpret_cast<char*>(&_impl_.m_roomid_)) + sizeof(_impl_.m_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_CANCEL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int64 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MATCHING_CANCEL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // optional int64 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  return target;
}

size_t PROBUFF_NET_MATCHING_CANCEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_roomid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_roomid());
    }

    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_CANCEL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_CANCEL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_CANCEL::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_CANCEL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_CANCEL*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_CANCEL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_CANCEL::CopyFrom(const PROBUFF_NET_MATCHING_CANCEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_CANCEL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_CANCEL::InternalSwap(PROBUFF_NET_MATCHING_CANCEL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CANCEL, _impl_.m_type_)
      + sizeof(PROBUFF_NET_MATCHING_CANCEL::_impl_.m_type_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CANCEL, _impl_.m_roomid_)>(
          reinterpret_cast<char*>(&_impl_.m_roomid_),
          reinterpret_cast<char*>(&other->_impl_.m_roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_CANCEL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[52]);
}

// ===================================================================

class PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_CANCEL_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MATCHING_CANCEL_RESPONSE::PROBUFF_NET_MATCHING_CANCEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
}
PROBUFF_NET_MATCHING_CANCEL_RESPONSE::PROBUFF_NET_MATCHING_CANCEL_RESPONSE(const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MATCHING_CANCEL_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_stat_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
}

inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_stat_){0}
  };
}

PROBUFF_NET_MATCHING_CANCEL_RESPONSE::~PROBUFF_NET_MATCHING_CANCEL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .pbnet.ematching_cancel_stat m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_stat(static_cast<::pbnet::ematching_cancel_stat>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // optional .pbnet.ematching_cancel_stat m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MATCHING_CANCEL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional .pbnet.ematching_cancel_stat m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_stat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_CANCEL_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_CANCEL_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_CANCEL_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_CANCEL_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::CopyFrom(const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_CANCEL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::InternalSwap(PROBUFF_NET_MATCHING_CANCEL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_CANCEL_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[53]);
}

// ===================================================================

class PROBUFF_NET_MEMBER_MATCHING_CANCEL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MEMBER_MATCHING_CANCEL>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_canceltype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MEMBER_MATCHING_CANCEL::PROBUFF_NET_MEMBER_MATCHING_CANCEL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
}
PROBUFF_NET_MEMBER_MATCHING_CANCEL::PROBUFF_NET_MEMBER_MATCHING_CANCEL(const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MEMBER_MATCHING_CANCEL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_cancelmember_){from._impl_.m_cancelmember_}
    , /*decltype(_impl_._m_cancelmember_cached_byte_size_)*/{0}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_canceltype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_canceltype_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_canceltype_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
}

inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_cancelmember_){arena}
    , /*decltype(_impl_._m_cancelmember_cached_byte_size_)*/{0}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_canceltype_){0}
  };
}

PROBUFF_NET_MEMBER_MATCHING_CANCEL::~PROBUFF_NET_MEMBER_MATCHING_CANCEL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MEMBER_MATCHING_CANCEL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_cancelmember_.~RepeatedField();
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_cancelmember_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_canceltype_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_canceltype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MEMBER_MATCHING_CANCEL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .pbnet.etype_matching_cancel m_canceltype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_canceltype(static_cast<::pbnet::etype_matching_cancel>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 m_cancelmember = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_m_cancelmember(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_m_cancelmember(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MEMBER_MATCHING_CANCEL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // optional .pbnet.etype_matching_cancel m_canceltype = 2;
  if (_internal_has_m_canceltype()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_m_canceltype(), target);
  }

  // repeated int64 m_cancelmember = 3;
  {
    int byte_size = _impl_._m_cancelmember_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_m_cancelmember(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  return target;
}

size_t PROBUFF_NET_MEMBER_MATCHING_CANCEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 m_cancelmember = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.m_cancelmember_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._m_cancelmember_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional .pbnet.etype_matching_cancel m_canceltype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_canceltype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MEMBER_MATCHING_CANCEL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MEMBER_MATCHING_CANCEL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MEMBER_MATCHING_CANCEL::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MEMBER_MATCHING_CANCEL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MEMBER_MATCHING_CANCEL*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MEMBER_MATCHING_CANCEL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_cancelmember_.MergeFrom(from._impl_.m_cancelmember_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_canceltype_ = from._impl_.m_canceltype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::CopyFrom(const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MEMBER_MATCHING_CANCEL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::InternalSwap(PROBUFF_NET_MEMBER_MATCHING_CANCEL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_cancelmember_.InternalSwap(&other->_impl_.m_cancelmember_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MEMBER_MATCHING_CANCEL, _impl_.m_canceltype_)
      + sizeof(PROBUFF_NET_MEMBER_MATCHING_CANCEL::_impl_.m_canceltype_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MEMBER_MATCHING_CANCEL, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MEMBER_MATCHING_CANCEL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[54]);
}

// ===================================================================

class PROBUFF_NET_MATCHING_WAITCONFIRM::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_WAITCONFIRM>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MATCHING_WAITCONFIRM::PROBUFF_NET_MATCHING_WAITCONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
}
PROBUFF_NET_MATCHING_WAITCONFIRM::PROBUFF_NET_MATCHING_WAITCONFIRM(const PROBUFF_NET_MATCHING_WAITCONFIRM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MATCHING_WAITCONFIRM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_roomid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_roomid_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_roomid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
}

inline void PROBUFF_NET_MATCHING_WAITCONFIRM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_roomid_){0}
  };
}

PROBUFF_NET_MATCHING_WAITCONFIRM::~PROBUFF_NET_MATCHING_WAITCONFIRM() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_WAITCONFIRM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_roomid_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_roomid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_WAITCONFIRM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MATCHING_WAITCONFIRM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // optional int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  return target;
}

size_t PROBUFF_NET_MATCHING_WAITCONFIRM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_roomid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_WAITCONFIRM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_WAITCONFIRM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_WAITCONFIRM::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_WAITCONFIRM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_WAITCONFIRM*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_WAITCONFIRM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::CopyFrom(const PROBUFF_NET_MATCHING_WAITCONFIRM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_WAITCONFIRM::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::InternalSwap(PROBUFF_NET_MATCHING_WAITCONFIRM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_WAITCONFIRM, _impl_.m_roomid_)
      + sizeof(PROBUFF_NET_MATCHING_WAITCONFIRM::_impl_.m_roomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_WAITCONFIRM, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_WAITCONFIRM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[55]);
}

// ===================================================================

class PROBUFF_NET_MATCHING_CONFIRM::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_CONFIRM>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MATCHING_CONFIRM::PROBUFF_NET_MATCHING_CONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
}
PROBUFF_NET_MATCHING_CONFIRM::PROBUFF_NET_MATCHING_CONFIRM(const PROBUFF_NET_MATCHING_CONFIRM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MATCHING_CONFIRM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_roomid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_roomid_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_roomid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
}

inline void PROBUFF_NET_MATCHING_CONFIRM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_roomid_){0}
  };
}

PROBUFF_NET_MATCHING_CONFIRM::~PROBUFF_NET_MATCHING_CONFIRM() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_CONFIRM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING_CONFIRM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_CONFIRM::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_roomid_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_roomid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_CONFIRM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MATCHING_CONFIRM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // optional int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  return target;
}

size_t PROBUFF_NET_MATCHING_CONFIRM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_roomid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_CONFIRM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_CONFIRM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_CONFIRM::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_CONFIRM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_CONFIRM*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_CONFIRM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_CONFIRM::CopyFrom(const PROBUFF_NET_MATCHING_CONFIRM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_CONFIRM::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_CONFIRM::InternalSwap(PROBUFF_NET_MATCHING_CONFIRM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CONFIRM, _impl_.m_roomid_)
      + sizeof(PROBUFF_NET_MATCHING_CONFIRM::_impl_.m_roomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CONFIRM, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_CONFIRM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[56]);
}

// ===================================================================

class PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_CONFIRM_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
}
PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_roomid_){}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_stat_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
}

inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_roomid_){0}
    , decltype(_impl_.m_stat_){0}
  };
}

PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::~PROBUFF_NET_MATCHING_CONFIRM_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbnet.ematching_confirm_stat m_stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_stat(static_cast<::pbnet::ematching_confirm_stat>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // optional int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  // optional .pbnet.ematching_confirm_stat m_stat = 3;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_roomid());
    }

    // optional .pbnet.ematching_confirm_stat m_stat = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_stat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_CONFIRM_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::CopyFrom(const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::InternalSwap(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[57]);
}

// ===================================================================

class PROBUFF_NET_SYNC_MATCHING_CONFIRM::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_SYNC_MATCHING_CONFIRM>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_SYNC_MATCHING_CONFIRM::PROBUFF_NET_SYNC_MATCHING_CONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
}
PROBUFF_NET_SYNC_MATCHING_CONFIRM::PROBUFF_NET_SYNC_MATCHING_CONFIRM(const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_SYNC_MATCHING_CONFIRM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roleid_){from._impl_.m_roleid_}
    , /*decltype(_impl_._m_roleid_cached_byte_size_)*/{0}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_roomid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_roomid_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_roomid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
}

inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roleid_){arena}
    , /*decltype(_impl_._m_roleid_cached_byte_size_)*/{0}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_roomid_){0}
  };
}

PROBUFF_NET_SYNC_MATCHING_CONFIRM::~PROBUFF_NET_SYNC_MATCHING_CONFIRM() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_SYNC_MATCHING_CONFIRM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_roleid_.~RepeatedField();
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_roleid_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_roomid_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_roomid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_MATCHING_CONFIRM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 m_roleid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_m_roleid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_m_roleid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_SYNC_MATCHING_CONFIRM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // optional int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  // repeated int64 m_roleid = 3;
  {
    int byte_size = _impl_._m_roleid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_m_roleid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  return target;
}

size_t PROBUFF_NET_SYNC_MATCHING_CONFIRM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 m_roleid = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.m_roleid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._m_roleid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_roomid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_SYNC_MATCHING_CONFIRM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_SYNC_MATCHING_CONFIRM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_SYNC_MATCHING_CONFIRM::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_SYNC_MATCHING_CONFIRM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_SYNC_MATCHING_CONFIRM*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_SYNC_MATCHING_CONFIRM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_roleid_.MergeFrom(from._impl_.m_roleid_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::CopyFrom(const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_MATCHING_CONFIRM::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::InternalSwap(PROBUFF_NET_SYNC_MATCHING_CONFIRM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_roleid_.InternalSwap(&other->_impl_.m_roleid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SYNC_MATCHING_CONFIRM, _impl_.m_roomid_)
      + sizeof(PROBUFF_NET_SYNC_MATCHING_CONFIRM::_impl_.m_roomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SYNC_MATCHING_CONFIRM, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_MATCHING_CONFIRM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[58]);
}

// ===================================================================

class PROBUFF_NET_MATCHING_SYNC::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_SYNC>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MATCHING_SYNC::PROBUFF_NET_MATCHING_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_SYNC)
}
PROBUFF_NET_MATCHING_SYNC::PROBUFF_NET_MATCHING_SYNC(const PROBUFF_NET_MATCHING_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MATCHING_SYNC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_member_){from._impl_.m_member_}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_roomid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_roomid_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_roomid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_SYNC)
}

inline void PROBUFF_NET_MATCHING_SYNC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_member_){arena}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_roomid_){0}
  };
}

PROBUFF_NET_MATCHING_SYNC::~PROBUFF_NET_MATCHING_SYNC() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_SYNC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_SYNC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_member_.~RepeatedPtrField();
}

void PROBUFF_NET_MATCHING_SYNC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_SYNC::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_member_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_roomid_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_roomid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_SYNC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbnet.MATCHING_MEMBER m_member = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MATCHING_SYNC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // optional int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_member_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_member(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_SYNC)
  return target;
}

size_t PROBUFF_NET_MATCHING_SYNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  total_size += 1UL * this->_internal_m_member_size();
  for (const auto& msg : this->_impl_.m_member_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_roomid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_SYNC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_SYNC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_SYNC::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_SYNC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_SYNC*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_SYNC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_member_.MergeFrom(from._impl_.m_member_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_SYNC::CopyFrom(const PROBUFF_NET_MATCHING_SYNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_SYNC::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_SYNC::InternalSwap(PROBUFF_NET_MATCHING_SYNC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_member_.InternalSwap(&other->_impl_.m_member_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SYNC, _impl_.m_roomid_)
      + sizeof(PROBUFF_NET_MATCHING_SYNC::_impl_.m_roomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SYNC, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_SYNC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[59]);
}

// ===================================================================

class PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_SUCCESS_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_playsactorid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
}
PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_roomid_){}
    , decltype(_impl_.m_playsactorid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_playsactorid_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_playsactorid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
}

inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_roomid_){0}
    , decltype(_impl_.m_playsactorid_){int64_t{0}}
  };
}

PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::~PROBUFF_NET_MATCHING_SUCCESS_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_playsactorid_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_playsactorid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 m_playsactorid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_m_playsactorid(&has_bits);
          _impl_.m_playsactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // optional int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  // optional int64 m_playsactorid = 3;
  if (_internal_has_m_playsactorid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_m_playsactorid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_roomid());
    }

    // optional int64 m_playsactorid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_playsactorid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_SUCCESS_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_playsactorid_ = from._impl_.m_playsactorid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::CopyFrom(const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::InternalSwap(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _impl_.m_playsactorid_)
      + sizeof(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_impl_.m_playsactorid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[60]);
}

// ===================================================================

class PROBUFF_NET_MATCHING_SUCCESS::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_SUCCESS>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_dataid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_MATCHING_SUCCESS::PROBUFF_NET_MATCHING_SUCCESS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
}
PROBUFF_NET_MATCHING_SUCCESS::PROBUFF_NET_MATCHING_SUCCESS(const PROBUFF_NET_MATCHING_SUCCESS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_MATCHING_SUCCESS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_member_){from._impl_.m_member_}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_roomid_){}
    , decltype(_impl_.m_dataid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_dataid_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_dataid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
}

inline void PROBUFF_NET_MATCHING_SUCCESS::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_member_){arena}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_roomid_){0}
    , decltype(_impl_.m_dataid_){0}
  };
}

PROBUFF_NET_MATCHING_SUCCESS::~PROBUFF_NET_MATCHING_SUCCESS() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_MATCHING_SUCCESS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_member_.~RepeatedPtrField();
}

void PROBUFF_NET_MATCHING_SUCCESS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_MATCHING_SUCCESS::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_member_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_dataid_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_dataid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_SUCCESS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbnet.MATCHING_MEMBER m_member = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_dataid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_m_dataid(&has_bits);
          _impl_.m_dataid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_MATCHING_SUCCESS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // optional int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_member_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_member(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 m_dataid = 4;
  if (_internal_has_m_dataid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_dataid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  return target;
}

size_t PROBUFF_NET_MATCHING_SUCCESS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  total_size += 1UL * this->_internal_m_member_size();
  for (const auto& msg : this->_impl_.m_member_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_roomid());
    }

    // optional int32 m_dataid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_dataid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_MATCHING_SUCCESS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_MATCHING_SUCCESS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_MATCHING_SUCCESS::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_MATCHING_SUCCESS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_MATCHING_SUCCESS*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_MATCHING_SUCCESS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_member_.MergeFrom(from._impl_.m_member_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_dataid_ = from._impl_.m_dataid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_MATCHING_SUCCESS::CopyFrom(const PROBUFF_NET_MATCHING_SUCCESS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_SUCCESS::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_SUCCESS::InternalSwap(PROBUFF_NET_MATCHING_SUCCESS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_member_.InternalSwap(&other->_impl_.m_member_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SUCCESS, _impl_.m_dataid_)
      + sizeof(PROBUFF_NET_MATCHING_SUCCESS::_impl_.m_dataid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SUCCESS, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_SUCCESS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[61]);
}

// ===================================================================

class PROBUFF_NET_ENTER_PLAYS::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ENTER_PLAYS>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_ENTER_PLAYS::PROBUFF_NET_ENTER_PLAYS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ENTER_PLAYS)
}
PROBUFF_NET_ENTER_PLAYS::PROBUFF_NET_ENTER_PLAYS(const PROBUFF_NET_ENTER_PLAYS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ENTER_PLAYS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){}
    , decltype(_impl_.m_roomid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_type_, &from._impl_.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_roomid_) -
    reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_roomid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ENTER_PLAYS)
}

inline void PROBUFF_NET_ENTER_PLAYS::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_type_){0}
    , decltype(_impl_.m_roomid_){0}
  };
}

PROBUFF_NET_ENTER_PLAYS::~PROBUFF_NET_ENTER_PLAYS() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ENTER_PLAYS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ENTER_PLAYS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_ENTER_PLAYS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ENTER_PLAYS::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_roomid_) -
        reinterpret_cast<char*>(&_impl_.m_type_)) + sizeof(_impl_.m_roomid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ENTER_PLAYS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          _impl_.m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ENTER_PLAYS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // optional int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ENTER_PLAYS)
  return target;
}

size_t PROBUFF_NET_ENTER_PLAYS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // optional int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_roomid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ENTER_PLAYS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ENTER_PLAYS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ENTER_PLAYS::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ENTER_PLAYS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ENTER_PLAYS*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ENTER_PLAYS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_roomid_ = from._impl_.m_roomid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ENTER_PLAYS::CopyFrom(const PROBUFF_NET_ENTER_PLAYS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ENTER_PLAYS::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ENTER_PLAYS::InternalSwap(PROBUFF_NET_ENTER_PLAYS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ENTER_PLAYS, _impl_.m_roomid_)
      + sizeof(PROBUFF_NET_ENTER_PLAYS::_impl_.m_roomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ENTER_PLAYS, _impl_.m_type_)>(
          reinterpret_cast<char*>(&_impl_.m_type_),
          reinterpret_cast<char*>(&other->_impl_.m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ENTER_PLAYS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[62]);
}

// ===================================================================

class PROBUFF_NET_KCPSESSION::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_KCPSESSION>()._impl_._has_bits_);
  static void set_has_m_serverid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_uip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_uport(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_conv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PROBUFF_NET_KCPSESSION::PROBUFF_NET_KCPSESSION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_KCPSESSION)
}
PROBUFF_NET_KCPSESSION::PROBUFF_NET_KCPSESSION(const PROBUFF_NET_KCPSESSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_KCPSESSION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_uip_){}
    , decltype(_impl_.m_serverid_){}
    , decltype(_impl_.m_uport_){}
    , decltype(_impl_.m_conv_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_uip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_uip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_uip()) {
    _this->_impl_.m_uip_.Set(from._internal_m_uip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.m_serverid_, &from._impl_.m_serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_conv_) -
    reinterpret_cast<char*>(&_impl_.m_serverid_)) + sizeof(_impl_.m_conv_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_KCPSESSION)
}

inline void PROBUFF_NET_KCPSESSION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_uip_){}
    , decltype(_impl_.m_serverid_){int64_t{0}}
    , decltype(_impl_.m_uport_){0}
    , decltype(_impl_.m_conv_){0}
  };
  _impl_.m_uip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_uip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_KCPSESSION::~PROBUFF_NET_KCPSESSION() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_KCPSESSION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_KCPSESSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_uip_.Destroy();
}

void PROBUFF_NET_KCPSESSION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_KCPSESSION::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_KCPSESSION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_uip_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.m_serverid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_conv_) -
        reinterpret_cast<char*>(&_impl_.m_serverid_)) + sizeof(_impl_.m_conv_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_KCPSESSION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_serverid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_serverid(&has_bits);
          _impl_.m_serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string m_uip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_uip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_KCPSESSION.m_uip"));
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_uport = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_m_uport(&has_bits);
          _impl_.m_uport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_conv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_m_conv(&has_bits);
          _impl_.m_conv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_KCPSESSION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_KCPSESSION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_serverid = 1;
  if (_internal_has_m_serverid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_serverid(), target);
  }

  // optional string m_uip = 2;
  if (_internal_has_m_uip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_uip().data(), static_cast<int>(this->_internal_m_uip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_KCPSESSION.m_uip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_uip(), target);
  }

  // optional int32 m_uport = 3;
  if (_internal_has_m_uport()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_uport(), target);
  }

  // optional int32 m_conv = 4;
  if (_internal_has_m_conv()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_conv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_KCPSESSION)
  return target;
}

size_t PROBUFF_NET_KCPSESSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_KCPSESSION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string m_uip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_uip());
    }

    // optional int64 m_serverid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_serverid());
    }

    // optional int32 m_uport = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_uport());
    }

    // optional int32 m_conv = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_conv());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_KCPSESSION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_KCPSESSION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_KCPSESSION::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_KCPSESSION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_KCPSESSION*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_KCPSESSION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_KCPSESSION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_uip(from._internal_m_uip());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_serverid_ = from._impl_.m_serverid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_uport_ = from._impl_.m_uport_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.m_conv_ = from._impl_.m_conv_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_KCPSESSION::CopyFrom(const PROBUFF_NET_KCPSESSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_KCPSESSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_KCPSESSION::IsInitialized() const {
  return true;
}

void PROBUFF_NET_KCPSESSION::InternalSwap(PROBUFF_NET_KCPSESSION* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_uip_, lhs_arena,
      &other->_impl_.m_uip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_KCPSESSION, _impl_.m_conv_)
      + sizeof(PROBUFF_NET_KCPSESSION::_impl_.m_conv_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_KCPSESSION, _impl_.m_serverid_)>(
          reinterpret_cast<char*>(&_impl_.m_serverid_),
          reinterpret_cast<char*>(&other->_impl_.m_serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_KCPSESSION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[63]);
}

// ===================================================================

class PROBUFF_NET_KCPSESSION_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_KCPSESSION_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_kcpsession(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_KCPSESSION_RESPONSE::PROBUFF_NET_KCPSESSION_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
}
PROBUFF_NET_KCPSESSION_RESPONSE::PROBUFF_NET_KCPSESSION_RESPONSE(const PROBUFF_NET_KCPSESSION_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_KCPSESSION_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_kcpsession_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_kcpsession_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_kcpsession_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_kcpsession()) {
    _this->_impl_.m_kcpsession_.Set(from._internal_m_kcpsession(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
}

inline void PROBUFF_NET_KCPSESSION_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_kcpsession_){}
  };
  _impl_.m_kcpsession_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_kcpsession_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_KCPSESSION_RESPONSE::~PROBUFF_NET_KCPSESSION_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_KCPSESSION_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_kcpsession_.Destroy();
}

void PROBUFF_NET_KCPSESSION_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_KCPSESSION_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_kcpsession_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_KCPSESSION_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string m_kcpsession = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_kcpsession();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.m_kcpsession"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_KCPSESSION_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string m_kcpsession = 1;
  if (_internal_has_m_kcpsession()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_kcpsession().data(), static_cast<int>(this->_internal_m_kcpsession().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.m_kcpsession");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_m_kcpsession(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  return target;
}

size_t PROBUFF_NET_KCPSESSION_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string m_kcpsession = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m_kcpsession());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_KCPSESSION_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_KCPSESSION_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_KCPSESSION_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_KCPSESSION_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_KCPSESSION_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_KCPSESSION_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_kcpsession()) {
    _this->_internal_set_m_kcpsession(from._internal_m_kcpsession());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_KCPSESSION_RESPONSE::CopyFrom(const PROBUFF_NET_KCPSESSION_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_KCPSESSION_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_KCPSESSION_RESPONSE::InternalSwap(PROBUFF_NET_KCPSESSION_RESPONSE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_kcpsession_, lhs_arena,
      &other->_impl_.m_kcpsession_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_KCPSESSION_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[64]);
}

// ===================================================================

class PROBUFF_NET_TASK_RECEIVE_AWARD::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_TASK_RECEIVE_AWARD>()._impl_._has_bits_);
  static void set_has_m_taskid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_TASK_RECEIVE_AWARD::PROBUFF_NET_TASK_RECEIVE_AWARD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
}
PROBUFF_NET_TASK_RECEIVE_AWARD::PROBUFF_NET_TASK_RECEIVE_AWARD(const PROBUFF_NET_TASK_RECEIVE_AWARD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_TASK_RECEIVE_AWARD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_taskid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_taskid_ = from._impl_.m_taskid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
}

inline void PROBUFF_NET_TASK_RECEIVE_AWARD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_taskid_){0}
  };
}

PROBUFF_NET_TASK_RECEIVE_AWARD::~PROBUFF_NET_TASK_RECEIVE_AWARD() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_TASK_RECEIVE_AWARD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_taskid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_TASK_RECEIVE_AWARD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_taskid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_taskid(&has_bits);
          _impl_.m_taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_TASK_RECEIVE_AWARD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_taskid = 1;
  if (_internal_has_m_taskid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_taskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  return target;
}

size_t PROBUFF_NET_TASK_RECEIVE_AWARD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 m_taskid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_taskid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_TASK_RECEIVE_AWARD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_TASK_RECEIVE_AWARD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_TASK_RECEIVE_AWARD::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_TASK_RECEIVE_AWARD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_TASK_RECEIVE_AWARD*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_TASK_RECEIVE_AWARD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_taskid()) {
    _this->_internal_set_m_taskid(from._internal_m_taskid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::CopyFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_TASK_RECEIVE_AWARD::IsInitialized() const {
  return true;
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::InternalSwap(PROBUFF_NET_TASK_RECEIVE_AWARD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_taskid_, other->_impl_.m_taskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TASK_RECEIVE_AWARD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[65]);
}

// ===================================================================

class drop_item::_Internal {
 public:
  using HasBits = decltype(std::declval<drop_item>()._impl_._has_bits_);
  static void set_has_m_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

drop_item::drop_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.drop_item)
}
drop_item::drop_item(const drop_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  drop_item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_item_){}
    , decltype(_impl_.m_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_item_, &from._impl_.m_item_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_count_) -
    reinterpret_cast<char*>(&_impl_.m_item_)) + sizeof(_impl_.m_count_));
  // @@protoc_insertion_point(copy_constructor:pbnet.drop_item)
}

inline void drop_item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_item_){0}
    , decltype(_impl_.m_count_){0}
  };
}

drop_item::~drop_item() {
  // @@protoc_insertion_point(destructor:pbnet.drop_item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void drop_item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void drop_item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void drop_item::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.drop_item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_item_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_count_) -
        reinterpret_cast<char*>(&_impl_.m_item_)) + sizeof(_impl_.m_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* drop_item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_item(&has_bits);
          _impl_.m_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_count(&has_bits);
          _impl_.m_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* drop_item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.drop_item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_item = 1;
  if (_internal_has_m_item()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_item(), target);
  }

  // optional int32 m_count = 2;
  if (_internal_has_m_count()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.drop_item)
  return target;
}

size_t drop_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.drop_item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 m_item = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_item());
    }

    // optional int32 m_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData drop_item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    drop_item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*drop_item::GetClassData() const { return &_class_data_; }


void drop_item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<drop_item*>(&to_msg);
  auto& from = static_cast<const drop_item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.drop_item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_item_ = from._impl_.m_item_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_count_ = from._impl_.m_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void drop_item::CopyFrom(const drop_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.drop_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool drop_item::IsInitialized() const {
  return true;
}

void drop_item::InternalSwap(drop_item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(drop_item, _impl_.m_count_)
      + sizeof(drop_item::_impl_.m_count_)
      - PROTOBUF_FIELD_OFFSET(drop_item, _impl_.m_item_)>(
          reinterpret_cast<char*>(&_impl_.m_item_),
          reinterpret_cast<char*>(&other->_impl_.m_item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata drop_item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[66]);
}

// ===================================================================

PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse() {}
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::MergeFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[67]);
}

// ===================================================================

class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_taskid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
}
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.m_drop_)*/{}
    , decltype(_impl_.m_taskid_){}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_drop_.MergeFrom(from._impl_.m_drop_);
  ::memcpy(&_impl_.m_taskid_, &from._impl_.m_taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_stat_) -
    reinterpret_cast<char*>(&_impl_.m_taskid_)) + sizeof(_impl_.m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
}

inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.m_drop_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.m_taskid_){0}
    , decltype(_impl_.m_stat_){false}
  };
}

PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::~PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_drop_.Destruct();
  _impl_.m_drop_.~MapField();
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* >(object);
  _this->_impl_.m_drop_.Destruct();
}
void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_drop_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_taskid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_taskid_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_taskid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_taskid(&has_bits);
          _impl_.m_taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, int32> m_drop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.m_drop_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_taskid = 1;
  if (_internal_has_m_taskid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_taskid(), target);
  }

  // optional bool m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_m_stat(), target);
  }

  // map<int32, int32> m_drop = 3;
  if (!this->_internal_m_drop().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_drop();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  return target;
}

size_t PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> m_drop = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_drop_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_m_drop().begin();
      it != this->_internal_m_drop().end(); ++it) {
    total_size += PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 m_taskid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_taskid());
    }

    // optional bool m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_drop_.MergeFrom(from._impl_.m_drop_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_taskid_ = from._impl_.m_taskid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::CopyFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::InternalSwap(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_drop_.InternalSwap(&other->_impl_.m_drop_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _impl_.m_taskid_)>(
          reinterpret_cast<char*>(&_impl_.m_taskid_),
          reinterpret_cast<char*>(&other->_impl_.m_taskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[68]);
}

// ===================================================================

class PROBUFF_NET_CREATE_FAMIL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CREATE_FAMIL>()._impl_._has_bits_);
  static void set_has_m_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CREATE_FAMIL::PROBUFF_NET_CREATE_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CREATE_FAMIL)
}
PROBUFF_NET_CREATE_FAMIL::PROBUFF_NET_CREATE_FAMIL(const PROBUFF_NET_CREATE_FAMIL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CREATE_FAMIL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_name()) {
    _this->_impl_.m_name_.Set(from._internal_m_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CREATE_FAMIL)
}

inline void PROBUFF_NET_CREATE_FAMIL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_name_){}
  };
  _impl_.m_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_CREATE_FAMIL::~PROBUFF_NET_CREATE_FAMIL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CREATE_FAMIL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CREATE_FAMIL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_name_.Destroy();
}

void PROBUFF_NET_CREATE_FAMIL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CREATE_FAMIL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CREATE_FAMIL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CREATE_FAMIL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string m_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_CREATE_FAMIL.m_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_CREATE_FAMIL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CREATE_FAMIL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string m_name = 1;
  if (_internal_has_m_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_name().data(), static_cast<int>(this->_internal_m_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_CREATE_FAMIL.m_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_m_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CREATE_FAMIL)
  return target;
}

size_t PROBUFF_NET_CREATE_FAMIL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CREATE_FAMIL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string m_name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CREATE_FAMIL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CREATE_FAMIL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CREATE_FAMIL::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CREATE_FAMIL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CREATE_FAMIL*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CREATE_FAMIL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CREATE_FAMIL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_name()) {
    _this->_internal_set_m_name(from._internal_m_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CREATE_FAMIL::CopyFrom(const PROBUFF_NET_CREATE_FAMIL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CREATE_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CREATE_FAMIL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CREATE_FAMIL::InternalSwap(PROBUFF_NET_CREATE_FAMIL* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_name_, lhs_arena,
      &other->_impl_.m_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CREATE_FAMIL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[69]);
}

// ===================================================================

class PROBUFF_NET_CREATE_FAMIL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CREATE_FAMIL_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CREATE_FAMIL_RESPONSE::PROBUFF_NET_CREATE_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
}
PROBUFF_NET_CREATE_FAMIL_RESPONSE::PROBUFF_NET_CREATE_FAMIL_RESPONSE(const PROBUFF_NET_CREATE_FAMIL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CREATE_FAMIL_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_stat_ = from._impl_.m_stat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
}

inline void PROBUFF_NET_CREATE_FAMIL_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){0}
  };
}

PROBUFF_NET_CREATE_FAMIL_RESPONSE::~PROBUFF_NET_CREATE_FAMIL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CREATE_FAMIL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_CREATE_FAMIL_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CREATE_FAMIL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_stat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CREATE_FAMIL_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_CREATE_FAMIL_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_CREATE_FAMIL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 m_stat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_stat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CREATE_FAMIL_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CREATE_FAMIL_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CREATE_FAMIL_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CREATE_FAMIL_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CREATE_FAMIL_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CREATE_FAMIL_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_stat()) {
    _this->_internal_set_m_stat(from._internal_m_stat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CREATE_FAMIL_RESPONSE::CopyFrom(const PROBUFF_NET_CREATE_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CREATE_FAMIL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CREATE_FAMIL_RESPONSE::InternalSwap(PROBUFF_NET_CREATE_FAMIL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_stat_, other->_impl_.m_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CREATE_FAMIL_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[70]);
}

// ===================================================================

class PROBUFF_NET_JOIN_FAMIL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_JOIN_FAMIL>()._impl_._has_bits_);
  static void set_has_m_familid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_apply(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_JOIN_FAMIL::PROBUFF_NET_JOIN_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_JOIN_FAMIL)
}
PROBUFF_NET_JOIN_FAMIL::PROBUFF_NET_JOIN_FAMIL(const PROBUFF_NET_JOIN_FAMIL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_JOIN_FAMIL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_familid_){}
    , decltype(_impl_.m_apply_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_familid_, &from._impl_.m_familid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_apply_) -
    reinterpret_cast<char*>(&_impl_.m_familid_)) + sizeof(_impl_.m_apply_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_JOIN_FAMIL)
}

inline void PROBUFF_NET_JOIN_FAMIL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_familid_){int64_t{0}}
    , decltype(_impl_.m_apply_){false}
  };
}

PROBUFF_NET_JOIN_FAMIL::~PROBUFF_NET_JOIN_FAMIL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_JOIN_FAMIL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_JOIN_FAMIL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_JOIN_FAMIL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_JOIN_FAMIL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_JOIN_FAMIL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_familid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_apply_) -
        reinterpret_cast<char*>(&_impl_.m_familid_)) + sizeof(_impl_.m_apply_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_JOIN_FAMIL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_familid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_familid(&has_bits);
          _impl_.m_familid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool m_apply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_apply(&has_bits);
          _impl_.m_apply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_JOIN_FAMIL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_JOIN_FAMIL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_familid = 1;
  if (_internal_has_m_familid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_familid(), target);
  }

  // optional bool m_apply = 2;
  if (_internal_has_m_apply()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_m_apply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_JOIN_FAMIL)
  return target;
}

size_t PROBUFF_NET_JOIN_FAMIL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_JOIN_FAMIL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_familid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_familid());
    }

    // optional bool m_apply = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_JOIN_FAMIL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_JOIN_FAMIL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_JOIN_FAMIL::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_JOIN_FAMIL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_JOIN_FAMIL*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_JOIN_FAMIL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_JOIN_FAMIL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_familid_ = from._impl_.m_familid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_apply_ = from._impl_.m_apply_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_JOIN_FAMIL::CopyFrom(const PROBUFF_NET_JOIN_FAMIL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_JOIN_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_JOIN_FAMIL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_JOIN_FAMIL::InternalSwap(PROBUFF_NET_JOIN_FAMIL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_JOIN_FAMIL, _impl_.m_apply_)
      + sizeof(PROBUFF_NET_JOIN_FAMIL::_impl_.m_apply_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_JOIN_FAMIL, _impl_.m_familid_)>(
          reinterpret_cast<char*>(&_impl_.m_familid_),
          reinterpret_cast<char*>(&other->_impl_.m_familid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_JOIN_FAMIL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[71]);
}

// ===================================================================

class PROBUFF_NET_JOIN_FAMIL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_JOIN_FAMIL_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_JOIN_FAMIL_RESPONSE::PROBUFF_NET_JOIN_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
}
PROBUFF_NET_JOIN_FAMIL_RESPONSE::PROBUFF_NET_JOIN_FAMIL_RESPONSE(const PROBUFF_NET_JOIN_FAMIL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_JOIN_FAMIL_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_stat_ = from._impl_.m_stat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
}

inline void PROBUFF_NET_JOIN_FAMIL_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){0}
  };
}

PROBUFF_NET_JOIN_FAMIL_RESPONSE::~PROBUFF_NET_JOIN_FAMIL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_JOIN_FAMIL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_JOIN_FAMIL_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_JOIN_FAMIL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_stat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_JOIN_FAMIL_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_JOIN_FAMIL_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_JOIN_FAMIL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 m_stat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_stat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_JOIN_FAMIL_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_JOIN_FAMIL_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_JOIN_FAMIL_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_JOIN_FAMIL_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_JOIN_FAMIL_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_JOIN_FAMIL_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_stat()) {
    _this->_internal_set_m_stat(from._internal_m_stat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_JOIN_FAMIL_RESPONSE::CopyFrom(const PROBUFF_NET_JOIN_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_JOIN_FAMIL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_JOIN_FAMIL_RESPONSE::InternalSwap(PROBUFF_NET_JOIN_FAMIL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_stat_, other->_impl_.m_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_JOIN_FAMIL_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[72]);
}

// ===================================================================

class PROBUFF_NET_RATIFY_JOIN_FAMIL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RATIFY_JOIN_FAMIL>()._impl_._has_bits_);
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_ratify(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_RATIFY_JOIN_FAMIL::PROBUFF_NET_RATIFY_JOIN_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
}
PROBUFF_NET_RATIFY_JOIN_FAMIL::PROBUFF_NET_RATIFY_JOIN_FAMIL(const PROBUFF_NET_RATIFY_JOIN_FAMIL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_RATIFY_JOIN_FAMIL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roleid_){}
    , decltype(_impl_.m_ratify_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_roleid_, &from._impl_.m_roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_ratify_) -
    reinterpret_cast<char*>(&_impl_.m_roleid_)) + sizeof(_impl_.m_ratify_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
}

inline void PROBUFF_NET_RATIFY_JOIN_FAMIL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roleid_){int64_t{0}}
    , decltype(_impl_.m_ratify_){false}
  };
}

PROBUFF_NET_RATIFY_JOIN_FAMIL::~PROBUFF_NET_RATIFY_JOIN_FAMIL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_RATIFY_JOIN_FAMIL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_ratify_) -
        reinterpret_cast<char*>(&_impl_.m_roleid_)) + sizeof(_impl_.m_ratify_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RATIFY_JOIN_FAMIL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_roleid(&has_bits);
          _impl_.m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool m_ratify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_ratify(&has_bits);
          _impl_.m_ratify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_RATIFY_JOIN_FAMIL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_roleid = 1;
  if (_internal_has_m_roleid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_roleid(), target);
  }

  // optional bool m_ratify = 2;
  if (_internal_has_m_ratify()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_m_ratify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  return target;
}

size_t PROBUFF_NET_RATIFY_JOIN_FAMIL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_roleid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_roleid());
    }

    // optional bool m_ratify = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_RATIFY_JOIN_FAMIL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_RATIFY_JOIN_FAMIL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_RATIFY_JOIN_FAMIL::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_RATIFY_JOIN_FAMIL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_RATIFY_JOIN_FAMIL*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_RATIFY_JOIN_FAMIL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_roleid_ = from._impl_.m_roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_ratify_ = from._impl_.m_ratify_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL::CopyFrom(const PROBUFF_NET_RATIFY_JOIN_FAMIL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RATIFY_JOIN_FAMIL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL::InternalSwap(PROBUFF_NET_RATIFY_JOIN_FAMIL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RATIFY_JOIN_FAMIL, _impl_.m_ratify_)
      + sizeof(PROBUFF_NET_RATIFY_JOIN_FAMIL::_impl_.m_ratify_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RATIFY_JOIN_FAMIL, _impl_.m_roleid_)>(
          reinterpret_cast<char*>(&_impl_.m_roleid_),
          reinterpret_cast<char*>(&other->_impl_.m_roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RATIFY_JOIN_FAMIL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[73]);
}

// ===================================================================

class PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
}
PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE(const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_stat_ = from._impl_.m_stat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
}

inline void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){0}
  };
}

PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::~PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_stat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 m_stat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_stat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_stat()) {
    _this->_internal_set_m_stat(from._internal_m_stat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::CopyFrom(const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::InternalSwap(PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_stat_, other->_impl_.m_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[74]);
}

// ===================================================================

class PROBUFF_NET_CEDE_FAMIL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CEDE_FAMIL>()._impl_._has_bits_);
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CEDE_FAMIL::PROBUFF_NET_CEDE_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CEDE_FAMIL)
}
PROBUFF_NET_CEDE_FAMIL::PROBUFF_NET_CEDE_FAMIL(const PROBUFF_NET_CEDE_FAMIL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CEDE_FAMIL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roleid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_roleid_ = from._impl_.m_roleid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CEDE_FAMIL)
}

inline void PROBUFF_NET_CEDE_FAMIL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_roleid_){int64_t{0}}
  };
}

PROBUFF_NET_CEDE_FAMIL::~PROBUFF_NET_CEDE_FAMIL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CEDE_FAMIL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CEDE_FAMIL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_CEDE_FAMIL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CEDE_FAMIL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CEDE_FAMIL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_roleid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CEDE_FAMIL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_roleid(&has_bits);
          _impl_.m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_CEDE_FAMIL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CEDE_FAMIL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_roleid = 1;
  if (_internal_has_m_roleid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CEDE_FAMIL)
  return target;
}

size_t PROBUFF_NET_CEDE_FAMIL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CEDE_FAMIL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 m_roleid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_roleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CEDE_FAMIL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CEDE_FAMIL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CEDE_FAMIL::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CEDE_FAMIL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CEDE_FAMIL*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CEDE_FAMIL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CEDE_FAMIL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_roleid()) {
    _this->_internal_set_m_roleid(from._internal_m_roleid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CEDE_FAMIL::CopyFrom(const PROBUFF_NET_CEDE_FAMIL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CEDE_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CEDE_FAMIL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CEDE_FAMIL::InternalSwap(PROBUFF_NET_CEDE_FAMIL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_roleid_, other->_impl_.m_roleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CEDE_FAMIL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[75]);
}

// ===================================================================

class PROBUFF_NET_CEDE_FAMIL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CEDE_FAMIL_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CEDE_FAMIL_RESPONSE::PROBUFF_NET_CEDE_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
}
PROBUFF_NET_CEDE_FAMIL_RESPONSE::PROBUFF_NET_CEDE_FAMIL_RESPONSE(const PROBUFF_NET_CEDE_FAMIL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CEDE_FAMIL_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_stat_ = from._impl_.m_stat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
}

inline void PROBUFF_NET_CEDE_FAMIL_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){0}
  };
}

PROBUFF_NET_CEDE_FAMIL_RESPONSE::~PROBUFF_NET_CEDE_FAMIL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CEDE_FAMIL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_CEDE_FAMIL_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CEDE_FAMIL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_stat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CEDE_FAMIL_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_CEDE_FAMIL_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_CEDE_FAMIL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 m_stat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_stat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CEDE_FAMIL_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CEDE_FAMIL_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CEDE_FAMIL_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CEDE_FAMIL_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CEDE_FAMIL_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CEDE_FAMIL_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_stat()) {
    _this->_internal_set_m_stat(from._internal_m_stat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CEDE_FAMIL_RESPONSE::CopyFrom(const PROBUFF_NET_CEDE_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CEDE_FAMIL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CEDE_FAMIL_RESPONSE::InternalSwap(PROBUFF_NET_CEDE_FAMIL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_stat_, other->_impl_.m_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CEDE_FAMIL_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[76]);
}

// ===================================================================

class PROBUFF_NET_LEAVE_FAMIL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_LEAVE_FAMIL>()._impl_._has_bits_);
  static void set_has_m_familid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_LEAVE_FAMIL::PROBUFF_NET_LEAVE_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_LEAVE_FAMIL)
}
PROBUFF_NET_LEAVE_FAMIL::PROBUFF_NET_LEAVE_FAMIL(const PROBUFF_NET_LEAVE_FAMIL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_LEAVE_FAMIL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_familid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_familid_ = from._impl_.m_familid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_LEAVE_FAMIL)
}

inline void PROBUFF_NET_LEAVE_FAMIL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_familid_){int64_t{0}}
  };
}

PROBUFF_NET_LEAVE_FAMIL::~PROBUFF_NET_LEAVE_FAMIL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_LEAVE_FAMIL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_LEAVE_FAMIL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_LEAVE_FAMIL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_familid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_LEAVE_FAMIL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_familid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_familid(&has_bits);
          _impl_.m_familid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_LEAVE_FAMIL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_familid = 1;
  if (_internal_has_m_familid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_familid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  return target;
}

size_t PROBUFF_NET_LEAVE_FAMIL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 m_familid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_familid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_LEAVE_FAMIL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_LEAVE_FAMIL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_LEAVE_FAMIL::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_LEAVE_FAMIL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_LEAVE_FAMIL*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_LEAVE_FAMIL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_familid()) {
    _this->_internal_set_m_familid(from._internal_m_familid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_LEAVE_FAMIL::CopyFrom(const PROBUFF_NET_LEAVE_FAMIL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_LEAVE_FAMIL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_LEAVE_FAMIL::InternalSwap(PROBUFF_NET_LEAVE_FAMIL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_familid_, other->_impl_.m_familid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_LEAVE_FAMIL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[77]);
}

// ===================================================================

class PROBUFF_NET_LEAVE_FAMIL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_LEAVE_FAMIL_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_LEAVE_FAMIL_RESPONSE::PROBUFF_NET_LEAVE_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
}
PROBUFF_NET_LEAVE_FAMIL_RESPONSE::PROBUFF_NET_LEAVE_FAMIL_RESPONSE(const PROBUFF_NET_LEAVE_FAMIL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_LEAVE_FAMIL_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_stat_ = from._impl_.m_stat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
}

inline void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){0}
  };
}

PROBUFF_NET_LEAVE_FAMIL_RESPONSE::~PROBUFF_NET_LEAVE_FAMIL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_stat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_LEAVE_FAMIL_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_LEAVE_FAMIL_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_LEAVE_FAMIL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 m_stat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_stat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_LEAVE_FAMIL_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_LEAVE_FAMIL_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_LEAVE_FAMIL_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_LEAVE_FAMIL_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_LEAVE_FAMIL_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_stat()) {
    _this->_internal_set_m_stat(from._internal_m_stat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::CopyFrom(const PROBUFF_NET_LEAVE_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_LEAVE_FAMIL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::InternalSwap(PROBUFF_NET_LEAVE_FAMIL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_stat_, other->_impl_.m_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_LEAVE_FAMIL_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[78]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_LIST::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_LIST>()._impl_._has_bits_);
  static void set_has_m_familid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_LIST::PROBUFF_NET_FAMIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_LIST)
}
PROBUFF_NET_FAMIL_LIST::PROBUFF_NET_FAMIL_LIST(const PROBUFF_NET_FAMIL_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_LIST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_familid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_familid_ = from._impl_.m_familid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_LIST)
}

inline void PROBUFF_NET_FAMIL_LIST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_familid_){int64_t{0}}
  };
}

PROBUFF_NET_FAMIL_LIST::~PROBUFF_NET_FAMIL_LIST() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_LIST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_LIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMIL_LIST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_familid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_LIST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_familid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_familid(&has_bits);
          _impl_.m_familid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_LIST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_familid = 1;
  if (_internal_has_m_familid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_familid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_LIST)
  return target;
}

size_t PROBUFF_NET_FAMIL_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 m_familid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_familid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_LIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_LIST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_LIST::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_LIST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_LIST*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_LIST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_familid()) {
    _this->_internal_set_m_familid(from._internal_m_familid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_LIST::CopyFrom(const PROBUFF_NET_FAMIL_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_LIST::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_LIST::InternalSwap(PROBUFF_NET_FAMIL_LIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_familid_, other->_impl_.m_familid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_LIST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[79]);
}

// ===================================================================

class PROBUFF_NET_FAMIL_LIST_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_LIST_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_familid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void PROBUFF_NET_FAMIL_LIST_RESPONSE::clear_m_family() {
  _impl_.m_family_.Clear();
}
PROBUFF_NET_FAMIL_LIST_RESPONSE::PROBUFF_NET_FAMIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
}
PROBUFF_NET_FAMIL_LIST_RESPONSE::PROBUFF_NET_FAMIL_LIST_RESPONSE(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMIL_LIST_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_family_){from._impl_.m_family_}
    , decltype(_impl_.m_familid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_familid_ = from._impl_.m_familid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
}

inline void PROBUFF_NET_FAMIL_LIST_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_family_){arena}
    , decltype(_impl_.m_familid_){int64_t{0}}
  };
}

PROBUFF_NET_FAMIL_LIST_RESPONSE::~PROBUFF_NET_FAMIL_LIST_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMIL_LIST_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_family_.~RepeatedPtrField();
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_family_.Clear();
  _impl_.m_familid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_LIST_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_familid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_familid(&has_bits);
          _impl_.m_familid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .pbdb.db_family m_family = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_family(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMIL_LIST_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_familid = 1;
  if (_internal_has_m_familid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_familid(), target);
  }

  // repeated .pbdb.db_family m_family = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_family_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_family(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_LIST_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_family m_family = 2;
  total_size += 1UL * this->_internal_m_family_size();
  for (const auto& msg : this->_impl_.m_family_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int64 m_familid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_familid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMIL_LIST_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMIL_LIST_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMIL_LIST_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMIL_LIST_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMIL_LIST_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMIL_LIST_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_family_.MergeFrom(from._impl_.m_family_);
  if (from._internal_has_m_familid()) {
    _this->_internal_set_m_familid(from._internal_m_familid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_LIST_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_LIST_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_family_.InternalSwap(&other->_impl_.m_family_);
  swap(_impl_.m_familid_, other->_impl_.m_familid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_LIST_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[80]);
}

// ===================================================================

class PROBUFF_NET_CHANGE_FAMILNAME::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHANGE_FAMILNAME>()._impl_._has_bits_);
  static void set_has_m_familid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CHANGE_FAMILNAME::PROBUFF_NET_CHANGE_FAMILNAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
}
PROBUFF_NET_CHANGE_FAMILNAME::PROBUFF_NET_CHANGE_FAMILNAME(const PROBUFF_NET_CHANGE_FAMILNAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CHANGE_FAMILNAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_name_){}
    , decltype(_impl_.m_familid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m_name()) {
    _this->_impl_.m_name_.Set(from._internal_m_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.m_familid_ = from._impl_.m_familid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
}

inline void PROBUFF_NET_CHANGE_FAMILNAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_name_){}
    , decltype(_impl_.m_familid_){int64_t{0}}
  };
  _impl_.m_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PROBUFF_NET_CHANGE_FAMILNAME::~PROBUFF_NET_CHANGE_FAMILNAME() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CHANGE_FAMILNAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_name_.Destroy();
}

void PROBUFF_NET_CHANGE_FAMILNAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CHANGE_FAMILNAME::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_name_.ClearNonDefaultToEmpty();
  }
  _impl_.m_familid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHANGE_FAMILNAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_familid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_familid(&has_bits);
          _impl_.m_familid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string m_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pbnet.PROBUFF_NET_CHANGE_FAMILNAME.m_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_CHANGE_FAMILNAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_familid = 1;
  if (_internal_has_m_familid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_familid(), target);
  }

  // optional string m_name = 2;
  if (_internal_has_m_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_name().data(), static_cast<int>(this->_internal_m_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_CHANGE_FAMILNAME.m_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  return target;
}

size_t PROBUFF_NET_CHANGE_FAMILNAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string m_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_name());
    }

    // optional int64 m_familid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_familid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CHANGE_FAMILNAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CHANGE_FAMILNAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CHANGE_FAMILNAME::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CHANGE_FAMILNAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CHANGE_FAMILNAME*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CHANGE_FAMILNAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m_name(from._internal_m_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_familid_ = from._impl_.m_familid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CHANGE_FAMILNAME::CopyFrom(const PROBUFF_NET_CHANGE_FAMILNAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHANGE_FAMILNAME::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHANGE_FAMILNAME::InternalSwap(PROBUFF_NET_CHANGE_FAMILNAME* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_name_, lhs_arena,
      &other->_impl_.m_name_, rhs_arena
  );
  swap(_impl_.m_familid_, other->_impl_.m_familid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHANGE_FAMILNAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[81]);
}

// ===================================================================

class PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
}
PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE(const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_stat_ = from._impl_.m_stat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
}

inline void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){0}
  };
}

PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::~PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_stat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  return target;
}

size_t PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 m_stat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_stat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_stat()) {
    _this->_internal_set_m_stat(from._internal_m_stat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::CopyFrom(const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::InternalSwap(PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_stat_, other->_impl_.m_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[82]);
}

// ===================================================================

class PROBUFF_NET_FAMILSIGN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMILSIGN>()._impl_._has_bits_);
  static void set_has_m_familid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMILSIGN::PROBUFF_NET_FAMILSIGN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMILSIGN)
}
PROBUFF_NET_FAMILSIGN::PROBUFF_NET_FAMILSIGN(const PROBUFF_NET_FAMILSIGN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMILSIGN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_familid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_familid_ = from._impl_.m_familid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMILSIGN)
}

inline void PROBUFF_NET_FAMILSIGN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_familid_){int64_t{0}}
  };
}

PROBUFF_NET_FAMILSIGN::~PROBUFF_NET_FAMILSIGN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMILSIGN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMILSIGN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMILSIGN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMILSIGN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMILSIGN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_familid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMILSIGN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_familid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_familid(&has_bits);
          _impl_.m_familid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMILSIGN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMILSIGN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_familid = 1;
  if (_internal_has_m_familid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_familid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMILSIGN)
  return target;
}

size_t PROBUFF_NET_FAMILSIGN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMILSIGN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 m_familid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_familid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMILSIGN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMILSIGN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMILSIGN::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMILSIGN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMILSIGN*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMILSIGN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMILSIGN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_familid()) {
    _this->_internal_set_m_familid(from._internal_m_familid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMILSIGN::CopyFrom(const PROBUFF_NET_FAMILSIGN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMILSIGN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMILSIGN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMILSIGN::InternalSwap(PROBUFF_NET_FAMILSIGN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_familid_, other->_impl_.m_familid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMILSIGN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[83]);
}

// ===================================================================

class PROBUFF_NET_FAMILSIGN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMILSIGN_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMILSIGN_RESPONSE::PROBUFF_NET_FAMILSIGN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
}
PROBUFF_NET_FAMILSIGN_RESPONSE::PROBUFF_NET_FAMILSIGN_RESPONSE(const PROBUFF_NET_FAMILSIGN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FAMILSIGN_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_stat_ = from._impl_.m_stat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
}

inline void PROBUFF_NET_FAMILSIGN_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){0}
  };
}

PROBUFF_NET_FAMILSIGN_RESPONSE::~PROBUFF_NET_FAMILSIGN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FAMILSIGN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_FAMILSIGN_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FAMILSIGN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_stat_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMILSIGN_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FAMILSIGN_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMILSIGN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 m_stat = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_stat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FAMILSIGN_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FAMILSIGN_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FAMILSIGN_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FAMILSIGN_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FAMILSIGN_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FAMILSIGN_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_stat()) {
    _this->_internal_set_m_stat(from._internal_m_stat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FAMILSIGN_RESPONSE::CopyFrom(const PROBUFF_NET_FAMILSIGN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMILSIGN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMILSIGN_RESPONSE::InternalSwap(PROBUFF_NET_FAMILSIGN_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_stat_, other->_impl_.m_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMILSIGN_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[84]);
}

// ===================================================================

PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse() {}
PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::MergeFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[85]);
}

// ===================================================================

class PROBUFF_NET_REWARD_ITEM_RESPONSE::_Internal {
 public:
};

PROBUFF_NET_REWARD_ITEM_RESPONSE::PROBUFF_NET_REWARD_ITEM_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PROBUFF_NET_REWARD_ITEM_RESPONSE::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
}
PROBUFF_NET_REWARD_ITEM_RESPONSE::PROBUFF_NET_REWARD_ITEM_RESPONSE(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_REWARD_ITEM_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.m_items_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_items_.MergeFrom(from._impl_.m_items_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
}

inline void PROBUFF_NET_REWARD_ITEM_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.m_items_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_REWARD_ITEM_RESPONSE::~PROBUFF_NET_REWARD_ITEM_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_REWARD_ITEM_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_items_.Destruct();
  _impl_.m_items_.~MapField();
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_REWARD_ITEM_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_REWARD_ITEM_RESPONSE* >(object);
  _this->_impl_.m_items_.Destruct();
}
void PROBUFF_NET_REWARD_ITEM_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_REWARD_ITEM_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int32, int32> m_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.m_items_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_REWARD_ITEM_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> m_items = 1;
  if (!this->_internal_m_items().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_m_items();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  return target;
}

size_t PROBUFF_NET_REWARD_ITEM_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> m_items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_items_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_m_items().begin();
      it != this->_internal_m_items().end(); ++it) {
    total_size += PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_REWARD_ITEM_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_REWARD_ITEM_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_REWARD_ITEM_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_REWARD_ITEM_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_REWARD_ITEM_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_REWARD_ITEM_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_items_.MergeFrom(from._impl_.m_items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::CopyFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_REWARD_ITEM_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::InternalSwap(PROBUFF_NET_REWARD_ITEM_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_items_.InternalSwap(&other->_impl_.m_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_REWARD_ITEM_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[86]);
}

// ===================================================================

class PROBUFF_NET_RANKLIST::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RANKLIST>()._impl_._has_bits_);
  static void set_has_m_iscross(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_RANKLIST::PROBUFF_NET_RANKLIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RANKLIST)
}
PROBUFF_NET_RANKLIST::PROBUFF_NET_RANKLIST(const PROBUFF_NET_RANKLIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_RANKLIST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_iscross_){}
    , decltype(_impl_.m_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_iscross_, &from._impl_.m_iscross_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_type_) -
    reinterpret_cast<char*>(&_impl_.m_iscross_)) + sizeof(_impl_.m_type_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RANKLIST)
}

inline void PROBUFF_NET_RANKLIST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_iscross_){false}
    , decltype(_impl_.m_type_){0}
  };
}

PROBUFF_NET_RANKLIST::~PROBUFF_NET_RANKLIST() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RANKLIST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_RANKLIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_RANKLIST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_RANKLIST::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RANKLIST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_iscross_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_type_) -
        reinterpret_cast<char*>(&_impl_.m_iscross_)) + sizeof(_impl_.m_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RANKLIST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool m_iscross = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_iscross(&has_bits);
          _impl_.m_iscross_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .pbdb.eranklist m_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbdb::eranklist>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_RANKLIST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RANKLIST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool m_iscross = 1;
  if (_internal_has_m_iscross()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_m_iscross(), target);
  }

  // optional .pbdb.eranklist m_type = 2;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_m_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RANKLIST)
  return target;
}

size_t PROBUFF_NET_RANKLIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RANKLIST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool m_iscross = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .pbdb.eranklist m_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_RANKLIST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_RANKLIST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_RANKLIST::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_RANKLIST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_RANKLIST*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_RANKLIST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RANKLIST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_iscross_ = from._impl_.m_iscross_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_type_ = from._impl_.m_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_RANKLIST::CopyFrom(const PROBUFF_NET_RANKLIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RANKLIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RANKLIST::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RANKLIST::InternalSwap(PROBUFF_NET_RANKLIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RANKLIST, _impl_.m_type_)
      + sizeof(PROBUFF_NET_RANKLIST::_impl_.m_type_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RANKLIST, _impl_.m_iscross_)>(
          reinterpret_cast<char*>(&_impl_.m_iscross_),
          reinterpret_cast<char*>(&other->_impl_.m_iscross_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RANKLIST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[87]);
}

// ===================================================================

class PROBUFF_NET_RANKLIST_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RANKLIST_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void PROBUFF_NET_RANKLIST_RESPONSE::clear_m_items() {
  _impl_.m_items_.Clear();
}
PROBUFF_NET_RANKLIST_RESPONSE::PROBUFF_NET_RANKLIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
}
PROBUFF_NET_RANKLIST_RESPONSE::PROBUFF_NET_RANKLIST_RESPONSE(const PROBUFF_NET_RANKLIST_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_RANKLIST_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_items_){from._impl_.m_items_}
    , decltype(_impl_.m_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_type_ = from._impl_.m_type_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
}

inline void PROBUFF_NET_RANKLIST_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_items_){arena}
    , decltype(_impl_.m_type_){0}
  };
}

PROBUFF_NET_RANKLIST_RESPONSE::~PROBUFF_NET_RANKLIST_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_RANKLIST_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_items_.~RepeatedPtrField();
}

void PROBUFF_NET_RANKLIST_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_RANKLIST_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_items_.Clear();
  _impl_.m_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RANKLIST_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbdb.eranklist m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbdb::eranklist>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .pbdb.db_brief m_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_RANKLIST_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbdb.eranklist m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // repeated .pbdb.db_brief m_items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  return target;
}

size_t PROBUFF_NET_RANKLIST_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_brief m_items = 2;
  total_size += 1UL * this->_internal_m_items_size();
  for (const auto& msg : this->_impl_.m_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .pbdb.eranklist m_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_m_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_RANKLIST_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_RANKLIST_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_RANKLIST_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_RANKLIST_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_RANKLIST_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_RANKLIST_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_items_.MergeFrom(from._impl_.m_items_);
  if (from._internal_has_m_type()) {
    _this->_internal_set_m_type(from._internal_m_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_RANKLIST_RESPONSE::CopyFrom(const PROBUFF_NET_RANKLIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RANKLIST_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RANKLIST_RESPONSE::InternalSwap(PROBUFF_NET_RANKLIST_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.m_items_.InternalSwap(&other->_impl_.m_items_);
  swap(_impl_.m_type_, other->_impl_.m_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RANKLIST_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[88]);
}

// ===================================================================

class PROBUFF_NET_FRIEND::_Internal {
 public:
};

PROBUFF_NET_FRIEND::PROBUFF_NET_FRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND)
}
PROBUFF_NET_FRIEND::PROBUFF_NET_FRIEND(const PROBUFF_NET_FRIEND& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PROBUFF_NET_FRIEND* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FRIEND::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FRIEND::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[89]);
}

// ===================================================================

class PROBUFF_NET_FRIEND_RESPONSE::_Internal {
 public:
};

void PROBUFF_NET_FRIEND_RESPONSE::clear_m_friends() {
  _impl_.m_friends_.Clear();
}
void PROBUFF_NET_FRIEND_RESPONSE::clear_m_applyfriends() {
  _impl_.m_applyfriends_.Clear();
}
PROBUFF_NET_FRIEND_RESPONSE::PROBUFF_NET_FRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
}
PROBUFF_NET_FRIEND_RESPONSE::PROBUFF_NET_FRIEND_RESPONSE(const PROBUFF_NET_FRIEND_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_FRIEND_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_friends_){from._impl_.m_friends_}
    , decltype(_impl_.m_applyfriends_){from._impl_.m_applyfriends_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
}

inline void PROBUFF_NET_FRIEND_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.m_friends_){arena}
    , decltype(_impl_.m_applyfriends_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PROBUFF_NET_FRIEND_RESPONSE::~PROBUFF_NET_FRIEND_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_FRIEND_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_friends_.~RepeatedPtrField();
  _impl_.m_applyfriends_.~RepeatedPtrField();
}

void PROBUFF_NET_FRIEND_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_FRIEND_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_friends_.Clear();
  _impl_.m_applyfriends_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pbdb.db_brief m_friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .pbdb.db_brief m_applyfriends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_applyfriends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_FRIEND_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbdb.db_brief m_friends = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_friends_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_friends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pbdb.db_brief m_applyfriends = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_m_applyfriends_size()); i < n; i++) {
    const auto& repfield = this->_internal_m_applyfriends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FRIEND_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_brief m_friends = 1;
  total_size += 1UL * this->_internal_m_friends_size();
  for (const auto& msg : this->_impl_.m_friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pbdb.db_brief m_applyfriends = 2;
  total_size += 1UL * this->_internal_m_applyfriends_size();
  for (const auto& msg : this->_impl_.m_applyfriends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_FRIEND_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_FRIEND_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_FRIEND_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_FRIEND_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_FRIEND_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_FRIEND_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_friends_.MergeFrom(from._impl_.m_friends_);
  _this->_impl_.m_applyfriends_.MergeFrom(from._impl_.m_applyfriends_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_FRIEND_RESPONSE::CopyFrom(const PROBUFF_NET_FRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_RESPONSE::InternalSwap(PROBUFF_NET_FRIEND_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_friends_.InternalSwap(&other->_impl_.m_friends_);
  _impl_.m_applyfriends_.InternalSwap(&other->_impl_.m_applyfriends_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[90]);
}

// ===================================================================

class PROBUFF_NET_ADDFRIEND::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ADDFRIEND>()._impl_._has_bits_);
  static void set_has_m_friedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ADDFRIEND::PROBUFF_NET_ADDFRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ADDFRIEND)
}
PROBUFF_NET_ADDFRIEND::PROBUFF_NET_ADDFRIEND(const PROBUFF_NET_ADDFRIEND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ADDFRIEND* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_friedid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_friedid_ = from._impl_.m_friedid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ADDFRIEND)
}

inline void PROBUFF_NET_ADDFRIEND::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_friedid_){int64_t{0}}
  };
}

PROBUFF_NET_ADDFRIEND::~PROBUFF_NET_ADDFRIEND() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ADDFRIEND)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ADDFRIEND::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_ADDFRIEND::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ADDFRIEND::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ADDFRIEND)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_friedid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ADDFRIEND::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_friedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_friedid(&has_bits);
          _impl_.m_friedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ADDFRIEND::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ADDFRIEND)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_friedid = 1;
  if (_internal_has_m_friedid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_friedid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ADDFRIEND)
  return target;
}

size_t PROBUFF_NET_ADDFRIEND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ADDFRIEND)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 m_friedid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_friedid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ADDFRIEND::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ADDFRIEND::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ADDFRIEND::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ADDFRIEND::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ADDFRIEND*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ADDFRIEND&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ADDFRIEND)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_friedid()) {
    _this->_internal_set_m_friedid(from._internal_m_friedid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ADDFRIEND::CopyFrom(const PROBUFF_NET_ADDFRIEND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ADDFRIEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ADDFRIEND::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ADDFRIEND::InternalSwap(PROBUFF_NET_ADDFRIEND* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_friedid_, other->_impl_.m_friedid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ADDFRIEND::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[91]);
}

// ===================================================================

class PROBUFF_NET_ADDFRIEND_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ADDFRIEND_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_friedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_ADDFRIEND_RESPONSE::PROBUFF_NET_ADDFRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
}
PROBUFF_NET_ADDFRIEND_RESPONSE::PROBUFF_NET_ADDFRIEND_RESPONSE(const PROBUFF_NET_ADDFRIEND_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ADDFRIEND_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_friedid_){}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_friedid_, &from._impl_.m_friedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_stat_) -
    reinterpret_cast<char*>(&_impl_.m_friedid_)) + sizeof(_impl_.m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
}

inline void PROBUFF_NET_ADDFRIEND_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_friedid_){int64_t{0}}
    , decltype(_impl_.m_stat_){0}
  };
}

PROBUFF_NET_ADDFRIEND_RESPONSE::~PROBUFF_NET_ADDFRIEND_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ADDFRIEND_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_ADDFRIEND_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ADDFRIEND_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_friedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_friedid_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ADDFRIEND_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_friedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_friedid(&has_bits);
          _impl_.m_friedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ADDFRIEND_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_friedid = 1;
  if (_internal_has_m_friedid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_friedid(), target);
  }

  // optional int32 m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  return target;
}

size_t PROBUFF_NET_ADDFRIEND_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_friedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_friedid());
    }

    // optional int32 m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_stat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ADDFRIEND_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ADDFRIEND_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ADDFRIEND_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ADDFRIEND_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ADDFRIEND_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ADDFRIEND_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_friedid_ = from._impl_.m_friedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ADDFRIEND_RESPONSE::CopyFrom(const PROBUFF_NET_ADDFRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ADDFRIEND_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ADDFRIEND_RESPONSE::InternalSwap(PROBUFF_NET_ADDFRIEND_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ADDFRIEND_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_ADDFRIEND_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ADDFRIEND_RESPONSE, _impl_.m_friedid_)>(
          reinterpret_cast<char*>(&_impl_.m_friedid_),
          reinterpret_cast<char*>(&other->_impl_.m_friedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ADDFRIEND_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[92]);
}

// ===================================================================

class PROBUFF_NET_RATIFY_ADDFRIEND::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RATIFY_ADDFRIEND>()._impl_._has_bits_);
  static void set_has_m_friedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_ratify(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_RATIFY_ADDFRIEND::PROBUFF_NET_RATIFY_ADDFRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
}
PROBUFF_NET_RATIFY_ADDFRIEND::PROBUFF_NET_RATIFY_ADDFRIEND(const PROBUFF_NET_RATIFY_ADDFRIEND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_RATIFY_ADDFRIEND* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_friedid_){}
    , decltype(_impl_.m_ratify_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_friedid_, &from._impl_.m_friedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_ratify_) -
    reinterpret_cast<char*>(&_impl_.m_friedid_)) + sizeof(_impl_.m_ratify_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
}

inline void PROBUFF_NET_RATIFY_ADDFRIEND::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_friedid_){int64_t{0}}
    , decltype(_impl_.m_ratify_){false}
  };
}

PROBUFF_NET_RATIFY_ADDFRIEND::~PROBUFF_NET_RATIFY_ADDFRIEND() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_RATIFY_ADDFRIEND::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_RATIFY_ADDFRIEND::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_RATIFY_ADDFRIEND::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_friedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_ratify_) -
        reinterpret_cast<char*>(&_impl_.m_friedid_)) + sizeof(_impl_.m_ratify_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RATIFY_ADDFRIEND::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_friedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_friedid(&has_bits);
          _impl_.m_friedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool m_ratify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_ratify(&has_bits);
          _impl_.m_ratify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_RATIFY_ADDFRIEND::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_friedid = 1;
  if (_internal_has_m_friedid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_friedid(), target);
  }

  // optional bool m_ratify = 2;
  if (_internal_has_m_ratify()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_m_ratify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  return target;
}

size_t PROBUFF_NET_RATIFY_ADDFRIEND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_friedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_friedid());
    }

    // optional bool m_ratify = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_RATIFY_ADDFRIEND::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_RATIFY_ADDFRIEND::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_RATIFY_ADDFRIEND::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_RATIFY_ADDFRIEND::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_RATIFY_ADDFRIEND*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_RATIFY_ADDFRIEND&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_friedid_ = from._impl_.m_friedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_ratify_ = from._impl_.m_ratify_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_RATIFY_ADDFRIEND::CopyFrom(const PROBUFF_NET_RATIFY_ADDFRIEND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RATIFY_ADDFRIEND::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RATIFY_ADDFRIEND::InternalSwap(PROBUFF_NET_RATIFY_ADDFRIEND* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RATIFY_ADDFRIEND, _impl_.m_ratify_)
      + sizeof(PROBUFF_NET_RATIFY_ADDFRIEND::_impl_.m_ratify_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RATIFY_ADDFRIEND, _impl_.m_friedid_)>(
          reinterpret_cast<char*>(&_impl_.m_friedid_),
          reinterpret_cast<char*>(&other->_impl_.m_friedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RATIFY_ADDFRIEND::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[93]);
}

// ===================================================================

class PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_friedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_ratify(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
}
PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE(const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_friedid_){}
    , decltype(_impl_.m_ratify_){}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_friedid_, &from._impl_.m_friedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_stat_) -
    reinterpret_cast<char*>(&_impl_.m_friedid_)) + sizeof(_impl_.m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
}

inline void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_friedid_){int64_t{0}}
    , decltype(_impl_.m_ratify_){false}
    , decltype(_impl_.m_stat_){0}
  };
}

PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::~PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.m_friedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_friedid_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_friedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_friedid(&has_bits);
          _impl_.m_friedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool m_ratify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_ratify(&has_bits);
          _impl_.m_ratify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_friedid = 1;
  if (_internal_has_m_friedid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_friedid(), target);
  }

  // optional bool m_ratify = 2;
  if (_internal_has_m_ratify()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_m_ratify(), target);
  }

  // optional int32 m_stat = 3;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  return target;
}

size_t PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 m_friedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_friedid());
    }

    // optional bool m_ratify = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 m_stat = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_stat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_friedid_ = from._impl_.m_friedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_ratify_ = from._impl_.m_ratify_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::CopyFrom(const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::InternalSwap(PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE, _impl_.m_friedid_)>(
          reinterpret_cast<char*>(&_impl_.m_friedid_),
          reinterpret_cast<char*>(&other->_impl_.m_friedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[94]);
}

// ===================================================================

class PROBUFF_NET_ERASEFRIEND::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ERASEFRIEND>()._impl_._has_bits_);
  static void set_has_m_friedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ERASEFRIEND::PROBUFF_NET_ERASEFRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ERASEFRIEND)
}
PROBUFF_NET_ERASEFRIEND::PROBUFF_NET_ERASEFRIEND(const PROBUFF_NET_ERASEFRIEND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ERASEFRIEND* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_friedid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.m_friedid_ = from._impl_.m_friedid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ERASEFRIEND)
}

inline void PROBUFF_NET_ERASEFRIEND::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_friedid_){int64_t{0}}
  };
}

PROBUFF_NET_ERASEFRIEND::~PROBUFF_NET_ERASEFRIEND() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ERASEFRIEND)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ERASEFRIEND::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_ERASEFRIEND::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ERASEFRIEND::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ERASEFRIEND)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_friedid_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ERASEFRIEND::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_friedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_friedid(&has_bits);
          _impl_.m_friedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ERASEFRIEND::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ERASEFRIEND)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_friedid = 1;
  if (_internal_has_m_friedid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_friedid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ERASEFRIEND)
  return target;
}

size_t PROBUFF_NET_ERASEFRIEND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ERASEFRIEND)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 m_friedid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_friedid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ERASEFRIEND::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ERASEFRIEND::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ERASEFRIEND::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ERASEFRIEND::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ERASEFRIEND*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ERASEFRIEND&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ERASEFRIEND)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_friedid()) {
    _this->_internal_set_m_friedid(from._internal_m_friedid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ERASEFRIEND::CopyFrom(const PROBUFF_NET_ERASEFRIEND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ERASEFRIEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ERASEFRIEND::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ERASEFRIEND::InternalSwap(PROBUFF_NET_ERASEFRIEND* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.m_friedid_, other->_impl_.m_friedid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ERASEFRIEND::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[95]);
}

// ===================================================================

class PROBUFF_NET_ERASEFRIEND_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ERASEFRIEND_RESPONSE>()._impl_._has_bits_);
  static void set_has_m_friedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_ERASEFRIEND_RESPONSE::PROBUFF_NET_ERASEFRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
}
PROBUFF_NET_ERASEFRIEND_RESPONSE::PROBUFF_NET_ERASEFRIEND_RESPONSE(const PROBUFF_NET_ERASEFRIEND_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ERASEFRIEND_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_friedid_){}
    , decltype(_impl_.m_stat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_friedid_, &from._impl_.m_friedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_stat_) -
    reinterpret_cast<char*>(&_impl_.m_friedid_)) + sizeof(_impl_.m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
}

inline void PROBUFF_NET_ERASEFRIEND_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_friedid_){int64_t{0}}
    , decltype(_impl_.m_stat_){0}
  };
}

PROBUFF_NET_ERASEFRIEND_RESPONSE::~PROBUFF_NET_ERASEFRIEND_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ERASEFRIEND_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_ERASEFRIEND_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ERASEFRIEND_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.m_friedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_stat_) -
        reinterpret_cast<char*>(&_impl_.m_friedid_)) + sizeof(_impl_.m_stat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ERASEFRIEND_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 m_friedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_m_friedid(&has_bits);
          _impl_.m_friedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          _impl_.m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ERASEFRIEND_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 m_friedid = 1;
  if (_internal_has_m_friedid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_friedid(), target);
  }

  // optional int32 m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  return target;
}

size_t PROBUFF_NET_ERASEFRIEND_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 m_friedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_friedid());
    }

    // optional int32 m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m_stat());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ERASEFRIEND_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ERASEFRIEND_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ERASEFRIEND_RESPONSE::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ERASEFRIEND_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ERASEFRIEND_RESPONSE*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ERASEFRIEND_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_friedid_ = from._impl_.m_friedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ERASEFRIEND_RESPONSE::CopyFrom(const PROBUFF_NET_ERASEFRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ERASEFRIEND_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ERASEFRIEND_RESPONSE::InternalSwap(PROBUFF_NET_ERASEFRIEND_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ERASEFRIEND_RESPONSE, _impl_.m_stat_)
      + sizeof(PROBUFF_NET_ERASEFRIEND_RESPONSE::_impl_.m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ERASEFRIEND_RESPONSE, _impl_.m_friedid_)>(
          reinterpret_cast<char*>(&_impl_.m_friedid_),
          reinterpret_cast<char*>(&other->_impl_.m_friedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ERASEFRIEND_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[96]);
}

// ===================================================================

class PROBUFF_NET_ROLESTAT::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ROLESTAT>()._impl_._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_logicstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_ROLESTAT::PROBUFF_NET_ROLESTAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLESTAT)
}
PROBUFF_NET_ROLESTAT::PROBUFF_NET_ROLESTAT(const PROBUFF_NET_ROLESTAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PROBUFF_NET_ROLESTAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){}
    , decltype(_impl_.m_logicstat_){}
    , decltype(_impl_.m_roleid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.m_stat_, &from._impl_.m_stat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_roleid_) -
    reinterpret_cast<char*>(&_impl_.m_stat_)) + sizeof(_impl_.m_roleid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLESTAT)
}

inline void PROBUFF_NET_ROLESTAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_stat_){0}
    , decltype(_impl_.m_logicstat_){0}
    , decltype(_impl_.m_roleid_){int64_t{0}}
  };
}

PROBUFF_NET_ROLESTAT::~PROBUFF_NET_ROLESTAT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLESTAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PROBUFF_NET_ROLESTAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PROBUFF_NET_ROLESTAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PROBUFF_NET_ROLESTAT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLESTAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.m_stat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.m_roleid_) -
        reinterpret_cast<char*>(&_impl_.m_stat_)) + sizeof(_impl_.m_roleid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLESTAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .pbnet.PROBUFF_NET_ROLESTAT.stat m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_stat(static_cast<::pbnet::PROBUFF_NET_ROLESTAT_stat>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .pbnet.PROBUFF_NET_ROLESTAT.logic_stat m_logicstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_logicstat(static_cast<::pbnet::PROBUFF_NET_ROLESTAT_logic_stat>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int64 m_roleid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_m_roleid(&has_bits);
          _impl_.m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PROBUFF_NET_ROLESTAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLESTAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .pbnet.PROBUFF_NET_ROLESTAT.stat m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_stat(), target);
  }

  // optional .pbnet.PROBUFF_NET_ROLESTAT.logic_stat m_logicstat = 2;
  if (_internal_has_m_logicstat()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_m_logicstat(), target);
  }

  // optional int64 m_roleid = 3;
  if (_internal_has_m_roleid()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_m_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLESTAT)
  return target;
}

size_t PROBUFF_NET_ROLESTAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLESTAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .pbnet.PROBUFF_NET_ROLESTAT.stat m_stat = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_stat());
    }

    // optional .pbnet.PROBUFF_NET_ROLESTAT.logic_stat m_logicstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_m_logicstat());
    }

    // optional int64 m_roleid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_roleid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PROBUFF_NET_ROLESTAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PROBUFF_NET_ROLESTAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PROBUFF_NET_ROLESTAT::GetClassData() const { return &_class_data_; }


void PROBUFF_NET_ROLESTAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PROBUFF_NET_ROLESTAT*>(&to_msg);
  auto& from = static_cast<const PROBUFF_NET_ROLESTAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLESTAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.m_stat_ = from._impl_.m_stat_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.m_logicstat_ = from._impl_.m_logicstat_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.m_roleid_ = from._impl_.m_roleid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PROBUFF_NET_ROLESTAT::CopyFrom(const PROBUFF_NET_ROLESTAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLESTAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLESTAT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLESTAT::InternalSwap(PROBUFF_NET_ROLESTAT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLESTAT, _impl_.m_roleid_)
      + sizeof(PROBUFF_NET_ROLESTAT::_impl_.m_roleid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLESTAT, _impl_.m_stat_)>(
          reinterpret_cast<char*>(&_impl_.m_stat_),
          reinterpret_cast<char*>(&other->_impl_.m_stat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLESTAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_net_2eproto_getter, &descriptor_table_net_2eproto_once,
      file_level_metadata_net_2eproto[97]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pbnet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MSG_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MSG_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MSG_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_HEARTBEAT*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_HEARTBEAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_HEARTBEAT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RECHARGE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RECHARGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RECHARGE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ERROR*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ERROR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ERROR >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_GET_TIME*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_GET_TIME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_GET_TIME >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_NOTICE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_NOTICE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_NOTICE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_NOTICE_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_NOTICE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_NOTICE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ACOUNT_LOGIN*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_LOGIN*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_SYNC*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_SYNC*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CMD*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CMD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CMD >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHAT*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::chatitem*
Arena::CreateMaybeMessage< ::pbnet::chatitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::chatitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHAT_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHAT_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHAT_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SWITCH_LINE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SWITCH_LINE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SWITCH_LINE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_READ*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_READ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_READ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DRAW*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DRAW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DRAW >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DEL*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DEL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::VECTOR2*
Arena::CreateMaybeMessage< ::pbnet::VECTOR2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::VECTOR2 >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::VECTOR3*
Arena::CreateMaybeMessage< ::pbnet::VECTOR3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::VECTOR3 >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UNIT_POSITION*
Arena::CreateMaybeMessage< ::pbnet::UNIT_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UNIT_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UnitAttribute*
Arena::CreateMaybeMessage< ::pbnet::UnitAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UnitAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UnitModule*
Arena::CreateMaybeMessage< ::pbnet::UnitModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UnitModule >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UNIT*
Arena::CreateMaybeMessage< ::pbnet::UNIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UNIT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_UNIT*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_UNIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_UNIT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_POSITION*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHANGE_ANGLE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHANGE_ANGLE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHANGE_ANGLE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::MATCHING_MEMBER*
Arena::CreateMaybeMessage< ::pbnet::MATCHING_MEMBER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::MATCHING_MEMBER >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_CANCEL*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_CANCEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_CANCEL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_CONFIRM*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_CONFIRM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_CONFIRM >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_SYNC*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_SUCCESS*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_SUCCESS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_SUCCESS >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ENTER_PLAYS*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ENTER_PLAYS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ENTER_PLAYS >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_KCPSESSION*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_KCPSESSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_KCPSESSION >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::drop_item*
Arena::CreateMaybeMessage< ::pbnet::drop_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::drop_item >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CREATE_FAMIL*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CREATE_FAMIL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CREATE_FAMIL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_JOIN_FAMIL*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_JOIN_FAMIL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_JOIN_FAMIL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CEDE_FAMIL*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CEDE_FAMIL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CEDE_FAMIL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_LEAVE_FAMIL*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_LEAVE_FAMIL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_LEAVE_FAMIL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_LIST*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMILSIGN*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMILSIGN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMILSIGN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RANKLIST*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RANKLIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RANKLIST >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ADDFRIEND*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ADDFRIEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ADDFRIEND >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ERASEFRIEND*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ERASEFRIEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ERASEFRIEND >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLESTAT*
Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLESTAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLESTAT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
