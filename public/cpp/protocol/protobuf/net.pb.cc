// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#include "net.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_bag_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_brief_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_family_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_notice_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_db_role_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_db_task_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_db_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mail_db_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MATCHING_MEMBER_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UNIT_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UNIT_POSITION_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitAttribute_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnitModule_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VECTOR2_net_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_chatitem_net_2eproto;
namespace pbnet {
class PROBUFF_NET_MSG_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MSG_RESPONSE> _instance;
} _PROBUFF_NET_MSG_RESPONSE_default_instance_;
class PROBUFF_NET_HEARTBEATDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_HEARTBEAT> _instance;
} _PROBUFF_NET_HEARTBEAT_default_instance_;
class PROBUFF_NET_RECHARGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_RECHARGE> _instance;
} _PROBUFF_NET_RECHARGE_default_instance_;
class PROBUFF_NET_RECHARGE_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_RECHARGE_RESPONSE> _instance;
} _PROBUFF_NET_RECHARGE_RESPONSE_default_instance_;
class PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse> _instance;
} _PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse_default_instance_;
class PROBUFF_NET_DELIVER_GOODS_RECHARGEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_DELIVER_GOODS_RECHARGE> _instance;
} _PROBUFF_NET_DELIVER_GOODS_RECHARGE_default_instance_;
class PROBUFF_NET_ERRORDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ERROR> _instance;
} _PROBUFF_NET_ERROR_default_instance_;
class PROBUFF_NET_GET_TIMEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_GET_TIME> _instance;
} _PROBUFF_NET_GET_TIME_default_instance_;
class PROBUFF_NET_GET_TIME_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_GET_TIME_RESPONSE> _instance;
} _PROBUFF_NET_GET_TIME_RESPONSE_default_instance_;
class PROBUFF_NET_NOTICEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_NOTICE> _instance;
} _PROBUFF_NET_NOTICE_default_instance_;
class PROBUFF_NET_NOTICE_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_NOTICE_RESPONSE> _instance;
} _PROBUFF_NET_NOTICE_RESPONSE_default_instance_;
class PROBUFF_NET_ACOUNT_LOGINDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ACOUNT_LOGIN> _instance;
} _PROBUFF_NET_ACOUNT_LOGIN_default_instance_;
class PROBUFF_NET_ACOUNT_LOGIN_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE> _instance;
} _PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_;
class PROBUFF_NET_ROLE_LOGINDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ROLE_LOGIN> _instance;
} _PROBUFF_NET_ROLE_LOGIN_default_instance_;
class PROBUFF_NET_ROLE_SYNCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ROLE_SYNC> _instance;
} _PROBUFF_NET_ROLE_SYNC_default_instance_;
class PROBUFF_NET_ROLE_SYNC_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ROLE_SYNC_RESPONSE> _instance;
} _PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_;
class PROBUFF_NET_BAG_SYNCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_BAG_SYNC> _instance;
} _PROBUFF_NET_BAG_SYNC_default_instance_;
class PROBUFF_NET_BAG_SYNC_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_BAG_SYNC_RESPONSE> _instance;
} _PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_;
class PROBUFF_NET_BAG_UPDATEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_BAG_UPDATE> _instance;
} _PROBUFF_NET_BAG_UPDATE_default_instance_;
class PROBUFF_NET_BAG_UPDATE_RESPONSE_delitemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem> _instance;
} _PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_default_instance_;
class PROBUFF_NET_BAG_UPDATE_RESPONSE_additemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_BAG_UPDATE_RESPONSE_additem> _instance;
} _PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_default_instance_;
class PROBUFF_NET_BAG_UPDATE_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_BAG_UPDATE_RESPONSE> _instance;
} _PROBUFF_NET_BAG_UPDATE_RESPONSE_default_instance_;
class PROBUFF_NET_CMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_CMD> _instance;
} _PROBUFF_NET_CMD_default_instance_;
class PROBUFF_NET_CHATDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_CHAT> _instance;
} _PROBUFF_NET_CHAT_default_instance_;
class chatitemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<chatitem> _instance;
} _chatitem_default_instance_;
class PROBUFF_NET_CHAT_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_CHAT_RESPONSE> _instance;
} _PROBUFF_NET_CHAT_RESPONSE_default_instance_;
class PROBUFF_NET_SWITCH_LINEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_SWITCH_LINE> _instance;
} _PROBUFF_NET_SWITCH_LINE_default_instance_;
class PROBUFF_NET_SWITCH_LINE_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_SWITCH_LINE_RESPONSE> _instance;
} _PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_LISTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_LIST> _instance;
} _PROBUFF_NET_MAIL_LIST_default_instance_;
class PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse> _instance;
} _PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_default_instance_;
class PROBUFF_NET_MAIL_LIST_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_LIST_RESPONSE> _instance;
} _PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_READDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_READ> _instance;
} _PROBUFF_NET_MAIL_READ_default_instance_;
class PROBUFF_NET_MAIL_READ_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_READ_RESPONSE> _instance;
} _PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_DRAWDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_DRAW> _instance;
} _PROBUFF_NET_MAIL_DRAW_default_instance_;
class PROBUFF_NET_MAIL_DRAW_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_DRAW_RESPONSE> _instance;
} _PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_;
class PROBUFF_NET_MAIL_DELDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_DEL> _instance;
} _PROBUFF_NET_MAIL_DEL_default_instance_;
class PROBUFF_NET_MAIL_DEL_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MAIL_DEL_RESPONSE> _instance;
} _PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_;
class VECTOR2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VECTOR2> _instance;
} _VECTOR2_default_instance_;
class VECTOR3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VECTOR3> _instance;
} _VECTOR3_default_instance_;
class UNIT_POSITIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UNIT_POSITION> _instance;
} _UNIT_POSITION_default_instance_;
class UnitAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnitAttribute> _instance;
} _UnitAttribute_default_instance_;
class UnitModuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnitModule> _instance;
} _UnitModule_default_instance_;
class UNITDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UNIT> _instance;
} _UNIT_default_instance_;
class PROBUFF_NET_SYNC_ATTRIBUTEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_SYNC_ATTRIBUTE> _instance;
} _PROBUFF_NET_SYNC_ATTRIBUTE_default_instance_;
class PROBUFF_NET_SYNC_UNITDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_SYNC_UNIT> _instance;
} _PROBUFF_NET_SYNC_UNIT_default_instance_;
class PROBUFF_NET_ENTER_LEAVE_VIEWDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ENTER_LEAVE_VIEW> _instance;
} _PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_;
class PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse> _instance;
} _PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_default_instance_;
class PROBUFF_NET_SYNC_POSITIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_SYNC_POSITION> _instance;
} _PROBUFF_NET_SYNC_POSITION_default_instance_;
class PROBUFF_NET_CHANGE_ANGLEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_CHANGE_ANGLE> _instance;
} _PROBUFF_NET_CHANGE_ANGLE_default_instance_;
class PROBUFF_NET_MATCHINGDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MATCHING> _instance;
} _PROBUFF_NET_MATCHING_default_instance_;
class MATCHING_MEMBERDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MATCHING_MEMBER> _instance;
} _MATCHING_MEMBER_default_instance_;
class PROBUFF_NET_MATCHING_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MATCHING_RESPONSE> _instance;
} _PROBUFF_NET_MATCHING_RESPONSE_default_instance_;
class PROBUFF_NET_MATCHING_CANCELDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MATCHING_CANCEL> _instance;
} _PROBUFF_NET_MATCHING_CANCEL_default_instance_;
class PROBUFF_NET_MATCHING_CANCEL_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MATCHING_CANCEL_RESPONSE> _instance;
} _PROBUFF_NET_MATCHING_CANCEL_RESPONSE_default_instance_;
class PROBUFF_NET_MEMBER_MATCHING_CANCELDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MEMBER_MATCHING_CANCEL> _instance;
} _PROBUFF_NET_MEMBER_MATCHING_CANCEL_default_instance_;
class PROBUFF_NET_MATCHING_WAITCONFIRMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MATCHING_WAITCONFIRM> _instance;
} _PROBUFF_NET_MATCHING_WAITCONFIRM_default_instance_;
class PROBUFF_NET_MATCHING_CONFIRMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MATCHING_CONFIRM> _instance;
} _PROBUFF_NET_MATCHING_CONFIRM_default_instance_;
class PROBUFF_NET_MATCHING_CONFIRM_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MATCHING_CONFIRM_RESPONSE> _instance;
} _PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_default_instance_;
class PROBUFF_NET_SYNC_MATCHING_CONFIRMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_SYNC_MATCHING_CONFIRM> _instance;
} _PROBUFF_NET_SYNC_MATCHING_CONFIRM_default_instance_;
class PROBUFF_NET_MATCHING_SYNCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MATCHING_SYNC> _instance;
} _PROBUFF_NET_MATCHING_SYNC_default_instance_;
class PROBUFF_NET_MATCHING_SUCCESS_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MATCHING_SUCCESS_RESPONSE> _instance;
} _PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_default_instance_;
class PROBUFF_NET_MATCHING_SUCCESSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_MATCHING_SUCCESS> _instance;
} _PROBUFF_NET_MATCHING_SUCCESS_default_instance_;
class PROBUFF_NET_ENTER_PLAYSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ENTER_PLAYS> _instance;
} _PROBUFF_NET_ENTER_PLAYS_default_instance_;
class PROBUFF_NET_KCPSESSIONDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_KCPSESSION> _instance;
} _PROBUFF_NET_KCPSESSION_default_instance_;
class PROBUFF_NET_KCPSESSION_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_KCPSESSION_RESPONSE> _instance;
} _PROBUFF_NET_KCPSESSION_RESPONSE_default_instance_;
class PROBUFF_NET_TASK_RECEIVE_AWARDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_TASK_RECEIVE_AWARD> _instance;
} _PROBUFF_NET_TASK_RECEIVE_AWARD_default_instance_;
class drop_itemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<drop_item> _instance;
} _drop_item_default_instance_;
class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse> _instance;
} _PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse_default_instance_;
class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE> _instance;
} _PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_default_instance_;
class PROBUFF_NET_CREATE_FAMILDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_CREATE_FAMIL> _instance;
} _PROBUFF_NET_CREATE_FAMIL_default_instance_;
class PROBUFF_NET_CREATE_FAMIL_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_CREATE_FAMIL_RESPONSE> _instance;
} _PROBUFF_NET_CREATE_FAMIL_RESPONSE_default_instance_;
class PROBUFF_NET_JOIN_FAMILDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_JOIN_FAMIL> _instance;
} _PROBUFF_NET_JOIN_FAMIL_default_instance_;
class PROBUFF_NET_JOIN_FAMIL_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_JOIN_FAMIL_RESPONSE> _instance;
} _PROBUFF_NET_JOIN_FAMIL_RESPONSE_default_instance_;
class PROBUFF_NET_RATIFY_JOIN_FAMILDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_RATIFY_JOIN_FAMIL> _instance;
} _PROBUFF_NET_RATIFY_JOIN_FAMIL_default_instance_;
class PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE> _instance;
} _PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE_default_instance_;
class PROBUFF_NET_CEDE_FAMILDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_CEDE_FAMIL> _instance;
} _PROBUFF_NET_CEDE_FAMIL_default_instance_;
class PROBUFF_NET_CEDE_FAMIL_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_CEDE_FAMIL_RESPONSE> _instance;
} _PROBUFF_NET_CEDE_FAMIL_RESPONSE_default_instance_;
class PROBUFF_NET_LEAVE_FAMILDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_LEAVE_FAMIL> _instance;
} _PROBUFF_NET_LEAVE_FAMIL_default_instance_;
class PROBUFF_NET_LEAVE_FAMIL_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_LEAVE_FAMIL_RESPONSE> _instance;
} _PROBUFF_NET_LEAVE_FAMIL_RESPONSE_default_instance_;
class PROBUFF_NET_FAMIL_LISTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_LIST> _instance;
} _PROBUFF_NET_FAMIL_LIST_default_instance_;
class PROBUFF_NET_FAMIL_LIST_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMIL_LIST_RESPONSE> _instance;
} _PROBUFF_NET_FAMIL_LIST_RESPONSE_default_instance_;
class PROBUFF_NET_CHANGE_FAMILNAMEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_CHANGE_FAMILNAME> _instance;
} _PROBUFF_NET_CHANGE_FAMILNAME_default_instance_;
class PROBUFF_NET_CHANGE_FAMILNAME_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE> _instance;
} _PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE_default_instance_;
class PROBUFF_NET_FAMILSIGNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMILSIGN> _instance;
} _PROBUFF_NET_FAMILSIGN_default_instance_;
class PROBUFF_NET_FAMILSIGN_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FAMILSIGN_RESPONSE> _instance;
} _PROBUFF_NET_FAMILSIGN_RESPONSE_default_instance_;
class PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse> _instance;
} _PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse_default_instance_;
class PROBUFF_NET_REWARD_ITEM_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_REWARD_ITEM_RESPONSE> _instance;
} _PROBUFF_NET_REWARD_ITEM_RESPONSE_default_instance_;
class PROBUFF_NET_RANKLISTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_RANKLIST> _instance;
} _PROBUFF_NET_RANKLIST_default_instance_;
class PROBUFF_NET_RANKLIST_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_RANKLIST_RESPONSE> _instance;
} _PROBUFF_NET_RANKLIST_RESPONSE_default_instance_;
class PROBUFF_NET_FRIENDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FRIEND> _instance;
} _PROBUFF_NET_FRIEND_default_instance_;
class PROBUFF_NET_FRIEND_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_FRIEND_RESPONSE> _instance;
} _PROBUFF_NET_FRIEND_RESPONSE_default_instance_;
class PROBUFF_NET_ADDFRIENDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ADDFRIEND> _instance;
} _PROBUFF_NET_ADDFRIEND_default_instance_;
class PROBUFF_NET_ADDFRIEND_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ADDFRIEND_RESPONSE> _instance;
} _PROBUFF_NET_ADDFRIEND_RESPONSE_default_instance_;
class PROBUFF_NET_RATIFY_ADDFRIENDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_RATIFY_ADDFRIEND> _instance;
} _PROBUFF_NET_RATIFY_ADDFRIEND_default_instance_;
class PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE> _instance;
} _PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE_default_instance_;
class PROBUFF_NET_ERASEFRIENDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ERASEFRIEND> _instance;
} _PROBUFF_NET_ERASEFRIEND_default_instance_;
class PROBUFF_NET_ERASEFRIEND_RESPONSEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ERASEFRIEND_RESPONSE> _instance;
} _PROBUFF_NET_ERASEFRIEND_RESPONSE_default_instance_;
class PROBUFF_NET_ROLESTATDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PROBUFF_NET_ROLESTAT> _instance;
} _PROBUFF_NET_ROLESTAT_default_instance_;
}  // namespace pbnet
static void InitDefaultsscc_info_MATCHING_MEMBER_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_MATCHING_MEMBER_default_instance_;
    new (ptr) ::pbnet::MATCHING_MEMBER();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::MATCHING_MEMBER::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MATCHING_MEMBER_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MATCHING_MEMBER_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ACOUNT_LOGIN_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ACOUNT_LOGIN_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ACOUNT_LOGIN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ACOUNT_LOGIN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ACOUNT_LOGIN_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ACOUNT_LOGIN_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ADDFRIEND_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ADDFRIEND_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ADDFRIEND();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ADDFRIEND::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ADDFRIEND_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ADDFRIEND_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ADDFRIEND_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ADDFRIEND_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ADDFRIEND_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ADDFRIEND_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_BAG_SYNC_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_BAG_SYNC_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_BAG_SYNC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_BAG_SYNC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_BAG_SYNC_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_BAG_SYNC_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_BAG_SYNC_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_BAG_SYNC_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_BAG_SYNC_RESPONSE_net_2eproto}, {
      &scc_info_db_bag_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_BAG_UPDATE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_BAG_UPDATE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_BAG_UPDATE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_BAG_UPDATE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_BAG_UPDATE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_BAG_UPDATE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_BAG_UPDATE_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_net_2eproto}, {
      &scc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_net_2eproto.base,
      &scc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_CEDE_FAMIL_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_CEDE_FAMIL_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_CEDE_FAMIL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_CEDE_FAMIL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_CEDE_FAMIL_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_CEDE_FAMIL_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_CEDE_FAMIL_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_CEDE_FAMIL_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_CEDE_FAMIL_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_CEDE_FAMIL_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_CHANGE_ANGLE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_CHANGE_ANGLE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_CHANGE_ANGLE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_CHANGE_ANGLE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_CHANGE_ANGLE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_CHANGE_ANGLE_net_2eproto}, {
      &scc_info_UNIT_POSITION_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_CHANGE_FAMILNAME_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_CHANGE_FAMILNAME_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_CHANGE_FAMILNAME_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_CHANGE_FAMILNAME_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_CHAT_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_CHAT_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_CHAT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_CHAT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_CHAT_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_CHAT_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_CHAT_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_CHAT_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_CHAT_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_CHAT_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_CHAT_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_CHAT_RESPONSE_net_2eproto}, {
      &scc_info_chatitem_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_CMD_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_CMD_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_CMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_CMD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_CMD_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_CMD_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_CREATE_FAMIL_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_CREATE_FAMIL_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_CREATE_FAMIL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_CREATE_FAMIL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_CREATE_FAMIL_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_CREATE_FAMIL_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_CREATE_FAMIL_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_CREATE_FAMIL_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_CREATE_FAMIL_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_CREATE_FAMIL_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_DELIVER_GOODS_RECHARGE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_net_2eproto}, {
      &scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse();
  }
  ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ENTER_LEAVE_VIEW_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ENTER_LEAVE_VIEW_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ENTER_LEAVE_VIEW_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ENTER_PLAYS_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ENTER_PLAYS_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ENTER_PLAYS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ENTER_PLAYS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ENTER_PLAYS_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ENTER_PLAYS_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ERASEFRIEND_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ERASEFRIEND_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ERASEFRIEND();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ERASEFRIEND::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ERASEFRIEND_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ERASEFRIEND_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ERASEFRIEND_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ERASEFRIEND_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ERASEFRIEND_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ERASEFRIEND_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ERROR_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ERROR_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ERROR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ERROR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ERROR_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ERROR_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMILSIGN_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMILSIGN_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMILSIGN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMILSIGN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMILSIGN_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMILSIGN_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMILSIGN_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMILSIGN_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMILSIGN_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMILSIGN_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_LIST_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_LIST_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_LIST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_LIST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FAMIL_LIST_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_LIST_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FAMIL_LIST_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FAMIL_LIST_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_FAMIL_LIST_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_FAMIL_LIST_RESPONSE_net_2eproto}, {
      &scc_info_db_family_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_FRIEND_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FRIEND_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FRIEND();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FRIEND::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_FRIEND_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_FRIEND_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_FRIEND_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_FRIEND_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_FRIEND_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_FRIEND_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_FRIEND_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_FRIEND_RESPONSE_net_2eproto}, {
      &scc_info_db_brief_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_GET_TIME_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_GET_TIME_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_GET_TIME();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_GET_TIME::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_GET_TIME_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_GET_TIME_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_GET_TIME_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_GET_TIME_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_GET_TIME_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_GET_TIME_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_HEARTBEAT_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_HEARTBEAT_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_HEARTBEAT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_HEARTBEAT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_HEARTBEAT_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_HEARTBEAT_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_JOIN_FAMIL_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_JOIN_FAMIL_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_JOIN_FAMIL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_JOIN_FAMIL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_JOIN_FAMIL_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_JOIN_FAMIL_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_JOIN_FAMIL_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_JOIN_FAMIL_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_JOIN_FAMIL_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_JOIN_FAMIL_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_KCPSESSION_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_KCPSESSION_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_KCPSESSION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_KCPSESSION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_KCPSESSION_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_KCPSESSION_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_KCPSESSION_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_KCPSESSION_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_KCPSESSION_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_KCPSESSION_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_LEAVE_FAMIL_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_LEAVE_FAMIL_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_LEAVE_FAMIL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_LEAVE_FAMIL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_LEAVE_FAMIL_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_LEAVE_FAMIL_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_LEAVE_FAMIL_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_LEAVE_FAMIL_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_LEAVE_FAMIL_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_LEAVE_FAMIL_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_DEL_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_DEL_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_DEL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_DEL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MAIL_DEL_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_DEL_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_DEL_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MAIL_DEL_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_DEL_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_DRAW_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_DRAW_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_DRAW();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_DRAW::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MAIL_DRAW_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_DRAW_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_DRAW_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MAIL_DRAW_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_DRAW_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_LIST_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_LIST_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_LIST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_LIST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MAIL_LIST_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_LIST_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_net_2eproto}, {
      &scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse();
  }
  ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_net_2eproto}, {
      &scc_info_mail_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_READ_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_READ_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_READ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_READ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MAIL_READ_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_READ_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MAIL_READ_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MAIL_READ_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MAIL_READ_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MATCHING_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MATCHING_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MATCHING();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MATCHING::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MATCHING_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MATCHING_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MATCHING_CANCEL_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MATCHING_CANCEL_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MATCHING_CANCEL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MATCHING_CANCEL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MATCHING_CANCEL_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MATCHING_CANCEL_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MATCHING_CANCEL_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MATCHING_CANCEL_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MATCHING_CANCEL_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MATCHING_CANCEL_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MATCHING_CONFIRM_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MATCHING_CONFIRM_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MATCHING_CONFIRM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MATCHING_CONFIRM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MATCHING_CONFIRM_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MATCHING_CONFIRM_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MATCHING_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MATCHING_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MATCHING_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MATCHING_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MATCHING_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MATCHING_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MATCHING_SUCCESS_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MATCHING_SUCCESS_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MATCHING_SUCCESS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MATCHING_SUCCESS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_MATCHING_SUCCESS_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_MATCHING_SUCCESS_net_2eproto}, {
      &scc_info_MATCHING_MEMBER_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MATCHING_SYNC_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MATCHING_SYNC_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MATCHING_SYNC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MATCHING_SYNC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_MATCHING_SYNC_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_MATCHING_SYNC_net_2eproto}, {
      &scc_info_MATCHING_MEMBER_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_MATCHING_WAITCONFIRM_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MATCHING_WAITCONFIRM_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MATCHING_WAITCONFIRM_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MATCHING_WAITCONFIRM_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MEMBER_MATCHING_CANCEL_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MEMBER_MATCHING_CANCEL_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MEMBER_MATCHING_CANCEL_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MEMBER_MATCHING_CANCEL_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_MSG_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_MSG_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_MSG_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_MSG_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_MSG_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_MSG_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_NOTICE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_NOTICE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_NOTICE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_NOTICE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_NOTICE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_NOTICE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_NOTICE_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_NOTICE_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_NOTICE_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_NOTICE_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_NOTICE_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_NOTICE_RESPONSE_net_2eproto}, {
      &scc_info_db_notice_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_RANKLIST_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_RANKLIST_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_RANKLIST();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_RANKLIST::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_RANKLIST_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_RANKLIST_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_RANKLIST_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_RANKLIST_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_RANKLIST_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_RANKLIST_RESPONSE_net_2eproto}, {
      &scc_info_db_brief_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_RATIFY_ADDFRIEND_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_RATIFY_ADDFRIEND_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_RATIFY_ADDFRIEND_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_RATIFY_ADDFRIEND_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_RATIFY_JOIN_FAMIL_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_RATIFY_JOIN_FAMIL_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_RATIFY_JOIN_FAMIL_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_RATIFY_JOIN_FAMIL_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_RECHARGE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_RECHARGE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_RECHARGE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_RECHARGE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_RECHARGE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_RECHARGE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_RECHARGE_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_RECHARGE_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_RECHARGE_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_RECHARGE_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_REWARD_ITEM_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_net_2eproto}, {
      &scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse();
  }
  ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ROLESTAT_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ROLESTAT_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ROLESTAT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ROLESTAT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ROLESTAT_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ROLESTAT_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ROLE_LOGIN_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ROLE_LOGIN_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ROLE_LOGIN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ROLE_LOGIN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ROLE_LOGIN_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ROLE_LOGIN_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ROLE_SYNC_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ROLE_SYNC_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ROLE_SYNC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ROLE_SYNC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_ROLE_SYNC_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_ROLE_SYNC_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_ROLE_SYNC_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PROBUFF_NET_ROLE_SYNC_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PROBUFF_NET_ROLE_SYNC_RESPONSE_net_2eproto}, {
      &scc_info_db_role_db_2eproto.base,
      &scc_info_db_bag_db_2eproto.base,
      &scc_info_db_task_db_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_SWITCH_LINE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_SWITCH_LINE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_SWITCH_LINE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_SWITCH_LINE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_SWITCH_LINE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_SWITCH_LINE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_SWITCH_LINE_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_SWITCH_LINE_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_SWITCH_LINE_RESPONSE_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_SYNC_ATTRIBUTE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_SYNC_ATTRIBUTE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_SYNC_ATTRIBUTE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_SYNC_ATTRIBUTE_net_2eproto}, {
      &scc_info_UnitModule_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_SYNC_MATCHING_CONFIRM_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_SYNC_MATCHING_CONFIRM_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_SYNC_MATCHING_CONFIRM_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_SYNC_MATCHING_CONFIRM_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_SYNC_POSITION_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_SYNC_POSITION_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_SYNC_POSITION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_SYNC_POSITION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_SYNC_POSITION_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_SYNC_POSITION_net_2eproto}, {
      &scc_info_PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse();
  }
  ::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_net_2eproto}, {
      &scc_info_UNIT_POSITION_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_SYNC_UNIT_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_SYNC_UNIT_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_SYNC_UNIT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_SYNC_UNIT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_SYNC_UNIT_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_SYNC_UNIT_net_2eproto}, {
      &scc_info_UNIT_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_net_2eproto}, {}};

static void InitDefaultsscc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_net_2eproto}, {
      &scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse_net_2eproto.base,}};

static void InitDefaultsscc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse_default_instance_;
    new (ptr) ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse();
  }
  ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse_net_2eproto}, {}};

static void InitDefaultsscc_info_UNIT_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_UNIT_default_instance_;
    new (ptr) ::pbnet::UNIT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::UNIT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UNIT_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UNIT_net_2eproto}, {
      &scc_info_UNIT_POSITION_net_2eproto.base,
      &scc_info_UnitModule_net_2eproto.base,}};

static void InitDefaultsscc_info_UNIT_POSITION_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_UNIT_POSITION_default_instance_;
    new (ptr) ::pbnet::UNIT_POSITION();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::UNIT_POSITION::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UNIT_POSITION_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UNIT_POSITION_net_2eproto}, {
      &scc_info_VECTOR2_net_2eproto.base,}};

static void InitDefaultsscc_info_UnitAttribute_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_UnitAttribute_default_instance_;
    new (ptr) ::pbnet::UnitAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::UnitAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitAttribute_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnitAttribute_net_2eproto}, {}};

static void InitDefaultsscc_info_UnitModule_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_UnitModule_default_instance_;
    new (ptr) ::pbnet::UnitModule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::UnitModule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnitModule_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnitModule_net_2eproto}, {
      &scc_info_UnitAttribute_net_2eproto.base,}};

static void InitDefaultsscc_info_VECTOR2_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_VECTOR2_default_instance_;
    new (ptr) ::pbnet::VECTOR2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::VECTOR2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VECTOR2_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VECTOR2_net_2eproto}, {}};

static void InitDefaultsscc_info_VECTOR3_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_VECTOR3_default_instance_;
    new (ptr) ::pbnet::VECTOR3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::VECTOR3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VECTOR3_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VECTOR3_net_2eproto}, {}};

static void InitDefaultsscc_info_chatitem_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_chatitem_default_instance_;
    new (ptr) ::pbnet::chatitem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::chatitem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_chatitem_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_chatitem_net_2eproto}, {}};

static void InitDefaultsscc_info_drop_item_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnet::_drop_item_default_instance_;
    new (ptr) ::pbnet::drop_item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnet::drop_item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_drop_item_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_drop_item_net_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_net_2eproto[98];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_net_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_net_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_net_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MSG_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MSG_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MSG_RESPONSE, m_msg_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_HEARTBEAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE, m_rechargeid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, m_rechargeid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, m_stat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE, m_orderid_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, m_rechargeid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, m_orderid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, m_gold_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE, m_items_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERROR, m_errmessage_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE, m_utc_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_NOTICE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_NOTICE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_NOTICE_RESPONSE, m_notices_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, m_area_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, m_account_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN, m_password_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, m_area_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, m_roleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, m_session_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, m_account_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, m_gatewayid_),
  3,
  2,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, m_roleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, m_session_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, m_iscreate_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, m_area_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_LOGIN, m_gatewayid_),
  1,
  0,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, m_role_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, m_bag_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE, m_task_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE, m_bag_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, m_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, m_count_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, m_delitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, m_delnostackitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, m_additems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE, m_addnostackitems_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CMD, m_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, m_channelid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT, m_content_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, m_roleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, m_rolename_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, m_content_),
  PROTOBUF_FIELD_OFFSET(::pbnet::chatitem, m_utc_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, m_channelid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, m_chatlist_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHAT_RESPONSE, m_stat_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE, m_line_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, m_line_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE, m_stat_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE, m_mail_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ, m_mailid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, m_mailid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE, m_stat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW, m_mailid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, m_mailid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE, m_stat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL, m_mailid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, m_mailid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE, m_stat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, m_x_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR2, m_y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, m_x_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, m_y_),
  PROTOBUF_FIELD_OFFSET(::pbnet::VECTOR3, m_z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, m_position_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, m_angle_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT_POSITION, m_speed_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitAttribute, m_value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, m_mtype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UnitModule, m_modules_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, m_position_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, m_modules_),
  PROTOBUF_FIELD_OFFSET(::pbnet::UNIT, m_stat_),
  2,
  1,
  0,
  ~0u,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE, m_modules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_UNIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_UNIT, m_units_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, m_isenter_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW, m_units_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_POSITION, m_position_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_ANGLE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_ANGLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_ANGLE, m_position_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING, m_tid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, m_id_),
  PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, m_name_),
  PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, m_lv_),
  PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, m_begmatch_),
  PROTOBUF_FIELD_OFFSET(::pbnet::MATCHING_MEMBER, m_isconfirm_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_RESPONSE, m_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL, m_roomid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE, m_stat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, m_canceltype_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL, m_cancelmember_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM, m_roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM, m_roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, m_roomid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, m_stat_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, m_roomid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM, m_roleid_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, m_roomid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SYNC, m_member_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, m_roomid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, m_playsactorid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, m_roomid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, m_member_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_MATCHING_SUCCESS, m_dataid_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_PLAYS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_PLAYS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_PLAYS, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ENTER_PLAYS, m_roomid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, m_serverid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, m_uip_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, m_uport_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION, m_conv_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE, m_kcpsession_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD, m_taskid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, m_item_),
  PROTOBUF_FIELD_OFFSET(::pbnet::drop_item, m_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, m_taskid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, m_stat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, m_drop_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CREATE_FAMIL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CREATE_FAMIL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CREATE_FAMIL, m_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE, m_stat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_JOIN_FAMIL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_JOIN_FAMIL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_JOIN_FAMIL, m_familid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_JOIN_FAMIL, m_apply_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE, m_stat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL, m_roleid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL, m_ratify_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE, m_stat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CEDE_FAMIL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CEDE_FAMIL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CEDE_FAMIL, m_roleid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE, m_stat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_LEAVE_FAMIL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_LEAVE_FAMIL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_LEAVE_FAMIL, m_familid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE, m_stat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST, m_familid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, m_familid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE, m_family_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME, m_familid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME, m_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE, m_stat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMILSIGN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMILSIGN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMILSIGN, m_familid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE, m_stat_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE, m_items_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, m_iscross_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, m_page_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST, m_everynum_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, m_type_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, m_items_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, m_page_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, m_everynum_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE, m_count_),
  0,
  ~0u,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RESPONSE, m_friends_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_FRIEND_RESPONSE, m_applyfriends_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ADDFRIEND, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ADDFRIEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ADDFRIEND, m_friedid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE, m_friedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE, m_stat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND, m_friedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND, m_ratify_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE, m_friedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE, m_ratify_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE, m_stat_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERASEFRIEND, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERASEFRIEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERASEFRIEND, m_friedid_),
  0,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE, m_friedid_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE, m_stat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, m_stat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, m_logicstat_),
  PROTOBUF_FIELD_OFFSET(::pbnet::PROBUFF_NET_ROLESTAT, m_roleid_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::pbnet::PROBUFF_NET_MSG_RESPONSE)},
  { 7, -1, sizeof(::pbnet::PROBUFF_NET_HEARTBEAT)},
  { 12, 18, sizeof(::pbnet::PROBUFF_NET_RECHARGE)},
  { 19, 27, sizeof(::pbnet::PROBUFF_NET_RECHARGE_RESPONSE)},
  { 30, 37, sizeof(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse)},
  { 39, 48, sizeof(::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE)},
  { 52, 58, sizeof(::pbnet::PROBUFF_NET_ERROR)},
  { 59, -1, sizeof(::pbnet::PROBUFF_NET_GET_TIME)},
  { 64, 70, sizeof(::pbnet::PROBUFF_NET_GET_TIME_RESPONSE)},
  { 71, -1, sizeof(::pbnet::PROBUFF_NET_NOTICE)},
  { 76, -1, sizeof(::pbnet::PROBUFF_NET_NOTICE_RESPONSE)},
  { 82, 90, sizeof(::pbnet::PROBUFF_NET_ACOUNT_LOGIN)},
  { 93, 103, sizeof(::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)},
  { 108, 118, sizeof(::pbnet::PROBUFF_NET_ROLE_LOGIN)},
  { 123, -1, sizeof(::pbnet::PROBUFF_NET_ROLE_SYNC)},
  { 128, 136, sizeof(::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE)},
  { 139, -1, sizeof(::pbnet::PROBUFF_NET_BAG_SYNC)},
  { 144, 150, sizeof(::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE)},
  { 151, -1, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE)},
  { 156, 163, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem)},
  { 165, 172, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem)},
  { 174, -1, sizeof(::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE)},
  { 183, 189, sizeof(::pbnet::PROBUFF_NET_CMD)},
  { 190, 198, sizeof(::pbnet::PROBUFF_NET_CHAT)},
  { 201, 210, sizeof(::pbnet::chatitem)},
  { 214, 223, sizeof(::pbnet::PROBUFF_NET_CHAT_RESPONSE)},
  { 227, 233, sizeof(::pbnet::PROBUFF_NET_SWITCH_LINE)},
  { 234, 241, sizeof(::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE)},
  { 243, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST)},
  { 248, 255, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse)},
  { 257, -1, sizeof(::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE)},
  { 263, 269, sizeof(::pbnet::PROBUFF_NET_MAIL_READ)},
  { 270, 277, sizeof(::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE)},
  { 279, 285, sizeof(::pbnet::PROBUFF_NET_MAIL_DRAW)},
  { 286, 293, sizeof(::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE)},
  { 295, 301, sizeof(::pbnet::PROBUFF_NET_MAIL_DEL)},
  { 302, 309, sizeof(::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE)},
  { 311, 318, sizeof(::pbnet::VECTOR2)},
  { 320, 328, sizeof(::pbnet::VECTOR3)},
  { 331, 340, sizeof(::pbnet::UNIT_POSITION)},
  { 344, 351, sizeof(::pbnet::UnitAttribute)},
  { 353, 360, sizeof(::pbnet::UnitModule)},
  { 362, 372, sizeof(::pbnet::UNIT)},
  { 377, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE)},
  { 383, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_UNIT)},
  { 389, 396, sizeof(::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW)},
  { 398, 405, sizeof(::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse)},
  { 407, -1, sizeof(::pbnet::PROBUFF_NET_SYNC_POSITION)},
  { 413, 419, sizeof(::pbnet::PROBUFF_NET_CHANGE_ANGLE)},
  { 420, 427, sizeof(::pbnet::PROBUFF_NET_MATCHING)},
  { 429, 439, sizeof(::pbnet::MATCHING_MEMBER)},
  { 444, 450, sizeof(::pbnet::PROBUFF_NET_MATCHING_RESPONSE)},
  { 451, 458, sizeof(::pbnet::PROBUFF_NET_MATCHING_CANCEL)},
  { 460, 467, sizeof(::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE)},
  { 469, 477, sizeof(::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL)},
  { 480, 487, sizeof(::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM)},
  { 489, 496, sizeof(::pbnet::PROBUFF_NET_MATCHING_CONFIRM)},
  { 498, 506, sizeof(::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)},
  { 509, 517, sizeof(::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM)},
  { 520, 528, sizeof(::pbnet::PROBUFF_NET_MATCHING_SYNC)},
  { 531, 539, sizeof(::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)},
  { 542, 551, sizeof(::pbnet::PROBUFF_NET_MATCHING_SUCCESS)},
  { 555, 562, sizeof(::pbnet::PROBUFF_NET_ENTER_PLAYS)},
  { 564, 573, sizeof(::pbnet::PROBUFF_NET_KCPSESSION)},
  { 577, 583, sizeof(::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE)},
  { 584, 590, sizeof(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD)},
  { 591, 598, sizeof(::pbnet::drop_item)},
  { 600, 607, sizeof(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse)},
  { 609, 617, sizeof(::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)},
  { 620, 626, sizeof(::pbnet::PROBUFF_NET_CREATE_FAMIL)},
  { 627, 633, sizeof(::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE)},
  { 634, 641, sizeof(::pbnet::PROBUFF_NET_JOIN_FAMIL)},
  { 643, 649, sizeof(::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE)},
  { 650, 657, sizeof(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL)},
  { 659, 665, sizeof(::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)},
  { 666, 672, sizeof(::pbnet::PROBUFF_NET_CEDE_FAMIL)},
  { 673, 679, sizeof(::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE)},
  { 680, 686, sizeof(::pbnet::PROBUFF_NET_LEAVE_FAMIL)},
  { 687, 693, sizeof(::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE)},
  { 694, 700, sizeof(::pbnet::PROBUFF_NET_FAMIL_LIST)},
  { 701, 708, sizeof(::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE)},
  { 710, 717, sizeof(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME)},
  { 719, 725, sizeof(::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)},
  { 726, 732, sizeof(::pbnet::PROBUFF_NET_FAMILSIGN)},
  { 733, 739, sizeof(::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE)},
  { 740, 747, sizeof(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse)},
  { 749, -1, sizeof(::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE)},
  { 755, 764, sizeof(::pbnet::PROBUFF_NET_RANKLIST)},
  { 768, 778, sizeof(::pbnet::PROBUFF_NET_RANKLIST_RESPONSE)},
  { 783, -1, sizeof(::pbnet::PROBUFF_NET_FRIEND)},
  { 788, -1, sizeof(::pbnet::PROBUFF_NET_FRIEND_RESPONSE)},
  { 795, 801, sizeof(::pbnet::PROBUFF_NET_ADDFRIEND)},
  { 802, 809, sizeof(::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE)},
  { 811, 818, sizeof(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND)},
  { 820, 828, sizeof(::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)},
  { 831, 837, sizeof(::pbnet::PROBUFF_NET_ERASEFRIEND)},
  { 838, 845, sizeof(::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE)},
  { 847, 855, sizeof(::pbnet::PROBUFF_NET_ROLESTAT)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MSG_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_HEARTBEAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_RECHARGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_RECHARGE_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_DELIVER_GOODS_RECHARGE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ERROR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_GET_TIME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_GET_TIME_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_NOTICE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_NOTICE_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ACOUNT_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ROLE_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ROLE_SYNC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_BAG_SYNC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_BAG_UPDATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_BAG_UPDATE_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_CMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_CHAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_chatitem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_CHAT_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_SWITCH_LINE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_SWITCH_LINE_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_LIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_LIST_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_READ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_READ_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_DRAW_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_DRAW_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_DEL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MAIL_DEL_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_VECTOR2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_VECTOR3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_UNIT_POSITION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_UnitAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_UnitModule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_UNIT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_SYNC_ATTRIBUTE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_SYNC_UNIT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ENTER_LEAVE_VIEW_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_SYNC_POSITION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_CHANGE_ANGLE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MATCHING_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_MATCHING_MEMBER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MATCHING_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MATCHING_CANCEL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MATCHING_CANCEL_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MEMBER_MATCHING_CANCEL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MATCHING_WAITCONFIRM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MATCHING_CONFIRM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_SYNC_MATCHING_CONFIRM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MATCHING_SYNC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_MATCHING_SUCCESS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ENTER_PLAYS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_KCPSESSION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_KCPSESSION_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_drop_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_CREATE_FAMIL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_CREATE_FAMIL_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_JOIN_FAMIL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_JOIN_FAMIL_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_RATIFY_JOIN_FAMIL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_CEDE_FAMIL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_CEDE_FAMIL_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_LEAVE_FAMIL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_LEAVE_FAMIL_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_LIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMIL_LIST_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_CHANGE_FAMILNAME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMILSIGN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FAMILSIGN_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_REWARD_ITEM_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_RANKLIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_RANKLIST_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FRIEND_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_FRIEND_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ADDFRIEND_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ADDFRIEND_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_RATIFY_ADDFRIEND_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ERASEFRIEND_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ERASEFRIEND_RESPONSE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbnet::_PROBUFF_NET_ROLESTAT_default_instance_),
};

const char descriptor_table_protodef_net_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnet.proto\022\005pbnet\032\010db.proto\"8\n\030PROBUFF_"
  "NET_MSG_RESPONSE\022\022\n\005m_msg\030\001 \001(\tH\000\210\001\001B\010\n\006"
  "_m_msg\"\027\n\025PROBUFF_NET_HEARTBEAT\"B\n\024PROBU"
  "FF_NET_RECHARGE\022\031\n\014m_rechargeid\030\001 \001(\005H\000\210"
  "\001\001B\017\n\r_m_rechargeid\"\206\002\n\035PROBUFF_NET_RECH"
  "ARGE_RESPONSE\022\031\n\014m_rechargeid\030\001 \001(\005H\000\210\001\001"
  "\022\?\n\006m_stat\030\002 \001(\0162*.pbnet.PROBUFF_NET_REC"
  "HARGE_RESPONSE.EstatH\001\210\001\001\022\026\n\tm_orderid\030\003"
  " \001(\tH\002\210\001\001\"G\n\005Estat\022\021\n\rEstat_Success\020\000\022\027\n"
  "\023Estat_NotRechargeId\020\001\022\022\n\016Estat_MaxCount"
  "\020\002B\017\n\r_m_rechargeidB\t\n\007_m_statB\014\n\n_m_ord"
  "erid\"\215\002\n\"PROBUFF_NET_DELIVER_GOODS_RECHA"
  "RGE\022\031\n\014m_rechargeid\030\001 \001(\005H\000\210\001\001\022\026\n\tm_orde"
  "rid\030\002 \001(\tH\001\210\001\001\022\023\n\006m_gold\030\003 \001(\005H\002\210\001\001\022F\n\007m"
  "_items\030\004 \003(\01325.pbnet.PROBUFF_NET_DELIVER"
  "_GOODS_RECHARGE.MItemsEntry\032-\n\013MItemsEnt"
  "ry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001B\017\n\r_m"
  "_rechargeidB\014\n\n_m_orderidB\t\n\007_m_gold\"\?\n\021"
  "PROBUFF_NET_ERROR\022\031\n\014m_errmessage\030\002 \001(\tH"
  "\000\210\001\001B\017\n\r_m_errmessage\"\026\n\024PROBUFF_NET_GET"
  "_TIME\"=\n\035PROBUFF_NET_GET_TIME_RESPONSE\022\022"
  "\n\005m_utc\030\001 \001(\005H\000\210\001\001B\010\n\006_m_utc\"\024\n\022PROBUFF_"
  "NET_NOTICE\"A\n\033PROBUFF_NET_NOTICE_RESPONS"
  "E\022\"\n\tm_notices\030\001 \003(\0132\017.pbdb.db_notice\"\210\001"
  "\n\030PROBUFF_NET_ACOUNT_LOGIN\022\023\n\006m_area\030\001 \001"
  "(\005H\000\210\001\001\022\026\n\tm_account\030\002 \001(\tH\001\210\001\001\022\027\n\nm_pas"
  "sword\030\003 \001(\tH\002\210\001\001B\t\n\007_m_areaB\014\n\n_m_accoun"
  "tB\r\n\013_m_password\"\335\001\n!PROBUFF_NET_ACOUNT_"
  "LOGIN_RESPONSE\022\023\n\006m_area\030\001 \001(\005H\000\210\001\001\022\025\n\010m"
  "_roleid\030\002 \001(\003H\001\210\001\001\022\026\n\tm_session\030\003 \001(\tH\002\210"
  "\001\001\022\026\n\tm_account\030\004 \001(\tH\003\210\001\001\022\030\n\013m_gatewayi"
  "d\030\005 \001(\005H\004\210\001\001B\t\n\007_m_areaB\013\n\t_m_roleidB\014\n\n"
  "_m_sessionB\014\n\n_m_accountB\016\n\014_m_gatewayid"
  "\"\324\001\n\026PROBUFF_NET_ROLE_LOGIN\022\025\n\010m_roleid\030"
  "\001 \001(\003H\000\210\001\001\022\026\n\tm_session\030\002 \001(\tH\001\210\001\001\022\027\n\nm_"
  "iscreate\030\003 \001(\010H\002\210\001\001\022\023\n\006m_area\030\004 \001(\005H\003\210\001\001"
  "\022\030\n\013m_gatewayid\030\005 \001(\005H\004\210\001\001B\013\n\t_m_roleidB"
  "\014\n\n_m_sessionB\r\n\013_m_iscreateB\t\n\007_m_areaB"
  "\016\n\014_m_gatewayid\"\027\n\025PROBUFF_NET_ROLE_SYNC"
  "\"\252\001\n\036PROBUFF_NET_ROLE_SYNC_RESPONSE\022\"\n\006m"
  "_role\030\001 \001(\0132\r.pbdb.db_roleH\000\210\001\001\022 \n\005m_bag"
  "\030\002 \001(\0132\014.pbdb.db_bagH\001\210\001\001\022\"\n\006m_task\030\003 \001("
  "\0132\r.pbdb.db_taskH\002\210\001\001B\t\n\007_m_roleB\010\n\006_m_b"
  "agB\t\n\007_m_task\"\026\n\024PROBUFF_NET_BAG_SYNC\"K\n"
  "\035PROBUFF_NET_BAG_SYNC_RESPONSE\022 \n\005m_bag\030"
  "\001 \001(\0132\014.pbdb.db_bagH\000\210\001\001B\010\n\006_m_bag\"\030\n\026PR"
  "OBUFF_NET_BAG_UPDATE\"\361\002\n\037PROBUFF_NET_BAG"
  "_UPDATE_RESPONSE\022B\n\nm_delitems\030\001 \003(\0132..p"
  "bnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.del"
  "item\022\031\n\021m_delnostackitems\030\002 \003(\005\022B\n\nm_add"
  "items\030\003 \003(\0132..pbnet.PROBUFF_NET_BAG_UPDA"
  "TE_RESPONSE.additem\022\031\n\021m_addnostackitems"
  "\030\004 \003(\005\032G\n\007delitem\022\021\n\004m_id\030\001 \001(\005H\000\210\001\001\022\024\n\007"
  "m_count\030\002 \001(\005H\001\210\001\001B\007\n\005_m_idB\n\n\010_m_count\032"
  "G\n\007additem\022\021\n\004m_id\030\001 \001(\005H\000\210\001\001\022\024\n\007m_count"
  "\030\002 \001(\005H\001\210\001\001B\007\n\005_m_idB\n\n\010_m_count\"/\n\017PROB"
  "UFF_NET_CMD\022\022\n\005m_cmd\030\001 \001(\tH\000\210\001\001B\010\n\006_m_cm"
  "d\"\202\001\n\020PROBUFF_NET_CHAT\022\023\n\006m_type\030\001 \001(\005H\000"
  "\210\001\001\022\030\n\013m_channelid\030\002 \001(\005H\001\210\001\001\022\026\n\tm_conte"
  "nt\030\003 \001(\tH\002\210\001\001B\t\n\007_m_typeB\016\n\014_m_channelid"
  "B\014\n\n_m_content\"\232\001\n\010chatitem\022\025\n\010m_roleid\030"
  "\001 \001(\003H\000\210\001\001\022\027\n\nm_rolename\030\002 \001(\tH\001\210\001\001\022\026\n\tm"
  "_content\030\003 \001(\tH\002\210\001\001\022\022\n\005m_utc\030\004 \001(\005H\003\210\001\001B"
  "\013\n\t_m_roleidB\r\n\013_m_rolenameB\014\n\n_m_conten"
  "tB\010\n\006_m_utc\"\252\001\n\031PROBUFF_NET_CHAT_RESPONS"
  "E\022\023\n\006m_type\030\001 \001(\005H\000\210\001\001\022\030\n\013m_channelid\030\002 "
  "\001(\005H\001\210\001\001\022#\n\nm_chatlist\030\003 \003(\0132\017.pbnet.cha"
  "titem\022\023\n\006m_stat\030\004 \001(\010H\002\210\001\001B\t\n\007_m_typeB\016\n"
  "\014_m_channelidB\t\n\007_m_stat\"9\n\027PROBUFF_NET_"
  "SWITCH_LINE\022\023\n\006m_line\030\001 \001(\005H\000\210\001\001B\t\n\007_m_l"
  "ine\"b\n PROBUFF_NET_SWITCH_LINE_RESPONSE\022"
  "\023\n\006m_line\030\001 \001(\005H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\010H\001\210\001"
  "\001B\t\n\007_m_lineB\t\n\007_m_stat\"\027\n\025PROBUFF_NET_M"
  "AIL_LIST\"\234\001\n\036PROBUFF_NET_MAIL_LIST_RESPO"
  "NSE\022@\n\006m_mail\030\001 \003(\01320.pbnet.PROBUFF_NET_"
  "MAIL_LIST_RESPONSE.MMailEntry\0328\n\nMMailEn"
  "try\022\013\n\003key\030\001 \001(\005\022\031\n\005value\030\002 \001(\0132\n.pbdb.m"
  "ail:\0028\001\";\n\025PROBUFF_NET_MAIL_READ\022\025\n\010m_ma"
  "ilid\030\001 \001(\003H\000\210\001\001B\013\n\t_m_mailid\"d\n\036PROBUFF_"
  "NET_MAIL_READ_RESPONSE\022\025\n\010m_mailid\030\001 \001(\003"
  "H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\010H\001\210\001\001B\013\n\t_m_mailidB"
  "\t\n\007_m_stat\";\n\025PROBUFF_NET_MAIL_DRAW\022\025\n\010m"
  "_mailid\030\001 \001(\003H\000\210\001\001B\013\n\t_m_mailid\"d\n\036PROBU"
  "FF_NET_MAIL_DRAW_RESPONSE\022\025\n\010m_mailid\030\001 "
  "\001(\003H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\010H\001\210\001\001B\013\n\t_m_mail"
  "idB\t\n\007_m_stat\":\n\024PROBUFF_NET_MAIL_DEL\022\025\n"
  "\010m_mailid\030\001 \001(\003H\000\210\001\001B\013\n\t_m_mailid\"c\n\035PRO"
  "BUFF_NET_MAIL_DEL_RESPONSE\022\025\n\010m_mailid\030\001"
  " \001(\003H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\010H\001\210\001\001B\013\n\t_m_mai"
  "lidB\t\n\007_m_stat\"=\n\007VECTOR2\022\020\n\003m_x\030\001 \001(\005H\000"
  "\210\001\001\022\020\n\003m_y\030\002 \001(\005H\001\210\001\001B\006\n\004_m_xB\006\n\004_m_y\"W\n"
  "\007VECTOR3\022\020\n\003m_x\030\001 \001(\005H\000\210\001\001\022\020\n\003m_y\030\002 \001(\005H"
  "\001\210\001\001\022\020\n\003m_z\030\003 \001(\005H\002\210\001\001B\006\n\004_m_xB\006\n\004_m_yB\006"
  "\n\004_m_z\"\247\001\n\rUNIT_POSITION\022\021\n\004m_id\030\002 \001(\003H\000"
  "\210\001\001\022\'\n\nm_position\030\003 \001(\0132\016.pbnet.VECTOR2H"
  "\001\210\001\001\022\024\n\007m_angle\030\004 \001(\005H\002\210\001\001\022\024\n\007m_speed\030\005 "
  "\001(\005H\003\210\001\001B\007\n\005_m_idB\r\n\013_m_positionB\n\n\010_m_a"
  "ngleB\n\n\010_m_speed\"Q\n\rUnitAttribute\022\023\n\006m_t"
  "ype\030\001 \001(\005H\000\210\001\001\022\024\n\007m_value\030\002 \001(\003H\001\210\001\001B\t\n\007"
  "_m_typeB\n\n\010_m_value\"W\n\nUnitModule\022\024\n\007m_m"
  "type\030\001 \001(\005H\000\210\001\001\022\'\n\tm_modules\030\002 \003(\0132\024.pbn"
  "et.UnitAttributeB\n\n\010_m_mtype\"\346\001\n\004UNIT\022!\n"
  "\006m_type\030\001 \001(\0162\014.pbnet.eunitH\000\210\001\001\022\021\n\004m_id"
  "\030\002 \001(\003H\001\210\001\001\022-\n\nm_position\030\003 \001(\0132\024.pbnet."
  "UNIT_POSITIONH\002\210\001\001\022$\n\tm_modules\030\004 \003(\0132\021."
  "pbnet.UnitModule\022%\n\006m_stat\030\005 \001(\0162\020.pbnet"
  ".eunitstatH\003\210\001\001B\t\n\007_m_typeB\007\n\005_m_idB\r\n\013_"
  "m_positionB\t\n\007_m_stat\"B\n\032PROBUFF_NET_SYN"
  "C_ATTRIBUTE\022$\n\tm_modules\030\001 \003(\0132\021.pbnet.U"
  "nitModule\"5\n\025PROBUFF_NET_SYNC_UNIT\022\034\n\007m_"
  "units\030\001 \003(\0132\013.pbnet.UNIT\"U\n\034PROBUFF_NET_"
  "ENTER_LEAVE_VIEW\022\026\n\tm_isenter\030\001 \001(\010H\000\210\001\001"
  "\022\017\n\007m_units\030\002 \003(\003B\014\n\n_m_isenter\"\250\001\n\031PROB"
  "UFF_NET_SYNC_POSITION\022C\n\nm_position\030\001 \003("
  "\0132/.pbnet.PROBUFF_NET_SYNC_POSITION.MPos"
  "itionEntry\032F\n\016MPositionEntry\022\013\n\003key\030\001 \001("
  "\003\022#\n\005value\030\002 \001(\0132\024.pbnet.UNIT_POSITION:\002"
  "8\001\"X\n\030PROBUFF_NET_CHANGE_ANGLE\022-\n\nm_posi"
  "tion\030\001 \001(\0132\024.pbnet.UNIT_POSITIONH\000\210\001\001B\r\n"
  "\013_m_position\"c\n\024PROBUFF_NET_MATCHING\022\"\n\006"
  "m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022\022\n\005m_ti"
  "d\030\002 \001(\005H\001\210\001\001B\t\n\007_m_typeB\010\n\006_m_tid\"\273\001\n\017MA"
  "TCHING_MEMBER\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001\022\023\n\006m_na"
  "me\030\002 \001(\tH\001\210\001\001\022\021\n\004m_lv\030\003 \001(\005H\002\210\001\001\022\027\n\nm_be"
  "gmatch\030\004 \001(\005H\003\210\001\001\022\030\n\013m_isconfirm\030\005 \001(\010H\004"
  "\210\001\001B\007\n\005_m_idB\t\n\007_m_nameB\007\n\005_m_lvB\r\n\013_m_b"
  "egmatchB\016\n\014_m_isconfirm\";\n\035PROBUFF_NET_M"
  "ATCHING_RESPONSE\022\021\n\004m_id\030\001 \001(\003H\000\210\001\001B\007\n\005_"
  "m_id\"p\n\033PROBUFF_NET_MATCHING_CANCEL\022\"\n\006m"
  "_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022\025\n\010m_roo"
  "mid\030\002 \001(\003H\001\210\001\001B\t\n\007_m_typeB\013\n\t_m_roomid\"\223"
  "\001\n$PROBUFF_NET_MATCHING_CANCEL_RESPONSE\022"
  "\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\0221\n\006m"
  "_stat\030\002 \001(\0162\034.pbnet.ematching_cancel_sta"
  "tH\001\210\001\001B\t\n\007_m_typeB\t\n\007_m_stat\"\265\001\n\"PROBUFF"
  "_NET_MEMBER_MATCHING_CANCEL\022\"\n\006m_type\030\001 "
  "\001(\0162\r.pbnet.eplaysH\000\210\001\001\0227\n\014m_canceltype\030"
  "\002 \001(\0162\034.pbnet.etype_matching_cancelH\001\210\001\001"
  "\022\026\n\016m_cancelmember\030\003 \003(\003B\t\n\007_m_typeB\017\n\r_"
  "m_canceltype\"u\n PROBUFF_NET_MATCHING_WAI"
  "TCONFIRM\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH"
  "\000\210\001\001\022\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001B\t\n\007_m_typeB\013"
  "\n\t_m_roomid\"q\n\034PROBUFF_NET_MATCHING_CONF"
  "IRM\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022"
  "\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001B\t\n\007_m_typeB\013\n\t_m_"
  "roomid\"\271\001\n%PROBUFF_NET_MATCHING_CONFIRM_"
  "RESPONSE\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH"
  "\000\210\001\001\022\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001\0222\n\006m_stat\030\003 "
  "\001(\0162\035.pbnet.ematching_confirm_statH\002\210\001\001B"
  "\t\n\007_m_typeB\013\n\t_m_roomidB\t\n\007_m_stat\"\210\001\n!P"
  "ROBUFF_NET_SYNC_MATCHING_CONFIRM\022\"\n\006m_ty"
  "pe\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022\025\n\010m_roomid"
  "\030\002 \001(\005H\001\210\001\001\022\020\n\010m_roleid\030\003 \003(\003B\t\n\007_m_type"
  "B\013\n\t_m_roomid\"\230\001\n\031PROBUFF_NET_MATCHING_S"
  "YNC\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022"
  "\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001\022(\n\010m_member\030\003 \003(\013"
  "2\026.pbnet.MATCHING_MEMBERB\t\n\007_m_typeB\013\n\t_"
  "m_roomid\"\252\001\n%PROBUFF_NET_MATCHING_SUCCES"
  "S_RESPONSE\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplay"
  "sH\000\210\001\001\022\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001\022\033\n\016m_plays"
  "actorid\030\003 \001(\003H\002\210\001\001B\t\n\007_m_typeB\013\n\t_m_room"
  "idB\021\n\017_m_playsactorid\"\277\001\n\034PROBUFF_NET_MA"
  "TCHING_SUCCESS\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.e"
  "playsH\000\210\001\001\022\025\n\010m_roomid\030\002 \001(\005H\001\210\001\001\022(\n\010m_m"
  "ember\030\003 \003(\0132\026.pbnet.MATCHING_MEMBER\022\025\n\010m"
  "_dataid\030\004 \001(\005H\002\210\001\001B\t\n\007_m_typeB\013\n\t_m_room"
  "idB\013\n\t_m_dataid\"l\n\027PROBUFF_NET_ENTER_PLA"
  "YS\022\"\n\006m_type\030\001 \001(\0162\r.pbnet.eplaysH\000\210\001\001\022\025"
  "\n\010m_roomid\030\002 \001(\005H\001\210\001\001B\t\n\007_m_typeB\013\n\t_m_r"
  "oomid\"\240\001\n\026PROBUFF_NET_KCPSESSION\022\027\n\nm_se"
  "rverid\030\001 \001(\003H\000\210\001\001\022\022\n\005m_uip\030\002 \001(\tH\001\210\001\001\022\024\n"
  "\007m_uport\030\003 \001(\005H\002\210\001\001\022\023\n\006m_conv\030\004 \001(\005H\003\210\001\001"
  "B\r\n\013_m_serveridB\010\n\006_m_uipB\n\n\010_m_uportB\t\n"
  "\007_m_conv\"M\n\037PROBUFF_NET_KCPSESSION_RESPO"
  "NSE\022\031\n\014m_kcpsession\030\001 \001(\tH\000\210\001\001B\017\n\r_m_kcp"
  "session\"D\n\036PROBUFF_NET_TASK_RECEIVE_AWAR"
  "D\022\025\n\010m_taskid\030\001 \001(\005H\000\210\001\001B\013\n\t_m_taskid\"M\n"
  "\tdrop_item\022\023\n\006m_item\030\001 \001(\005H\000\210\001\001\022\024\n\007m_cou"
  "nt\030\002 \001(\005H\001\210\001\001B\t\n\007_m_itemB\n\n\010_m_count\"\346\001\n"
  "\'PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE"
  "\022\025\n\010m_taskid\030\001 \001(\005H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\010H"
  "\001\210\001\001\022I\n\006m_drop\030\003 \003(\01329.pbnet.PROBUFF_NET"
  "_TASK_RECEIVE_AWARD_RESPONSE.MDropEntry\032"
  ",\n\nMDropEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001("
  "\005:\0028\001B\013\n\t_m_taskidB\t\n\007_m_stat\":\n\030PROBUFF"
  "_NET_CREATE_FAMIL\022\023\n\006m_name\030\001 \001(\tH\000\210\001\001B\t"
  "\n\007_m_name\"C\n!PROBUFF_NET_CREATE_FAMIL_RE"
  "SPONSE\022\023\n\006m_stat\030\001 \001(\005H\000\210\001\001B\t\n\007_m_stat\"`"
  "\n\026PROBUFF_NET_JOIN_FAMIL\022\026\n\tm_familid\030\001 "
  "\001(\003H\000\210\001\001\022\024\n\007m_apply\030\002 \001(\010H\001\210\001\001B\014\n\n_m_fam"
  "ilidB\n\n\010_m_apply\"A\n\037PROBUFF_NET_JOIN_FAM"
  "IL_RESPONSE\022\023\n\006m_stat\030\001 \001(\005H\000\210\001\001B\t\n\007_m_s"
  "tat\"g\n\035PROBUFF_NET_RATIFY_JOIN_FAMIL\022\025\n\010"
  "m_roleid\030\001 \001(\003H\000\210\001\001\022\025\n\010m_ratify\030\002 \001(\010H\001\210"
  "\001\001B\013\n\t_m_roleidB\013\n\t_m_ratify\"H\n&PROBUFF_"
  "NET_RATIFY_JOIN_FAMIL_RESPONSE\022\023\n\006m_stat"
  "\030\001 \001(\005H\000\210\001\001B\t\n\007_m_stat\"<\n\026PROBUFF_NET_CE"
  "DE_FAMIL\022\025\n\010m_roleid\030\001 \001(\003H\000\210\001\001B\013\n\t_m_ro"
  "leid\"A\n\037PROBUFF_NET_CEDE_FAMIL_RESPONSE\022"
  "\023\n\006m_stat\030\001 \001(\005H\000\210\001\001B\t\n\007_m_stat\"\?\n\027PROBU"
  "FF_NET_LEAVE_FAMIL\022\026\n\tm_familid\030\001 \001(\003H\000\210"
  "\001\001B\014\n\n_m_familid\"B\n PROBUFF_NET_LEAVE_FA"
  "MIL_RESPONSE\022\023\n\006m_stat\030\001 \001(\005H\000\210\001\001B\t\n\007_m_"
  "stat\">\n\026PROBUFF_NET_FAMIL_LIST\022\026\n\tm_fami"
  "lid\030\001 \001(\003H\000\210\001\001B\014\n\n_m_familid\"j\n\037PROBUFF_"
  "NET_FAMIL_LIST_RESPONSE\022\026\n\tm_familid\030\001 \001"
  "(\003H\000\210\001\001\022!\n\010m_family\030\002 \003(\0132\017.pbdb.db_fami"
  "lyB\014\n\n_m_familid\"d\n\034PROBUFF_NET_CHANGE_F"
  "AMILNAME\022\026\n\tm_familid\030\001 \001(\003H\000\210\001\001\022\023\n\006m_na"
  "me\030\002 \001(\tH\001\210\001\001B\014\n\n_m_familidB\t\n\007_m_name\"G"
  "\n%PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE\022"
  "\023\n\006m_stat\030\001 \001(\005H\000\210\001\001B\t\n\007_m_stat\"=\n\025PROBU"
  "FF_NET_FAMILSIGN\022\026\n\tm_familid\030\001 \001(\003H\000\210\001\001"
  "B\014\n\n_m_familid\"@\n\036PROBUFF_NET_FAMILSIGN_"
  "RESPONSE\022\023\n\006m_stat\030\001 \001(\005H\000\210\001\001B\t\n\007_m_stat"
  "\"\227\001\n PROBUFF_NET_REWARD_ITEM_RESPONSE\022D\n"
  "\007m_items\030\001 \003(\01323.pbnet.PROBUFF_NET_REWAR"
  "D_ITEM_RESPONSE.MItemsEntry\032-\n\013MItemsEnt"
  "ry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\"\265\001\n\024P"
  "ROBUFF_NET_RANKLIST\022\026\n\tm_iscross\030\001 \001(\010H\000"
  "\210\001\001\022$\n\006m_type\030\002 \001(\0162\017.pbdb.eranklistH\001\210\001"
  "\001\022\023\n\006m_page\030\003 \001(\005H\002\210\001\001\022\027\n\nm_everynum\030\004 \001"
  "(\005H\003\210\001\001B\014\n\n_m_iscrossB\t\n\007_m_typeB\t\n\007_m_p"
  "ageB\r\n\013_m_everynum\"\333\001\n\035PROBUFF_NET_RANKL"
  "IST_RESPONSE\022$\n\006m_type\030\001 \001(\0162\017.pbdb.eran"
  "klistH\000\210\001\001\022\037\n\007m_items\030\002 \003(\0132\016.pbdb.db_br"
  "ief\022\023\n\006m_page\030\003 \001(\005H\001\210\001\001\022\027\n\nm_everynum\030\004"
  " \001(\005H\002\210\001\001\022\024\n\007m_count\030\005 \001(\005H\003\210\001\001B\t\n\007_m_ty"
  "peB\t\n\007_m_pageB\r\n\013_m_everynumB\n\n\010_m_count"
  "\"\024\n\022PROBUFF_NET_FRIEND\"h\n\033PROBUFF_NET_FR"
  "IEND_RESPONSE\022!\n\tm_friends\030\001 \003(\0132\016.pbdb."
  "db_brief\022&\n\016m_applyfriends\030\002 \003(\0132\016.pbdb."
  "db_brief\"=\n\025PROBUFF_NET_ADDFRIEND\022\026\n\tm_f"
  "riedid\030\001 \001(\003H\000\210\001\001B\014\n\n_m_friedid\"f\n\036PROBU"
  "FF_NET_ADDFRIEND_RESPONSE\022\026\n\tm_friedid\030\001"
  " \001(\003H\000\210\001\001\022\023\n\006m_stat\030\002 \001(\005H\001\210\001\001B\014\n\n_m_fri"
  "edidB\t\n\007_m_stat\"h\n\034PROBUFF_NET_RATIFY_AD"
  "DFRIEND\022\026\n\tm_friedid\030\001 \001(\003H\000\210\001\001\022\025\n\010m_rat"
  "ify\030\002 \001(\010H\001\210\001\001B\014\n\n_m_friedidB\013\n\t_m_ratif"
  "y\"\221\001\n%PROBUFF_NET_RATIFY_ADDFRIEND_RESPO"
  "NSE\022\026\n\tm_friedid\030\001 \001(\003H\000\210\001\001\022\025\n\010m_ratify\030"
  "\002 \001(\010H\001\210\001\001\022\023\n\006m_stat\030\003 \001(\005H\002\210\001\001B\014\n\n_m_fr"
  "iedidB\013\n\t_m_ratifyB\t\n\007_m_stat\"\?\n\027PROBUFF"
  "_NET_ERASEFRIEND\022\026\n\tm_friedid\030\001 \001(\003H\000\210\001\001"
  "B\014\n\n_m_friedid\"h\n PROBUFF_NET_ERASEFRIEN"
  "D_RESPONSE\022\026\n\tm_friedid\030\001 \001(\003H\000\210\001\001\022\023\n\006m_"
  "stat\030\002 \001(\005H\001\210\001\001B\014\n\n_m_friedidB\t\n\007_m_stat"
  "\"\230\002\n\024PROBUFF_NET_ROLESTAT\0225\n\006m_stat\030\001 \001("
  "\0162 .pbnet.PROBUFF_NET_ROLESTAT.statH\000\210\001\001"
  "\022@\n\013m_logicstat\030\002 \001(\0162&.pbnet.PROBUFF_NE"
  "T_ROLESTAT.logic_statH\001\210\001\001\022\025\n\010m_roleid\030\003"
  " \001(\003H\002\210\001\001\"\037\n\004stat\022\n\n\006online\020\000\022\013\n\007offline"
  "\020\001\"\'\n\nlogic_stat\022\013\n\007friends\020\000\022\014\n\010familye"
  "r\020\001B\t\n\007_m_statB\016\n\014_m_logicstatB\013\n\t_m_rol"
  "eid*F\n\017enum_logic_chat\022\021\n\rget_chat_list\020"
  "\000\022\016\n\nchat_speak\020\001\022\020\n\014updata_speck\020\002*q\n\021e"
  "num_chat_channel\022\022\n\016enum_chat_zero\020\000\022\026\n\022"
  "enum_chat_ordinary\020\001\022\034\n\030enum_chat_cross_"
  "ordinary\020\002\022\022\n\016enum_chat_none\020\003*<\n\005eunit\022"
  "\016\n\neunit_role\020\000\022\021\n\reunit_monster\020\001\022\020\n\014eu"
  "nit_region\020\002*s\n\teunitstat\022\024\n\020eunitstat_n"
  "ormal\020\000\022\024\n\020eunitstat_nomove\020\001\022\034\n\030eunitst"
  "at_nonormalattack\020\002\022\034\n\030eunitstat_norelea"
  "seskill\020\004*;\n\006eplays\022\037\n\033eplays_go_undergr"
  "oundpalace\020\000\022\020\n\014eplays_count\020\001*\233\001\n\025ematc"
  "hing_cancel_stat\022\034\n\030ematching_cancel_suc"
  "cess\020\000\022\032\n\026ematching_cancel_stage\020\001\022 \n\034em"
  "atching_cancel_roomnotfind\020\002\022&\n\"ematchin"
  "g_cancel_roommembernotfind\020\003*\253\001\n\025etype_m"
  "atching_cancel\022 \n\034etype_matching_cancel_"
  "active\020\000\022!\n\035etype_matching_cancel_timeou"
  "t\020\001\022&\n\"etype_matching_waitconfirm_timeou"
  "t\020\002\022%\n!etype_matching_waitcreate_timeout"
  "\020\003*\240\001\n\026ematching_confirm_stat\022\035\n\031ematchi"
  "ng_confirm_success\020\000\022\033\n\027ematching_confir"
  "m_stage\020\001\022!\n\035ematching_confirm_roomnotfi"
  "nd\020\002\022\'\n#ematching_confirm_roommembernotf"
  "ind\020\003B\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_net_2eproto_deps[1] = {
  &::descriptor_table_db_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_net_2eproto_sccs[98] = {
  &scc_info_MATCHING_MEMBER_net_2eproto.base,
  &scc_info_PROBUFF_NET_ACOUNT_LOGIN_net_2eproto.base,
  &scc_info_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_ADDFRIEND_net_2eproto.base,
  &scc_info_PROBUFF_NET_ADDFRIEND_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_BAG_SYNC_net_2eproto.base,
  &scc_info_PROBUFF_NET_BAG_SYNC_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_BAG_UPDATE_net_2eproto.base,
  &scc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_net_2eproto.base,
  &scc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_net_2eproto.base,
  &scc_info_PROBUFF_NET_CEDE_FAMIL_net_2eproto.base,
  &scc_info_PROBUFF_NET_CEDE_FAMIL_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_CHANGE_ANGLE_net_2eproto.base,
  &scc_info_PROBUFF_NET_CHANGE_FAMILNAME_net_2eproto.base,
  &scc_info_PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_CHAT_net_2eproto.base,
  &scc_info_PROBUFF_NET_CHAT_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_CMD_net_2eproto.base,
  &scc_info_PROBUFF_NET_CREATE_FAMIL_net_2eproto.base,
  &scc_info_PROBUFF_NET_CREATE_FAMIL_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_net_2eproto.base,
  &scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse_net_2eproto.base,
  &scc_info_PROBUFF_NET_ENTER_LEAVE_VIEW_net_2eproto.base,
  &scc_info_PROBUFF_NET_ENTER_PLAYS_net_2eproto.base,
  &scc_info_PROBUFF_NET_ERASEFRIEND_net_2eproto.base,
  &scc_info_PROBUFF_NET_ERASEFRIEND_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_ERROR_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMILSIGN_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMILSIGN_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_LIST_net_2eproto.base,
  &scc_info_PROBUFF_NET_FAMIL_LIST_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_FRIEND_net_2eproto.base,
  &scc_info_PROBUFF_NET_FRIEND_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_GET_TIME_net_2eproto.base,
  &scc_info_PROBUFF_NET_GET_TIME_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_HEARTBEAT_net_2eproto.base,
  &scc_info_PROBUFF_NET_JOIN_FAMIL_net_2eproto.base,
  &scc_info_PROBUFF_NET_JOIN_FAMIL_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_KCPSESSION_net_2eproto.base,
  &scc_info_PROBUFF_NET_KCPSESSION_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_LEAVE_FAMIL_net_2eproto.base,
  &scc_info_PROBUFF_NET_LEAVE_FAMIL_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_DEL_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_DEL_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_DRAW_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_DRAW_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_LIST_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_READ_net_2eproto.base,
  &scc_info_PROBUFF_NET_MAIL_READ_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_MATCHING_net_2eproto.base,
  &scc_info_PROBUFF_NET_MATCHING_CANCEL_net_2eproto.base,
  &scc_info_PROBUFF_NET_MATCHING_CANCEL_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_MATCHING_CONFIRM_net_2eproto.base,
  &scc_info_PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_MATCHING_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_MATCHING_SUCCESS_net_2eproto.base,
  &scc_info_PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_MATCHING_SYNC_net_2eproto.base,
  &scc_info_PROBUFF_NET_MATCHING_WAITCONFIRM_net_2eproto.base,
  &scc_info_PROBUFF_NET_MEMBER_MATCHING_CANCEL_net_2eproto.base,
  &scc_info_PROBUFF_NET_MSG_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_NOTICE_net_2eproto.base,
  &scc_info_PROBUFF_NET_NOTICE_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_RANKLIST_net_2eproto.base,
  &scc_info_PROBUFF_NET_RANKLIST_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_RATIFY_ADDFRIEND_net_2eproto.base,
  &scc_info_PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_RATIFY_JOIN_FAMIL_net_2eproto.base,
  &scc_info_PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_RECHARGE_net_2eproto.base,
  &scc_info_PROBUFF_NET_RECHARGE_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse_net_2eproto.base,
  &scc_info_PROBUFF_NET_ROLESTAT_net_2eproto.base,
  &scc_info_PROBUFF_NET_ROLE_LOGIN_net_2eproto.base,
  &scc_info_PROBUFF_NET_ROLE_SYNC_net_2eproto.base,
  &scc_info_PROBUFF_NET_ROLE_SYNC_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_SWITCH_LINE_net_2eproto.base,
  &scc_info_PROBUFF_NET_SWITCH_LINE_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_SYNC_ATTRIBUTE_net_2eproto.base,
  &scc_info_PROBUFF_NET_SYNC_MATCHING_CONFIRM_net_2eproto.base,
  &scc_info_PROBUFF_NET_SYNC_POSITION_net_2eproto.base,
  &scc_info_PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse_net_2eproto.base,
  &scc_info_PROBUFF_NET_SYNC_UNIT_net_2eproto.base,
  &scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_net_2eproto.base,
  &scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_net_2eproto.base,
  &scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse_net_2eproto.base,
  &scc_info_UNIT_net_2eproto.base,
  &scc_info_UNIT_POSITION_net_2eproto.base,
  &scc_info_UnitAttribute_net_2eproto.base,
  &scc_info_UnitModule_net_2eproto.base,
  &scc_info_VECTOR2_net_2eproto.base,
  &scc_info_VECTOR3_net_2eproto.base,
  &scc_info_chatitem_net_2eproto.base,
  &scc_info_drop_item_net_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_net_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_net_2eproto = {
  false, false, descriptor_table_protodef_net_2eproto, "net.proto", 11097,
  &descriptor_table_net_2eproto_once, descriptor_table_net_2eproto_sccs, descriptor_table_net_2eproto_deps, 98, 1,
  schemas, file_default_instances, TableStruct_net_2eproto::offsets,
  file_level_metadata_net_2eproto, 98, file_level_enum_descriptors_net_2eproto, file_level_service_descriptors_net_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_net_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_net_2eproto)), true);
namespace pbnet {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_RECHARGE_RESPONSE_Estat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[0];
}
bool PROBUFF_NET_RECHARGE_RESPONSE_Estat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_Success;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_NotRechargeId;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_MaxCount;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_MIN;
constexpr PROBUFF_NET_RECHARGE_RESPONSE_Estat PROBUFF_NET_RECHARGE_RESPONSE::Estat_MAX;
constexpr int PROBUFF_NET_RECHARGE_RESPONSE::Estat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_ROLESTAT_stat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[1];
}
bool PROBUFF_NET_ROLESTAT_stat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::online;
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::offline;
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::stat_MIN;
constexpr PROBUFF_NET_ROLESTAT_stat PROBUFF_NET_ROLESTAT::stat_MAX;
constexpr int PROBUFF_NET_ROLESTAT::stat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROBUFF_NET_ROLESTAT_logic_stat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[2];
}
bool PROBUFF_NET_ROLESTAT_logic_stat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::friends;
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::familyer;
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::logic_stat_MIN;
constexpr PROBUFF_NET_ROLESTAT_logic_stat PROBUFF_NET_ROLESTAT::logic_stat_MAX;
constexpr int PROBUFF_NET_ROLESTAT::logic_stat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enum_logic_chat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[3];
}
bool enum_logic_chat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* enum_chat_channel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[4];
}
bool enum_chat_channel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eunit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[5];
}
bool eunit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eunitstat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[6];
}
bool eunitstat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eplays_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[7];
}
bool eplays_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ematching_cancel_stat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[8];
}
bool ematching_cancel_stat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* etype_matching_cancel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[9];
}
bool etype_matching_cancel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ematching_confirm_stat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[10];
}
bool ematching_confirm_stat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PROBUFF_NET_MSG_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_MSG_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MSG_RESPONSE>()._has_bits_);
  static void set_has_m_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MSG_RESPONSE::PROBUFF_NET_MSG_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MSG_RESPONSE)
}
PROBUFF_NET_MSG_RESPONSE::PROBUFF_NET_MSG_RESPONSE(const PROBUFF_NET_MSG_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_msg()) {
    m_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_msg(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MSG_RESPONSE)
}

void PROBUFF_NET_MSG_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_MSG_RESPONSE_net_2eproto.base);
  m_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PROBUFF_NET_MSG_RESPONSE::~PROBUFF_NET_MSG_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MSG_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MSG_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_MSG_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MSG_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MSG_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_MSG_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MSG_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MSG_RESPONSE& PROBUFF_NET_MSG_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MSG_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MSG_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_msg_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MSG_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string m_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_m_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_MSG_RESPONSE.m_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MSG_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string m_msg = 1;
  if (_internal_has_m_msg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_msg().data(), static_cast<int>(this->_internal_m_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_MSG_RESPONSE.m_msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_m_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MSG_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MSG_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string m_msg = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MSG_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MSG_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MSG_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MSG_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MSG_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MSG_RESPONSE::MergeFrom(const PROBUFF_NET_MSG_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_msg()) {
    _internal_set_m_msg(from._internal_m_msg());
  }
}

void PROBUFF_NET_MSG_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MSG_RESPONSE::CopyFrom(const PROBUFF_NET_MSG_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MSG_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MSG_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MSG_RESPONSE::InternalSwap(PROBUFF_NET_MSG_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_msg_.Swap(&other->m_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MSG_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_HEARTBEAT::InitAsDefaultInstance() {
}
class PROBUFF_NET_HEARTBEAT::_Internal {
 public:
};

PROBUFF_NET_HEARTBEAT::PROBUFF_NET_HEARTBEAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_HEARTBEAT)
}
PROBUFF_NET_HEARTBEAT::PROBUFF_NET_HEARTBEAT(const PROBUFF_NET_HEARTBEAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_HEARTBEAT)
}

void PROBUFF_NET_HEARTBEAT::SharedCtor() {
}

PROBUFF_NET_HEARTBEAT::~PROBUFF_NET_HEARTBEAT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_HEARTBEAT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_HEARTBEAT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_HEARTBEAT::ArenaDtor(void* object) {
  PROBUFF_NET_HEARTBEAT* _this = reinterpret_cast< PROBUFF_NET_HEARTBEAT* >(object);
  (void)_this;
}
void PROBUFF_NET_HEARTBEAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_HEARTBEAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_HEARTBEAT& PROBUFF_NET_HEARTBEAT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_HEARTBEAT_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_HEARTBEAT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_HEARTBEAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_HEARTBEAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_HEARTBEAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_HEARTBEAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_HEARTBEAT)
  return target;
}

size_t PROBUFF_NET_HEARTBEAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_HEARTBEAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_HEARTBEAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_HEARTBEAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_HEARTBEAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_HEARTBEAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_HEARTBEAT)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_HEARTBEAT::MergeFrom(const PROBUFF_NET_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_HEARTBEAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_HEARTBEAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_HEARTBEAT::CopyFrom(const PROBUFF_NET_HEARTBEAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_HEARTBEAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_HEARTBEAT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_HEARTBEAT::InternalSwap(PROBUFF_NET_HEARTBEAT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_HEARTBEAT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_RECHARGE::InitAsDefaultInstance() {
}
class PROBUFF_NET_RECHARGE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RECHARGE>()._has_bits_);
  static void set_has_m_rechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_RECHARGE::PROBUFF_NET_RECHARGE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RECHARGE)
}
PROBUFF_NET_RECHARGE::PROBUFF_NET_RECHARGE(const PROBUFF_NET_RECHARGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_rechargeid_ = from.m_rechargeid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RECHARGE)
}

void PROBUFF_NET_RECHARGE::SharedCtor() {
  m_rechargeid_ = 0;
}

PROBUFF_NET_RECHARGE::~PROBUFF_NET_RECHARGE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RECHARGE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_RECHARGE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_RECHARGE::ArenaDtor(void* object) {
  PROBUFF_NET_RECHARGE* _this = reinterpret_cast< PROBUFF_NET_RECHARGE* >(object);
  (void)_this;
}
void PROBUFF_NET_RECHARGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_RECHARGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_RECHARGE& PROBUFF_NET_RECHARGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_RECHARGE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_RECHARGE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RECHARGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_rechargeid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RECHARGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_rechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_rechargeid(&has_bits);
          m_rechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_RECHARGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RECHARGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_rechargeid = 1;
  if (_internal_has_m_rechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_rechargeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RECHARGE)
  return target;
}

size_t PROBUFF_NET_RECHARGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RECHARGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 m_rechargeid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_rechargeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_RECHARGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_RECHARGE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_RECHARGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_RECHARGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_RECHARGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_RECHARGE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_RECHARGE::MergeFrom(const PROBUFF_NET_RECHARGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RECHARGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_rechargeid()) {
    _internal_set_m_rechargeid(from._internal_m_rechargeid());
  }
}

void PROBUFF_NET_RECHARGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_RECHARGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_RECHARGE::CopyFrom(const PROBUFF_NET_RECHARGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RECHARGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RECHARGE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RECHARGE::InternalSwap(PROBUFF_NET_RECHARGE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_rechargeid_, other->m_rechargeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RECHARGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_RECHARGE_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_RECHARGE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RECHARGE_RESPONSE>()._has_bits_);
  static void set_has_m_rechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_RECHARGE_RESPONSE::PROBUFF_NET_RECHARGE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
}
PROBUFF_NET_RECHARGE_RESPONSE::PROBUFF_NET_RECHARGE_RESPONSE(const PROBUFF_NET_RECHARGE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_orderid()) {
    m_orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_orderid(),
      GetArena());
  }
  ::memcpy(&m_rechargeid_, &from.m_rechargeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_stat_) -
    reinterpret_cast<char*>(&m_rechargeid_)) + sizeof(m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
}

void PROBUFF_NET_RECHARGE_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_RECHARGE_RESPONSE_net_2eproto.base);
  m_orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_rechargeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_stat_) -
      reinterpret_cast<char*>(&m_rechargeid_)) + sizeof(m_stat_));
}

PROBUFF_NET_RECHARGE_RESPONSE::~PROBUFF_NET_RECHARGE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_RECHARGE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_RECHARGE_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_RECHARGE_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_RECHARGE_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_RECHARGE_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_RECHARGE_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_RECHARGE_RESPONSE& PROBUFF_NET_RECHARGE_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_RECHARGE_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_RECHARGE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_orderid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&m_rechargeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_stat_) -
        reinterpret_cast<char*>(&m_rechargeid_)) + sizeof(m_stat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RECHARGE_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_rechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_rechargeid(&has_bits);
          m_rechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_stat(static_cast<::pbnet::PROBUFF_NET_RECHARGE_RESPONSE_Estat>(val));
        } else goto handle_unusual;
        continue;
      // string m_orderid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_m_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_orderid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_RECHARGE_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_rechargeid = 1;
  if (_internal_has_m_rechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_rechargeid(), target);
  }

  // .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_m_stat(), target);
  }

  // string m_orderid = 3;
  if (_internal_has_m_orderid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_orderid().data(), static_cast<int>(this->_internal_m_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_RECHARGE_RESPONSE.m_orderid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_m_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_RECHARGE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // string m_orderid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_orderid());
    }

    // int32 m_rechargeid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_rechargeid());
    }

    // .pbnet.PROBUFF_NET_RECHARGE_RESPONSE.Estat m_stat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_stat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_RECHARGE_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_RECHARGE_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_RECHARGE_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_RECHARGE_RESPONSE::MergeFrom(const PROBUFF_NET_RECHARGE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_orderid(from._internal_m_orderid());
    }
    if (cached_has_bits & 0x00000002u) {
      m_rechargeid_ = from.m_rechargeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_stat_ = from.m_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_RECHARGE_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_RECHARGE_RESPONSE::CopyFrom(const PROBUFF_NET_RECHARGE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RECHARGE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RECHARGE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RECHARGE_RESPONSE::InternalSwap(PROBUFF_NET_RECHARGE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_orderid_.Swap(&other->m_orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RECHARGE_RESPONSE, m_stat_)
      + sizeof(PROBUFF_NET_RECHARGE_RESPONSE::m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RECHARGE_RESPONSE, m_rechargeid_)>(
          reinterpret_cast<char*>(&m_rechargeid_),
          reinterpret_cast<char*>(&other->m_rechargeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RECHARGE_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse() {}
PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::MergeFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::InitAsDefaultInstance() {
}
class PROBUFF_NET_DELIVER_GOODS_RECHARGE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_DELIVER_GOODS_RECHARGE>()._has_bits_);
  static void set_has_m_rechargeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_DELIVER_GOODS_RECHARGE::PROBUFF_NET_DELIVER_GOODS_RECHARGE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
}
PROBUFF_NET_DELIVER_GOODS_RECHARGE::PROBUFF_NET_DELIVER_GOODS_RECHARGE(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_items_.MergeFrom(from.m_items_);
  m_orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_orderid()) {
    m_orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_orderid(),
      GetArena());
  }
  ::memcpy(&m_rechargeid_, &from.m_rechargeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_gold_) -
    reinterpret_cast<char*>(&m_rechargeid_)) + sizeof(m_gold_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_net_2eproto.base);
  m_orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_rechargeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_gold_) -
      reinterpret_cast<char*>(&m_rechargeid_)) + sizeof(m_gold_));
}

PROBUFF_NET_DELIVER_GOODS_RECHARGE::~PROBUFF_NET_DELIVER_GOODS_RECHARGE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::ArenaDtor(void* object) {
  PROBUFF_NET_DELIVER_GOODS_RECHARGE* _this = reinterpret_cast< PROBUFF_NET_DELIVER_GOODS_RECHARGE* >(object);
  (void)_this;
}
void PROBUFF_NET_DELIVER_GOODS_RECHARGE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_DELIVER_GOODS_RECHARGE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_DELIVER_GOODS_RECHARGE& PROBUFF_NET_DELIVER_GOODS_RECHARGE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_DELIVER_GOODS_RECHARGE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_DELIVER_GOODS_RECHARGE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_orderid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&m_rechargeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_gold_) -
        reinterpret_cast<char*>(&m_rechargeid_)) + sizeof(m_gold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_DELIVER_GOODS_RECHARGE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_rechargeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_rechargeid(&has_bits);
          m_rechargeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_orderid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_m_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_orderid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_gold(&has_bits);
          m_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, int32> m_items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_items_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_DELIVER_GOODS_RECHARGE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_rechargeid = 1;
  if (_internal_has_m_rechargeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_rechargeid(), target);
  }

  // string m_orderid = 2;
  if (_internal_has_m_orderid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_orderid().data(), static_cast<int>(this->_internal_m_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE.m_orderid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_orderid(), target);
  }

  // int32 m_gold = 3;
  if (_internal_has_m_gold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_gold(), target);
  }

  // map<int32, int32> m_items = 4;
  if (!this->_internal_m_items().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_m_items().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_m_items().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_m_items().begin();
          it != this->_internal_m_items().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_m_items().begin();
          it != this->_internal_m_items().end(); ++it) {
        target = PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  return target;
}

size_t PROBUFF_NET_DELIVER_GOODS_RECHARGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> m_items = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_items_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_m_items().begin();
      it != this->_internal_m_items().end(); ++it) {
    total_size += PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // string m_orderid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_orderid());
    }

    // int32 m_rechargeid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_rechargeid());
    }

    // int32 m_gold = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_gold());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_DELIVER_GOODS_RECHARGE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_DELIVER_GOODS_RECHARGE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::MergeFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_items_.MergeFrom(from.m_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_orderid(from._internal_m_orderid());
    }
    if (cached_has_bits & 0x00000002u) {
      m_rechargeid_ = from.m_rechargeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_gold_ = from.m_gold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::CopyFrom(const PROBUFF_NET_DELIVER_GOODS_RECHARGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_DELIVER_GOODS_RECHARGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_DELIVER_GOODS_RECHARGE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_DELIVER_GOODS_RECHARGE::InternalSwap(PROBUFF_NET_DELIVER_GOODS_RECHARGE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_items_.Swap(&other->m_items_);
  m_orderid_.Swap(&other->m_orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_DELIVER_GOODS_RECHARGE, m_gold_)
      + sizeof(PROBUFF_NET_DELIVER_GOODS_RECHARGE::m_gold_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_DELIVER_GOODS_RECHARGE, m_rechargeid_)>(
          reinterpret_cast<char*>(&m_rechargeid_),
          reinterpret_cast<char*>(&other->m_rechargeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_DELIVER_GOODS_RECHARGE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ERROR::InitAsDefaultInstance() {
}
class PROBUFF_NET_ERROR::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ERROR>()._has_bits_);
  static void set_has_m_errmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ERROR::PROBUFF_NET_ERROR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ERROR)
}
PROBUFF_NET_ERROR::PROBUFF_NET_ERROR(const PROBUFF_NET_ERROR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_errmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_errmessage()) {
    m_errmessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_errmessage(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ERROR)
}

void PROBUFF_NET_ERROR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_ERROR_net_2eproto.base);
  m_errmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PROBUFF_NET_ERROR::~PROBUFF_NET_ERROR() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ERROR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ERROR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_errmessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_ERROR::ArenaDtor(void* object) {
  PROBUFF_NET_ERROR* _this = reinterpret_cast< PROBUFF_NET_ERROR* >(object);
  (void)_this;
}
void PROBUFF_NET_ERROR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ERROR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ERROR& PROBUFF_NET_ERROR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ERROR_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ERROR::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ERROR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_errmessage_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ERROR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string m_errmessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_m_errmessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_ERROR.m_errmessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ERROR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ERROR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string m_errmessage = 2;
  if (_internal_has_m_errmessage()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_errmessage().data(), static_cast<int>(this->_internal_m_errmessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ERROR.m_errmessage");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_errmessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ERROR)
  return target;
}

size_t PROBUFF_NET_ERROR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ERROR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string m_errmessage = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m_errmessage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ERROR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ERROR)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ERROR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ERROR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ERROR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ERROR)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ERROR::MergeFrom(const PROBUFF_NET_ERROR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ERROR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_errmessage()) {
    _internal_set_m_errmessage(from._internal_m_errmessage());
  }
}

void PROBUFF_NET_ERROR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ERROR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ERROR::CopyFrom(const PROBUFF_NET_ERROR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ERROR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ERROR::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ERROR::InternalSwap(PROBUFF_NET_ERROR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_errmessage_.Swap(&other->m_errmessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ERROR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_GET_TIME::InitAsDefaultInstance() {
}
class PROBUFF_NET_GET_TIME::_Internal {
 public:
};

PROBUFF_NET_GET_TIME::PROBUFF_NET_GET_TIME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_GET_TIME)
}
PROBUFF_NET_GET_TIME::PROBUFF_NET_GET_TIME(const PROBUFF_NET_GET_TIME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_GET_TIME)
}

void PROBUFF_NET_GET_TIME::SharedCtor() {
}

PROBUFF_NET_GET_TIME::~PROBUFF_NET_GET_TIME() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_GET_TIME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_GET_TIME::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_GET_TIME::ArenaDtor(void* object) {
  PROBUFF_NET_GET_TIME* _this = reinterpret_cast< PROBUFF_NET_GET_TIME* >(object);
  (void)_this;
}
void PROBUFF_NET_GET_TIME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_GET_TIME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_GET_TIME& PROBUFF_NET_GET_TIME::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_GET_TIME_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_GET_TIME::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_GET_TIME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_GET_TIME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_GET_TIME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_GET_TIME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_GET_TIME)
  return target;
}

size_t PROBUFF_NET_GET_TIME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_GET_TIME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_GET_TIME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_GET_TIME)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_GET_TIME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_GET_TIME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_GET_TIME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_GET_TIME)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_GET_TIME::MergeFrom(const PROBUFF_NET_GET_TIME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_GET_TIME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_GET_TIME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_GET_TIME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_GET_TIME::CopyFrom(const PROBUFF_NET_GET_TIME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_GET_TIME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_GET_TIME::IsInitialized() const {
  return true;
}

void PROBUFF_NET_GET_TIME::InternalSwap(PROBUFF_NET_GET_TIME* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_GET_TIME::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_GET_TIME_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_GET_TIME_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_GET_TIME_RESPONSE>()._has_bits_);
  static void set_has_m_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_GET_TIME_RESPONSE::PROBUFF_NET_GET_TIME_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
}
PROBUFF_NET_GET_TIME_RESPONSE::PROBUFF_NET_GET_TIME_RESPONSE(const PROBUFF_NET_GET_TIME_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_utc_ = from.m_utc_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
}

void PROBUFF_NET_GET_TIME_RESPONSE::SharedCtor() {
  m_utc_ = 0;
}

PROBUFF_NET_GET_TIME_RESPONSE::~PROBUFF_NET_GET_TIME_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_GET_TIME_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_GET_TIME_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_GET_TIME_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_GET_TIME_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_GET_TIME_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_GET_TIME_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_GET_TIME_RESPONSE& PROBUFF_NET_GET_TIME_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_GET_TIME_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_GET_TIME_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_utc_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_GET_TIME_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_utc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_utc(&has_bits);
          m_utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_GET_TIME_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_utc = 1;
  if (_internal_has_m_utc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_utc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  return target;
}

size_t PROBUFF_NET_GET_TIME_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 m_utc = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_utc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_GET_TIME_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_GET_TIME_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_GET_TIME_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_GET_TIME_RESPONSE::MergeFrom(const PROBUFF_NET_GET_TIME_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_utc()) {
    _internal_set_m_utc(from._internal_m_utc());
  }
}

void PROBUFF_NET_GET_TIME_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_GET_TIME_RESPONSE::CopyFrom(const PROBUFF_NET_GET_TIME_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_GET_TIME_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_GET_TIME_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_GET_TIME_RESPONSE::InternalSwap(PROBUFF_NET_GET_TIME_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_utc_, other->m_utc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_GET_TIME_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_NOTICE::InitAsDefaultInstance() {
}
class PROBUFF_NET_NOTICE::_Internal {
 public:
};

PROBUFF_NET_NOTICE::PROBUFF_NET_NOTICE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_NOTICE)
}
PROBUFF_NET_NOTICE::PROBUFF_NET_NOTICE(const PROBUFF_NET_NOTICE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_NOTICE)
}

void PROBUFF_NET_NOTICE::SharedCtor() {
}

PROBUFF_NET_NOTICE::~PROBUFF_NET_NOTICE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_NOTICE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_NOTICE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_NOTICE::ArenaDtor(void* object) {
  PROBUFF_NET_NOTICE* _this = reinterpret_cast< PROBUFF_NET_NOTICE* >(object);
  (void)_this;
}
void PROBUFF_NET_NOTICE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_NOTICE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_NOTICE& PROBUFF_NET_NOTICE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_NOTICE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_NOTICE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_NOTICE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_NOTICE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_NOTICE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_NOTICE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_NOTICE)
  return target;
}

size_t PROBUFF_NET_NOTICE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_NOTICE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_NOTICE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_NOTICE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_NOTICE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_NOTICE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_NOTICE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_NOTICE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_NOTICE::MergeFrom(const PROBUFF_NET_NOTICE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_NOTICE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_NOTICE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_NOTICE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_NOTICE::CopyFrom(const PROBUFF_NET_NOTICE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_NOTICE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_NOTICE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_NOTICE::InternalSwap(PROBUFF_NET_NOTICE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_NOTICE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_NOTICE_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_NOTICE_RESPONSE::_Internal {
 public:
};

void PROBUFF_NET_NOTICE_RESPONSE::clear_m_notices() {
  m_notices_.Clear();
}
PROBUFF_NET_NOTICE_RESPONSE::PROBUFF_NET_NOTICE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_notices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
}
PROBUFF_NET_NOTICE_RESPONSE::PROBUFF_NET_NOTICE_RESPONSE(const PROBUFF_NET_NOTICE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      m_notices_(from.m_notices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
}

void PROBUFF_NET_NOTICE_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_NOTICE_RESPONSE_net_2eproto.base);
}

PROBUFF_NET_NOTICE_RESPONSE::~PROBUFF_NET_NOTICE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_NOTICE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_NOTICE_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_NOTICE_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_NOTICE_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_NOTICE_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_NOTICE_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_NOTICE_RESPONSE& PROBUFF_NET_NOTICE_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_NOTICE_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_NOTICE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_notices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_NOTICE_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pbdb.db_notice m_notices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_notices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_NOTICE_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbdb.db_notice m_notices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_notices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_m_notices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_NOTICE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_notice m_notices = 1;
  total_size += 1UL * this->_internal_m_notices_size();
  for (const auto& msg : this->m_notices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_NOTICE_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_NOTICE_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_NOTICE_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_NOTICE_RESPONSE::MergeFrom(const PROBUFF_NET_NOTICE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_notices_.MergeFrom(from.m_notices_);
}

void PROBUFF_NET_NOTICE_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_NOTICE_RESPONSE::CopyFrom(const PROBUFF_NET_NOTICE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_NOTICE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_NOTICE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_NOTICE_RESPONSE::InternalSwap(PROBUFF_NET_NOTICE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  m_notices_.InternalSwap(&other->m_notices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_NOTICE_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ACOUNT_LOGIN::InitAsDefaultInstance() {
}
class PROBUFF_NET_ACOUNT_LOGIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ACOUNT_LOGIN>()._has_bits_);
  static void set_has_m_area(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_ACOUNT_LOGIN::PROBUFF_NET_ACOUNT_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
}
PROBUFF_NET_ACOUNT_LOGIN::PROBUFF_NET_ACOUNT_LOGIN(const PROBUFF_NET_ACOUNT_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_account()) {
    m_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_account(),
      GetArena());
  }
  m_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_password()) {
    m_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_password(),
      GetArena());
  }
  m_area_ = from.m_area_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
}

void PROBUFF_NET_ACOUNT_LOGIN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_ACOUNT_LOGIN_net_2eproto.base);
  m_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_area_ = 0;
}

PROBUFF_NET_ACOUNT_LOGIN::~PROBUFF_NET_ACOUNT_LOGIN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ACOUNT_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_ACOUNT_LOGIN::ArenaDtor(void* object) {
  PROBUFF_NET_ACOUNT_LOGIN* _this = reinterpret_cast< PROBUFF_NET_ACOUNT_LOGIN* >(object);
  (void)_this;
}
void PROBUFF_NET_ACOUNT_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ACOUNT_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ACOUNT_LOGIN& PROBUFF_NET_ACOUNT_LOGIN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ACOUNT_LOGIN_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ACOUNT_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_account_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      m_password_.ClearNonDefaultToEmpty();
    }
  }
  m_area_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ACOUNT_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_area(&has_bits);
          m_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_m_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_m_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ACOUNT_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_area = 1;
  if (_internal_has_m_area()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_area(), target);
  }

  // string m_account = 2;
  if (_internal_has_m_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_account().data(), static_cast<int>(this->_internal_m_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_account(), target);
  }

  // string m_password = 3;
  if (_internal_has_m_password()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_password().data(), static_cast<int>(this->_internal_m_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN.m_password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_m_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  return target;
}

size_t PROBUFF_NET_ACOUNT_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // string m_account = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_account());
    }

    // string m_password = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_password());
    }

    // int32 m_area = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_area());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ACOUNT_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ACOUNT_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ACOUNT_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ACOUNT_LOGIN::MergeFrom(const PROBUFF_NET_ACOUNT_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_account(from._internal_m_account());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_m_password(from._internal_m_password());
    }
    if (cached_has_bits & 0x00000004u) {
      m_area_ = from.m_area_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_ACOUNT_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ACOUNT_LOGIN::CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ACOUNT_LOGIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ACOUNT_LOGIN::InternalSwap(PROBUFF_NET_ACOUNT_LOGIN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_account_.Swap(&other->m_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  m_password_.Swap(&other->m_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(m_area_, other->m_area_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ACOUNT_LOGIN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>()._has_bits_);
  static void set_has_m_area(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_account(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_gatewayid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
}
PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_session()) {
    m_session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_session(),
      GetArena());
  }
  m_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_account()) {
    m_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_account(),
      GetArena());
  }
  ::memcpy(&m_roleid_, &from.m_roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_gatewayid_) -
    reinterpret_cast<char*>(&m_roleid_)) + sizeof(m_gatewayid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_net_2eproto.base);
  m_session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_gatewayid_) -
      reinterpret_cast<char*>(&m_roleid_)) + sizeof(m_gatewayid_));
}

PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::~PROBUFF_NET_ACOUNT_LOGIN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ACOUNT_LOGIN_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_session_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      m_account_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&m_roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_gatewayid_) -
        reinterpret_cast<char*>(&m_roleid_)) + sizeof(m_gatewayid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_area(&has_bits);
          m_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 m_roleid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_roleid(&has_bits);
          m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_session = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_m_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_m_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_gatewayid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_m_gatewayid(&has_bits);
          m_gatewayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_area = 1;
  if (_internal_has_m_area()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_area(), target);
  }

  // int64 m_roleid = 2;
  if (_internal_has_m_roleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_m_roleid(), target);
  }

  // string m_session = 3;
  if (_internal_has_m_session()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_session().data(), static_cast<int>(this->_internal_m_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_session");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_m_session(), target);
  }

  // string m_account = 4;
  if (_internal_has_m_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_account().data(), static_cast<int>(this->_internal_m_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE.m_account");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_m_account(), target);
  }

  // int32 m_gatewayid = 5;
  if (_internal_has_m_gatewayid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_m_gatewayid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  return target;
}

size_t PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // string m_session = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_session());
    }

    // string m_account = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_account());
    }

    // int64 m_roleid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_roleid());
    }

    // int32 m_area = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_area());
    }

    // int32 m_gatewayid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_gatewayid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ACOUNT_LOGIN_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::MergeFrom(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_session(from._internal_m_session());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_m_account(from._internal_m_account());
    }
    if (cached_has_bits & 0x00000004u) {
      m_roleid_ = from.m_roleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_area_ = from.m_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      m_gatewayid_ = from.m_gatewayid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::CopyFrom(const PROBUFF_NET_ACOUNT_LOGIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ACOUNT_LOGIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::InternalSwap(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_session_.Swap(&other->m_session_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  m_account_.Swap(&other->m_account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, m_gatewayid_)
      + sizeof(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::m_gatewayid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ACOUNT_LOGIN_RESPONSE, m_roleid_)>(
          reinterpret_cast<char*>(&m_roleid_),
          reinterpret_cast<char*>(&other->m_roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ACOUNT_LOGIN_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ROLE_LOGIN::InitAsDefaultInstance() {
}
class PROBUFF_NET_ROLE_LOGIN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ROLE_LOGIN>()._has_bits_);
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_iscreate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_area(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_gatewayid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

PROBUFF_NET_ROLE_LOGIN::PROBUFF_NET_ROLE_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
}
PROBUFF_NET_ROLE_LOGIN::PROBUFF_NET_ROLE_LOGIN(const PROBUFF_NET_ROLE_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_session()) {
    m_session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_session(),
      GetArena());
  }
  ::memcpy(&m_roleid_, &from.m_roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_gatewayid_) -
    reinterpret_cast<char*>(&m_roleid_)) + sizeof(m_gatewayid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
}

void PROBUFF_NET_ROLE_LOGIN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_ROLE_LOGIN_net_2eproto.base);
  m_session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_gatewayid_) -
      reinterpret_cast<char*>(&m_roleid_)) + sizeof(m_gatewayid_));
}

PROBUFF_NET_ROLE_LOGIN::~PROBUFF_NET_ROLE_LOGIN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLE_LOGIN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ROLE_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_ROLE_LOGIN::ArenaDtor(void* object) {
  PROBUFF_NET_ROLE_LOGIN* _this = reinterpret_cast< PROBUFF_NET_ROLE_LOGIN* >(object);
  (void)_this;
}
void PROBUFF_NET_ROLE_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ROLE_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ROLE_LOGIN& PROBUFF_NET_ROLE_LOGIN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ROLE_LOGIN_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ROLE_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_session_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&m_roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_gatewayid_) -
        reinterpret_cast<char*>(&m_roleid_)) + sizeof(m_gatewayid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLE_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_roleid(&has_bits);
          m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_m_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_ROLE_LOGIN.m_session"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_iscreate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_iscreate(&has_bits);
          m_iscreate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_area = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_area(&has_bits);
          m_area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_gatewayid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_m_gatewayid(&has_bits);
          m_gatewayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ROLE_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_roleid = 1;
  if (_internal_has_m_roleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_roleid(), target);
  }

  // string m_session = 2;
  if (_internal_has_m_session()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_session().data(), static_cast<int>(this->_internal_m_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_ROLE_LOGIN.m_session");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_session(), target);
  }

  // bool m_iscreate = 3;
  if (_internal_has_m_iscreate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_m_iscreate(), target);
  }

  // int32 m_area = 4;
  if (_internal_has_m_area()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_area(), target);
  }

  // int32 m_gatewayid = 5;
  if (_internal_has_m_gatewayid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_m_gatewayid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLE_LOGIN)
  return target;
}

size_t PROBUFF_NET_ROLE_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // string m_session = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_session());
    }

    // int64 m_roleid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_roleid());
    }

    // bool m_iscreate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // int32 m_area = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_area());
    }

    // int32 m_gatewayid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_gatewayid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ROLE_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ROLE_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ROLE_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ROLE_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ROLE_LOGIN)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ROLE_LOGIN::MergeFrom(const PROBUFF_NET_ROLE_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_session(from._internal_m_session());
    }
    if (cached_has_bits & 0x00000002u) {
      m_roleid_ = from.m_roleid_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_iscreate_ = from.m_iscreate_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_area_ = from.m_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      m_gatewayid_ = from.m_gatewayid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_ROLE_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ROLE_LOGIN::CopyFrom(const PROBUFF_NET_ROLE_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLE_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLE_LOGIN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLE_LOGIN::InternalSwap(PROBUFF_NET_ROLE_LOGIN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_session_.Swap(&other->m_session_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_LOGIN, m_gatewayid_)
      + sizeof(PROBUFF_NET_ROLE_LOGIN::m_gatewayid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_LOGIN, m_roleid_)>(
          reinterpret_cast<char*>(&m_roleid_),
          reinterpret_cast<char*>(&other->m_roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_LOGIN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ROLE_SYNC::InitAsDefaultInstance() {
}
class PROBUFF_NET_ROLE_SYNC::_Internal {
 public:
};

PROBUFF_NET_ROLE_SYNC::PROBUFF_NET_ROLE_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_SYNC)
}
PROBUFF_NET_ROLE_SYNC::PROBUFF_NET_ROLE_SYNC(const PROBUFF_NET_ROLE_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_SYNC)
}

void PROBUFF_NET_ROLE_SYNC::SharedCtor() {
}

PROBUFF_NET_ROLE_SYNC::~PROBUFF_NET_ROLE_SYNC() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLE_SYNC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ROLE_SYNC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_ROLE_SYNC::ArenaDtor(void* object) {
  PROBUFF_NET_ROLE_SYNC* _this = reinterpret_cast< PROBUFF_NET_ROLE_SYNC* >(object);
  (void)_this;
}
void PROBUFF_NET_ROLE_SYNC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ROLE_SYNC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ROLE_SYNC& PROBUFF_NET_ROLE_SYNC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ROLE_SYNC_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ROLE_SYNC::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLE_SYNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLE_SYNC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ROLE_SYNC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLE_SYNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLE_SYNC)
  return target;
}

size_t PROBUFF_NET_ROLE_SYNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLE_SYNC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ROLE_SYNC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ROLE_SYNC)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ROLE_SYNC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ROLE_SYNC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ROLE_SYNC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ROLE_SYNC)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ROLE_SYNC::MergeFrom(const PROBUFF_NET_ROLE_SYNC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLE_SYNC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_ROLE_SYNC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ROLE_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ROLE_SYNC::CopyFrom(const PROBUFF_NET_ROLE_SYNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLE_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLE_SYNC::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLE_SYNC::InternalSwap(PROBUFF_NET_ROLE_SYNC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_SYNC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ROLE_SYNC_RESPONSE::InitAsDefaultInstance() {
  ::pbnet::_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_._instance.get_mutable()->m_role_ = const_cast< ::pbdb::db_role*>(
      ::pbdb::db_role::internal_default_instance());
  ::pbnet::_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_._instance.get_mutable()->m_bag_ = const_cast< ::pbdb::db_bag*>(
      ::pbdb::db_bag::internal_default_instance());
  ::pbnet::_PROBUFF_NET_ROLE_SYNC_RESPONSE_default_instance_._instance.get_mutable()->m_task_ = const_cast< ::pbdb::db_task*>(
      ::pbdb::db_task::internal_default_instance());
}
class PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ROLE_SYNC_RESPONSE>()._has_bits_);
  static const ::pbdb::db_role& m_role(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_m_role(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pbdb::db_bag& m_bag(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_m_bag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbdb::db_task& m_task(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg);
  static void set_has_m_task(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::pbdb::db_role&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::m_role(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->m_role_;
}
const ::pbdb::db_bag&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::m_bag(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->m_bag_;
}
const ::pbdb::db_task&
PROBUFF_NET_ROLE_SYNC_RESPONSE::_Internal::m_task(const PROBUFF_NET_ROLE_SYNC_RESPONSE* msg) {
  return *msg->m_task_;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_m_role() {
  if (GetArena() == nullptr && m_role_ != nullptr) {
    delete m_role_;
  }
  m_role_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_m_bag() {
  if (GetArena() == nullptr && m_bag_ != nullptr) {
    delete m_bag_;
  }
  m_bag_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::clear_m_task() {
  if (GetArena() == nullptr && m_task_ != nullptr) {
    delete m_task_;
  }
  m_task_ = nullptr;
  _has_bits_[0] &= ~0x00000004u;
}
PROBUFF_NET_ROLE_SYNC_RESPONSE::PROBUFF_NET_ROLE_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
}
PROBUFF_NET_ROLE_SYNC_RESPONSE::PROBUFF_NET_ROLE_SYNC_RESPONSE(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_role()) {
    m_role_ = new ::pbdb::db_role(*from.m_role_);
  } else {
    m_role_ = nullptr;
  }
  if (from._internal_has_m_bag()) {
    m_bag_ = new ::pbdb::db_bag(*from.m_bag_);
  } else {
    m_bag_ = nullptr;
  }
  if (from._internal_has_m_task()) {
    m_task_ = new ::pbdb::db_task(*from.m_task_);
  } else {
    m_task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_ROLE_SYNC_RESPONSE_net_2eproto.base);
  ::memset(&m_role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_task_) -
      reinterpret_cast<char*>(&m_role_)) + sizeof(m_task_));
}

PROBUFF_NET_ROLE_SYNC_RESPONSE::~PROBUFF_NET_ROLE_SYNC_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete m_role_;
  if (this != internal_default_instance()) delete m_bag_;
  if (this != internal_default_instance()) delete m_task_;
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_ROLE_SYNC_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_ROLE_SYNC_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ROLE_SYNC_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ROLE_SYNC_RESPONSE& PROBUFF_NET_ROLE_SYNC_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ROLE_SYNC_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ROLE_SYNC_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      if (GetArena() == nullptr && m_role_ != nullptr) {
        delete m_role_;
      }
      m_role_ = nullptr;
    }
    if (cached_has_bits & 0x00000002u) {
      if (GetArena() == nullptr && m_bag_ != nullptr) {
        delete m_bag_;
      }
      m_bag_ = nullptr;
    }
    if (cached_has_bits & 0x00000004u) {
      if (GetArena() == nullptr && m_task_ != nullptr) {
        delete m_task_;
      }
      m_task_ = nullptr;
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLE_SYNC_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbdb.db_role m_role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbdb.db_bag m_bag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_bag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbdb.db_task m_task = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ROLE_SYNC_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbdb.db_role m_role = 1;
  if (_internal_has_m_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::m_role(this), target, stream);
  }

  // .pbdb.db_bag m_bag = 2;
  if (_internal_has_m_bag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::m_bag(this), target, stream);
  }

  // .pbdb.db_task m_task = 3;
  if (_internal_has_m_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::m_task(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  return target;
}

size_t PROBUFF_NET_ROLE_SYNC_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .pbdb.db_role m_role = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *m_role_);
    }

    // .pbdb.db_bag m_bag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *m_bag_);
    }

    // .pbdb.db_task m_task = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *m_task_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ROLE_SYNC_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ROLE_SYNC_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::MergeFrom(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_m_role()->::pbdb::db_role::MergeFrom(from._internal_m_role());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_m_bag()->::pbdb::db_bag::MergeFrom(from._internal_m_bag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_m_task()->::pbdb::db_task::MergeFrom(from._internal_m_task());
    }
  }
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::CopyFrom(const PROBUFF_NET_ROLE_SYNC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLE_SYNC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLE_SYNC_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLE_SYNC_RESPONSE::InternalSwap(PROBUFF_NET_ROLE_SYNC_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_SYNC_RESPONSE, m_task_)
      + sizeof(PROBUFF_NET_ROLE_SYNC_RESPONSE::m_task_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLE_SYNC_RESPONSE, m_role_)>(
          reinterpret_cast<char*>(&m_role_),
          reinterpret_cast<char*>(&other->m_role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLE_SYNC_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_BAG_SYNC::InitAsDefaultInstance() {
}
class PROBUFF_NET_BAG_SYNC::_Internal {
 public:
};

PROBUFF_NET_BAG_SYNC::PROBUFF_NET_BAG_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_SYNC)
}
PROBUFF_NET_BAG_SYNC::PROBUFF_NET_BAG_SYNC(const PROBUFF_NET_BAG_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_SYNC)
}

void PROBUFF_NET_BAG_SYNC::SharedCtor() {
}

PROBUFF_NET_BAG_SYNC::~PROBUFF_NET_BAG_SYNC() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_SYNC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_BAG_SYNC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_BAG_SYNC::ArenaDtor(void* object) {
  PROBUFF_NET_BAG_SYNC* _this = reinterpret_cast< PROBUFF_NET_BAG_SYNC* >(object);
  (void)_this;
}
void PROBUFF_NET_BAG_SYNC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_BAG_SYNC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_BAG_SYNC& PROBUFF_NET_BAG_SYNC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_BAG_SYNC_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_BAG_SYNC::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_SYNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_SYNC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_BAG_SYNC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_SYNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_SYNC)
  return target;
}

size_t PROBUFF_NET_BAG_SYNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_SYNC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_BAG_SYNC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_BAG_SYNC)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_BAG_SYNC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_BAG_SYNC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_BAG_SYNC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_BAG_SYNC)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_BAG_SYNC::MergeFrom(const PROBUFF_NET_BAG_SYNC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_SYNC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_BAG_SYNC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_BAG_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_BAG_SYNC::CopyFrom(const PROBUFF_NET_BAG_SYNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_SYNC::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_SYNC::InternalSwap(PROBUFF_NET_BAG_SYNC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_SYNC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_BAG_SYNC_RESPONSE::InitAsDefaultInstance() {
  ::pbnet::_PROBUFF_NET_BAG_SYNC_RESPONSE_default_instance_._instance.get_mutable()->m_bag_ = const_cast< ::pbdb::db_bag*>(
      ::pbdb::db_bag::internal_default_instance());
}
class PROBUFF_NET_BAG_SYNC_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_SYNC_RESPONSE>()._has_bits_);
  static const ::pbdb::db_bag& m_bag(const PROBUFF_NET_BAG_SYNC_RESPONSE* msg);
  static void set_has_m_bag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pbdb::db_bag&
PROBUFF_NET_BAG_SYNC_RESPONSE::_Internal::m_bag(const PROBUFF_NET_BAG_SYNC_RESPONSE* msg) {
  return *msg->m_bag_;
}
void PROBUFF_NET_BAG_SYNC_RESPONSE::clear_m_bag() {
  if (GetArena() == nullptr && m_bag_ != nullptr) {
    delete m_bag_;
  }
  m_bag_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
PROBUFF_NET_BAG_SYNC_RESPONSE::PROBUFF_NET_BAG_SYNC_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
}
PROBUFF_NET_BAG_SYNC_RESPONSE::PROBUFF_NET_BAG_SYNC_RESPONSE(const PROBUFF_NET_BAG_SYNC_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_bag()) {
    m_bag_ = new ::pbdb::db_bag(*from.m_bag_);
  } else {
    m_bag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_BAG_SYNC_RESPONSE_net_2eproto.base);
  m_bag_ = nullptr;
}

PROBUFF_NET_BAG_SYNC_RESPONSE::~PROBUFF_NET_BAG_SYNC_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete m_bag_;
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_BAG_SYNC_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_BAG_SYNC_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_BAG_SYNC_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_BAG_SYNC_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_BAG_SYNC_RESPONSE& PROBUFF_NET_BAG_SYNC_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_BAG_SYNC_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_BAG_SYNC_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && m_bag_ != nullptr) {
      delete m_bag_;
    }
    m_bag_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_SYNC_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbdb.db_bag m_bag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_bag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_BAG_SYNC_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbdb.db_bag m_bag = 1;
  if (_internal_has_m_bag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::m_bag(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  return target;
}

size_t PROBUFF_NET_BAG_SYNC_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pbdb.db_bag m_bag = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_bag_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_BAG_SYNC_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_BAG_SYNC_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::MergeFrom(const PROBUFF_NET_BAG_SYNC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_bag()) {
    _internal_mutable_m_bag()->::pbdb::db_bag::MergeFrom(from._internal_m_bag());
  }
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::CopyFrom(const PROBUFF_NET_BAG_SYNC_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_SYNC_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_SYNC_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_SYNC_RESPONSE::InternalSwap(PROBUFF_NET_BAG_SYNC_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_bag_, other->m_bag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_SYNC_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_BAG_UPDATE::InitAsDefaultInstance() {
}
class PROBUFF_NET_BAG_UPDATE::_Internal {
 public:
};

PROBUFF_NET_BAG_UPDATE::PROBUFF_NET_BAG_UPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE)
}
PROBUFF_NET_BAG_UPDATE::PROBUFF_NET_BAG_UPDATE(const PROBUFF_NET_BAG_UPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE)
}

void PROBUFF_NET_BAG_UPDATE::SharedCtor() {
}

PROBUFF_NET_BAG_UPDATE::~PROBUFF_NET_BAG_UPDATE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_BAG_UPDATE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_BAG_UPDATE::ArenaDtor(void* object) {
  PROBUFF_NET_BAG_UPDATE* _this = reinterpret_cast< PROBUFF_NET_BAG_UPDATE* >(object);
  (void)_this;
}
void PROBUFF_NET_BAG_UPDATE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_BAG_UPDATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_BAG_UPDATE& PROBUFF_NET_BAG_UPDATE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_BAG_UPDATE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_BAG_UPDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_BAG_UPDATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE)
  return target;
}

size_t PROBUFF_NET_BAG_UPDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_BAG_UPDATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_BAG_UPDATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_BAG_UPDATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_BAG_UPDATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_BAG_UPDATE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_BAG_UPDATE::MergeFrom(const PROBUFF_NET_BAG_UPDATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_BAG_UPDATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_BAG_UPDATE::CopyFrom(const PROBUFF_NET_BAG_UPDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE::InternalSwap(PROBUFF_NET_BAG_UPDATE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::InitAsDefaultInstance() {
}
class PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
}
PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem(const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_count_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_count_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::SharedCtor() {
  ::memset(&m_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_count_) -
      reinterpret_cast<char*>(&m_id_)) + sizeof(m_count_));
}

PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::~PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::ArenaDtor(void* object) {
  PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* _this = reinterpret_cast< PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* >(object);
  (void)_this;
}
void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_count_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_count(&has_bits);
          m_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_id(), target);
  }

  // int32 m_count = 2;
  if (_internal_has_m_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  return target;
}

size_t PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 m_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_id());
    }

    // int32 m_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::MergeFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_count_ = from.m_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, m_count_)
      + sizeof(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::m_count_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem, m_id_)>(
          reinterpret_cast<char*>(&m_id_),
          reinterpret_cast<char*>(&other->m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::InitAsDefaultInstance() {
}
class PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_BAG_UPDATE_RESPONSE_additem>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
}
PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem(const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_count_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_count_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::SharedCtor() {
  ::memset(&m_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_count_) -
      reinterpret_cast<char*>(&m_id_)) + sizeof(m_count_));
}

PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::~PROBUFF_NET_BAG_UPDATE_RESPONSE_additem() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::ArenaDtor(void* object) {
  PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* _this = reinterpret_cast< PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* >(object);
  (void)_this;
}
void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_additem_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_count_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_count(&has_bits);
          m_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_id(), target);
  }

  // int32 m_count = 2;
  if (_internal_has_m_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  return target;
}

size_t PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 m_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_id());
    }

    // int32 m_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_BAG_UPDATE_RESPONSE_additem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::MergeFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_count_ = from.m_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE_additem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, m_count_)
      + sizeof(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::m_count_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_BAG_UPDATE_RESPONSE_additem, m_id_)>(
          reinterpret_cast<char*>(&m_id_),
          reinterpret_cast<char*>(&other->m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE_RESPONSE_additem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_BAG_UPDATE_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_BAG_UPDATE_RESPONSE::_Internal {
 public:
};

PROBUFF_NET_BAG_UPDATE_RESPONSE::PROBUFF_NET_BAG_UPDATE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_delitems_(arena),
  m_delnostackitems_(arena),
  m_additems_(arena),
  m_addnostackitems_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
}
PROBUFF_NET_BAG_UPDATE_RESPONSE::PROBUFF_NET_BAG_UPDATE_RESPONSE(const PROBUFF_NET_BAG_UPDATE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      m_delitems_(from.m_delitems_),
      m_delnostackitems_(from.m_delnostackitems_),
      m_additems_(from.m_additems_),
      m_addnostackitems_(from.m_addnostackitems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_net_2eproto.base);
}

PROBUFF_NET_BAG_UPDATE_RESPONSE::~PROBUFF_NET_BAG_UPDATE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_BAG_UPDATE_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_BAG_UPDATE_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_BAG_UPDATE_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_BAG_UPDATE_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_BAG_UPDATE_RESPONSE& PROBUFF_NET_BAG_UPDATE_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_BAG_UPDATE_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_BAG_UPDATE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_delitems_.Clear();
  m_delnostackitems_.Clear();
  m_additems_.Clear();
  m_addnostackitems_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_BAG_UPDATE_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem m_delitems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_delitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 m_delnostackitems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_m_delnostackitems(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_m_delnostackitems(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem m_additems = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_additems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 m_addnostackitems = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_m_addnostackitems(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_m_addnostackitems(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_BAG_UPDATE_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem m_delitems = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_delitems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_m_delitems(i), target, stream);
  }

  // repeated int32 m_delnostackitems = 2;
  {
    int byte_size = _m_delnostackitems_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_m_delnostackitems(), byte_size, target);
    }
  }

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem m_additems = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_additems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_m_additems(i), target, stream);
  }

  // repeated int32 m_addnostackitems = 4;
  {
    int byte_size = _m_addnostackitems_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_m_addnostackitems(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_BAG_UPDATE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.delitem m_delitems = 1;
  total_size += 1UL * this->_internal_m_delitems_size();
  for (const auto& msg : this->m_delitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 m_delnostackitems = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->m_delnostackitems_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_delnostackitems_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE.additem m_additems = 3;
  total_size += 1UL * this->_internal_m_additems_size();
  for (const auto& msg : this->m_additems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 m_addnostackitems = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->m_addnostackitems_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_addnostackitems_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_BAG_UPDATE_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_BAG_UPDATE_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::MergeFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_delitems_.MergeFrom(from.m_delitems_);
  m_delnostackitems_.MergeFrom(from.m_delnostackitems_);
  m_additems_.MergeFrom(from.m_additems_);
  m_addnostackitems_.MergeFrom(from.m_addnostackitems_);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::CopyFrom(const PROBUFF_NET_BAG_UPDATE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_BAG_UPDATE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_BAG_UPDATE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_BAG_UPDATE_RESPONSE::InternalSwap(PROBUFF_NET_BAG_UPDATE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  m_delitems_.InternalSwap(&other->m_delitems_);
  m_delnostackitems_.InternalSwap(&other->m_delnostackitems_);
  m_additems_.InternalSwap(&other->m_additems_);
  m_addnostackitems_.InternalSwap(&other->m_addnostackitems_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_BAG_UPDATE_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_CMD::InitAsDefaultInstance() {
}
class PROBUFF_NET_CMD::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CMD>()._has_bits_);
  static void set_has_m_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CMD::PROBUFF_NET_CMD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CMD)
}
PROBUFF_NET_CMD::PROBUFF_NET_CMD(const PROBUFF_NET_CMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_cmd()) {
    m_cmd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_cmd(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CMD)
}

void PROBUFF_NET_CMD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_CMD_net_2eproto.base);
  m_cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PROBUFF_NET_CMD::~PROBUFF_NET_CMD() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CMD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_CMD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_cmd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_CMD::ArenaDtor(void* object) {
  PROBUFF_NET_CMD* _this = reinterpret_cast< PROBUFF_NET_CMD* >(object);
  (void)_this;
}
void PROBUFF_NET_CMD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_CMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_CMD& PROBUFF_NET_CMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_CMD_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_CMD::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_cmd_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string m_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_m_cmd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_CMD.m_cmd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_CMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string m_cmd = 1;
  if (_internal_has_m_cmd()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_cmd().data(), static_cast<int>(this->_internal_m_cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_CMD.m_cmd");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_m_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CMD)
  return target;
}

size_t PROBUFF_NET_CMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string m_cmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_CMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_CMD)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_CMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_CMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_CMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_CMD)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_CMD::MergeFrom(const PROBUFF_NET_CMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_cmd()) {
    _internal_set_m_cmd(from._internal_m_cmd());
  }
}

void PROBUFF_NET_CMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_CMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_CMD::CopyFrom(const PROBUFF_NET_CMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CMD::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CMD::InternalSwap(PROBUFF_NET_CMD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_cmd_.Swap(&other->m_cmd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_CHAT::InitAsDefaultInstance() {
}
class PROBUFF_NET_CHAT::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHAT>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_channelid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CHAT::PROBUFF_NET_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHAT)
}
PROBUFF_NET_CHAT::PROBUFF_NET_CHAT(const PROBUFF_NET_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_content()) {
    m_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_content(),
      GetArena());
  }
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_channelid_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_channelid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHAT)
}

void PROBUFF_NET_CHAT::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_CHAT_net_2eproto.base);
  m_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_channelid_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_channelid_));
}

PROBUFF_NET_CHAT::~PROBUFF_NET_CHAT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHAT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_CHAT::ArenaDtor(void* object) {
  PROBUFF_NET_CHAT* _this = reinterpret_cast< PROBUFF_NET_CHAT* >(object);
  (void)_this;
}
void PROBUFF_NET_CHAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_CHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_CHAT& PROBUFF_NET_CHAT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_CHAT_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_content_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_channelid_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_channelid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_type(&has_bits);
          m_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_channelid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_channelid(&has_bits);
          m_channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_m_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_CHAT.m_content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_CHAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_type(), target);
  }

  // int32 m_channelid = 2;
  if (_internal_has_m_channelid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_channelid(), target);
  }

  // string m_content = 3;
  if (_internal_has_m_content()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_content().data(), static_cast<int>(this->_internal_m_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_CHAT.m_content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_m_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHAT)
  return target;
}

size_t PROBUFF_NET_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // string m_content = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_content());
    }

    // int32 m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_type());
    }

    // int32 m_channelid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_channelid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_CHAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_CHAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_CHAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_CHAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_CHAT)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_CHAT::MergeFrom(const PROBUFF_NET_CHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_content(from._internal_m_content());
    }
    if (cached_has_bits & 0x00000002u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_channelid_ = from.m_channelid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_CHAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_CHAT::CopyFrom(const PROBUFF_NET_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHAT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHAT::InternalSwap(PROBUFF_NET_CHAT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_content_.Swap(&other->m_content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT, m_channelid_)
      + sizeof(PROBUFF_NET_CHAT::m_channelid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHAT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void chatitem::InitAsDefaultInstance() {
}
class chatitem::_Internal {
 public:
  using HasBits = decltype(std::declval<chatitem>()._has_bits_);
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_rolename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_content(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

chatitem::chatitem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.chatitem)
}
chatitem::chatitem(const chatitem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_rolename()) {
    m_rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_rolename(),
      GetArena());
  }
  m_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_content()) {
    m_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_content(),
      GetArena());
  }
  ::memcpy(&m_roleid_, &from.m_roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_utc_) -
    reinterpret_cast<char*>(&m_roleid_)) + sizeof(m_utc_));
  // @@protoc_insertion_point(copy_constructor:pbnet.chatitem)
}

void chatitem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_chatitem_net_2eproto.base);
  m_rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_utc_) -
      reinterpret_cast<char*>(&m_roleid_)) + sizeof(m_utc_));
}

chatitem::~chatitem() {
  // @@protoc_insertion_point(destructor:pbnet.chatitem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void chatitem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_rolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void chatitem::ArenaDtor(void* object) {
  chatitem* _this = reinterpret_cast< chatitem* >(object);
  (void)_this;
}
void chatitem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void chatitem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const chatitem& chatitem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_chatitem_net_2eproto.base);
  return *internal_default_instance();
}


void chatitem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.chatitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_rolename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      m_content_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&m_roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_utc_) -
        reinterpret_cast<char*>(&m_roleid_)) + sizeof(m_utc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* chatitem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_roleid(&has_bits);
          m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_rolename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_m_rolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.chatitem.m_rolename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_m_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.chatitem.m_content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_utc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_utc(&has_bits);
          m_utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* chatitem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.chatitem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_roleid = 1;
  if (_internal_has_m_roleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_roleid(), target);
  }

  // string m_rolename = 2;
  if (_internal_has_m_rolename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_rolename().data(), static_cast<int>(this->_internal_m_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.chatitem.m_rolename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_rolename(), target);
  }

  // string m_content = 3;
  if (_internal_has_m_content()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_content().data(), static_cast<int>(this->_internal_m_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.chatitem.m_content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_m_content(), target);
  }

  // int32 m_utc = 4;
  if (_internal_has_m_utc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_utc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.chatitem)
  return target;
}

size_t chatitem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.chatitem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // string m_rolename = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_rolename());
    }

    // string m_content = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_content());
    }

    // int64 m_roleid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_roleid());
    }

    // int32 m_utc = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_utc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void chatitem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.chatitem)
  GOOGLE_DCHECK_NE(&from, this);
  const chatitem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<chatitem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.chatitem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.chatitem)
    MergeFrom(*source);
  }
}

void chatitem::MergeFrom(const chatitem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.chatitem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_rolename(from._internal_m_rolename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_m_content(from._internal_m_content());
    }
    if (cached_has_bits & 0x00000004u) {
      m_roleid_ = from.m_roleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_utc_ = from.m_utc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void chatitem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.chatitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chatitem::CopyFrom(const chatitem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.chatitem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatitem::IsInitialized() const {
  return true;
}

void chatitem::InternalSwap(chatitem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_rolename_.Swap(&other->m_rolename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  m_content_.Swap(&other->m_content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(chatitem, m_utc_)
      + sizeof(chatitem::m_utc_)
      - PROTOBUF_FIELD_OFFSET(chatitem, m_roleid_)>(
          reinterpret_cast<char*>(&m_roleid_),
          reinterpret_cast<char*>(&other->m_roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata chatitem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_CHAT_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_CHAT_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHAT_RESPONSE>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_channelid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_CHAT_RESPONSE::PROBUFF_NET_CHAT_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_chatlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
}
PROBUFF_NET_CHAT_RESPONSE::PROBUFF_NET_CHAT_RESPONSE(const PROBUFF_NET_CHAT_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_chatlist_(from.m_chatlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_stat_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
}

void PROBUFF_NET_CHAT_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_CHAT_RESPONSE_net_2eproto.base);
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_stat_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_stat_));
}

PROBUFF_NET_CHAT_RESPONSE::~PROBUFF_NET_CHAT_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_CHAT_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_CHAT_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_CHAT_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_CHAT_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_CHAT_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_CHAT_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_CHAT_RESPONSE& PROBUFF_NET_CHAT_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_CHAT_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_CHAT_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_chatlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_stat_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_stat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHAT_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_type(&has_bits);
          m_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_channelid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_channelid(&has_bits);
          m_channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbnet.chatitem m_chatlist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_chatlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool m_stat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_CHAT_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_type(), target);
  }

  // int32 m_channelid = 2;
  if (_internal_has_m_channelid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_channelid(), target);
  }

  // repeated .pbnet.chatitem m_chatlist = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_chatlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_m_chatlist(i), target, stream);
  }

  // bool m_stat = 4;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  return target;
}

size_t PROBUFF_NET_CHAT_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.chatitem m_chatlist = 3;
  total_size += 1UL * this->_internal_m_chatlist_size();
  for (const auto& msg : this->m_chatlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // int32 m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_type());
    }

    // int32 m_channelid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_channelid());
    }

    // bool m_stat = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_CHAT_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_CHAT_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_CHAT_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_CHAT_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_CHAT_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_CHAT_RESPONSE::MergeFrom(const PROBUFF_NET_CHAT_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_chatlist_.MergeFrom(from.m_chatlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_channelid_ = from.m_channelid_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_stat_ = from.m_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_CHAT_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_CHAT_RESPONSE::CopyFrom(const PROBUFF_NET_CHAT_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHAT_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHAT_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHAT_RESPONSE::InternalSwap(PROBUFF_NET_CHAT_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_chatlist_.InternalSwap(&other->m_chatlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT_RESPONSE, m_stat_)
      + sizeof(PROBUFF_NET_CHAT_RESPONSE::m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_CHAT_RESPONSE, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHAT_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_SWITCH_LINE::InitAsDefaultInstance() {
}
class PROBUFF_NET_SWITCH_LINE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_SWITCH_LINE>()._has_bits_);
  static void set_has_m_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_SWITCH_LINE::PROBUFF_NET_SWITCH_LINE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SWITCH_LINE)
}
PROBUFF_NET_SWITCH_LINE::PROBUFF_NET_SWITCH_LINE(const PROBUFF_NET_SWITCH_LINE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_line_ = from.m_line_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SWITCH_LINE)
}

void PROBUFF_NET_SWITCH_LINE::SharedCtor() {
  m_line_ = 0;
}

PROBUFF_NET_SWITCH_LINE::~PROBUFF_NET_SWITCH_LINE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SWITCH_LINE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_SWITCH_LINE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_SWITCH_LINE::ArenaDtor(void* object) {
  PROBUFF_NET_SWITCH_LINE* _this = reinterpret_cast< PROBUFF_NET_SWITCH_LINE* >(object);
  (void)_this;
}
void PROBUFF_NET_SWITCH_LINE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_SWITCH_LINE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_SWITCH_LINE& PROBUFF_NET_SWITCH_LINE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_SWITCH_LINE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_SWITCH_LINE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_line_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SWITCH_LINE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_line(&has_bits);
          m_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_SWITCH_LINE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_line = 1;
  if (_internal_has_m_line()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SWITCH_LINE)
  return target;
}

size_t PROBUFF_NET_SWITCH_LINE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 m_line = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_SWITCH_LINE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_SWITCH_LINE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_SWITCH_LINE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_SWITCH_LINE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_SWITCH_LINE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_SWITCH_LINE::MergeFrom(const PROBUFF_NET_SWITCH_LINE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_line()) {
    _internal_set_m_line(from._internal_m_line());
  }
}

void PROBUFF_NET_SWITCH_LINE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_SWITCH_LINE::CopyFrom(const PROBUFF_NET_SWITCH_LINE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SWITCH_LINE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SWITCH_LINE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SWITCH_LINE::InternalSwap(PROBUFF_NET_SWITCH_LINE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_line_, other->m_line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SWITCH_LINE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_SWITCH_LINE_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_SWITCH_LINE_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_SWITCH_LINE_RESPONSE>()._has_bits_);
  static void set_has_m_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_SWITCH_LINE_RESPONSE::PROBUFF_NET_SWITCH_LINE_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
}
PROBUFF_NET_SWITCH_LINE_RESPONSE::PROBUFF_NET_SWITCH_LINE_RESPONSE(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_line_, &from.m_line_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_stat_) -
    reinterpret_cast<char*>(&m_line_)) + sizeof(m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::SharedCtor() {
  ::memset(&m_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_stat_) -
      reinterpret_cast<char*>(&m_line_)) + sizeof(m_stat_));
}

PROBUFF_NET_SWITCH_LINE_RESPONSE::~PROBUFF_NET_SWITCH_LINE_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_SWITCH_LINE_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_SWITCH_LINE_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_SWITCH_LINE_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_SWITCH_LINE_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_SWITCH_LINE_RESPONSE& PROBUFF_NET_SWITCH_LINE_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_SWITCH_LINE_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_SWITCH_LINE_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_line_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_stat_) -
        reinterpret_cast<char*>(&m_line_)) + sizeof(m_stat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SWITCH_LINE_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_line(&has_bits);
          m_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_SWITCH_LINE_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_line = 1;
  if (_internal_has_m_line()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_line(), target);
  }

  // bool m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  return target;
}

size_t PROBUFF_NET_SWITCH_LINE_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 m_line = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_line());
    }

    // bool m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_SWITCH_LINE_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_SWITCH_LINE_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::MergeFrom(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_line_ = from.m_line_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_stat_ = from.m_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::CopyFrom(const PROBUFF_NET_SWITCH_LINE_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SWITCH_LINE_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SWITCH_LINE_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SWITCH_LINE_RESPONSE::InternalSwap(PROBUFF_NET_SWITCH_LINE_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SWITCH_LINE_RESPONSE, m_stat_)
      + sizeof(PROBUFF_NET_SWITCH_LINE_RESPONSE::m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SWITCH_LINE_RESPONSE, m_line_)>(
          reinterpret_cast<char*>(&m_line_),
          reinterpret_cast<char*>(&other->m_line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SWITCH_LINE_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MAIL_LIST::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_LIST::_Internal {
 public:
};

PROBUFF_NET_MAIL_LIST::PROBUFF_NET_MAIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_LIST)
}
PROBUFF_NET_MAIL_LIST::PROBUFF_NET_MAIL_LIST(const PROBUFF_NET_MAIL_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_LIST)
}

void PROBUFF_NET_MAIL_LIST::SharedCtor() {
}

PROBUFF_NET_MAIL_LIST::~PROBUFF_NET_MAIL_LIST() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_LIST)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_LIST::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_LIST::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_LIST* _this = reinterpret_cast< PROBUFF_NET_MAIL_LIST* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_LIST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_LIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_LIST& PROBUFF_NET_MAIL_LIST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_LIST_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_LIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_LIST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_LIST)
  return target;
}

size_t PROBUFF_NET_MAIL_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_LIST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_LIST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_LIST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_LIST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_LIST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_LIST)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_LIST::MergeFrom(const PROBUFF_NET_MAIL_LIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_MAIL_LIST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_LIST::CopyFrom(const PROBUFF_NET_MAIL_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_LIST::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_LIST::InternalSwap(PROBUFF_NET_MAIL_LIST* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse() {}
PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::MergeFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PROBUFF_NET_MAIL_LIST_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_LIST_RESPONSE::_Internal {
 public:
};

void PROBUFF_NET_MAIL_LIST_RESPONSE::clear_m_mail() {
  m_mail_.Clear();
}
PROBUFF_NET_MAIL_LIST_RESPONSE::PROBUFF_NET_MAIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_mail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
}
PROBUFF_NET_MAIL_LIST_RESPONSE::PROBUFF_NET_MAIL_LIST_RESPONSE(const PROBUFF_NET_MAIL_LIST_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_mail_.MergeFrom(from.m_mail_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_net_2eproto.base);
}

PROBUFF_NET_MAIL_LIST_RESPONSE::~PROBUFF_NET_MAIL_LIST_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_LIST_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MAIL_LIST_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_LIST_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_LIST_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_LIST_RESPONSE& PROBUFF_NET_MAIL_LIST_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_LIST_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_LIST_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_mail_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_LIST_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .pbdb.mail> m_mail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_mail_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_LIST_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .pbdb.mail> m_mail = 1;
  if (!this->_internal_m_mail().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_m_mail().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_m_mail().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_iterator
          it = this->_internal_m_mail().begin();
          it != this->_internal_m_mail().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_iterator
          it = this->_internal_m_mail().begin();
          it != this->_internal_m_mail().end(); ++it) {
        target = PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_LIST_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .pbdb.mail> m_mail = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_mail_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::pbdb::mail >::const_iterator
      it = this->_internal_m_mail().begin();
      it != this->_internal_m_mail().end(); ++it) {
    total_size += PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_LIST_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_LIST_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::MergeFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_mail_.MergeFrom(from.m_mail_);
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_LIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_LIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_LIST_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_LIST_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_LIST_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  m_mail_.Swap(&other->m_mail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_LIST_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MAIL_READ::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_READ::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_READ>()._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_READ::PROBUFF_NET_MAIL_READ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_READ)
}
PROBUFF_NET_MAIL_READ::PROBUFF_NET_MAIL_READ(const PROBUFF_NET_MAIL_READ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_mailid_ = from.m_mailid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_READ)
}

void PROBUFF_NET_MAIL_READ::SharedCtor() {
  m_mailid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_MAIL_READ::~PROBUFF_NET_MAIL_READ() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_READ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_READ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_READ::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_READ* _this = reinterpret_cast< PROBUFF_NET_MAIL_READ* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_READ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_READ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_READ& PROBUFF_NET_MAIL_READ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_READ_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_READ::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_READ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_mailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_READ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_READ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_READ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_mailid = 1;
  if (_internal_has_m_mailid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_mailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_READ)
  return target;
}

size_t PROBUFF_NET_MAIL_READ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_READ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 m_mailid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_mailid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_READ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_READ)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_READ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_READ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_READ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_READ)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_READ::MergeFrom(const PROBUFF_NET_MAIL_READ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_READ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_mailid()) {
    _internal_set_m_mailid(from._internal_m_mailid());
  }
}

void PROBUFF_NET_MAIL_READ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_READ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_READ::CopyFrom(const PROBUFF_NET_MAIL_READ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_READ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_READ::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_READ::InternalSwap(PROBUFF_NET_MAIL_READ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_mailid_, other->m_mailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_READ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MAIL_READ_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_READ_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_READ_RESPONSE>()._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_READ_RESPONSE::PROBUFF_NET_MAIL_READ_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
}
PROBUFF_NET_MAIL_READ_RESPONSE::PROBUFF_NET_MAIL_READ_RESPONSE(const PROBUFF_NET_MAIL_READ_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_mailid_, &from.m_mailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_stat_) -
    reinterpret_cast<char*>(&m_mailid_)) + sizeof(m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
}

void PROBUFF_NET_MAIL_READ_RESPONSE::SharedCtor() {
  ::memset(&m_mailid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_stat_) -
      reinterpret_cast<char*>(&m_mailid_)) + sizeof(m_stat_));
}

PROBUFF_NET_MAIL_READ_RESPONSE::~PROBUFF_NET_MAIL_READ_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_READ_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_READ_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_READ_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MAIL_READ_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_READ_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_READ_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_READ_RESPONSE& PROBUFF_NET_MAIL_READ_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_READ_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_READ_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_mailid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_stat_) -
        reinterpret_cast<char*>(&m_mailid_)) + sizeof(m_stat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_READ_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_READ_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_mailid = 1;
  if (_internal_has_m_mailid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_mailid(), target);
  }

  // bool m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_READ_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 m_mailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_mailid());
    }

    // bool m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_READ_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_READ_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_READ_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_READ_RESPONSE::MergeFrom(const PROBUFF_NET_MAIL_READ_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_mailid_ = from.m_mailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_stat_ = from.m_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MAIL_READ_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_READ_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_READ_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_READ_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_READ_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_READ_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_READ_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_READ_RESPONSE, m_stat_)
      + sizeof(PROBUFF_NET_MAIL_READ_RESPONSE::m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_READ_RESPONSE, m_mailid_)>(
          reinterpret_cast<char*>(&m_mailid_),
          reinterpret_cast<char*>(&other->m_mailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_READ_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MAIL_DRAW::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_DRAW::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DRAW>()._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_DRAW::PROBUFF_NET_MAIL_DRAW(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DRAW)
}
PROBUFF_NET_MAIL_DRAW::PROBUFF_NET_MAIL_DRAW(const PROBUFF_NET_MAIL_DRAW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_mailid_ = from.m_mailid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DRAW)
}

void PROBUFF_NET_MAIL_DRAW::SharedCtor() {
  m_mailid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_MAIL_DRAW::~PROBUFF_NET_MAIL_DRAW() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DRAW)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_DRAW::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_DRAW::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_DRAW* _this = reinterpret_cast< PROBUFF_NET_MAIL_DRAW* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_DRAW::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_DRAW::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_DRAW& PROBUFF_NET_MAIL_DRAW::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_DRAW_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_DRAW::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_mailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DRAW::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_DRAW::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_mailid = 1;
  if (_internal_has_m_mailid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_mailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DRAW)
  return target;
}

size_t PROBUFF_NET_MAIL_DRAW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 m_mailid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_mailid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_DRAW::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_DRAW* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_DRAW>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_DRAW)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_DRAW)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_DRAW::MergeFrom(const PROBUFF_NET_MAIL_DRAW& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_mailid()) {
    _internal_set_m_mailid(from._internal_m_mailid());
  }
}

void PROBUFF_NET_MAIL_DRAW::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_DRAW::CopyFrom(const PROBUFF_NET_MAIL_DRAW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DRAW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DRAW::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DRAW::InternalSwap(PROBUFF_NET_MAIL_DRAW* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_mailid_, other->m_mailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DRAW::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MAIL_DRAW_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_DRAW_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DRAW_RESPONSE>()._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_DRAW_RESPONSE::PROBUFF_NET_MAIL_DRAW_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
}
PROBUFF_NET_MAIL_DRAW_RESPONSE::PROBUFF_NET_MAIL_DRAW_RESPONSE(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_mailid_, &from.m_mailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_stat_) -
    reinterpret_cast<char*>(&m_mailid_)) + sizeof(m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::SharedCtor() {
  ::memset(&m_mailid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_stat_) -
      reinterpret_cast<char*>(&m_mailid_)) + sizeof(m_stat_));
}

PROBUFF_NET_MAIL_DRAW_RESPONSE::~PROBUFF_NET_MAIL_DRAW_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_DRAW_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MAIL_DRAW_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_DRAW_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_DRAW_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_DRAW_RESPONSE& PROBUFF_NET_MAIL_DRAW_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_DRAW_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_DRAW_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_mailid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_stat_) -
        reinterpret_cast<char*>(&m_mailid_)) + sizeof(m_stat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DRAW_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_DRAW_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_mailid = 1;
  if (_internal_has_m_mailid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_mailid(), target);
  }

  // bool m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_DRAW_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 m_mailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_mailid());
    }

    // bool m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_DRAW_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_DRAW_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::MergeFrom(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_mailid_ = from.m_mailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_stat_ = from.m_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_DRAW_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DRAW_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DRAW_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DRAW_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_DRAW_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DRAW_RESPONSE, m_stat_)
      + sizeof(PROBUFF_NET_MAIL_DRAW_RESPONSE::m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DRAW_RESPONSE, m_mailid_)>(
          reinterpret_cast<char*>(&m_mailid_),
          reinterpret_cast<char*>(&other->m_mailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DRAW_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MAIL_DEL::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_DEL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DEL>()._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MAIL_DEL::PROBUFF_NET_MAIL_DEL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DEL)
}
PROBUFF_NET_MAIL_DEL::PROBUFF_NET_MAIL_DEL(const PROBUFF_NET_MAIL_DEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_mailid_ = from.m_mailid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DEL)
}

void PROBUFF_NET_MAIL_DEL::SharedCtor() {
  m_mailid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_MAIL_DEL::~PROBUFF_NET_MAIL_DEL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DEL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_DEL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_DEL::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_DEL* _this = reinterpret_cast< PROBUFF_NET_MAIL_DEL* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_DEL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_DEL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_DEL& PROBUFF_NET_MAIL_DEL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_DEL_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_DEL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_mailid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DEL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_DEL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_mailid = 1;
  if (_internal_has_m_mailid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_mailid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DEL)
  return target;
}

size_t PROBUFF_NET_MAIL_DEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DEL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 m_mailid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_mailid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_DEL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_DEL)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_DEL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_DEL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_DEL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_DEL)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_DEL::MergeFrom(const PROBUFF_NET_MAIL_DEL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DEL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_mailid()) {
    _internal_set_m_mailid(from._internal_m_mailid());
  }
}

void PROBUFF_NET_MAIL_DEL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_DEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_DEL::CopyFrom(const PROBUFF_NET_MAIL_DEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DEL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DEL::InternalSwap(PROBUFF_NET_MAIL_DEL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_mailid_, other->m_mailid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DEL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MAIL_DEL_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_MAIL_DEL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MAIL_DEL_RESPONSE>()._has_bits_);
  static void set_has_m_mailid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MAIL_DEL_RESPONSE::PROBUFF_NET_MAIL_DEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
}
PROBUFF_NET_MAIL_DEL_RESPONSE::PROBUFF_NET_MAIL_DEL_RESPONSE(const PROBUFF_NET_MAIL_DEL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_mailid_, &from.m_mailid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_stat_) -
    reinterpret_cast<char*>(&m_mailid_)) + sizeof(m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::SharedCtor() {
  ::memset(&m_mailid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_stat_) -
      reinterpret_cast<char*>(&m_mailid_)) + sizeof(m_stat_));
}

PROBUFF_NET_MAIL_DEL_RESPONSE::~PROBUFF_NET_MAIL_DEL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MAIL_DEL_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MAIL_DEL_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_MAIL_DEL_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MAIL_DEL_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MAIL_DEL_RESPONSE& PROBUFF_NET_MAIL_DEL_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MAIL_DEL_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MAIL_DEL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_mailid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_stat_) -
        reinterpret_cast<char*>(&m_mailid_)) + sizeof(m_stat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MAIL_DEL_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_mailid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_mailid(&has_bits);
          m_mailid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MAIL_DEL_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_mailid = 1;
  if (_internal_has_m_mailid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_mailid(), target);
  }

  // bool m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MAIL_DEL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 m_mailid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_mailid());
    }

    // bool m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MAIL_DEL_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MAIL_DEL_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::MergeFrom(const PROBUFF_NET_MAIL_DEL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_mailid_ = from.m_mailid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_stat_ = from.m_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::CopyFrom(const PROBUFF_NET_MAIL_DEL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MAIL_DEL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MAIL_DEL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MAIL_DEL_RESPONSE::InternalSwap(PROBUFF_NET_MAIL_DEL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DEL_RESPONSE, m_stat_)
      + sizeof(PROBUFF_NET_MAIL_DEL_RESPONSE::m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MAIL_DEL_RESPONSE, m_mailid_)>(
          reinterpret_cast<char*>(&m_mailid_),
          reinterpret_cast<char*>(&other->m_mailid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MAIL_DEL_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VECTOR2::InitAsDefaultInstance() {
}
class VECTOR2::_Internal {
 public:
  using HasBits = decltype(std::declval<VECTOR2>()._has_bits_);
  static void set_has_m_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VECTOR2::VECTOR2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.VECTOR2)
}
VECTOR2::VECTOR2(const VECTOR2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_x_, &from.m_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_y_) -
    reinterpret_cast<char*>(&m_x_)) + sizeof(m_y_));
  // @@protoc_insertion_point(copy_constructor:pbnet.VECTOR2)
}

void VECTOR2::SharedCtor() {
  ::memset(&m_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_y_) -
      reinterpret_cast<char*>(&m_x_)) + sizeof(m_y_));
}

VECTOR2::~VECTOR2() {
  // @@protoc_insertion_point(destructor:pbnet.VECTOR2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VECTOR2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VECTOR2::ArenaDtor(void* object) {
  VECTOR2* _this = reinterpret_cast< VECTOR2* >(object);
  (void)_this;
}
void VECTOR2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VECTOR2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VECTOR2& VECTOR2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VECTOR2_net_2eproto.base);
  return *internal_default_instance();
}


void VECTOR2::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.VECTOR2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_y_) -
        reinterpret_cast<char*>(&m_x_)) + sizeof(m_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VECTOR2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_x(&has_bits);
          m_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_y(&has_bits);
          m_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VECTOR2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.VECTOR2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_x = 1;
  if (_internal_has_m_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_x(), target);
  }

  // int32 m_y = 2;
  if (_internal_has_m_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.VECTOR2)
  return target;
}

size_t VECTOR2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.VECTOR2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 m_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_x());
    }

    // int32 m_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VECTOR2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.VECTOR2)
  GOOGLE_DCHECK_NE(&from, this);
  const VECTOR2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VECTOR2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.VECTOR2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.VECTOR2)
    MergeFrom(*source);
  }
}

void VECTOR2::MergeFrom(const VECTOR2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.VECTOR2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_x_ = from.m_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_y_ = from.m_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VECTOR2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.VECTOR2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VECTOR2::CopyFrom(const VECTOR2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.VECTOR2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VECTOR2::IsInitialized() const {
  return true;
}

void VECTOR2::InternalSwap(VECTOR2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VECTOR2, m_y_)
      + sizeof(VECTOR2::m_y_)
      - PROTOBUF_FIELD_OFFSET(VECTOR2, m_x_)>(
          reinterpret_cast<char*>(&m_x_),
          reinterpret_cast<char*>(&other->m_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VECTOR2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VECTOR3::InitAsDefaultInstance() {
}
class VECTOR3::_Internal {
 public:
  using HasBits = decltype(std::declval<VECTOR3>()._has_bits_);
  static void set_has_m_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VECTOR3::VECTOR3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.VECTOR3)
}
VECTOR3::VECTOR3(const VECTOR3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_x_, &from.m_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_z_) -
    reinterpret_cast<char*>(&m_x_)) + sizeof(m_z_));
  // @@protoc_insertion_point(copy_constructor:pbnet.VECTOR3)
}

void VECTOR3::SharedCtor() {
  ::memset(&m_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_z_) -
      reinterpret_cast<char*>(&m_x_)) + sizeof(m_z_));
}

VECTOR3::~VECTOR3() {
  // @@protoc_insertion_point(destructor:pbnet.VECTOR3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VECTOR3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VECTOR3::ArenaDtor(void* object) {
  VECTOR3* _this = reinterpret_cast< VECTOR3* >(object);
  (void)_this;
}
void VECTOR3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VECTOR3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VECTOR3& VECTOR3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VECTOR3_net_2eproto.base);
  return *internal_default_instance();
}


void VECTOR3::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.VECTOR3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&m_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_z_) -
        reinterpret_cast<char*>(&m_x_)) + sizeof(m_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VECTOR3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_x(&has_bits);
          m_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_y(&has_bits);
          m_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_z(&has_bits);
          m_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VECTOR3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.VECTOR3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_x = 1;
  if (_internal_has_m_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_x(), target);
  }

  // int32 m_y = 2;
  if (_internal_has_m_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_y(), target);
  }

  // int32 m_z = 3;
  if (_internal_has_m_z()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.VECTOR3)
  return target;
}

size_t VECTOR3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.VECTOR3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // int32 m_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_x());
    }

    // int32 m_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_y());
    }

    // int32 m_z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_z());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VECTOR3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.VECTOR3)
  GOOGLE_DCHECK_NE(&from, this);
  const VECTOR3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VECTOR3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.VECTOR3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.VECTOR3)
    MergeFrom(*source);
  }
}

void VECTOR3::MergeFrom(const VECTOR3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.VECTOR3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      m_x_ = from.m_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_y_ = from.m_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_z_ = from.m_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VECTOR3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.VECTOR3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VECTOR3::CopyFrom(const VECTOR3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.VECTOR3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VECTOR3::IsInitialized() const {
  return true;
}

void VECTOR3::InternalSwap(VECTOR3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VECTOR3, m_z_)
      + sizeof(VECTOR3::m_z_)
      - PROTOBUF_FIELD_OFFSET(VECTOR3, m_x_)>(
          reinterpret_cast<char*>(&m_x_),
          reinterpret_cast<char*>(&other->m_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VECTOR3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UNIT_POSITION::InitAsDefaultInstance() {
  ::pbnet::_UNIT_POSITION_default_instance_._instance.get_mutable()->m_position_ = const_cast< ::pbnet::VECTOR2*>(
      ::pbnet::VECTOR2::internal_default_instance());
}
class UNIT_POSITION::_Internal {
 public:
  using HasBits = decltype(std::declval<UNIT_POSITION>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbnet::VECTOR2& m_position(const UNIT_POSITION* msg);
  static void set_has_m_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pbnet::VECTOR2&
UNIT_POSITION::_Internal::m_position(const UNIT_POSITION* msg) {
  return *msg->m_position_;
}
UNIT_POSITION::UNIT_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.UNIT_POSITION)
}
UNIT_POSITION::UNIT_POSITION(const UNIT_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_position()) {
    m_position_ = new ::pbnet::VECTOR2(*from.m_position_);
  } else {
    m_position_ = nullptr;
  }
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_speed_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_speed_));
  // @@protoc_insertion_point(copy_constructor:pbnet.UNIT_POSITION)
}

void UNIT_POSITION::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UNIT_POSITION_net_2eproto.base);
  ::memset(&m_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_speed_) -
      reinterpret_cast<char*>(&m_position_)) + sizeof(m_speed_));
}

UNIT_POSITION::~UNIT_POSITION() {
  // @@protoc_insertion_point(destructor:pbnet.UNIT_POSITION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UNIT_POSITION::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete m_position_;
}

void UNIT_POSITION::ArenaDtor(void* object) {
  UNIT_POSITION* _this = reinterpret_cast< UNIT_POSITION* >(object);
  (void)_this;
}
void UNIT_POSITION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UNIT_POSITION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UNIT_POSITION& UNIT_POSITION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UNIT_POSITION_net_2eproto.base);
  return *internal_default_instance();
}


void UNIT_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UNIT_POSITION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && m_position_ != nullptr) {
      delete m_position_;
    }
    m_position_ = nullptr;
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_speed_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UNIT_POSITION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbnet.VECTOR2 m_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_angle(&has_bits);
          m_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_m_speed(&has_bits);
          m_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UNIT_POSITION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UNIT_POSITION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 2;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_m_id(), target);
  }

  // .pbnet.VECTOR2 m_position = 3;
  if (_internal_has_m_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::m_position(this), target, stream);
  }

  // int32 m_angle = 4;
  if (_internal_has_m_angle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_angle(), target);
  }

  // int32 m_speed = 5;
  if (_internal_has_m_speed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_m_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UNIT_POSITION)
  return target;
}

size_t UNIT_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UNIT_POSITION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .pbnet.VECTOR2 m_position = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *m_position_);
    }

    // int64 m_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_id());
    }

    // int32 m_angle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_angle());
    }

    // int32 m_speed = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_speed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UNIT_POSITION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.UNIT_POSITION)
  GOOGLE_DCHECK_NE(&from, this);
  const UNIT_POSITION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UNIT_POSITION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.UNIT_POSITION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.UNIT_POSITION)
    MergeFrom(*source);
  }
}

void UNIT_POSITION::MergeFrom(const UNIT_POSITION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UNIT_POSITION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_m_position()->::pbnet::VECTOR2::MergeFrom(from._internal_m_position());
    }
    if (cached_has_bits & 0x00000002u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_angle_ = from.m_angle_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_speed_ = from.m_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UNIT_POSITION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.UNIT_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UNIT_POSITION::CopyFrom(const UNIT_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UNIT_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UNIT_POSITION::IsInitialized() const {
  return true;
}

void UNIT_POSITION::InternalSwap(UNIT_POSITION* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UNIT_POSITION, m_speed_)
      + sizeof(UNIT_POSITION::m_speed_)
      - PROTOBUF_FIELD_OFFSET(UNIT_POSITION, m_position_)>(
          reinterpret_cast<char*>(&m_position_),
          reinterpret_cast<char*>(&other->m_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UNIT_POSITION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnitAttribute::InitAsDefaultInstance() {
}
class UnitAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitAttribute>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitAttribute::UnitAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.UnitAttribute)
}
UnitAttribute::UnitAttribute(const UnitAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_value_, &from.m_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_type_) -
    reinterpret_cast<char*>(&m_value_)) + sizeof(m_type_));
  // @@protoc_insertion_point(copy_constructor:pbnet.UnitAttribute)
}

void UnitAttribute::SharedCtor() {
  ::memset(&m_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_type_) -
      reinterpret_cast<char*>(&m_value_)) + sizeof(m_type_));
}

UnitAttribute::~UnitAttribute() {
  // @@protoc_insertion_point(destructor:pbnet.UnitAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnitAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnitAttribute::ArenaDtor(void* object) {
  UnitAttribute* _this = reinterpret_cast< UnitAttribute* >(object);
  (void)_this;
}
void UnitAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnitAttribute& UnitAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnitAttribute_net_2eproto.base);
  return *internal_default_instance();
}


void UnitAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UnitAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_type_) -
        reinterpret_cast<char*>(&m_value_)) + sizeof(m_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_type(&has_bits);
          m_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 m_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_value(&has_bits);
          m_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UnitAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_type(), target);
  }

  // int64 m_value = 2;
  if (_internal_has_m_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_m_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UnitAttribute)
  return target;
}

size_t UnitAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UnitAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 m_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_value());
    }

    // int32 m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.UnitAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnitAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.UnitAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.UnitAttribute)
    MergeFrom(*source);
  }
}

void UnitAttribute::MergeFrom(const UnitAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UnitAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_value_ = from.m_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_type_ = from.m_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnitAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.UnitAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitAttribute::CopyFrom(const UnitAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UnitAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitAttribute::IsInitialized() const {
  return true;
}

void UnitAttribute::InternalSwap(UnitAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnitAttribute, m_type_)
      + sizeof(UnitAttribute::m_type_)
      - PROTOBUF_FIELD_OFFSET(UnitAttribute, m_value_)>(
          reinterpret_cast<char*>(&m_value_),
          reinterpret_cast<char*>(&other->m_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnitModule::InitAsDefaultInstance() {
}
class UnitModule::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitModule>()._has_bits_);
  static void set_has_m_mtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitModule::UnitModule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_modules_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.UnitModule)
}
UnitModule::UnitModule(const UnitModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_modules_(from.m_modules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_mtype_ = from.m_mtype_;
  // @@protoc_insertion_point(copy_constructor:pbnet.UnitModule)
}

void UnitModule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnitModule_net_2eproto.base);
  m_mtype_ = 0;
}

UnitModule::~UnitModule() {
  // @@protoc_insertion_point(destructor:pbnet.UnitModule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnitModule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnitModule::ArenaDtor(void* object) {
  UnitModule* _this = reinterpret_cast< UnitModule* >(object);
  (void)_this;
}
void UnitModule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnitModule& UnitModule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnitModule_net_2eproto.base);
  return *internal_default_instance();
}


void UnitModule::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UnitModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_modules_.Clear();
  m_mtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitModule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_mtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_mtype(&has_bits);
          m_mtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbnet.UnitAttribute m_modules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitModule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UnitModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_mtype = 1;
  if (_internal_has_m_mtype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_mtype(), target);
  }

  // repeated .pbnet.UnitAttribute m_modules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_modules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_m_modules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UnitModule)
  return target;
}

size_t UnitModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UnitModule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UnitAttribute m_modules = 2;
  total_size += 1UL * this->_internal_m_modules_size();
  for (const auto& msg : this->m_modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 m_mtype = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_mtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitModule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.UnitModule)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitModule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnitModule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.UnitModule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.UnitModule)
    MergeFrom(*source);
  }
}

void UnitModule::MergeFrom(const UnitModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UnitModule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_modules_.MergeFrom(from.m_modules_);
  if (from._internal_has_m_mtype()) {
    _internal_set_m_mtype(from._internal_m_mtype());
  }
}

void UnitModule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.UnitModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitModule::CopyFrom(const UnitModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UnitModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitModule::IsInitialized() const {
  return true;
}

void UnitModule::InternalSwap(UnitModule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_modules_.InternalSwap(&other->m_modules_);
  swap(m_mtype_, other->m_mtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitModule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UNIT::InitAsDefaultInstance() {
  ::pbnet::_UNIT_default_instance_._instance.get_mutable()->m_position_ = const_cast< ::pbnet::UNIT_POSITION*>(
      ::pbnet::UNIT_POSITION::internal_default_instance());
}
class UNIT::_Internal {
 public:
  using HasBits = decltype(std::declval<UNIT>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pbnet::UNIT_POSITION& m_position(const UNIT* msg);
  static void set_has_m_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::pbnet::UNIT_POSITION&
UNIT::_Internal::m_position(const UNIT* msg) {
  return *msg->m_position_;
}
UNIT::UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_modules_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.UNIT)
}
UNIT::UNIT(const UNIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_modules_(from.m_modules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_position()) {
    m_position_ = new ::pbnet::UNIT_POSITION(*from.m_position_);
  } else {
    m_position_ = nullptr;
  }
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_stat_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.UNIT)
}

void UNIT::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UNIT_net_2eproto.base);
  ::memset(&m_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_stat_) -
      reinterpret_cast<char*>(&m_position_)) + sizeof(m_stat_));
}

UNIT::~UNIT() {
  // @@protoc_insertion_point(destructor:pbnet.UNIT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UNIT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete m_position_;
}

void UNIT::ArenaDtor(void* object) {
  UNIT* _this = reinterpret_cast< UNIT* >(object);
  (void)_this;
}
void UNIT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UNIT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UNIT& UNIT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UNIT_net_2eproto.base);
  return *internal_default_instance();
}


void UNIT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.UNIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_modules_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && m_position_ != nullptr) {
      delete m_position_;
    }
    m_position_ = nullptr;
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_stat_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_stat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UNIT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.eunit m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eunit>(val));
        } else goto handle_unusual;
        continue;
      // int64 m_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbnet.UNIT_POSITION m_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbnet.UnitModule m_modules = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .pbnet.eunitstat m_stat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_stat(static_cast<::pbnet::eunitstat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UNIT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.UNIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.eunit m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // int64 m_id = 2;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_m_id(), target);
  }

  // .pbnet.UNIT_POSITION m_position = 3;
  if (_internal_has_m_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::m_position(this), target, stream);
  }

  // repeated .pbnet.UnitModule m_modules = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_modules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_m_modules(i), target, stream);
  }

  // .pbnet.eunitstat m_stat = 5;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.UNIT)
  return target;
}

size_t UNIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.UNIT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UnitModule m_modules = 4;
  total_size += 1UL * this->_internal_m_modules_size();
  for (const auto& msg : this->m_modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .pbnet.UNIT_POSITION m_position = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *m_position_);
    }

    // int64 m_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_id());
    }

    // .pbnet.eunit m_type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // .pbnet.eunitstat m_stat = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_stat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UNIT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.UNIT)
  GOOGLE_DCHECK_NE(&from, this);
  const UNIT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UNIT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.UNIT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.UNIT)
    MergeFrom(*source);
  }
}

void UNIT::MergeFrom(const UNIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.UNIT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_modules_.MergeFrom(from.m_modules_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_m_position()->::pbnet::UNIT_POSITION::MergeFrom(from._internal_m_position());
    }
    if (cached_has_bits & 0x00000002u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_stat_ = from.m_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UNIT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UNIT::CopyFrom(const UNIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UNIT::IsInitialized() const {
  return true;
}

void UNIT::InternalSwap(UNIT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_modules_.InternalSwap(&other->m_modules_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UNIT, m_stat_)
      + sizeof(UNIT::m_stat_)
      - PROTOBUF_FIELD_OFFSET(UNIT, m_position_)>(
          reinterpret_cast<char*>(&m_position_),
          reinterpret_cast<char*>(&other->m_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UNIT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_SYNC_ATTRIBUTE::InitAsDefaultInstance() {
}
class PROBUFF_NET_SYNC_ATTRIBUTE::_Internal {
 public:
};

PROBUFF_NET_SYNC_ATTRIBUTE::PROBUFF_NET_SYNC_ATTRIBUTE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_modules_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
}
PROBUFF_NET_SYNC_ATTRIBUTE::PROBUFF_NET_SYNC_ATTRIBUTE(const PROBUFF_NET_SYNC_ATTRIBUTE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      m_modules_(from.m_modules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
}

void PROBUFF_NET_SYNC_ATTRIBUTE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_SYNC_ATTRIBUTE_net_2eproto.base);
}

PROBUFF_NET_SYNC_ATTRIBUTE::~PROBUFF_NET_SYNC_ATTRIBUTE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_SYNC_ATTRIBUTE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_SYNC_ATTRIBUTE::ArenaDtor(void* object) {
  PROBUFF_NET_SYNC_ATTRIBUTE* _this = reinterpret_cast< PROBUFF_NET_SYNC_ATTRIBUTE* >(object);
  (void)_this;
}
void PROBUFF_NET_SYNC_ATTRIBUTE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_SYNC_ATTRIBUTE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_SYNC_ATTRIBUTE& PROBUFF_NET_SYNC_ATTRIBUTE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_SYNC_ATTRIBUTE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_SYNC_ATTRIBUTE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_modules_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_ATTRIBUTE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pbnet.UnitModule m_modules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_SYNC_ATTRIBUTE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnet.UnitModule m_modules = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_modules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_m_modules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  return target;
}

size_t PROBUFF_NET_SYNC_ATTRIBUTE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UnitModule m_modules = 1;
  total_size += 1UL * this->_internal_m_modules_size();
  for (const auto& msg : this->m_modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_SYNC_ATTRIBUTE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_SYNC_ATTRIBUTE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_SYNC_ATTRIBUTE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_SYNC_ATTRIBUTE::MergeFrom(const PROBUFF_NET_SYNC_ATTRIBUTE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_modules_.MergeFrom(from.m_modules_);
}

void PROBUFF_NET_SYNC_ATTRIBUTE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_SYNC_ATTRIBUTE::CopyFrom(const PROBUFF_NET_SYNC_ATTRIBUTE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_ATTRIBUTE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_ATTRIBUTE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_ATTRIBUTE::InternalSwap(PROBUFF_NET_SYNC_ATTRIBUTE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  m_modules_.InternalSwap(&other->m_modules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_ATTRIBUTE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_SYNC_UNIT::InitAsDefaultInstance() {
}
class PROBUFF_NET_SYNC_UNIT::_Internal {
 public:
};

PROBUFF_NET_SYNC_UNIT::PROBUFF_NET_SYNC_UNIT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_UNIT)
}
PROBUFF_NET_SYNC_UNIT::PROBUFF_NET_SYNC_UNIT(const PROBUFF_NET_SYNC_UNIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      m_units_(from.m_units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_UNIT)
}

void PROBUFF_NET_SYNC_UNIT::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_SYNC_UNIT_net_2eproto.base);
}

PROBUFF_NET_SYNC_UNIT::~PROBUFF_NET_SYNC_UNIT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_UNIT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_SYNC_UNIT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_SYNC_UNIT::ArenaDtor(void* object) {
  PROBUFF_NET_SYNC_UNIT* _this = reinterpret_cast< PROBUFF_NET_SYNC_UNIT* >(object);
  (void)_this;
}
void PROBUFF_NET_SYNC_UNIT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_SYNC_UNIT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_SYNC_UNIT& PROBUFF_NET_SYNC_UNIT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_SYNC_UNIT_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_SYNC_UNIT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_units_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_UNIT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pbnet.UNIT m_units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_SYNC_UNIT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnet.UNIT m_units = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_units_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_m_units(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_UNIT)
  return target;
}

size_t PROBUFF_NET_SYNC_UNIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.UNIT m_units = 1;
  total_size += 1UL * this->_internal_m_units_size();
  for (const auto& msg : this->m_units_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_SYNC_UNIT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_SYNC_UNIT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_SYNC_UNIT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_SYNC_UNIT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_SYNC_UNIT)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_SYNC_UNIT::MergeFrom(const PROBUFF_NET_SYNC_UNIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_units_.MergeFrom(from.m_units_);
}

void PROBUFF_NET_SYNC_UNIT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_SYNC_UNIT::CopyFrom(const PROBUFF_NET_SYNC_UNIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_UNIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_UNIT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_UNIT::InternalSwap(PROBUFF_NET_SYNC_UNIT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  m_units_.InternalSwap(&other->m_units_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_UNIT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ENTER_LEAVE_VIEW::InitAsDefaultInstance() {
}
class PROBUFF_NET_ENTER_LEAVE_VIEW::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ENTER_LEAVE_VIEW>()._has_bits_);
  static void set_has_m_isenter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ENTER_LEAVE_VIEW::PROBUFF_NET_ENTER_LEAVE_VIEW(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
}
PROBUFF_NET_ENTER_LEAVE_VIEW::PROBUFF_NET_ENTER_LEAVE_VIEW(const PROBUFF_NET_ENTER_LEAVE_VIEW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_units_(from.m_units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_isenter_ = from.m_isenter_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::SharedCtor() {
  m_isenter_ = false;
}

PROBUFF_NET_ENTER_LEAVE_VIEW::~PROBUFF_NET_ENTER_LEAVE_VIEW() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::ArenaDtor(void* object) {
  PROBUFF_NET_ENTER_LEAVE_VIEW* _this = reinterpret_cast< PROBUFF_NET_ENTER_LEAVE_VIEW* >(object);
  (void)_this;
}
void PROBUFF_NET_ENTER_LEAVE_VIEW::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ENTER_LEAVE_VIEW::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ENTER_LEAVE_VIEW& PROBUFF_NET_ENTER_LEAVE_VIEW::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ENTER_LEAVE_VIEW_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ENTER_LEAVE_VIEW::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_units_.Clear();
  m_isenter_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ENTER_LEAVE_VIEW::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool m_isenter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_isenter(&has_bits);
          m_isenter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 m_units = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_m_units(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_m_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ENTER_LEAVE_VIEW::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool m_isenter = 1;
  if (_internal_has_m_isenter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_m_isenter(), target);
  }

  // repeated int64 m_units = 2;
  {
    int byte_size = _m_units_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_m_units(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  return target;
}

size_t PROBUFF_NET_ENTER_LEAVE_VIEW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 m_units = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->m_units_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_units_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool m_isenter = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ENTER_LEAVE_VIEW* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ENTER_LEAVE_VIEW>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::MergeFrom(const PROBUFF_NET_ENTER_LEAVE_VIEW& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_units_.MergeFrom(from.m_units_);
  if (from._internal_has_m_isenter()) {
    _internal_set_m_isenter(from._internal_m_isenter());
  }
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::CopyFrom(const PROBUFF_NET_ENTER_LEAVE_VIEW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ENTER_LEAVE_VIEW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ENTER_LEAVE_VIEW::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ENTER_LEAVE_VIEW::InternalSwap(PROBUFF_NET_ENTER_LEAVE_VIEW* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_units_.InternalSwap(&other->m_units_);
  swap(m_isenter_, other->m_isenter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ENTER_LEAVE_VIEW::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse() {}
PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::MergeFrom(const PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PROBUFF_NET_SYNC_POSITION::InitAsDefaultInstance() {
}
class PROBUFF_NET_SYNC_POSITION::_Internal {
 public:
};

PROBUFF_NET_SYNC_POSITION::PROBUFF_NET_SYNC_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_position_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_POSITION)
}
PROBUFF_NET_SYNC_POSITION::PROBUFF_NET_SYNC_POSITION(const PROBUFF_NET_SYNC_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_position_.MergeFrom(from.m_position_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_POSITION)
}

void PROBUFF_NET_SYNC_POSITION::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_SYNC_POSITION_net_2eproto.base);
}

PROBUFF_NET_SYNC_POSITION::~PROBUFF_NET_SYNC_POSITION() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_POSITION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_SYNC_POSITION::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_SYNC_POSITION::ArenaDtor(void* object) {
  PROBUFF_NET_SYNC_POSITION* _this = reinterpret_cast< PROBUFF_NET_SYNC_POSITION* >(object);
  (void)_this;
}
void PROBUFF_NET_SYNC_POSITION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_SYNC_POSITION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_SYNC_POSITION& PROBUFF_NET_SYNC_POSITION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_SYNC_POSITION_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_SYNC_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_position_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_POSITION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int64, .pbnet.UNIT_POSITION> m_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_position_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_SYNC_POSITION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .pbnet.UNIT_POSITION> m_position = 1;
  if (!this->_internal_m_position().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_m_position().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_m_position().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >::const_iterator
          it = this->_internal_m_position().begin();
          it != this->_internal_m_position().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >::const_iterator
          it = this->_internal_m_position().begin();
          it != this->_internal_m_position().end(); ++it) {
        target = PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_POSITION)
  return target;
}

size_t PROBUFF_NET_SYNC_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .pbnet.UNIT_POSITION> m_position = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_position_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::pbnet::UNIT_POSITION >::const_iterator
      it = this->_internal_m_position().begin();
      it != this->_internal_m_position().end(); ++it) {
    total_size += PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_SYNC_POSITION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_SYNC_POSITION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_SYNC_POSITION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_SYNC_POSITION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_SYNC_POSITION)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_SYNC_POSITION::MergeFrom(const PROBUFF_NET_SYNC_POSITION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_position_.MergeFrom(from.m_position_);
}

void PROBUFF_NET_SYNC_POSITION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_SYNC_POSITION::CopyFrom(const PROBUFF_NET_SYNC_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_POSITION::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_POSITION::InternalSwap(PROBUFF_NET_SYNC_POSITION* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  m_position_.Swap(&other->m_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_POSITION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_CHANGE_ANGLE::InitAsDefaultInstance() {
  ::pbnet::_PROBUFF_NET_CHANGE_ANGLE_default_instance_._instance.get_mutable()->m_position_ = const_cast< ::pbnet::UNIT_POSITION*>(
      ::pbnet::UNIT_POSITION::internal_default_instance());
}
class PROBUFF_NET_CHANGE_ANGLE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHANGE_ANGLE>()._has_bits_);
  static const ::pbnet::UNIT_POSITION& m_position(const PROBUFF_NET_CHANGE_ANGLE* msg);
  static void set_has_m_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pbnet::UNIT_POSITION&
PROBUFF_NET_CHANGE_ANGLE::_Internal::m_position(const PROBUFF_NET_CHANGE_ANGLE* msg) {
  return *msg->m_position_;
}
PROBUFF_NET_CHANGE_ANGLE::PROBUFF_NET_CHANGE_ANGLE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHANGE_ANGLE)
}
PROBUFF_NET_CHANGE_ANGLE::PROBUFF_NET_CHANGE_ANGLE(const PROBUFF_NET_CHANGE_ANGLE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_position()) {
    m_position_ = new ::pbnet::UNIT_POSITION(*from.m_position_);
  } else {
    m_position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHANGE_ANGLE)
}

void PROBUFF_NET_CHANGE_ANGLE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_CHANGE_ANGLE_net_2eproto.base);
  m_position_ = nullptr;
}

PROBUFF_NET_CHANGE_ANGLE::~PROBUFF_NET_CHANGE_ANGLE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_CHANGE_ANGLE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete m_position_;
}

void PROBUFF_NET_CHANGE_ANGLE::ArenaDtor(void* object) {
  PROBUFF_NET_CHANGE_ANGLE* _this = reinterpret_cast< PROBUFF_NET_CHANGE_ANGLE* >(object);
  (void)_this;
}
void PROBUFF_NET_CHANGE_ANGLE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_CHANGE_ANGLE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_CHANGE_ANGLE& PROBUFF_NET_CHANGE_ANGLE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_CHANGE_ANGLE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_CHANGE_ANGLE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && m_position_ != nullptr) {
      delete m_position_;
    }
    m_position_ = nullptr;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHANGE_ANGLE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.UNIT_POSITION m_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_CHANGE_ANGLE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.UNIT_POSITION m_position = 1;
  if (_internal_has_m_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::m_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  return target;
}

size_t PROBUFF_NET_CHANGE_ANGLE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pbnet.UNIT_POSITION m_position = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *m_position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_CHANGE_ANGLE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_CHANGE_ANGLE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_CHANGE_ANGLE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_CHANGE_ANGLE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_CHANGE_ANGLE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_CHANGE_ANGLE::MergeFrom(const PROBUFF_NET_CHANGE_ANGLE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_position()) {
    _internal_mutable_m_position()->::pbnet::UNIT_POSITION::MergeFrom(from._internal_m_position());
  }
}

void PROBUFF_NET_CHANGE_ANGLE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_CHANGE_ANGLE::CopyFrom(const PROBUFF_NET_CHANGE_ANGLE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHANGE_ANGLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHANGE_ANGLE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHANGE_ANGLE::InternalSwap(PROBUFF_NET_CHANGE_ANGLE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_position_, other->m_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHANGE_ANGLE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MATCHING::InitAsDefaultInstance() {
}
class PROBUFF_NET_MATCHING::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MATCHING::PROBUFF_NET_MATCHING(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING)
}
PROBUFF_NET_MATCHING::PROBUFF_NET_MATCHING(const PROBUFF_NET_MATCHING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_tid_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_tid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING)
}

void PROBUFF_NET_MATCHING::SharedCtor() {
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_tid_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_tid_));
}

PROBUFF_NET_MATCHING::~PROBUFF_NET_MATCHING() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MATCHING::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MATCHING::ArenaDtor(void* object) {
  PROBUFF_NET_MATCHING* _this = reinterpret_cast< PROBUFF_NET_MATCHING* >(object);
  (void)_this;
}
void PROBUFF_NET_MATCHING::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MATCHING::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MATCHING& PROBUFF_NET_MATCHING::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MATCHING_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MATCHING::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_tid_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_tid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else goto handle_unusual;
        continue;
      // int32 m_tid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_tid(&has_bits);
          m_tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MATCHING::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // int32 m_tid = 2;
  if (_internal_has_m_tid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_tid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING)
  return target;
}

size_t PROBUFF_NET_MATCHING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // int32 m_tid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_tid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MATCHING::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MATCHING)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MATCHING* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MATCHING>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MATCHING)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MATCHING)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MATCHING::MergeFrom(const PROBUFF_NET_MATCHING& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_tid_ = from.m_tid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MATCHING::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MATCHING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MATCHING::CopyFrom(const PROBUFF_NET_MATCHING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING::InternalSwap(PROBUFF_NET_MATCHING* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING, m_tid_)
      + sizeof(PROBUFF_NET_MATCHING::m_tid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MATCHING_MEMBER::InitAsDefaultInstance() {
}
class MATCHING_MEMBER::_Internal {
 public:
  using HasBits = decltype(std::declval<MATCHING_MEMBER>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_lv(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_begmatch(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_m_isconfirm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MATCHING_MEMBER::MATCHING_MEMBER(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.MATCHING_MEMBER)
}
MATCHING_MEMBER::MATCHING_MEMBER(const MATCHING_MEMBER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_name()) {
    m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_name(),
      GetArena());
  }
  ::memcpy(&m_id_, &from.m_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_isconfirm_) -
    reinterpret_cast<char*>(&m_id_)) + sizeof(m_isconfirm_));
  // @@protoc_insertion_point(copy_constructor:pbnet.MATCHING_MEMBER)
}

void MATCHING_MEMBER::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MATCHING_MEMBER_net_2eproto.base);
  m_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_isconfirm_) -
      reinterpret_cast<char*>(&m_id_)) + sizeof(m_isconfirm_));
}

MATCHING_MEMBER::~MATCHING_MEMBER() {
  // @@protoc_insertion_point(destructor:pbnet.MATCHING_MEMBER)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MATCHING_MEMBER::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MATCHING_MEMBER::ArenaDtor(void* object) {
  MATCHING_MEMBER* _this = reinterpret_cast< MATCHING_MEMBER* >(object);
  (void)_this;
}
void MATCHING_MEMBER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MATCHING_MEMBER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MATCHING_MEMBER& MATCHING_MEMBER::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MATCHING_MEMBER_net_2eproto.base);
  return *internal_default_instance();
}


void MATCHING_MEMBER::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.MATCHING_MEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&m_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_isconfirm_) -
        reinterpret_cast<char*>(&m_id_)) + sizeof(m_isconfirm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MATCHING_MEMBER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_m_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.MATCHING_MEMBER.m_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_lv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_lv(&has_bits);
          m_lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_begmatch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_begmatch(&has_bits);
          m_begmatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_isconfirm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_m_isconfirm(&has_bits);
          m_isconfirm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MATCHING_MEMBER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.MATCHING_MEMBER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  // string m_name = 2;
  if (_internal_has_m_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_name().data(), static_cast<int>(this->_internal_m_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.MATCHING_MEMBER.m_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_name(), target);
  }

  // int32 m_lv = 3;
  if (_internal_has_m_lv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_lv(), target);
  }

  // int32 m_begmatch = 4;
  if (_internal_has_m_begmatch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_begmatch(), target);
  }

  // bool m_isconfirm = 5;
  if (_internal_has_m_isconfirm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_m_isconfirm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.MATCHING_MEMBER)
  return target;
}

size_t MATCHING_MEMBER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.MATCHING_MEMBER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // string m_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_name());
    }

    // int64 m_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_id());
    }

    // int32 m_lv = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_lv());
    }

    // int32 m_begmatch = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_begmatch());
    }

    // bool m_isconfirm = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MATCHING_MEMBER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.MATCHING_MEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  const MATCHING_MEMBER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MATCHING_MEMBER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.MATCHING_MEMBER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.MATCHING_MEMBER)
    MergeFrom(*source);
  }
}

void MATCHING_MEMBER::MergeFrom(const MATCHING_MEMBER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.MATCHING_MEMBER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_name(from._internal_m_name());
    }
    if (cached_has_bits & 0x00000002u) {
      m_id_ = from.m_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_lv_ = from.m_lv_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_begmatch_ = from.m_begmatch_;
    }
    if (cached_has_bits & 0x00000010u) {
      m_isconfirm_ = from.m_isconfirm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MATCHING_MEMBER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.MATCHING_MEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MATCHING_MEMBER::CopyFrom(const MATCHING_MEMBER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.MATCHING_MEMBER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MATCHING_MEMBER::IsInitialized() const {
  return true;
}

void MATCHING_MEMBER::InternalSwap(MATCHING_MEMBER* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_name_.Swap(&other->m_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MATCHING_MEMBER, m_isconfirm_)
      + sizeof(MATCHING_MEMBER::m_isconfirm_)
      - PROTOBUF_FIELD_OFFSET(MATCHING_MEMBER, m_id_)>(
          reinterpret_cast<char*>(&m_id_),
          reinterpret_cast<char*>(&other->m_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MATCHING_MEMBER::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MATCHING_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_MATCHING_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_RESPONSE>()._has_bits_);
  static void set_has_m_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MATCHING_RESPONSE::PROBUFF_NET_MATCHING_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
}
PROBUFF_NET_MATCHING_RESPONSE::PROBUFF_NET_MATCHING_RESPONSE(const PROBUFF_NET_MATCHING_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_id_ = from.m_id_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
}

void PROBUFF_NET_MATCHING_RESPONSE::SharedCtor() {
  m_id_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_MATCHING_RESPONSE::~PROBUFF_NET_MATCHING_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MATCHING_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MATCHING_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MATCHING_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MATCHING_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_MATCHING_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MATCHING_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MATCHING_RESPONSE& PROBUFF_NET_MATCHING_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MATCHING_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MATCHING_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_id(&has_bits);
          m_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MATCHING_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_id = 1;
  if (_internal_has_m_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MATCHING_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 m_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MATCHING_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MATCHING_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MATCHING_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MATCHING_RESPONSE::MergeFrom(const PROBUFF_NET_MATCHING_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_id()) {
    _internal_set_m_id(from._internal_m_id());
  }
}

void PROBUFF_NET_MATCHING_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MATCHING_RESPONSE::CopyFrom(const PROBUFF_NET_MATCHING_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_RESPONSE::InternalSwap(PROBUFF_NET_MATCHING_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_id_, other->m_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MATCHING_CANCEL::InitAsDefaultInstance() {
}
class PROBUFF_NET_MATCHING_CANCEL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_CANCEL>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_MATCHING_CANCEL::PROBUFF_NET_MATCHING_CANCEL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_CANCEL)
}
PROBUFF_NET_MATCHING_CANCEL::PROBUFF_NET_MATCHING_CANCEL(const PROBUFF_NET_MATCHING_CANCEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_roomid_, &from.m_roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_type_) -
    reinterpret_cast<char*>(&m_roomid_)) + sizeof(m_type_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_CANCEL)
}

void PROBUFF_NET_MATCHING_CANCEL::SharedCtor() {
  ::memset(&m_roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_type_) -
      reinterpret_cast<char*>(&m_roomid_)) + sizeof(m_type_));
}

PROBUFF_NET_MATCHING_CANCEL::~PROBUFF_NET_MATCHING_CANCEL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MATCHING_CANCEL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MATCHING_CANCEL::ArenaDtor(void* object) {
  PROBUFF_NET_MATCHING_CANCEL* _this = reinterpret_cast< PROBUFF_NET_MATCHING_CANCEL* >(object);
  (void)_this;
}
void PROBUFF_NET_MATCHING_CANCEL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MATCHING_CANCEL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MATCHING_CANCEL& PROBUFF_NET_MATCHING_CANCEL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MATCHING_CANCEL_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MATCHING_CANCEL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_roomid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_type_) -
        reinterpret_cast<char*>(&m_roomid_)) + sizeof(m_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_CANCEL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else goto handle_unusual;
        continue;
      // int64 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MATCHING_CANCEL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // int64 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  return target;
}

size_t PROBUFF_NET_MATCHING_CANCEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 m_roomid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_roomid());
    }

    // .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MATCHING_CANCEL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MATCHING_CANCEL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MATCHING_CANCEL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MATCHING_CANCEL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MATCHING_CANCEL)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MATCHING_CANCEL::MergeFrom(const PROBUFF_NET_MATCHING_CANCEL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_roomid_ = from.m_roomid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_type_ = from.m_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MATCHING_CANCEL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MATCHING_CANCEL::CopyFrom(const PROBUFF_NET_MATCHING_CANCEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_CANCEL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_CANCEL::InternalSwap(PROBUFF_NET_MATCHING_CANCEL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CANCEL, m_type_)
      + sizeof(PROBUFF_NET_MATCHING_CANCEL::m_type_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CANCEL, m_roomid_)>(
          reinterpret_cast<char*>(&m_roomid_),
          reinterpret_cast<char*>(&other->m_roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_CANCEL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_CANCEL_RESPONSE>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MATCHING_CANCEL_RESPONSE::PROBUFF_NET_MATCHING_CANCEL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
}
PROBUFF_NET_MATCHING_CANCEL_RESPONSE::PROBUFF_NET_MATCHING_CANCEL_RESPONSE(const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_stat_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::SharedCtor() {
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_stat_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_stat_));
}

PROBUFF_NET_MATCHING_CANCEL_RESPONSE::~PROBUFF_NET_MATCHING_CANCEL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MATCHING_CANCEL_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MATCHING_CANCEL_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& PROBUFF_NET_MATCHING_CANCEL_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MATCHING_CANCEL_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_stat_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_stat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else goto handle_unusual;
        continue;
      // .pbnet.ematching_cancel_stat m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_stat(static_cast<::pbnet::ematching_cancel_stat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MATCHING_CANCEL_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // .pbnet.ematching_cancel_stat m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MATCHING_CANCEL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // .pbnet.ematching_cancel_stat m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_stat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MATCHING_CANCEL_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MATCHING_CANCEL_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::MergeFrom(const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_stat_ = from.m_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::CopyFrom(const PROBUFF_NET_MATCHING_CANCEL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CANCEL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_CANCEL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_CANCEL_RESPONSE::InternalSwap(PROBUFF_NET_MATCHING_CANCEL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CANCEL_RESPONSE, m_stat_)
      + sizeof(PROBUFF_NET_MATCHING_CANCEL_RESPONSE::m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CANCEL_RESPONSE, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_CANCEL_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::InitAsDefaultInstance() {
}
class PROBUFF_NET_MEMBER_MATCHING_CANCEL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MEMBER_MATCHING_CANCEL>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_canceltype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MEMBER_MATCHING_CANCEL::PROBUFF_NET_MEMBER_MATCHING_CANCEL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_cancelmember_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
}
PROBUFF_NET_MEMBER_MATCHING_CANCEL::PROBUFF_NET_MEMBER_MATCHING_CANCEL(const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_cancelmember_(from.m_cancelmember_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_canceltype_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_canceltype_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::SharedCtor() {
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_canceltype_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_canceltype_));
}

PROBUFF_NET_MEMBER_MATCHING_CANCEL::~PROBUFF_NET_MEMBER_MATCHING_CANCEL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::ArenaDtor(void* object) {
  PROBUFF_NET_MEMBER_MATCHING_CANCEL* _this = reinterpret_cast< PROBUFF_NET_MEMBER_MATCHING_CANCEL* >(object);
  (void)_this;
}
void PROBUFF_NET_MEMBER_MATCHING_CANCEL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MEMBER_MATCHING_CANCEL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MEMBER_MATCHING_CANCEL& PROBUFF_NET_MEMBER_MATCHING_CANCEL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MEMBER_MATCHING_CANCEL_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MEMBER_MATCHING_CANCEL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_cancelmember_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_canceltype_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_canceltype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MEMBER_MATCHING_CANCEL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else goto handle_unusual;
        continue;
      // .pbnet.etype_matching_cancel m_canceltype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_canceltype(static_cast<::pbnet::etype_matching_cancel>(val));
        } else goto handle_unusual;
        continue;
      // repeated int64 m_cancelmember = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_m_cancelmember(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_m_cancelmember(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MEMBER_MATCHING_CANCEL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // .pbnet.etype_matching_cancel m_canceltype = 2;
  if (_internal_has_m_canceltype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_m_canceltype(), target);
  }

  // repeated int64 m_cancelmember = 3;
  {
    int byte_size = _m_cancelmember_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_m_cancelmember(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  return target;
}

size_t PROBUFF_NET_MEMBER_MATCHING_CANCEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 m_cancelmember = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->m_cancelmember_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_cancelmember_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // .pbnet.etype_matching_cancel m_canceltype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_canceltype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MEMBER_MATCHING_CANCEL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MEMBER_MATCHING_CANCEL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::MergeFrom(const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_cancelmember_.MergeFrom(from.m_cancelmember_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_canceltype_ = from.m_canceltype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::CopyFrom(const PROBUFF_NET_MEMBER_MATCHING_CANCEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MEMBER_MATCHING_CANCEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MEMBER_MATCHING_CANCEL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MEMBER_MATCHING_CANCEL::InternalSwap(PROBUFF_NET_MEMBER_MATCHING_CANCEL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_cancelmember_.InternalSwap(&other->m_cancelmember_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MEMBER_MATCHING_CANCEL, m_canceltype_)
      + sizeof(PROBUFF_NET_MEMBER_MATCHING_CANCEL::m_canceltype_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MEMBER_MATCHING_CANCEL, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MEMBER_MATCHING_CANCEL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MATCHING_WAITCONFIRM::InitAsDefaultInstance() {
}
class PROBUFF_NET_MATCHING_WAITCONFIRM::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_WAITCONFIRM>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MATCHING_WAITCONFIRM::PROBUFF_NET_MATCHING_WAITCONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
}
PROBUFF_NET_MATCHING_WAITCONFIRM::PROBUFF_NET_MATCHING_WAITCONFIRM(const PROBUFF_NET_MATCHING_WAITCONFIRM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_roomid_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::SharedCtor() {
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_roomid_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
}

PROBUFF_NET_MATCHING_WAITCONFIRM::~PROBUFF_NET_MATCHING_WAITCONFIRM() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::ArenaDtor(void* object) {
  PROBUFF_NET_MATCHING_WAITCONFIRM* _this = reinterpret_cast< PROBUFF_NET_MATCHING_WAITCONFIRM* >(object);
  (void)_this;
}
void PROBUFF_NET_MATCHING_WAITCONFIRM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MATCHING_WAITCONFIRM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MATCHING_WAITCONFIRM& PROBUFF_NET_MATCHING_WAITCONFIRM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MATCHING_WAITCONFIRM_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MATCHING_WAITCONFIRM::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_roomid_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_WAITCONFIRM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else goto handle_unusual;
        continue;
      // int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MATCHING_WAITCONFIRM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  return target;
}

size_t PROBUFF_NET_MATCHING_WAITCONFIRM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_roomid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MATCHING_WAITCONFIRM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MATCHING_WAITCONFIRM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::MergeFrom(const PROBUFF_NET_MATCHING_WAITCONFIRM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_roomid_ = from.m_roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::CopyFrom(const PROBUFF_NET_MATCHING_WAITCONFIRM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_WAITCONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_WAITCONFIRM::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_WAITCONFIRM::InternalSwap(PROBUFF_NET_MATCHING_WAITCONFIRM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_WAITCONFIRM, m_roomid_)
      + sizeof(PROBUFF_NET_MATCHING_WAITCONFIRM::m_roomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_WAITCONFIRM, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_WAITCONFIRM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MATCHING_CONFIRM::InitAsDefaultInstance() {
}
class PROBUFF_NET_MATCHING_CONFIRM::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_CONFIRM>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MATCHING_CONFIRM::PROBUFF_NET_MATCHING_CONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
}
PROBUFF_NET_MATCHING_CONFIRM::PROBUFF_NET_MATCHING_CONFIRM(const PROBUFF_NET_MATCHING_CONFIRM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_roomid_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
}

void PROBUFF_NET_MATCHING_CONFIRM::SharedCtor() {
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_roomid_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
}

PROBUFF_NET_MATCHING_CONFIRM::~PROBUFF_NET_MATCHING_CONFIRM() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MATCHING_CONFIRM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MATCHING_CONFIRM::ArenaDtor(void* object) {
  PROBUFF_NET_MATCHING_CONFIRM* _this = reinterpret_cast< PROBUFF_NET_MATCHING_CONFIRM* >(object);
  (void)_this;
}
void PROBUFF_NET_MATCHING_CONFIRM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MATCHING_CONFIRM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MATCHING_CONFIRM& PROBUFF_NET_MATCHING_CONFIRM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MATCHING_CONFIRM_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MATCHING_CONFIRM::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_roomid_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_CONFIRM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else goto handle_unusual;
        continue;
      // int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MATCHING_CONFIRM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  return target;
}

size_t PROBUFF_NET_MATCHING_CONFIRM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_roomid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MATCHING_CONFIRM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MATCHING_CONFIRM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MATCHING_CONFIRM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MATCHING_CONFIRM::MergeFrom(const PROBUFF_NET_MATCHING_CONFIRM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_roomid_ = from.m_roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MATCHING_CONFIRM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MATCHING_CONFIRM::CopyFrom(const PROBUFF_NET_MATCHING_CONFIRM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_CONFIRM::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_CONFIRM::InternalSwap(PROBUFF_NET_MATCHING_CONFIRM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CONFIRM, m_roomid_)
      + sizeof(PROBUFF_NET_MATCHING_CONFIRM::m_roomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CONFIRM, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_CONFIRM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_CONFIRM_RESPONSE>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
}
PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE(const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_stat_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::SharedCtor() {
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_stat_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_stat_));
}

PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::~PROBUFF_NET_MATCHING_CONFIRM_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MATCHING_CONFIRM_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_stat_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_stat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else goto handle_unusual;
        continue;
      // int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbnet.ematching_confirm_stat m_stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_stat(static_cast<::pbnet::ematching_confirm_stat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  // .pbnet.ematching_confirm_stat m_stat = 3;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_roomid());
    }

    // .pbnet.ematching_confirm_stat m_stat = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_stat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MATCHING_CONFIRM_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::MergeFrom(const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_roomid_ = from.m_roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_stat_ = from.m_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::CopyFrom(const PROBUFF_NET_MATCHING_CONFIRM_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_CONFIRM_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::InternalSwap(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, m_stat_)
      + sizeof(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_CONFIRM_RESPONSE, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_CONFIRM_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::InitAsDefaultInstance() {
}
class PROBUFF_NET_SYNC_MATCHING_CONFIRM::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_SYNC_MATCHING_CONFIRM>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_SYNC_MATCHING_CONFIRM::PROBUFF_NET_SYNC_MATCHING_CONFIRM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_roleid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
}
PROBUFF_NET_SYNC_MATCHING_CONFIRM::PROBUFF_NET_SYNC_MATCHING_CONFIRM(const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_roleid_(from.m_roleid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_roomid_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::SharedCtor() {
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_roomid_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
}

PROBUFF_NET_SYNC_MATCHING_CONFIRM::~PROBUFF_NET_SYNC_MATCHING_CONFIRM() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::ArenaDtor(void* object) {
  PROBUFF_NET_SYNC_MATCHING_CONFIRM* _this = reinterpret_cast< PROBUFF_NET_SYNC_MATCHING_CONFIRM* >(object);
  (void)_this;
}
void PROBUFF_NET_SYNC_MATCHING_CONFIRM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_SYNC_MATCHING_CONFIRM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_SYNC_MATCHING_CONFIRM& PROBUFF_NET_SYNC_MATCHING_CONFIRM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_SYNC_MATCHING_CONFIRM_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_SYNC_MATCHING_CONFIRM::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_roleid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_roomid_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_SYNC_MATCHING_CONFIRM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else goto handle_unusual;
        continue;
      // int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 m_roleid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_m_roleid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_m_roleid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_SYNC_MATCHING_CONFIRM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  // repeated int64 m_roleid = 3;
  {
    int byte_size = _m_roleid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_m_roleid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  return target;
}

size_t PROBUFF_NET_SYNC_MATCHING_CONFIRM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 m_roleid = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->m_roleid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _m_roleid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_roomid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_SYNC_MATCHING_CONFIRM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_SYNC_MATCHING_CONFIRM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::MergeFrom(const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_roleid_.MergeFrom(from.m_roleid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_roomid_ = from.m_roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::CopyFrom(const PROBUFF_NET_SYNC_MATCHING_CONFIRM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_SYNC_MATCHING_CONFIRM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_SYNC_MATCHING_CONFIRM::IsInitialized() const {
  return true;
}

void PROBUFF_NET_SYNC_MATCHING_CONFIRM::InternalSwap(PROBUFF_NET_SYNC_MATCHING_CONFIRM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_roleid_.InternalSwap(&other->m_roleid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SYNC_MATCHING_CONFIRM, m_roomid_)
      + sizeof(PROBUFF_NET_SYNC_MATCHING_CONFIRM::m_roomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_SYNC_MATCHING_CONFIRM, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_SYNC_MATCHING_CONFIRM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MATCHING_SYNC::InitAsDefaultInstance() {
}
class PROBUFF_NET_MATCHING_SYNC::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_SYNC>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_MATCHING_SYNC::PROBUFF_NET_MATCHING_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_member_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_SYNC)
}
PROBUFF_NET_MATCHING_SYNC::PROBUFF_NET_MATCHING_SYNC(const PROBUFF_NET_MATCHING_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_member_(from.m_member_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_roomid_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_SYNC)
}

void PROBUFF_NET_MATCHING_SYNC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_MATCHING_SYNC_net_2eproto.base);
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_roomid_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
}

PROBUFF_NET_MATCHING_SYNC::~PROBUFF_NET_MATCHING_SYNC() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_SYNC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MATCHING_SYNC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MATCHING_SYNC::ArenaDtor(void* object) {
  PROBUFF_NET_MATCHING_SYNC* _this = reinterpret_cast< PROBUFF_NET_MATCHING_SYNC* >(object);
  (void)_this;
}
void PROBUFF_NET_MATCHING_SYNC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MATCHING_SYNC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MATCHING_SYNC& PROBUFF_NET_MATCHING_SYNC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MATCHING_SYNC_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MATCHING_SYNC::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_member_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_roomid_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_SYNC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else goto handle_unusual;
        continue;
      // int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbnet.MATCHING_MEMBER m_member = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MATCHING_SYNC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_member_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_m_member(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_SYNC)
  return target;
}

size_t PROBUFF_NET_MATCHING_SYNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  total_size += 1UL * this->_internal_m_member_size();
  for (const auto& msg : this->m_member_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_roomid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MATCHING_SYNC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MATCHING_SYNC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MATCHING_SYNC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MATCHING_SYNC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MATCHING_SYNC)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MATCHING_SYNC::MergeFrom(const PROBUFF_NET_MATCHING_SYNC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_member_.MergeFrom(from.m_member_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_roomid_ = from.m_roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MATCHING_SYNC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MATCHING_SYNC::CopyFrom(const PROBUFF_NET_MATCHING_SYNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_SYNC::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_SYNC::InternalSwap(PROBUFF_NET_MATCHING_SYNC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_member_.InternalSwap(&other->m_member_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SYNC, m_roomid_)
      + sizeof(PROBUFF_NET_MATCHING_SYNC::m_roomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SYNC, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_SYNC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_SUCCESS_RESPONSE>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_playsactorid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
}
PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE(const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_playsactorid_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_playsactorid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::SharedCtor() {
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_playsactorid_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_playsactorid_));
}

PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::~PROBUFF_NET_MATCHING_SUCCESS_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MATCHING_SUCCESS_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_playsactorid_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_playsactorid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else goto handle_unusual;
        continue;
      // int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 m_playsactorid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_playsactorid(&has_bits);
          m_playsactorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  // int64 m_playsactorid = 3;
  if (_internal_has_m_playsactorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_m_playsactorid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  return target;
}

size_t PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_roomid());
    }

    // int64 m_playsactorid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_playsactorid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MATCHING_SUCCESS_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::MergeFrom(const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_roomid_ = from.m_roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_playsactorid_ = from.m_playsactorid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::CopyFrom(const PROBUFF_NET_MATCHING_SUCCESS_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::InternalSwap(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, m_playsactorid_)
      + sizeof(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::m_playsactorid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SUCCESS_RESPONSE, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_SUCCESS_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_MATCHING_SUCCESS::InitAsDefaultInstance() {
}
class PROBUFF_NET_MATCHING_SUCCESS::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_MATCHING_SUCCESS>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_dataid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_MATCHING_SUCCESS::PROBUFF_NET_MATCHING_SUCCESS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_member_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
}
PROBUFF_NET_MATCHING_SUCCESS::PROBUFF_NET_MATCHING_SUCCESS(const PROBUFF_NET_MATCHING_SUCCESS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_member_(from.m_member_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_dataid_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_dataid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
}

void PROBUFF_NET_MATCHING_SUCCESS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_MATCHING_SUCCESS_net_2eproto.base);
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_dataid_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_dataid_));
}

PROBUFF_NET_MATCHING_SUCCESS::~PROBUFF_NET_MATCHING_SUCCESS() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_MATCHING_SUCCESS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_MATCHING_SUCCESS::ArenaDtor(void* object) {
  PROBUFF_NET_MATCHING_SUCCESS* _this = reinterpret_cast< PROBUFF_NET_MATCHING_SUCCESS* >(object);
  (void)_this;
}
void PROBUFF_NET_MATCHING_SUCCESS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_MATCHING_SUCCESS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_MATCHING_SUCCESS& PROBUFF_NET_MATCHING_SUCCESS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_MATCHING_SUCCESS_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_MATCHING_SUCCESS::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_member_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_dataid_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_dataid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_MATCHING_SUCCESS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else goto handle_unusual;
        continue;
      // int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbnet.MATCHING_MEMBER m_member = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 m_dataid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_dataid(&has_bits);
          m_dataid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_MATCHING_SUCCESS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_member_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_m_member(i), target, stream);
  }

  // int32 m_dataid = 4;
  if (_internal_has_m_dataid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_dataid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  return target;
}

size_t PROBUFF_NET_MATCHING_SUCCESS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnet.MATCHING_MEMBER m_member = 3;
  total_size += 1UL * this->_internal_m_member_size();
  for (const auto& msg : this->m_member_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_roomid());
    }

    // int32 m_dataid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_dataid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_MATCHING_SUCCESS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_MATCHING_SUCCESS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_MATCHING_SUCCESS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_MATCHING_SUCCESS::MergeFrom(const PROBUFF_NET_MATCHING_SUCCESS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_member_.MergeFrom(from.m_member_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_roomid_ = from.m_roomid_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_dataid_ = from.m_dataid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_MATCHING_SUCCESS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_MATCHING_SUCCESS::CopyFrom(const PROBUFF_NET_MATCHING_SUCCESS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_MATCHING_SUCCESS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_MATCHING_SUCCESS::IsInitialized() const {
  return true;
}

void PROBUFF_NET_MATCHING_SUCCESS::InternalSwap(PROBUFF_NET_MATCHING_SUCCESS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_member_.InternalSwap(&other->m_member_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SUCCESS, m_dataid_)
      + sizeof(PROBUFF_NET_MATCHING_SUCCESS::m_dataid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_MATCHING_SUCCESS, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_MATCHING_SUCCESS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ENTER_PLAYS::InitAsDefaultInstance() {
}
class PROBUFF_NET_ENTER_PLAYS::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ENTER_PLAYS>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_ENTER_PLAYS::PROBUFF_NET_ENTER_PLAYS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ENTER_PLAYS)
}
PROBUFF_NET_ENTER_PLAYS::PROBUFF_NET_ENTER_PLAYS(const PROBUFF_NET_ENTER_PLAYS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_roomid_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ENTER_PLAYS)
}

void PROBUFF_NET_ENTER_PLAYS::SharedCtor() {
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_roomid_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
}

PROBUFF_NET_ENTER_PLAYS::~PROBUFF_NET_ENTER_PLAYS() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ENTER_PLAYS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ENTER_PLAYS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_ENTER_PLAYS::ArenaDtor(void* object) {
  PROBUFF_NET_ENTER_PLAYS* _this = reinterpret_cast< PROBUFF_NET_ENTER_PLAYS* >(object);
  (void)_this;
}
void PROBUFF_NET_ENTER_PLAYS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ENTER_PLAYS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ENTER_PLAYS& PROBUFF_NET_ENTER_PLAYS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ENTER_PLAYS_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ENTER_PLAYS::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_roomid_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_roomid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ENTER_PLAYS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.eplays m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbnet::eplays>(val));
        } else goto handle_unusual;
        continue;
      // int32 m_roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_roomid(&has_bits);
          m_roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ENTER_PLAYS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.eplays m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // int32 m_roomid = 2;
  if (_internal_has_m_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ENTER_PLAYS)
  return target;
}

size_t PROBUFF_NET_ENTER_PLAYS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .pbnet.eplays m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // int32 m_roomid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_roomid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ENTER_PLAYS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ENTER_PLAYS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ENTER_PLAYS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ENTER_PLAYS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ENTER_PLAYS)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ENTER_PLAYS::MergeFrom(const PROBUFF_NET_ENTER_PLAYS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_roomid_ = from.m_roomid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_ENTER_PLAYS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ENTER_PLAYS::CopyFrom(const PROBUFF_NET_ENTER_PLAYS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ENTER_PLAYS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ENTER_PLAYS::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ENTER_PLAYS::InternalSwap(PROBUFF_NET_ENTER_PLAYS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ENTER_PLAYS, m_roomid_)
      + sizeof(PROBUFF_NET_ENTER_PLAYS::m_roomid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ENTER_PLAYS, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ENTER_PLAYS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_KCPSESSION::InitAsDefaultInstance() {
}
class PROBUFF_NET_KCPSESSION::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_KCPSESSION>()._has_bits_);
  static void set_has_m_serverid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_uip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_uport(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_conv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PROBUFF_NET_KCPSESSION::PROBUFF_NET_KCPSESSION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_KCPSESSION)
}
PROBUFF_NET_KCPSESSION::PROBUFF_NET_KCPSESSION(const PROBUFF_NET_KCPSESSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_uip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_uip()) {
    m_uip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_uip(),
      GetArena());
  }
  ::memcpy(&m_serverid_, &from.m_serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_conv_) -
    reinterpret_cast<char*>(&m_serverid_)) + sizeof(m_conv_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_KCPSESSION)
}

void PROBUFF_NET_KCPSESSION::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_KCPSESSION_net_2eproto.base);
  m_uip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_conv_) -
      reinterpret_cast<char*>(&m_serverid_)) + sizeof(m_conv_));
}

PROBUFF_NET_KCPSESSION::~PROBUFF_NET_KCPSESSION() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_KCPSESSION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_KCPSESSION::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_uip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_KCPSESSION::ArenaDtor(void* object) {
  PROBUFF_NET_KCPSESSION* _this = reinterpret_cast< PROBUFF_NET_KCPSESSION* >(object);
  (void)_this;
}
void PROBUFF_NET_KCPSESSION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_KCPSESSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_KCPSESSION& PROBUFF_NET_KCPSESSION::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_KCPSESSION_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_KCPSESSION::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_KCPSESSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_uip_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&m_serverid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_conv_) -
        reinterpret_cast<char*>(&m_serverid_)) + sizeof(m_conv_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_KCPSESSION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_serverid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_serverid(&has_bits);
          m_serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_uip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_m_uip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_KCPSESSION.m_uip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_uport = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_uport(&has_bits);
          m_uport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_conv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_conv(&has_bits);
          m_conv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_KCPSESSION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_KCPSESSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_serverid = 1;
  if (_internal_has_m_serverid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_serverid(), target);
  }

  // string m_uip = 2;
  if (_internal_has_m_uip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_uip().data(), static_cast<int>(this->_internal_m_uip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_KCPSESSION.m_uip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_uip(), target);
  }

  // int32 m_uport = 3;
  if (_internal_has_m_uport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_uport(), target);
  }

  // int32 m_conv = 4;
  if (_internal_has_m_conv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_conv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_KCPSESSION)
  return target;
}

size_t PROBUFF_NET_KCPSESSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_KCPSESSION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // string m_uip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_uip());
    }

    // int64 m_serverid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_serverid());
    }

    // int32 m_uport = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_uport());
    }

    // int32 m_conv = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_conv());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_KCPSESSION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_KCPSESSION)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_KCPSESSION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_KCPSESSION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_KCPSESSION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_KCPSESSION)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_KCPSESSION::MergeFrom(const PROBUFF_NET_KCPSESSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_KCPSESSION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_uip(from._internal_m_uip());
    }
    if (cached_has_bits & 0x00000002u) {
      m_serverid_ = from.m_serverid_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_uport_ = from.m_uport_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_conv_ = from.m_conv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_KCPSESSION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_KCPSESSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_KCPSESSION::CopyFrom(const PROBUFF_NET_KCPSESSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_KCPSESSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_KCPSESSION::IsInitialized() const {
  return true;
}

void PROBUFF_NET_KCPSESSION::InternalSwap(PROBUFF_NET_KCPSESSION* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_uip_.Swap(&other->m_uip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_KCPSESSION, m_conv_)
      + sizeof(PROBUFF_NET_KCPSESSION::m_conv_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_KCPSESSION, m_serverid_)>(
          reinterpret_cast<char*>(&m_serverid_),
          reinterpret_cast<char*>(&other->m_serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_KCPSESSION::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_KCPSESSION_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_KCPSESSION_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_KCPSESSION_RESPONSE>()._has_bits_);
  static void set_has_m_kcpsession(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_KCPSESSION_RESPONSE::PROBUFF_NET_KCPSESSION_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
}
PROBUFF_NET_KCPSESSION_RESPONSE::PROBUFF_NET_KCPSESSION_RESPONSE(const PROBUFF_NET_KCPSESSION_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_kcpsession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_kcpsession()) {
    m_kcpsession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_kcpsession(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
}

void PROBUFF_NET_KCPSESSION_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_KCPSESSION_RESPONSE_net_2eproto.base);
  m_kcpsession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PROBUFF_NET_KCPSESSION_RESPONSE::~PROBUFF_NET_KCPSESSION_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_KCPSESSION_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_kcpsession_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_KCPSESSION_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_KCPSESSION_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_KCPSESSION_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_KCPSESSION_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_KCPSESSION_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_KCPSESSION_RESPONSE& PROBUFF_NET_KCPSESSION_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_KCPSESSION_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_KCPSESSION_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_kcpsession_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_KCPSESSION_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string m_kcpsession = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_m_kcpsession();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.m_kcpsession"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_KCPSESSION_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string m_kcpsession = 1;
  if (_internal_has_m_kcpsession()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_kcpsession().data(), static_cast<int>(this->_internal_m_kcpsession().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_KCPSESSION_RESPONSE.m_kcpsession");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_m_kcpsession(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  return target;
}

size_t PROBUFF_NET_KCPSESSION_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string m_kcpsession = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m_kcpsession());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_KCPSESSION_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_KCPSESSION_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_KCPSESSION_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_KCPSESSION_RESPONSE::MergeFrom(const PROBUFF_NET_KCPSESSION_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_kcpsession()) {
    _internal_set_m_kcpsession(from._internal_m_kcpsession());
  }
}

void PROBUFF_NET_KCPSESSION_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_KCPSESSION_RESPONSE::CopyFrom(const PROBUFF_NET_KCPSESSION_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_KCPSESSION_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_KCPSESSION_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_KCPSESSION_RESPONSE::InternalSwap(PROBUFF_NET_KCPSESSION_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_kcpsession_.Swap(&other->m_kcpsession_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_KCPSESSION_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_TASK_RECEIVE_AWARD::InitAsDefaultInstance() {
}
class PROBUFF_NET_TASK_RECEIVE_AWARD::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_TASK_RECEIVE_AWARD>()._has_bits_);
  static void set_has_m_taskid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_TASK_RECEIVE_AWARD::PROBUFF_NET_TASK_RECEIVE_AWARD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
}
PROBUFF_NET_TASK_RECEIVE_AWARD::PROBUFF_NET_TASK_RECEIVE_AWARD(const PROBUFF_NET_TASK_RECEIVE_AWARD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_taskid_ = from.m_taskid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::SharedCtor() {
  m_taskid_ = 0;
}

PROBUFF_NET_TASK_RECEIVE_AWARD::~PROBUFF_NET_TASK_RECEIVE_AWARD() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::ArenaDtor(void* object) {
  PROBUFF_NET_TASK_RECEIVE_AWARD* _this = reinterpret_cast< PROBUFF_NET_TASK_RECEIVE_AWARD* >(object);
  (void)_this;
}
void PROBUFF_NET_TASK_RECEIVE_AWARD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_TASK_RECEIVE_AWARD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_TASK_RECEIVE_AWARD& PROBUFF_NET_TASK_RECEIVE_AWARD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_TASK_RECEIVE_AWARD::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_taskid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_TASK_RECEIVE_AWARD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_taskid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_taskid(&has_bits);
          m_taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_TASK_RECEIVE_AWARD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_taskid = 1;
  if (_internal_has_m_taskid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_taskid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  return target;
}

size_t PROBUFF_NET_TASK_RECEIVE_AWARD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 m_taskid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_TASK_RECEIVE_AWARD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_TASK_RECEIVE_AWARD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::MergeFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_taskid()) {
    _internal_set_m_taskid(from._internal_m_taskid());
  }
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::CopyFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_TASK_RECEIVE_AWARD::IsInitialized() const {
  return true;
}

void PROBUFF_NET_TASK_RECEIVE_AWARD::InternalSwap(PROBUFF_NET_TASK_RECEIVE_AWARD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_taskid_, other->m_taskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TASK_RECEIVE_AWARD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void drop_item::InitAsDefaultInstance() {
}
class drop_item::_Internal {
 public:
  using HasBits = decltype(std::declval<drop_item>()._has_bits_);
  static void set_has_m_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

drop_item::drop_item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.drop_item)
}
drop_item::drop_item(const drop_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_item_, &from.m_item_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_count_) -
    reinterpret_cast<char*>(&m_item_)) + sizeof(m_count_));
  // @@protoc_insertion_point(copy_constructor:pbnet.drop_item)
}

void drop_item::SharedCtor() {
  ::memset(&m_item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_count_) -
      reinterpret_cast<char*>(&m_item_)) + sizeof(m_count_));
}

drop_item::~drop_item() {
  // @@protoc_insertion_point(destructor:pbnet.drop_item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void drop_item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void drop_item::ArenaDtor(void* object) {
  drop_item* _this = reinterpret_cast< drop_item* >(object);
  (void)_this;
}
void drop_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void drop_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const drop_item& drop_item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_drop_item_net_2eproto.base);
  return *internal_default_instance();
}


void drop_item::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.drop_item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_item_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_count_) -
        reinterpret_cast<char*>(&m_item_)) + sizeof(m_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* drop_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_item(&has_bits);
          m_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_count(&has_bits);
          m_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* drop_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.drop_item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_item = 1;
  if (_internal_has_m_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_item(), target);
  }

  // int32 m_count = 2;
  if (_internal_has_m_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.drop_item)
  return target;
}

size_t drop_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.drop_item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 m_item = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_item());
    }

    // int32 m_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void drop_item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.drop_item)
  GOOGLE_DCHECK_NE(&from, this);
  const drop_item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<drop_item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.drop_item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.drop_item)
    MergeFrom(*source);
  }
}

void drop_item::MergeFrom(const drop_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.drop_item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_item_ = from.m_item_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_count_ = from.m_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void drop_item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.drop_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void drop_item::CopyFrom(const drop_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.drop_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool drop_item::IsInitialized() const {
  return true;
}

void drop_item::InternalSwap(drop_item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(drop_item, m_count_)
      + sizeof(drop_item::m_count_)
      - PROTOBUF_FIELD_OFFSET(drop_item, m_item_)>(
          reinterpret_cast<char*>(&m_item_),
          reinterpret_cast<char*>(&other->m_item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata drop_item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse() {}
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::MergeFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE>()._has_bits_);
  static void set_has_m_taskid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_drop_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
}
PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_drop_.MergeFrom(from.m_drop_);
  ::memcpy(&m_taskid_, &from.m_taskid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_stat_) -
    reinterpret_cast<char*>(&m_taskid_)) + sizeof(m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_net_2eproto.base);
  ::memset(&m_taskid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_stat_) -
      reinterpret_cast<char*>(&m_taskid_)) + sizeof(m_stat_));
}

PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::~PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_drop_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_taskid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_stat_) -
        reinterpret_cast<char*>(&m_taskid_)) + sizeof(m_stat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_taskid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_taskid(&has_bits);
          m_taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, int32> m_drop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_drop_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_taskid = 1;
  if (_internal_has_m_taskid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_taskid(), target);
  }

  // bool m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_m_stat(), target);
  }

  // map<int32, int32> m_drop = 3;
  if (!this->_internal_m_drop().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_m_drop().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_m_drop().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_m_drop().begin();
          it != this->_internal_m_drop().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_m_drop().begin();
          it != this->_internal_m_drop().end(); ++it) {
        target = PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  return target;
}

size_t PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> m_drop = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_drop_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_m_drop().begin();
      it != this->_internal_m_drop().end(); ++it) {
    total_size += PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int32 m_taskid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_taskid());
    }

    // bool m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::MergeFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_drop_.MergeFrom(from.m_drop_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_taskid_ = from.m_taskid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_stat_ = from.m_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::CopyFrom(const PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::InternalSwap(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_drop_.Swap(&other->m_drop_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, m_stat_)
      + sizeof(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE, m_taskid_)>(
          reinterpret_cast<char*>(&m_taskid_),
          reinterpret_cast<char*>(&other->m_taskid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_CREATE_FAMIL::InitAsDefaultInstance() {
}
class PROBUFF_NET_CREATE_FAMIL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CREATE_FAMIL>()._has_bits_);
  static void set_has_m_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CREATE_FAMIL::PROBUFF_NET_CREATE_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CREATE_FAMIL)
}
PROBUFF_NET_CREATE_FAMIL::PROBUFF_NET_CREATE_FAMIL(const PROBUFF_NET_CREATE_FAMIL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_name()) {
    m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CREATE_FAMIL)
}

void PROBUFF_NET_CREATE_FAMIL::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_CREATE_FAMIL_net_2eproto.base);
  m_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PROBUFF_NET_CREATE_FAMIL::~PROBUFF_NET_CREATE_FAMIL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CREATE_FAMIL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_CREATE_FAMIL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_CREATE_FAMIL::ArenaDtor(void* object) {
  PROBUFF_NET_CREATE_FAMIL* _this = reinterpret_cast< PROBUFF_NET_CREATE_FAMIL* >(object);
  (void)_this;
}
void PROBUFF_NET_CREATE_FAMIL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_CREATE_FAMIL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_CREATE_FAMIL& PROBUFF_NET_CREATE_FAMIL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_CREATE_FAMIL_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_CREATE_FAMIL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CREATE_FAMIL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CREATE_FAMIL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string m_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_m_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_CREATE_FAMIL.m_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_CREATE_FAMIL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CREATE_FAMIL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string m_name = 1;
  if (_internal_has_m_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_name().data(), static_cast<int>(this->_internal_m_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_CREATE_FAMIL.m_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_m_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CREATE_FAMIL)
  return target;
}

size_t PROBUFF_NET_CREATE_FAMIL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CREATE_FAMIL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string m_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_m_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_CREATE_FAMIL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_CREATE_FAMIL)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_CREATE_FAMIL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_CREATE_FAMIL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_CREATE_FAMIL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_CREATE_FAMIL)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_CREATE_FAMIL::MergeFrom(const PROBUFF_NET_CREATE_FAMIL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CREATE_FAMIL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_name()) {
    _internal_set_m_name(from._internal_m_name());
  }
}

void PROBUFF_NET_CREATE_FAMIL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_CREATE_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_CREATE_FAMIL::CopyFrom(const PROBUFF_NET_CREATE_FAMIL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CREATE_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CREATE_FAMIL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CREATE_FAMIL::InternalSwap(PROBUFF_NET_CREATE_FAMIL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_name_.Swap(&other->m_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CREATE_FAMIL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_CREATE_FAMIL_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_CREATE_FAMIL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CREATE_FAMIL_RESPONSE>()._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CREATE_FAMIL_RESPONSE::PROBUFF_NET_CREATE_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
}
PROBUFF_NET_CREATE_FAMIL_RESPONSE::PROBUFF_NET_CREATE_FAMIL_RESPONSE(const PROBUFF_NET_CREATE_FAMIL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_stat_ = from.m_stat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
}

void PROBUFF_NET_CREATE_FAMIL_RESPONSE::SharedCtor() {
  m_stat_ = 0;
}

PROBUFF_NET_CREATE_FAMIL_RESPONSE::~PROBUFF_NET_CREATE_FAMIL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_CREATE_FAMIL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_CREATE_FAMIL_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_CREATE_FAMIL_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_CREATE_FAMIL_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_CREATE_FAMIL_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_CREATE_FAMIL_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_CREATE_FAMIL_RESPONSE& PROBUFF_NET_CREATE_FAMIL_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_CREATE_FAMIL_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_CREATE_FAMIL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_stat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CREATE_FAMIL_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_CREATE_FAMIL_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_CREATE_FAMIL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 m_stat = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_stat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_CREATE_FAMIL_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_CREATE_FAMIL_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_CREATE_FAMIL_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_CREATE_FAMIL_RESPONSE::MergeFrom(const PROBUFF_NET_CREATE_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_stat()) {
    _internal_set_m_stat(from._internal_m_stat());
  }
}

void PROBUFF_NET_CREATE_FAMIL_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_CREATE_FAMIL_RESPONSE::CopyFrom(const PROBUFF_NET_CREATE_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CREATE_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CREATE_FAMIL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CREATE_FAMIL_RESPONSE::InternalSwap(PROBUFF_NET_CREATE_FAMIL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_stat_, other->m_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CREATE_FAMIL_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_JOIN_FAMIL::InitAsDefaultInstance() {
}
class PROBUFF_NET_JOIN_FAMIL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_JOIN_FAMIL>()._has_bits_);
  static void set_has_m_familid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_apply(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_JOIN_FAMIL::PROBUFF_NET_JOIN_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_JOIN_FAMIL)
}
PROBUFF_NET_JOIN_FAMIL::PROBUFF_NET_JOIN_FAMIL(const PROBUFF_NET_JOIN_FAMIL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_familid_, &from.m_familid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_apply_) -
    reinterpret_cast<char*>(&m_familid_)) + sizeof(m_apply_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_JOIN_FAMIL)
}

void PROBUFF_NET_JOIN_FAMIL::SharedCtor() {
  ::memset(&m_familid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_apply_) -
      reinterpret_cast<char*>(&m_familid_)) + sizeof(m_apply_));
}

PROBUFF_NET_JOIN_FAMIL::~PROBUFF_NET_JOIN_FAMIL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_JOIN_FAMIL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_JOIN_FAMIL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_JOIN_FAMIL::ArenaDtor(void* object) {
  PROBUFF_NET_JOIN_FAMIL* _this = reinterpret_cast< PROBUFF_NET_JOIN_FAMIL* >(object);
  (void)_this;
}
void PROBUFF_NET_JOIN_FAMIL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_JOIN_FAMIL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_JOIN_FAMIL& PROBUFF_NET_JOIN_FAMIL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_JOIN_FAMIL_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_JOIN_FAMIL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_JOIN_FAMIL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_familid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_apply_) -
        reinterpret_cast<char*>(&m_familid_)) + sizeof(m_apply_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_JOIN_FAMIL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_familid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_familid(&has_bits);
          m_familid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_apply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_apply(&has_bits);
          m_apply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_JOIN_FAMIL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_JOIN_FAMIL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_familid = 1;
  if (_internal_has_m_familid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_familid(), target);
  }

  // bool m_apply = 2;
  if (_internal_has_m_apply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_m_apply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_JOIN_FAMIL)
  return target;
}

size_t PROBUFF_NET_JOIN_FAMIL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_JOIN_FAMIL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 m_familid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_familid());
    }

    // bool m_apply = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_JOIN_FAMIL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_JOIN_FAMIL)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_JOIN_FAMIL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_JOIN_FAMIL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_JOIN_FAMIL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_JOIN_FAMIL)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_JOIN_FAMIL::MergeFrom(const PROBUFF_NET_JOIN_FAMIL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_JOIN_FAMIL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_familid_ = from.m_familid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_apply_ = from.m_apply_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_JOIN_FAMIL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_JOIN_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_JOIN_FAMIL::CopyFrom(const PROBUFF_NET_JOIN_FAMIL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_JOIN_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_JOIN_FAMIL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_JOIN_FAMIL::InternalSwap(PROBUFF_NET_JOIN_FAMIL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_JOIN_FAMIL, m_apply_)
      + sizeof(PROBUFF_NET_JOIN_FAMIL::m_apply_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_JOIN_FAMIL, m_familid_)>(
          reinterpret_cast<char*>(&m_familid_),
          reinterpret_cast<char*>(&other->m_familid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_JOIN_FAMIL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_JOIN_FAMIL_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_JOIN_FAMIL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_JOIN_FAMIL_RESPONSE>()._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_JOIN_FAMIL_RESPONSE::PROBUFF_NET_JOIN_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
}
PROBUFF_NET_JOIN_FAMIL_RESPONSE::PROBUFF_NET_JOIN_FAMIL_RESPONSE(const PROBUFF_NET_JOIN_FAMIL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_stat_ = from.m_stat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
}

void PROBUFF_NET_JOIN_FAMIL_RESPONSE::SharedCtor() {
  m_stat_ = 0;
}

PROBUFF_NET_JOIN_FAMIL_RESPONSE::~PROBUFF_NET_JOIN_FAMIL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_JOIN_FAMIL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_JOIN_FAMIL_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_JOIN_FAMIL_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_JOIN_FAMIL_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_JOIN_FAMIL_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_JOIN_FAMIL_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_JOIN_FAMIL_RESPONSE& PROBUFF_NET_JOIN_FAMIL_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_JOIN_FAMIL_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_JOIN_FAMIL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_stat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_JOIN_FAMIL_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_JOIN_FAMIL_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_JOIN_FAMIL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 m_stat = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_stat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_JOIN_FAMIL_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_JOIN_FAMIL_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_JOIN_FAMIL_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_JOIN_FAMIL_RESPONSE::MergeFrom(const PROBUFF_NET_JOIN_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_stat()) {
    _internal_set_m_stat(from._internal_m_stat());
  }
}

void PROBUFF_NET_JOIN_FAMIL_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_JOIN_FAMIL_RESPONSE::CopyFrom(const PROBUFF_NET_JOIN_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_JOIN_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_JOIN_FAMIL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_JOIN_FAMIL_RESPONSE::InternalSwap(PROBUFF_NET_JOIN_FAMIL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_stat_, other->m_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_JOIN_FAMIL_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_RATIFY_JOIN_FAMIL::InitAsDefaultInstance() {
}
class PROBUFF_NET_RATIFY_JOIN_FAMIL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RATIFY_JOIN_FAMIL>()._has_bits_);
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_ratify(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_RATIFY_JOIN_FAMIL::PROBUFF_NET_RATIFY_JOIN_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
}
PROBUFF_NET_RATIFY_JOIN_FAMIL::PROBUFF_NET_RATIFY_JOIN_FAMIL(const PROBUFF_NET_RATIFY_JOIN_FAMIL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_roleid_, &from.m_roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_ratify_) -
    reinterpret_cast<char*>(&m_roleid_)) + sizeof(m_ratify_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL::SharedCtor() {
  ::memset(&m_roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_ratify_) -
      reinterpret_cast<char*>(&m_roleid_)) + sizeof(m_ratify_));
}

PROBUFF_NET_RATIFY_JOIN_FAMIL::~PROBUFF_NET_RATIFY_JOIN_FAMIL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL::ArenaDtor(void* object) {
  PROBUFF_NET_RATIFY_JOIN_FAMIL* _this = reinterpret_cast< PROBUFF_NET_RATIFY_JOIN_FAMIL* >(object);
  (void)_this;
}
void PROBUFF_NET_RATIFY_JOIN_FAMIL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_RATIFY_JOIN_FAMIL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_RATIFY_JOIN_FAMIL& PROBUFF_NET_RATIFY_JOIN_FAMIL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_RATIFY_JOIN_FAMIL_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_RATIFY_JOIN_FAMIL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_ratify_) -
        reinterpret_cast<char*>(&m_roleid_)) + sizeof(m_ratify_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RATIFY_JOIN_FAMIL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_roleid(&has_bits);
          m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_ratify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_ratify(&has_bits);
          m_ratify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_RATIFY_JOIN_FAMIL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_roleid = 1;
  if (_internal_has_m_roleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_roleid(), target);
  }

  // bool m_ratify = 2;
  if (_internal_has_m_ratify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_m_ratify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  return target;
}

size_t PROBUFF_NET_RATIFY_JOIN_FAMIL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 m_roleid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_roleid());
    }

    // bool m_ratify = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_RATIFY_JOIN_FAMIL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_RATIFY_JOIN_FAMIL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL::MergeFrom(const PROBUFF_NET_RATIFY_JOIN_FAMIL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_roleid_ = from.m_roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_ratify_ = from.m_ratify_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL::CopyFrom(const PROBUFF_NET_RATIFY_JOIN_FAMIL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RATIFY_JOIN_FAMIL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL::InternalSwap(PROBUFF_NET_RATIFY_JOIN_FAMIL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RATIFY_JOIN_FAMIL, m_ratify_)
      + sizeof(PROBUFF_NET_RATIFY_JOIN_FAMIL::m_ratify_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RATIFY_JOIN_FAMIL, m_roleid_)>(
          reinterpret_cast<char*>(&m_roleid_),
          reinterpret_cast<char*>(&other->m_roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RATIFY_JOIN_FAMIL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE>()._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
}
PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE(const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_stat_ = from.m_stat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::SharedCtor() {
  m_stat_ = 0;
}

PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::~PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_stat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 m_stat = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_stat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::MergeFrom(const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_stat()) {
    _internal_set_m_stat(from._internal_m_stat());
  }
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::CopyFrom(const PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::InternalSwap(PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_stat_, other->m_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_CEDE_FAMIL::InitAsDefaultInstance() {
}
class PROBUFF_NET_CEDE_FAMIL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CEDE_FAMIL>()._has_bits_);
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CEDE_FAMIL::PROBUFF_NET_CEDE_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CEDE_FAMIL)
}
PROBUFF_NET_CEDE_FAMIL::PROBUFF_NET_CEDE_FAMIL(const PROBUFF_NET_CEDE_FAMIL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_roleid_ = from.m_roleid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CEDE_FAMIL)
}

void PROBUFF_NET_CEDE_FAMIL::SharedCtor() {
  m_roleid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_CEDE_FAMIL::~PROBUFF_NET_CEDE_FAMIL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CEDE_FAMIL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_CEDE_FAMIL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_CEDE_FAMIL::ArenaDtor(void* object) {
  PROBUFF_NET_CEDE_FAMIL* _this = reinterpret_cast< PROBUFF_NET_CEDE_FAMIL* >(object);
  (void)_this;
}
void PROBUFF_NET_CEDE_FAMIL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_CEDE_FAMIL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_CEDE_FAMIL& PROBUFF_NET_CEDE_FAMIL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_CEDE_FAMIL_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_CEDE_FAMIL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CEDE_FAMIL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_roleid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CEDE_FAMIL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_roleid(&has_bits);
          m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_CEDE_FAMIL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CEDE_FAMIL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_roleid = 1;
  if (_internal_has_m_roleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CEDE_FAMIL)
  return target;
}

size_t PROBUFF_NET_CEDE_FAMIL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CEDE_FAMIL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 m_roleid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_roleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_CEDE_FAMIL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_CEDE_FAMIL)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_CEDE_FAMIL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_CEDE_FAMIL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_CEDE_FAMIL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_CEDE_FAMIL)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_CEDE_FAMIL::MergeFrom(const PROBUFF_NET_CEDE_FAMIL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CEDE_FAMIL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_roleid()) {
    _internal_set_m_roleid(from._internal_m_roleid());
  }
}

void PROBUFF_NET_CEDE_FAMIL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_CEDE_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_CEDE_FAMIL::CopyFrom(const PROBUFF_NET_CEDE_FAMIL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CEDE_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CEDE_FAMIL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CEDE_FAMIL::InternalSwap(PROBUFF_NET_CEDE_FAMIL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_roleid_, other->m_roleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CEDE_FAMIL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_CEDE_FAMIL_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_CEDE_FAMIL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CEDE_FAMIL_RESPONSE>()._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CEDE_FAMIL_RESPONSE::PROBUFF_NET_CEDE_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
}
PROBUFF_NET_CEDE_FAMIL_RESPONSE::PROBUFF_NET_CEDE_FAMIL_RESPONSE(const PROBUFF_NET_CEDE_FAMIL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_stat_ = from.m_stat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
}

void PROBUFF_NET_CEDE_FAMIL_RESPONSE::SharedCtor() {
  m_stat_ = 0;
}

PROBUFF_NET_CEDE_FAMIL_RESPONSE::~PROBUFF_NET_CEDE_FAMIL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_CEDE_FAMIL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_CEDE_FAMIL_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_CEDE_FAMIL_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_CEDE_FAMIL_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_CEDE_FAMIL_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_CEDE_FAMIL_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_CEDE_FAMIL_RESPONSE& PROBUFF_NET_CEDE_FAMIL_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_CEDE_FAMIL_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_CEDE_FAMIL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_stat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CEDE_FAMIL_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_CEDE_FAMIL_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_CEDE_FAMIL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 m_stat = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_stat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_CEDE_FAMIL_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_CEDE_FAMIL_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_CEDE_FAMIL_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_CEDE_FAMIL_RESPONSE::MergeFrom(const PROBUFF_NET_CEDE_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_stat()) {
    _internal_set_m_stat(from._internal_m_stat());
  }
}

void PROBUFF_NET_CEDE_FAMIL_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_CEDE_FAMIL_RESPONSE::CopyFrom(const PROBUFF_NET_CEDE_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CEDE_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CEDE_FAMIL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CEDE_FAMIL_RESPONSE::InternalSwap(PROBUFF_NET_CEDE_FAMIL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_stat_, other->m_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CEDE_FAMIL_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_LEAVE_FAMIL::InitAsDefaultInstance() {
}
class PROBUFF_NET_LEAVE_FAMIL::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_LEAVE_FAMIL>()._has_bits_);
  static void set_has_m_familid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_LEAVE_FAMIL::PROBUFF_NET_LEAVE_FAMIL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_LEAVE_FAMIL)
}
PROBUFF_NET_LEAVE_FAMIL::PROBUFF_NET_LEAVE_FAMIL(const PROBUFF_NET_LEAVE_FAMIL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_familid_ = from.m_familid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_LEAVE_FAMIL)
}

void PROBUFF_NET_LEAVE_FAMIL::SharedCtor() {
  m_familid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_LEAVE_FAMIL::~PROBUFF_NET_LEAVE_FAMIL() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_LEAVE_FAMIL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_LEAVE_FAMIL::ArenaDtor(void* object) {
  PROBUFF_NET_LEAVE_FAMIL* _this = reinterpret_cast< PROBUFF_NET_LEAVE_FAMIL* >(object);
  (void)_this;
}
void PROBUFF_NET_LEAVE_FAMIL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_LEAVE_FAMIL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_LEAVE_FAMIL& PROBUFF_NET_LEAVE_FAMIL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_LEAVE_FAMIL_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_LEAVE_FAMIL::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_familid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_LEAVE_FAMIL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_familid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_familid(&has_bits);
          m_familid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_LEAVE_FAMIL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_familid = 1;
  if (_internal_has_m_familid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_familid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  return target;
}

size_t PROBUFF_NET_LEAVE_FAMIL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 m_familid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_familid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_LEAVE_FAMIL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_LEAVE_FAMIL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_LEAVE_FAMIL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_LEAVE_FAMIL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_LEAVE_FAMIL)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_LEAVE_FAMIL::MergeFrom(const PROBUFF_NET_LEAVE_FAMIL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_familid()) {
    _internal_set_m_familid(from._internal_m_familid());
  }
}

void PROBUFF_NET_LEAVE_FAMIL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_LEAVE_FAMIL::CopyFrom(const PROBUFF_NET_LEAVE_FAMIL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_LEAVE_FAMIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_LEAVE_FAMIL::IsInitialized() const {
  return true;
}

void PROBUFF_NET_LEAVE_FAMIL::InternalSwap(PROBUFF_NET_LEAVE_FAMIL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_familid_, other->m_familid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_LEAVE_FAMIL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_LEAVE_FAMIL_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_LEAVE_FAMIL_RESPONSE>()._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_LEAVE_FAMIL_RESPONSE::PROBUFF_NET_LEAVE_FAMIL_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
}
PROBUFF_NET_LEAVE_FAMIL_RESPONSE::PROBUFF_NET_LEAVE_FAMIL_RESPONSE(const PROBUFF_NET_LEAVE_FAMIL_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_stat_ = from.m_stat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
}

void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::SharedCtor() {
  m_stat_ = 0;
}

PROBUFF_NET_LEAVE_FAMIL_RESPONSE::~PROBUFF_NET_LEAVE_FAMIL_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_LEAVE_FAMIL_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_LEAVE_FAMIL_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_LEAVE_FAMIL_RESPONSE& PROBUFF_NET_LEAVE_FAMIL_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_LEAVE_FAMIL_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_stat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_LEAVE_FAMIL_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_LEAVE_FAMIL_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  return target;
}

size_t PROBUFF_NET_LEAVE_FAMIL_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 m_stat = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_stat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_LEAVE_FAMIL_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_LEAVE_FAMIL_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::MergeFrom(const PROBUFF_NET_LEAVE_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_stat()) {
    _internal_set_m_stat(from._internal_m_stat());
  }
}

void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::CopyFrom(const PROBUFF_NET_LEAVE_FAMIL_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_LEAVE_FAMIL_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_LEAVE_FAMIL_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_LEAVE_FAMIL_RESPONSE::InternalSwap(PROBUFF_NET_LEAVE_FAMIL_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_stat_, other->m_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_LEAVE_FAMIL_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_LIST::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_LIST::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_LIST>()._has_bits_);
  static void set_has_m_familid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMIL_LIST::PROBUFF_NET_FAMIL_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_LIST)
}
PROBUFF_NET_FAMIL_LIST::PROBUFF_NET_FAMIL_LIST(const PROBUFF_NET_FAMIL_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_familid_ = from.m_familid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_LIST)
}

void PROBUFF_NET_FAMIL_LIST::SharedCtor() {
  m_familid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_FAMIL_LIST::~PROBUFF_NET_FAMIL_LIST() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_LIST)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_LIST::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_LIST::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_LIST* _this = reinterpret_cast< PROBUFF_NET_FAMIL_LIST* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_LIST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_LIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_LIST& PROBUFF_NET_FAMIL_LIST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_LIST_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_familid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_LIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_familid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_familid(&has_bits);
          m_familid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_LIST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_familid = 1;
  if (_internal_has_m_familid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_familid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_LIST)
  return target;
}

size_t PROBUFF_NET_FAMIL_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 m_familid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_familid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_LIST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_LIST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_LIST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_LIST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_LIST)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_LIST::MergeFrom(const PROBUFF_NET_FAMIL_LIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_familid()) {
    _internal_set_m_familid(from._internal_m_familid());
  }
}

void PROBUFF_NET_FAMIL_LIST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_LIST::CopyFrom(const PROBUFF_NET_FAMIL_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_LIST::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_LIST::InternalSwap(PROBUFF_NET_FAMIL_LIST* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_familid_, other->m_familid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_LIST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMIL_LIST_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMIL_LIST_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMIL_LIST_RESPONSE>()._has_bits_);
  static void set_has_m_familid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void PROBUFF_NET_FAMIL_LIST_RESPONSE::clear_m_family() {
  m_family_.Clear();
}
PROBUFF_NET_FAMIL_LIST_RESPONSE::PROBUFF_NET_FAMIL_LIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_family_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
}
PROBUFF_NET_FAMIL_LIST_RESPONSE::PROBUFF_NET_FAMIL_LIST_RESPONSE(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_family_(from.m_family_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_familid_ = from.m_familid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_FAMIL_LIST_RESPONSE_net_2eproto.base);
  m_familid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_FAMIL_LIST_RESPONSE::~PROBUFF_NET_FAMIL_LIST_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FAMIL_LIST_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FAMIL_LIST_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMIL_LIST_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMIL_LIST_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMIL_LIST_RESPONSE& PROBUFF_NET_FAMIL_LIST_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMIL_LIST_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMIL_LIST_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_family_.Clear();
  m_familid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMIL_LIST_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_familid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_familid(&has_bits);
          m_familid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pbdb.db_family m_family = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_family(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMIL_LIST_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_familid = 1;
  if (_internal_has_m_familid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_familid(), target);
  }

  // repeated .pbdb.db_family m_family = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_family_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_m_family(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMIL_LIST_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_family m_family = 2;
  total_size += 1UL * this->_internal_m_family_size();
  for (const auto& msg : this->m_family_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 m_familid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_familid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMIL_LIST_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMIL_LIST_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::MergeFrom(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_family_.MergeFrom(from.m_family_);
  if (from._internal_has_m_familid()) {
    _internal_set_m_familid(from._internal_m_familid());
  }
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::CopyFrom(const PROBUFF_NET_FAMIL_LIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMIL_LIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMIL_LIST_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMIL_LIST_RESPONSE::InternalSwap(PROBUFF_NET_FAMIL_LIST_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_family_.InternalSwap(&other->m_family_);
  swap(m_familid_, other->m_familid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMIL_LIST_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_CHANGE_FAMILNAME::InitAsDefaultInstance() {
}
class PROBUFF_NET_CHANGE_FAMILNAME::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHANGE_FAMILNAME>()._has_bits_);
  static void set_has_m_familid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CHANGE_FAMILNAME::PROBUFF_NET_CHANGE_FAMILNAME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
}
PROBUFF_NET_CHANGE_FAMILNAME::PROBUFF_NET_CHANGE_FAMILNAME(const PROBUFF_NET_CHANGE_FAMILNAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_m_name()) {
    m_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_m_name(),
      GetArena());
  }
  m_familid_ = from.m_familid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
}

void PROBUFF_NET_CHANGE_FAMILNAME::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_CHANGE_FAMILNAME_net_2eproto.base);
  m_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  m_familid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_CHANGE_FAMILNAME::~PROBUFF_NET_CHANGE_FAMILNAME() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_CHANGE_FAMILNAME::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  m_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PROBUFF_NET_CHANGE_FAMILNAME::ArenaDtor(void* object) {
  PROBUFF_NET_CHANGE_FAMILNAME* _this = reinterpret_cast< PROBUFF_NET_CHANGE_FAMILNAME* >(object);
  (void)_this;
}
void PROBUFF_NET_CHANGE_FAMILNAME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_CHANGE_FAMILNAME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_CHANGE_FAMILNAME& PROBUFF_NET_CHANGE_FAMILNAME::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_CHANGE_FAMILNAME_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_CHANGE_FAMILNAME::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    m_name_.ClearNonDefaultToEmpty();
  }
  m_familid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHANGE_FAMILNAME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_familid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_familid(&has_bits);
          m_familid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string m_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_m_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbnet.PROBUFF_NET_CHANGE_FAMILNAME.m_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_CHANGE_FAMILNAME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_familid = 1;
  if (_internal_has_m_familid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_familid(), target);
  }

  // string m_name = 2;
  if (_internal_has_m_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_m_name().data(), static_cast<int>(this->_internal_m_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbnet.PROBUFF_NET_CHANGE_FAMILNAME.m_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_m_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  return target;
}

size_t PROBUFF_NET_CHANGE_FAMILNAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string m_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_m_name());
    }

    // int64 m_familid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_familid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_CHANGE_FAMILNAME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_CHANGE_FAMILNAME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_CHANGE_FAMILNAME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_CHANGE_FAMILNAME::MergeFrom(const PROBUFF_NET_CHANGE_FAMILNAME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_m_name(from._internal_m_name());
    }
    if (cached_has_bits & 0x00000002u) {
      m_familid_ = from.m_familid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_CHANGE_FAMILNAME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_CHANGE_FAMILNAME::CopyFrom(const PROBUFF_NET_CHANGE_FAMILNAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHANGE_FAMILNAME::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHANGE_FAMILNAME::InternalSwap(PROBUFF_NET_CHANGE_FAMILNAME* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_name_.Swap(&other->m_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(m_familid_, other->m_familid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHANGE_FAMILNAME::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE>()._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
}
PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE(const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_stat_ = from.m_stat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
}

void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::SharedCtor() {
  m_stat_ = 0;
}

PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::~PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_stat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  return target;
}

size_t PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 m_stat = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_stat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::MergeFrom(const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_stat()) {
    _internal_set_m_stat(from._internal_m_stat());
  }
}

void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::CopyFrom(const PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::InternalSwap(PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_stat_, other->m_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMILSIGN::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMILSIGN::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMILSIGN>()._has_bits_);
  static void set_has_m_familid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMILSIGN::PROBUFF_NET_FAMILSIGN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMILSIGN)
}
PROBUFF_NET_FAMILSIGN::PROBUFF_NET_FAMILSIGN(const PROBUFF_NET_FAMILSIGN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_familid_ = from.m_familid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMILSIGN)
}

void PROBUFF_NET_FAMILSIGN::SharedCtor() {
  m_familid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_FAMILSIGN::~PROBUFF_NET_FAMILSIGN() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMILSIGN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMILSIGN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMILSIGN::ArenaDtor(void* object) {
  PROBUFF_NET_FAMILSIGN* _this = reinterpret_cast< PROBUFF_NET_FAMILSIGN* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMILSIGN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMILSIGN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMILSIGN& PROBUFF_NET_FAMILSIGN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMILSIGN_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMILSIGN::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMILSIGN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_familid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMILSIGN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_familid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_familid(&has_bits);
          m_familid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMILSIGN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMILSIGN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_familid = 1;
  if (_internal_has_m_familid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_familid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMILSIGN)
  return target;
}

size_t PROBUFF_NET_FAMILSIGN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMILSIGN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 m_familid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_familid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMILSIGN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMILSIGN)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMILSIGN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMILSIGN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMILSIGN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMILSIGN)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMILSIGN::MergeFrom(const PROBUFF_NET_FAMILSIGN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMILSIGN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_familid()) {
    _internal_set_m_familid(from._internal_m_familid());
  }
}

void PROBUFF_NET_FAMILSIGN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMILSIGN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMILSIGN::CopyFrom(const PROBUFF_NET_FAMILSIGN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMILSIGN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMILSIGN::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMILSIGN::InternalSwap(PROBUFF_NET_FAMILSIGN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_familid_, other->m_familid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMILSIGN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FAMILSIGN_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FAMILSIGN_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_FAMILSIGN_RESPONSE>()._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_FAMILSIGN_RESPONSE::PROBUFF_NET_FAMILSIGN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
}
PROBUFF_NET_FAMILSIGN_RESPONSE::PROBUFF_NET_FAMILSIGN_RESPONSE(const PROBUFF_NET_FAMILSIGN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_stat_ = from.m_stat_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
}

void PROBUFF_NET_FAMILSIGN_RESPONSE::SharedCtor() {
  m_stat_ = 0;
}

PROBUFF_NET_FAMILSIGN_RESPONSE::~PROBUFF_NET_FAMILSIGN_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FAMILSIGN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FAMILSIGN_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FAMILSIGN_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FAMILSIGN_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FAMILSIGN_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FAMILSIGN_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FAMILSIGN_RESPONSE& PROBUFF_NET_FAMILSIGN_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FAMILSIGN_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FAMILSIGN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_stat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FAMILSIGN_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FAMILSIGN_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FAMILSIGN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 m_stat = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m_stat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FAMILSIGN_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FAMILSIGN_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FAMILSIGN_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FAMILSIGN_RESPONSE::MergeFrom(const PROBUFF_NET_FAMILSIGN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_stat()) {
    _internal_set_m_stat(from._internal_m_stat());
  }
}

void PROBUFF_NET_FAMILSIGN_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FAMILSIGN_RESPONSE::CopyFrom(const PROBUFF_NET_FAMILSIGN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FAMILSIGN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FAMILSIGN_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FAMILSIGN_RESPONSE::InternalSwap(PROBUFF_NET_FAMILSIGN_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_stat_, other->m_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FAMILSIGN_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse() {}
PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::MergeFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PROBUFF_NET_REWARD_ITEM_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_REWARD_ITEM_RESPONSE::_Internal {
 public:
};

PROBUFF_NET_REWARD_ITEM_RESPONSE::PROBUFF_NET_REWARD_ITEM_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
}
PROBUFF_NET_REWARD_ITEM_RESPONSE::PROBUFF_NET_REWARD_ITEM_RESPONSE(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_items_.MergeFrom(from.m_items_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_net_2eproto.base);
}

PROBUFF_NET_REWARD_ITEM_RESPONSE::~PROBUFF_NET_REWARD_ITEM_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_REWARD_ITEM_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_REWARD_ITEM_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_REWARD_ITEM_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_REWARD_ITEM_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_REWARD_ITEM_RESPONSE& PROBUFF_NET_REWARD_ITEM_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_REWARD_ITEM_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_REWARD_ITEM_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_REWARD_ITEM_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, int32> m_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&m_items_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_REWARD_ITEM_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int32> m_items = 1;
  if (!this->_internal_m_items().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_m_items().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_m_items().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_m_items().begin();
          it != this->_internal_m_items().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_m_items().begin();
          it != this->_internal_m_items().end(); ++it) {
        target = PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  return target;
}

size_t PROBUFF_NET_REWARD_ITEM_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> m_items = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_items_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_m_items().begin();
      it != this->_internal_m_items().end(); ++it) {
    total_size += PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_REWARD_ITEM_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_REWARD_ITEM_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::MergeFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_items_.MergeFrom(from.m_items_);
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::CopyFrom(const PROBUFF_NET_REWARD_ITEM_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_REWARD_ITEM_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_REWARD_ITEM_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_REWARD_ITEM_RESPONSE::InternalSwap(PROBUFF_NET_REWARD_ITEM_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  m_items_.Swap(&other->m_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_REWARD_ITEM_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_RANKLIST::InitAsDefaultInstance() {
}
class PROBUFF_NET_RANKLIST::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RANKLIST>()._has_bits_);
  static void set_has_m_iscross(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_page(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_everynum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PROBUFF_NET_RANKLIST::PROBUFF_NET_RANKLIST(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RANKLIST)
}
PROBUFF_NET_RANKLIST::PROBUFF_NET_RANKLIST(const PROBUFF_NET_RANKLIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_iscross_, &from.m_iscross_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_everynum_) -
    reinterpret_cast<char*>(&m_iscross_)) + sizeof(m_everynum_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RANKLIST)
}

void PROBUFF_NET_RANKLIST::SharedCtor() {
  ::memset(&m_iscross_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_everynum_) -
      reinterpret_cast<char*>(&m_iscross_)) + sizeof(m_everynum_));
}

PROBUFF_NET_RANKLIST::~PROBUFF_NET_RANKLIST() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RANKLIST)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_RANKLIST::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_RANKLIST::ArenaDtor(void* object) {
  PROBUFF_NET_RANKLIST* _this = reinterpret_cast< PROBUFF_NET_RANKLIST* >(object);
  (void)_this;
}
void PROBUFF_NET_RANKLIST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_RANKLIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_RANKLIST& PROBUFF_NET_RANKLIST::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_RANKLIST_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_RANKLIST::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RANKLIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&m_iscross_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_everynum_) -
        reinterpret_cast<char*>(&m_iscross_)) + sizeof(m_everynum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RANKLIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool m_iscross = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_iscross(&has_bits);
          m_iscross_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pbdb.eranklist m_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbdb::eranklist>(val));
        } else goto handle_unusual;
        continue;
      // int32 m_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_page(&has_bits);
          m_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_everynum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_everynum(&has_bits);
          m_everynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_RANKLIST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RANKLIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool m_iscross = 1;
  if (_internal_has_m_iscross()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_m_iscross(), target);
  }

  // .pbdb.eranklist m_type = 2;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_m_type(), target);
  }

  // int32 m_page = 3;
  if (_internal_has_m_page()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_page(), target);
  }

  // int32 m_everynum = 4;
  if (_internal_has_m_everynum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_everynum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RANKLIST)
  return target;
}

size_t PROBUFF_NET_RANKLIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RANKLIST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // bool m_iscross = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // .pbdb.eranklist m_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // int32 m_page = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_page());
    }

    // int32 m_everynum = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_everynum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_RANKLIST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_RANKLIST)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_RANKLIST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_RANKLIST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_RANKLIST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_RANKLIST)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_RANKLIST::MergeFrom(const PROBUFF_NET_RANKLIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RANKLIST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      m_iscross_ = from.m_iscross_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_page_ = from.m_page_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_everynum_ = from.m_everynum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_RANKLIST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_RANKLIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_RANKLIST::CopyFrom(const PROBUFF_NET_RANKLIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RANKLIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RANKLIST::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RANKLIST::InternalSwap(PROBUFF_NET_RANKLIST* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RANKLIST, m_everynum_)
      + sizeof(PROBUFF_NET_RANKLIST::m_everynum_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RANKLIST, m_iscross_)>(
          reinterpret_cast<char*>(&m_iscross_),
          reinterpret_cast<char*>(&other->m_iscross_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RANKLIST::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_RANKLIST_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_RANKLIST_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RANKLIST_RESPONSE>()._has_bits_);
  static void set_has_m_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_page(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_everynum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void PROBUFF_NET_RANKLIST_RESPONSE::clear_m_items() {
  m_items_.Clear();
}
PROBUFF_NET_RANKLIST_RESPONSE::PROBUFF_NET_RANKLIST_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
}
PROBUFF_NET_RANKLIST_RESPONSE::PROBUFF_NET_RANKLIST_RESPONSE(const PROBUFF_NET_RANKLIST_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      m_items_(from.m_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_type_, &from.m_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_count_) -
    reinterpret_cast<char*>(&m_type_)) + sizeof(m_count_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
}

void PROBUFF_NET_RANKLIST_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_RANKLIST_RESPONSE_net_2eproto.base);
  ::memset(&m_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_count_) -
      reinterpret_cast<char*>(&m_type_)) + sizeof(m_count_));
}

PROBUFF_NET_RANKLIST_RESPONSE::~PROBUFF_NET_RANKLIST_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_RANKLIST_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_RANKLIST_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_RANKLIST_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_RANKLIST_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_RANKLIST_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_RANKLIST_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_RANKLIST_RESPONSE& PROBUFF_NET_RANKLIST_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_RANKLIST_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_RANKLIST_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&m_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_count_) -
        reinterpret_cast<char*>(&m_type_)) + sizeof(m_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RANKLIST_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbdb.eranklist m_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_type(static_cast<::pbdb::eranklist>(val));
        } else goto handle_unusual;
        continue;
      // repeated .pbdb.db_brief m_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 m_page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_page(&has_bits);
          m_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_everynum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_m_everynum(&has_bits);
          m_everynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_m_count(&has_bits);
          m_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_RANKLIST_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbdb.eranklist m_type = 1;
  if (_internal_has_m_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_type(), target);
  }

  // repeated .pbdb.db_brief m_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_m_items(i), target, stream);
  }

  // int32 m_page = 3;
  if (_internal_has_m_page()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_page(), target);
  }

  // int32 m_everynum = 4;
  if (_internal_has_m_everynum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_m_everynum(), target);
  }

  // int32 m_count = 5;
  if (_internal_has_m_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_m_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  return target;
}

size_t PROBUFF_NET_RANKLIST_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_brief m_items = 2;
  total_size += 1UL * this->_internal_m_items_size();
  for (const auto& msg : this->m_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .pbdb.eranklist m_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_type());
    }

    // int32 m_page = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_page());
    }

    // int32 m_everynum = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_everynum());
    }

    // int32 m_count = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_RANKLIST_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_RANKLIST_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_RANKLIST_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_RANKLIST_RESPONSE::MergeFrom(const PROBUFF_NET_RANKLIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_items_.MergeFrom(from.m_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      m_type_ = from.m_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_page_ = from.m_page_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_everynum_ = from.m_everynum_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_count_ = from.m_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_RANKLIST_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_RANKLIST_RESPONSE::CopyFrom(const PROBUFF_NET_RANKLIST_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RANKLIST_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RANKLIST_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RANKLIST_RESPONSE::InternalSwap(PROBUFF_NET_RANKLIST_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_items_.InternalSwap(&other->m_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RANKLIST_RESPONSE, m_count_)
      + sizeof(PROBUFF_NET_RANKLIST_RESPONSE::m_count_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RANKLIST_RESPONSE, m_type_)>(
          reinterpret_cast<char*>(&m_type_),
          reinterpret_cast<char*>(&other->m_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RANKLIST_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FRIEND::InitAsDefaultInstance() {
}
class PROBUFF_NET_FRIEND::_Internal {
 public:
};

PROBUFF_NET_FRIEND::PROBUFF_NET_FRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND)
}
PROBUFF_NET_FRIEND::PROBUFF_NET_FRIEND(const PROBUFF_NET_FRIEND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND)
}

void PROBUFF_NET_FRIEND::SharedCtor() {
}

PROBUFF_NET_FRIEND::~PROBUFF_NET_FRIEND() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FRIEND::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FRIEND::ArenaDtor(void* object) {
  PROBUFF_NET_FRIEND* _this = reinterpret_cast< PROBUFF_NET_FRIEND* >(object);
  (void)_this;
}
void PROBUFF_NET_FRIEND::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FRIEND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FRIEND& PROBUFF_NET_FRIEND::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FRIEND_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FRIEND::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FRIEND::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND)
  return target;
}

size_t PROBUFF_NET_FRIEND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FRIEND::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FRIEND)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FRIEND* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FRIEND>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FRIEND)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FRIEND)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FRIEND::MergeFrom(const PROBUFF_NET_FRIEND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PROBUFF_NET_FRIEND::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FRIEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FRIEND::CopyFrom(const PROBUFF_NET_FRIEND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND::InternalSwap(PROBUFF_NET_FRIEND* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_FRIEND_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_FRIEND_RESPONSE::_Internal {
 public:
};

void PROBUFF_NET_FRIEND_RESPONSE::clear_m_friends() {
  m_friends_.Clear();
}
void PROBUFF_NET_FRIEND_RESPONSE::clear_m_applyfriends() {
  m_applyfriends_.Clear();
}
PROBUFF_NET_FRIEND_RESPONSE::PROBUFF_NET_FRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  m_friends_(arena),
  m_applyfriends_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
}
PROBUFF_NET_FRIEND_RESPONSE::PROBUFF_NET_FRIEND_RESPONSE(const PROBUFF_NET_FRIEND_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      m_friends_(from.m_friends_),
      m_applyfriends_(from.m_applyfriends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
}

void PROBUFF_NET_FRIEND_RESPONSE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PROBUFF_NET_FRIEND_RESPONSE_net_2eproto.base);
}

PROBUFF_NET_FRIEND_RESPONSE::~PROBUFF_NET_FRIEND_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_FRIEND_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_FRIEND_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_FRIEND_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_FRIEND_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_FRIEND_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_FRIEND_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_FRIEND_RESPONSE& PROBUFF_NET_FRIEND_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_FRIEND_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_FRIEND_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_friends_.Clear();
  m_applyfriends_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_FRIEND_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pbdb.db_brief m_friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pbdb.db_brief m_applyfriends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_m_applyfriends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_FRIEND_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbdb.db_brief m_friends = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_m_friends(i), target, stream);
  }

  // repeated .pbdb.db_brief m_applyfriends = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_m_applyfriends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_m_applyfriends(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  return target;
}

size_t PROBUFF_NET_FRIEND_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbdb.db_brief m_friends = 1;
  total_size += 1UL * this->_internal_m_friends_size();
  for (const auto& msg : this->m_friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pbdb.db_brief m_applyfriends = 2;
  total_size += 1UL * this->_internal_m_applyfriends_size();
  for (const auto& msg : this->m_applyfriends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_FRIEND_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_FRIEND_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_FRIEND_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_FRIEND_RESPONSE::MergeFrom(const PROBUFF_NET_FRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_friends_.MergeFrom(from.m_friends_);
  m_applyfriends_.MergeFrom(from.m_applyfriends_);
}

void PROBUFF_NET_FRIEND_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_FRIEND_RESPONSE::CopyFrom(const PROBUFF_NET_FRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_FRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_FRIEND_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_FRIEND_RESPONSE::InternalSwap(PROBUFF_NET_FRIEND_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  m_friends_.InternalSwap(&other->m_friends_);
  m_applyfriends_.InternalSwap(&other->m_applyfriends_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_FRIEND_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ADDFRIEND::InitAsDefaultInstance() {
}
class PROBUFF_NET_ADDFRIEND::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ADDFRIEND>()._has_bits_);
  static void set_has_m_friedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ADDFRIEND::PROBUFF_NET_ADDFRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ADDFRIEND)
}
PROBUFF_NET_ADDFRIEND::PROBUFF_NET_ADDFRIEND(const PROBUFF_NET_ADDFRIEND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_friedid_ = from.m_friedid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ADDFRIEND)
}

void PROBUFF_NET_ADDFRIEND::SharedCtor() {
  m_friedid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_ADDFRIEND::~PROBUFF_NET_ADDFRIEND() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ADDFRIEND)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ADDFRIEND::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_ADDFRIEND::ArenaDtor(void* object) {
  PROBUFF_NET_ADDFRIEND* _this = reinterpret_cast< PROBUFF_NET_ADDFRIEND* >(object);
  (void)_this;
}
void PROBUFF_NET_ADDFRIEND::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ADDFRIEND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ADDFRIEND& PROBUFF_NET_ADDFRIEND::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ADDFRIEND_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ADDFRIEND::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ADDFRIEND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_friedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ADDFRIEND::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_friedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_friedid(&has_bits);
          m_friedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ADDFRIEND::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ADDFRIEND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_friedid = 1;
  if (_internal_has_m_friedid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_friedid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ADDFRIEND)
  return target;
}

size_t PROBUFF_NET_ADDFRIEND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ADDFRIEND)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 m_friedid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_friedid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ADDFRIEND::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ADDFRIEND)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ADDFRIEND* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ADDFRIEND>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ADDFRIEND)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ADDFRIEND)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ADDFRIEND::MergeFrom(const PROBUFF_NET_ADDFRIEND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ADDFRIEND)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_friedid()) {
    _internal_set_m_friedid(from._internal_m_friedid());
  }
}

void PROBUFF_NET_ADDFRIEND::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ADDFRIEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ADDFRIEND::CopyFrom(const PROBUFF_NET_ADDFRIEND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ADDFRIEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ADDFRIEND::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ADDFRIEND::InternalSwap(PROBUFF_NET_ADDFRIEND* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_friedid_, other->m_friedid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ADDFRIEND::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ADDFRIEND_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_ADDFRIEND_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ADDFRIEND_RESPONSE>()._has_bits_);
  static void set_has_m_friedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_ADDFRIEND_RESPONSE::PROBUFF_NET_ADDFRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
}
PROBUFF_NET_ADDFRIEND_RESPONSE::PROBUFF_NET_ADDFRIEND_RESPONSE(const PROBUFF_NET_ADDFRIEND_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_friedid_, &from.m_friedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_stat_) -
    reinterpret_cast<char*>(&m_friedid_)) + sizeof(m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
}

void PROBUFF_NET_ADDFRIEND_RESPONSE::SharedCtor() {
  ::memset(&m_friedid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_stat_) -
      reinterpret_cast<char*>(&m_friedid_)) + sizeof(m_stat_));
}

PROBUFF_NET_ADDFRIEND_RESPONSE::~PROBUFF_NET_ADDFRIEND_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ADDFRIEND_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_ADDFRIEND_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_ADDFRIEND_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_ADDFRIEND_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_ADDFRIEND_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ADDFRIEND_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ADDFRIEND_RESPONSE& PROBUFF_NET_ADDFRIEND_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ADDFRIEND_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ADDFRIEND_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_friedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_stat_) -
        reinterpret_cast<char*>(&m_friedid_)) + sizeof(m_stat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ADDFRIEND_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_friedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_friedid(&has_bits);
          m_friedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ADDFRIEND_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_friedid = 1;
  if (_internal_has_m_friedid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_friedid(), target);
  }

  // int32 m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  return target;
}

size_t PROBUFF_NET_ADDFRIEND_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 m_friedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_friedid());
    }

    // int32 m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_stat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ADDFRIEND_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ADDFRIEND_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ADDFRIEND_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ADDFRIEND_RESPONSE::MergeFrom(const PROBUFF_NET_ADDFRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_friedid_ = from.m_friedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_stat_ = from.m_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_ADDFRIEND_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ADDFRIEND_RESPONSE::CopyFrom(const PROBUFF_NET_ADDFRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ADDFRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ADDFRIEND_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ADDFRIEND_RESPONSE::InternalSwap(PROBUFF_NET_ADDFRIEND_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ADDFRIEND_RESPONSE, m_stat_)
      + sizeof(PROBUFF_NET_ADDFRIEND_RESPONSE::m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ADDFRIEND_RESPONSE, m_friedid_)>(
          reinterpret_cast<char*>(&m_friedid_),
          reinterpret_cast<char*>(&other->m_friedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ADDFRIEND_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_RATIFY_ADDFRIEND::InitAsDefaultInstance() {
}
class PROBUFF_NET_RATIFY_ADDFRIEND::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RATIFY_ADDFRIEND>()._has_bits_);
  static void set_has_m_friedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_ratify(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_RATIFY_ADDFRIEND::PROBUFF_NET_RATIFY_ADDFRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
}
PROBUFF_NET_RATIFY_ADDFRIEND::PROBUFF_NET_RATIFY_ADDFRIEND(const PROBUFF_NET_RATIFY_ADDFRIEND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_friedid_, &from.m_friedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_ratify_) -
    reinterpret_cast<char*>(&m_friedid_)) + sizeof(m_ratify_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
}

void PROBUFF_NET_RATIFY_ADDFRIEND::SharedCtor() {
  ::memset(&m_friedid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_ratify_) -
      reinterpret_cast<char*>(&m_friedid_)) + sizeof(m_ratify_));
}

PROBUFF_NET_RATIFY_ADDFRIEND::~PROBUFF_NET_RATIFY_ADDFRIEND() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_RATIFY_ADDFRIEND::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_RATIFY_ADDFRIEND::ArenaDtor(void* object) {
  PROBUFF_NET_RATIFY_ADDFRIEND* _this = reinterpret_cast< PROBUFF_NET_RATIFY_ADDFRIEND* >(object);
  (void)_this;
}
void PROBUFF_NET_RATIFY_ADDFRIEND::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_RATIFY_ADDFRIEND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_RATIFY_ADDFRIEND& PROBUFF_NET_RATIFY_ADDFRIEND::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_RATIFY_ADDFRIEND_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_RATIFY_ADDFRIEND::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_friedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_ratify_) -
        reinterpret_cast<char*>(&m_friedid_)) + sizeof(m_ratify_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RATIFY_ADDFRIEND::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_friedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_friedid(&has_bits);
          m_friedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_ratify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_ratify(&has_bits);
          m_ratify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_RATIFY_ADDFRIEND::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_friedid = 1;
  if (_internal_has_m_friedid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_friedid(), target);
  }

  // bool m_ratify = 2;
  if (_internal_has_m_ratify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_m_ratify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  return target;
}

size_t PROBUFF_NET_RATIFY_ADDFRIEND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 m_friedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_friedid());
    }

    // bool m_ratify = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_RATIFY_ADDFRIEND::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_RATIFY_ADDFRIEND* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_RATIFY_ADDFRIEND>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_RATIFY_ADDFRIEND::MergeFrom(const PROBUFF_NET_RATIFY_ADDFRIEND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_friedid_ = from.m_friedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_ratify_ = from.m_ratify_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_RATIFY_ADDFRIEND::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_RATIFY_ADDFRIEND::CopyFrom(const PROBUFF_NET_RATIFY_ADDFRIEND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RATIFY_ADDFRIEND::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RATIFY_ADDFRIEND::InternalSwap(PROBUFF_NET_RATIFY_ADDFRIEND* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RATIFY_ADDFRIEND, m_ratify_)
      + sizeof(PROBUFF_NET_RATIFY_ADDFRIEND::m_ratify_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RATIFY_ADDFRIEND, m_friedid_)>(
          reinterpret_cast<char*>(&m_friedid_),
          reinterpret_cast<char*>(&other->m_friedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RATIFY_ADDFRIEND::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE>()._has_bits_);
  static void set_has_m_friedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_ratify(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
}
PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE(const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_friedid_, &from.m_friedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_stat_) -
    reinterpret_cast<char*>(&m_friedid_)) + sizeof(m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
}

void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::SharedCtor() {
  ::memset(&m_friedid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_stat_) -
      reinterpret_cast<char*>(&m_friedid_)) + sizeof(m_stat_));
}

PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::~PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&m_friedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_stat_) -
        reinterpret_cast<char*>(&m_friedid_)) + sizeof(m_stat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_friedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_friedid(&has_bits);
          m_friedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool m_ratify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_ratify(&has_bits);
          m_ratify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_friedid = 1;
  if (_internal_has_m_friedid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_friedid(), target);
  }

  // bool m_ratify = 2;
  if (_internal_has_m_ratify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_m_ratify(), target);
  }

  // int32 m_stat = 3;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  return target;
}

size_t PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // int64 m_friedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_friedid());
    }

    // bool m_ratify = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // int32 m_stat = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_stat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::MergeFrom(const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      m_friedid_ = from.m_friedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_ratify_ = from.m_ratify_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_stat_ = from.m_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::CopyFrom(const PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::InternalSwap(PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE, m_stat_)
      + sizeof(PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE, m_friedid_)>(
          reinterpret_cast<char*>(&m_friedid_),
          reinterpret_cast<char*>(&other->m_friedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ERASEFRIEND::InitAsDefaultInstance() {
}
class PROBUFF_NET_ERASEFRIEND::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ERASEFRIEND>()._has_bits_);
  static void set_has_m_friedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PROBUFF_NET_ERASEFRIEND::PROBUFF_NET_ERASEFRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ERASEFRIEND)
}
PROBUFF_NET_ERASEFRIEND::PROBUFF_NET_ERASEFRIEND(const PROBUFF_NET_ERASEFRIEND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  m_friedid_ = from.m_friedid_;
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ERASEFRIEND)
}

void PROBUFF_NET_ERASEFRIEND::SharedCtor() {
  m_friedid_ = PROTOBUF_LONGLONG(0);
}

PROBUFF_NET_ERASEFRIEND::~PROBUFF_NET_ERASEFRIEND() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ERASEFRIEND)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ERASEFRIEND::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_ERASEFRIEND::ArenaDtor(void* object) {
  PROBUFF_NET_ERASEFRIEND* _this = reinterpret_cast< PROBUFF_NET_ERASEFRIEND* >(object);
  (void)_this;
}
void PROBUFF_NET_ERASEFRIEND::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ERASEFRIEND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ERASEFRIEND& PROBUFF_NET_ERASEFRIEND::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ERASEFRIEND_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ERASEFRIEND::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ERASEFRIEND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_friedid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ERASEFRIEND::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_friedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_friedid(&has_bits);
          m_friedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ERASEFRIEND::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ERASEFRIEND)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_friedid = 1;
  if (_internal_has_m_friedid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_friedid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ERASEFRIEND)
  return target;
}

size_t PROBUFF_NET_ERASEFRIEND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ERASEFRIEND)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 m_friedid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_m_friedid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ERASEFRIEND::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ERASEFRIEND)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ERASEFRIEND* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ERASEFRIEND>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ERASEFRIEND)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ERASEFRIEND)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ERASEFRIEND::MergeFrom(const PROBUFF_NET_ERASEFRIEND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ERASEFRIEND)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_friedid()) {
    _internal_set_m_friedid(from._internal_m_friedid());
  }
}

void PROBUFF_NET_ERASEFRIEND::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ERASEFRIEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ERASEFRIEND::CopyFrom(const PROBUFF_NET_ERASEFRIEND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ERASEFRIEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ERASEFRIEND::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ERASEFRIEND::InternalSwap(PROBUFF_NET_ERASEFRIEND* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(m_friedid_, other->m_friedid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ERASEFRIEND::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ERASEFRIEND_RESPONSE::InitAsDefaultInstance() {
}
class PROBUFF_NET_ERASEFRIEND_RESPONSE::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ERASEFRIEND_RESPONSE>()._has_bits_);
  static void set_has_m_friedid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PROBUFF_NET_ERASEFRIEND_RESPONSE::PROBUFF_NET_ERASEFRIEND_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
}
PROBUFF_NET_ERASEFRIEND_RESPONSE::PROBUFF_NET_ERASEFRIEND_RESPONSE(const PROBUFF_NET_ERASEFRIEND_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_friedid_, &from.m_friedid_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_stat_) -
    reinterpret_cast<char*>(&m_friedid_)) + sizeof(m_stat_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
}

void PROBUFF_NET_ERASEFRIEND_RESPONSE::SharedCtor() {
  ::memset(&m_friedid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_stat_) -
      reinterpret_cast<char*>(&m_friedid_)) + sizeof(m_stat_));
}

PROBUFF_NET_ERASEFRIEND_RESPONSE::~PROBUFF_NET_ERASEFRIEND_RESPONSE() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ERASEFRIEND_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_ERASEFRIEND_RESPONSE::ArenaDtor(void* object) {
  PROBUFF_NET_ERASEFRIEND_RESPONSE* _this = reinterpret_cast< PROBUFF_NET_ERASEFRIEND_RESPONSE* >(object);
  (void)_this;
}
void PROBUFF_NET_ERASEFRIEND_RESPONSE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ERASEFRIEND_RESPONSE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ERASEFRIEND_RESPONSE& PROBUFF_NET_ERASEFRIEND_RESPONSE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ERASEFRIEND_RESPONSE_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ERASEFRIEND_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&m_friedid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_stat_) -
        reinterpret_cast<char*>(&m_friedid_)) + sizeof(m_stat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ERASEFRIEND_RESPONSE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 m_friedid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_m_friedid(&has_bits);
          m_friedid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_m_stat(&has_bits);
          m_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ERASEFRIEND_RESPONSE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_friedid = 1;
  if (_internal_has_m_friedid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_friedid(), target);
  }

  // int32 m_stat = 2;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  return target;
}

size_t PROBUFF_NET_ERASEFRIEND_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // int64 m_friedid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_friedid());
    }

    // int32 m_stat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_m_stat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ERASEFRIEND_RESPONSE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ERASEFRIEND_RESPONSE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ERASEFRIEND_RESPONSE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ERASEFRIEND_RESPONSE::MergeFrom(const PROBUFF_NET_ERASEFRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      m_friedid_ = from.m_friedid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_stat_ = from.m_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_ERASEFRIEND_RESPONSE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ERASEFRIEND_RESPONSE::CopyFrom(const PROBUFF_NET_ERASEFRIEND_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ERASEFRIEND_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ERASEFRIEND_RESPONSE::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ERASEFRIEND_RESPONSE::InternalSwap(PROBUFF_NET_ERASEFRIEND_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ERASEFRIEND_RESPONSE, m_stat_)
      + sizeof(PROBUFF_NET_ERASEFRIEND_RESPONSE::m_stat_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ERASEFRIEND_RESPONSE, m_friedid_)>(
          reinterpret_cast<char*>(&m_friedid_),
          reinterpret_cast<char*>(&other->m_friedid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ERASEFRIEND_RESPONSE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PROBUFF_NET_ROLESTAT::InitAsDefaultInstance() {
}
class PROBUFF_NET_ROLESTAT::_Internal {
 public:
  using HasBits = decltype(std::declval<PROBUFF_NET_ROLESTAT>()._has_bits_);
  static void set_has_m_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_m_logicstat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PROBUFF_NET_ROLESTAT::PROBUFF_NET_ROLESTAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pbnet.PROBUFF_NET_ROLESTAT)
}
PROBUFF_NET_ROLESTAT::PROBUFF_NET_ROLESTAT(const PROBUFF_NET_ROLESTAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&m_stat_, &from.m_stat_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_roleid_) -
    reinterpret_cast<char*>(&m_stat_)) + sizeof(m_roleid_));
  // @@protoc_insertion_point(copy_constructor:pbnet.PROBUFF_NET_ROLESTAT)
}

void PROBUFF_NET_ROLESTAT::SharedCtor() {
  ::memset(&m_stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_roleid_) -
      reinterpret_cast<char*>(&m_stat_)) + sizeof(m_roleid_));
}

PROBUFF_NET_ROLESTAT::~PROBUFF_NET_ROLESTAT() {
  // @@protoc_insertion_point(destructor:pbnet.PROBUFF_NET_ROLESTAT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PROBUFF_NET_ROLESTAT::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PROBUFF_NET_ROLESTAT::ArenaDtor(void* object) {
  PROBUFF_NET_ROLESTAT* _this = reinterpret_cast< PROBUFF_NET_ROLESTAT* >(object);
  (void)_this;
}
void PROBUFF_NET_ROLESTAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PROBUFF_NET_ROLESTAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PROBUFF_NET_ROLESTAT& PROBUFF_NET_ROLESTAT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PROBUFF_NET_ROLESTAT_net_2eproto.base);
  return *internal_default_instance();
}


void PROBUFF_NET_ROLESTAT::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnet.PROBUFF_NET_ROLESTAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&m_stat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_roleid_) -
        reinterpret_cast<char*>(&m_stat_)) + sizeof(m_roleid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PROBUFF_NET_ROLESTAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pbnet.PROBUFF_NET_ROLESTAT.stat m_stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_stat(static_cast<::pbnet::PROBUFF_NET_ROLESTAT_stat>(val));
        } else goto handle_unusual;
        continue;
      // .pbnet.PROBUFF_NET_ROLESTAT.logic_stat m_logicstat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_m_logicstat(static_cast<::pbnet::PROBUFF_NET_ROLESTAT_logic_stat>(val));
        } else goto handle_unusual;
        continue;
      // int64 m_roleid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_m_roleid(&has_bits);
          m_roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PROBUFF_NET_ROLESTAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnet.PROBUFF_NET_ROLESTAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbnet.PROBUFF_NET_ROLESTAT.stat m_stat = 1;
  if (_internal_has_m_stat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_m_stat(), target);
  }

  // .pbnet.PROBUFF_NET_ROLESTAT.logic_stat m_logicstat = 2;
  if (_internal_has_m_logicstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_m_logicstat(), target);
  }

  // int64 m_roleid = 3;
  if (_internal_has_m_roleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_m_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnet.PROBUFF_NET_ROLESTAT)
  return target;
}

size_t PROBUFF_NET_ROLESTAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnet.PROBUFF_NET_ROLESTAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .pbnet.PROBUFF_NET_ROLESTAT.stat m_stat = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_stat());
    }

    // .pbnet.PROBUFF_NET_ROLESTAT.logic_stat m_logicstat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_m_logicstat());
    }

    // int64 m_roleid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_m_roleid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PROBUFF_NET_ROLESTAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnet.PROBUFF_NET_ROLESTAT)
  GOOGLE_DCHECK_NE(&from, this);
  const PROBUFF_NET_ROLESTAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PROBUFF_NET_ROLESTAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnet.PROBUFF_NET_ROLESTAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnet.PROBUFF_NET_ROLESTAT)
    MergeFrom(*source);
  }
}

void PROBUFF_NET_ROLESTAT::MergeFrom(const PROBUFF_NET_ROLESTAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnet.PROBUFF_NET_ROLESTAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      m_stat_ = from.m_stat_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_logicstat_ = from.m_logicstat_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_roleid_ = from.m_roleid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PROBUFF_NET_ROLESTAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnet.PROBUFF_NET_ROLESTAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PROBUFF_NET_ROLESTAT::CopyFrom(const PROBUFF_NET_ROLESTAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnet.PROBUFF_NET_ROLESTAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PROBUFF_NET_ROLESTAT::IsInitialized() const {
  return true;
}

void PROBUFF_NET_ROLESTAT::InternalSwap(PROBUFF_NET_ROLESTAT* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLESTAT, m_roleid_)
      + sizeof(PROBUFF_NET_ROLESTAT::m_roleid_)
      - PROTOBUF_FIELD_OFFSET(PROBUFF_NET_ROLESTAT, m_stat_)>(
          reinterpret_cast<char*>(&m_stat_),
          reinterpret_cast<char*>(&other->m_stat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PROBUFF_NET_ROLESTAT::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pbnet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MSG_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MSG_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MSG_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_HEARTBEAT* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_HEARTBEAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_HEARTBEAT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RECHARGE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RECHARGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RECHARGE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RECHARGE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE_MItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_DELIVER_GOODS_RECHARGE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ERROR* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ERROR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ERROR >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_GET_TIME* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_GET_TIME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_GET_TIME >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_GET_TIME_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_NOTICE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_NOTICE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_NOTICE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_NOTICE_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_NOTICE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_NOTICE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ACOUNT_LOGIN* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ACOUNT_LOGIN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_LOGIN* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_SYNC* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLE_SYNC_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_SYNC* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_SYNC_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_delitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE_additem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_BAG_UPDATE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CMD* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CMD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CMD >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHAT* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::chatitem* Arena::CreateMaybeMessage< ::pbnet::chatitem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::chatitem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHAT_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHAT_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHAT_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SWITCH_LINE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SWITCH_LINE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SWITCH_LINE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SWITCH_LINE_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE_MMailEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_LIST_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_READ* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_READ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_READ >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_READ_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DRAW* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DRAW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DRAW >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DRAW_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DEL* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DEL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MAIL_DEL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::VECTOR2* Arena::CreateMaybeMessage< ::pbnet::VECTOR2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::VECTOR2 >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::VECTOR3* Arena::CreateMaybeMessage< ::pbnet::VECTOR3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::VECTOR3 >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UNIT_POSITION* Arena::CreateMaybeMessage< ::pbnet::UNIT_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UNIT_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UnitAttribute* Arena::CreateMaybeMessage< ::pbnet::UnitAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UnitAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UnitModule* Arena::CreateMaybeMessage< ::pbnet::UnitModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UnitModule >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::UNIT* Arena::CreateMaybeMessage< ::pbnet::UNIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::UNIT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_ATTRIBUTE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_UNIT* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_UNIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_UNIT >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ENTER_LEAVE_VIEW >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_POSITION_MPositionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_POSITION* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHANGE_ANGLE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHANGE_ANGLE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHANGE_ANGLE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::MATCHING_MEMBER* Arena::CreateMaybeMessage< ::pbnet::MATCHING_MEMBER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::MATCHING_MEMBER >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_CANCEL* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_CANCEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_CANCEL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_CANCEL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MEMBER_MATCHING_CANCEL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_WAITCONFIRM >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_CONFIRM* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_CONFIRM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_CONFIRM >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_CONFIRM_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_SYNC_MATCHING_CONFIRM >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_SYNC* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_SUCCESS_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_MATCHING_SUCCESS* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_MATCHING_SUCCESS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_MATCHING_SUCCESS >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ENTER_PLAYS* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ENTER_PLAYS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ENTER_PLAYS >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_KCPSESSION* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_KCPSESSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_KCPSESSION >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_KCPSESSION_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::drop_item* Arena::CreateMaybeMessage< ::pbnet::drop_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::drop_item >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE_MDropEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_TASK_RECEIVE_AWARD_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CREATE_FAMIL* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CREATE_FAMIL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CREATE_FAMIL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CREATE_FAMIL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_JOIN_FAMIL* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_JOIN_FAMIL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_JOIN_FAMIL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_JOIN_FAMIL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RATIFY_JOIN_FAMIL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CEDE_FAMIL* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CEDE_FAMIL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CEDE_FAMIL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CEDE_FAMIL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_LEAVE_FAMIL* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_LEAVE_FAMIL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_LEAVE_FAMIL >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_LEAVE_FAMIL_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_LIST* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMIL_LIST_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_CHANGE_FAMILNAME_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMILSIGN* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMILSIGN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMILSIGN >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FAMILSIGN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE_MItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_REWARD_ITEM_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RANKLIST* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RANKLIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RANKLIST >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RANKLIST_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_FRIEND_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_FRIEND_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_FRIEND_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ADDFRIEND* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ADDFRIEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ADDFRIEND >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ADDFRIEND_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_RATIFY_ADDFRIEND_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ERASEFRIEND* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ERASEFRIEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ERASEFRIEND >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ERASEFRIEND_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnet::PROBUFF_NET_ROLESTAT* Arena::CreateMaybeMessage< ::pbnet::PROBUFF_NET_ROLESTAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbnet::PROBUFF_NET_ROLESTAT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
